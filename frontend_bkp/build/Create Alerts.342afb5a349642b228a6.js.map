{"version":3,"file":"Create Alerts.342afb5a349642b228a6.js","mappings":"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","sources":["webpack://frontend/./src/container/CreateAlertRule/SelectAlertType/config.ts","webpack://frontend/./src/container/CreateAlertRule/SelectAlertType/index.tsx","webpack://frontend/./src/container/CreateAlertRule/SelectAlertType/styles.ts","webpack://frontend/./src/container/CreateAlertRule/config.ts","webpack://frontend/./src/container/CreateAlertRule/defaults.ts","webpack://frontend/./src/container/CreateAlertRule/index.tsx","webpack://frontend/./src/pages/CreateAlert/index.tsx","webpack://frontend/./node_modules/lucide-react/dist/esm/icons/external-link.js","webpack://frontend/./node_modules/lucide-react/dist/esm/icons/spline.js"],"sourcesContent":["import { TFunction } from 'i18next';\nimport { AlertTypes } from 'types/api/alerts/alertTypes';\n\nimport { OptionType } from './types';\n\nexport const getOptionList = (\n\tt: TFunction,\n\tisAnomalyDetectionEnabled: boolean,\n): OptionType[] => {\n\tconst optionList: OptionType[] = [\n\t\t{\n\t\t\ttitle: t('metric_based_alert'),\n\t\t\tselection: AlertTypes.METRICS_BASED_ALERT,\n\t\t\tdescription: t('metric_based_alert_desc'),\n\t\t},\n\t\t{\n\t\t\ttitle: t('log_based_alert'),\n\t\t\tselection: AlertTypes.LOGS_BASED_ALERT,\n\t\t\tdescription: t('log_based_alert_desc'),\n\t\t},\n\t\t{\n\t\t\ttitle: t('traces_based_alert'),\n\t\t\tselection: AlertTypes.TRACES_BASED_ALERT,\n\t\t\tdescription: t('traces_based_alert_desc'),\n\t\t},\n\t\t{\n\t\t\ttitle: t('exceptions_based_alert'),\n\t\t\tselection: AlertTypes.EXCEPTIONS_BASED_ALERT,\n\t\t\tdescription: t('exceptions_based_alert_desc'),\n\t\t},\n\t];\n\n\tif (isAnomalyDetectionEnabled) {\n\t\toptionList.unshift({\n\t\t\ttitle: t('anomaly_based_alert'),\n\t\t\tselection: AlertTypes.ANOMALY_BASED_ALERT,\n\t\t\tdescription: t('anomaly_based_alert_desc'),\n\t\t\tisBeta: true,\n\t\t});\n\t}\n\n\treturn optionList;\n};\n","import { Row, Tag, Typography } from 'antd';\nimport logEvent from 'api/common/logEvent';\nimport { ALERTS_DATA_SOURCE_MAP } from 'constants/alerts';\nimport { FeatureKeys } from 'constants/features';\nimport { useAppContext } from 'providers/App/App';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { AlertTypes } from 'types/api/alerts/alertTypes';\n\nimport { getOptionList } from './config';\nimport { AlertTypeCard, SelectTypeContainer } from './styles';\nimport { OptionType } from './types';\n\nfunction SelectAlertType({ onSelect }: SelectAlertTypeProps): JSX.Element {\n\tconst { t } = useTranslation(['alerts']);\n\tconst { featureFlags } = useAppContext();\n\n\tconst isAnomalyDetectionEnabled =\n\t\tfeatureFlags?.find((flag) => flag.name === FeatureKeys.ANOMALY_DETECTION)\n\t\t\t?.active || false;\n\n\tconst optionList = getOptionList(t, isAnomalyDetectionEnabled);\n\n\tfunction handleRedirection(option: AlertTypes): void {\n\t\tlet url = '';\n\t\tswitch (option) {\n\t\t\tcase AlertTypes.ANOMALY_BASED_ALERT:\n\t\t\t\turl =\n\t\t\t\t\t'https://Conoscense.io/docs/alerts-management/anomaly-based-alerts/?utm_source=product&utm_medium=alert-source-selection-page#examples';\n\t\t\t\tbreak;\n\t\t\tcase AlertTypes.METRICS_BASED_ALERT:\n\t\t\t\turl =\n\t\t\t\t\t'https://Conoscense.io/docs/alerts-management/metrics-based-alerts/?utm_source=product&utm_medium=alert-source-selection-page#examples';\n\t\t\t\tbreak;\n\t\t\tcase AlertTypes.LOGS_BASED_ALERT:\n\t\t\t\turl =\n\t\t\t\t\t'https://Conoscense.io/docs/alerts-management/log-based-alerts/?utm_source=product&utm_medium=alert-source-selection-page#examples';\n\t\t\t\tbreak;\n\t\t\tcase AlertTypes.TRACES_BASED_ALERT:\n\t\t\t\turl =\n\t\t\t\t\t'https://Conoscense.io/docs/alerts-management/trace-based-alerts/?utm_source=product&utm_medium=alert-source-selection-page#examples';\n\t\t\t\tbreak;\n\t\t\tcase AlertTypes.EXCEPTIONS_BASED_ALERT:\n\t\t\t\turl =\n\t\t\t\t\t'https://Conoscense.io/docs/alerts-management/exceptions-based-alerts/?utm_source=product&utm_medium=alert-source-selection-page#examples';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlogEvent('Alert: Sample alert link clicked', {\n\t\t\tdataSource: ALERTS_DATA_SOURCE_MAP[option],\n\t\t\tlink: url,\n\t\t\tpage: 'New alert data source selection page',\n\t\t});\n\n\t\twindow.open(url, '_blank');\n\t}\n\tconst renderOptions = useMemo(\n\t\t() => (\n\t\t\t<>\n\t\t\t\t{optionList.map((option: OptionType) => (\n\t\t\t\t\t<AlertTypeCard\n\t\t\t\t\t\tkey={option.selection}\n\t\t\t\t\t\ttitle={option.title}\n\t\t\t\t\t\textra={\n\t\t\t\t\t\t\toption.isBeta ? (\n\t\t\t\t\t\t\t\t<Tag bordered={false} color=\"geekblue\">\n\t\t\t\t\t\t\t\t\tBeta\n\t\t\t\t\t\t\t\t</Tag>\n\t\t\t\t\t\t\t) : undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonClick={(): void => {\n\t\t\t\t\t\t\tonSelect(option.selection);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdata-testid={`alert-type-card-${option.selection}`}\n\t\t\t\t\t>\n\t\t\t\t\t\t{option.description}{' '}\n\t\t\t\t\t\t<Typography.Link\n\t\t\t\t\t\t\tonClick={(e): void => {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\thandleRedirection(option.selection);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClick here to see how to create a sample alert.\n\t\t\t\t\t\t</Typography.Link>{' '}\n\t\t\t\t\t</AlertTypeCard>\n\t\t\t\t))}\n\t\t\t</>\n\t\t),\n\t\t[onSelect, optionList],\n\t);\n\n\treturn (\n\t\t<SelectTypeContainer>\n\t\t\t<Typography.Title\n\t\t\t\tlevel={4}\n\t\t\t\tstyle={{\n\t\t\t\t\tpadding: '0 8px',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{t('choose_alert_type')}\n\t\t\t</Typography.Title>\n\t\t\t<Row>{renderOptions}</Row>\n\t\t</SelectTypeContainer>\n\t);\n}\n\ninterface SelectAlertTypeProps {\n\tonSelect: (typ: AlertTypes) => void;\n}\n\nexport default SelectAlertType;\n","import { Card } from 'antd';\nimport styled from 'styled-components';\n\nexport const SelectTypeContainer = styled.div`\n\t&&& {\n\t\tpadding: 1rem;\n\t}\n`;\n\nexport const AlertTypeCard = styled(Card)`\n\t&&& {\n\t\tmargin: 5px;\n\t\twidth: 21rem;\n\t\tcursor: pointer;\n\t}\n`;\n","import { AlertTypes } from 'types/api/alerts/alertTypes';\nimport { DataSource } from 'types/common/queryBuilder';\n\nexport const ALERT_TYPE_VS_SOURCE_MAPPING = {\n\t[DataSource.LOGS]: AlertTypes.LOGS_BASED_ALERT,\n\t[DataSource.METRICS]: AlertTypes.METRICS_BASED_ALERT,\n\t[DataSource.TRACES]: AlertTypes.TRACES_BASED_ALERT,\n};\n","import { ENTITY_VERSION_V4 } from 'constants/app';\nimport {\n\tinitialQueryBuilderFormValuesMap,\n\tinitialQueryPromQLData,\n\tPANEL_TYPES,\n} from 'constants/queryBuilder';\nimport { AlertDetectionTypes } from 'container/FormAlertRules';\nimport { AlertTypes } from 'types/api/alerts/alertTypes';\nimport {\n\tAlertDef,\n\tdefaultAlgorithm,\n\tdefaultCompareOp,\n\tdefaultEvalWindow,\n\tdefaultMatchType,\n\tdefaultSeasonality,\n} from 'types/api/alerts/def';\nimport { EQueryType } from 'types/common/dashboard';\n\nconst defaultAlertDescription =\n\t'This alert is fired when the defined metric (current value: {{$value}}) crosses the threshold ({{$threshold}})';\nconst defaultAlertSummary =\n\t'The rule threshold is set to {{$threshold}}, and the observed metric value is {{$value}}';\n\nconst defaultAnnotations = {\n\tdescription: defaultAlertDescription,\n\tsummary: defaultAlertSummary,\n};\n\nexport const alertDefaults: AlertDef = {\n\talertType: AlertTypes.METRICS_BASED_ALERT,\n\tversion: ENTITY_VERSION_V4,\n\tcondition: {\n\t\tcompositeQuery: {\n\t\t\tbuilderQueries: {\n\t\t\t\tA: initialQueryBuilderFormValuesMap.metrics,\n\t\t\t},\n\t\t\tpromQueries: { A: initialQueryPromQLData },\n\t\t\tchQueries: {\n\t\t\t\tA: {\n\t\t\t\t\tname: 'A',\n\t\t\t\t\tquery: ``,\n\t\t\t\t\tlegend: '',\n\t\t\t\t\tdisabled: false,\n\t\t\t\t},\n\t\t\t},\n\t\t\tqueryType: EQueryType.QUERY_BUILDER,\n\t\t\tpanelType: PANEL_TYPES.TIME_SERIES,\n\t\t\tunit: undefined,\n\t\t},\n\t\top: defaultCompareOp,\n\t\tmatchType: defaultMatchType,\n\t\talgorithm: defaultAlgorithm,\n\t\tseasonality: defaultSeasonality,\n\t},\n\tlabels: {\n\t\tseverity: 'warning',\n\t},\n\tannotations: defaultAnnotations,\n\tevalWindow: defaultEvalWindow,\n\talert: '',\n};\n\nexport const anamolyAlertDefaults: AlertDef = {\n\talertType: AlertTypes.METRICS_BASED_ALERT,\n\tversion: ENTITY_VERSION_V4,\n\truleType: AlertDetectionTypes.ANOMALY_DETECTION_ALERT,\n\tcondition: {\n\t\tcompositeQuery: {\n\t\t\tbuilderQueries: {\n\t\t\t\tA: {\n\t\t\t\t\t...initialQueryBuilderFormValuesMap.metrics,\n\t\t\t\t\tfunctions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'anomaly',\n\t\t\t\t\t\t\targs: [],\n\t\t\t\t\t\t\tnamedArgs: { z_score_threshold: 3 },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\tpromQueries: { A: initialQueryPromQLData },\n\t\t\tchQueries: {\n\t\t\t\tA: {\n\t\t\t\t\tname: 'A',\n\t\t\t\t\tquery: ``,\n\t\t\t\t\tlegend: '',\n\t\t\t\t\tdisabled: false,\n\t\t\t\t},\n\t\t\t},\n\t\t\tqueryType: EQueryType.QUERY_BUILDER,\n\t\t\tpanelType: PANEL_TYPES.TIME_SERIES,\n\t\t\tunit: undefined,\n\t\t},\n\t\top: defaultCompareOp,\n\t\tmatchType: defaultMatchType,\n\t\talgorithm: defaultAlgorithm,\n\t\tseasonality: defaultSeasonality,\n\t\ttarget: 3,\n\t},\n\tlabels: {\n\t\tseverity: 'warning',\n\t},\n\tannotations: defaultAnnotations,\n\tevalWindow: defaultEvalWindow,\n\talert: '',\n};\n\nexport const logAlertDefaults: AlertDef = {\n\talertType: AlertTypes.LOGS_BASED_ALERT,\n\tversion: ENTITY_VERSION_V4,\n\tcondition: {\n\t\tcompositeQuery: {\n\t\t\tbuilderQueries: {\n\t\t\t\tA: initialQueryBuilderFormValuesMap.logs,\n\t\t\t},\n\t\t\tpromQueries: { A: initialQueryPromQLData },\n\t\t\tchQueries: {\n\t\t\t\tA: {\n\t\t\t\t\tname: 'A',\n\t\t\t\t\tquery: `select \\ntoStartOfInterval(fromUnixTimestamp64Nano(timestamp), INTERVAL 30 MINUTE) AS interval, \\ntoFloat64(count()) as value \\nFROM signoz_logs.distributed_logs_v2  \\nWHERE timestamp BETWEEN {{.start_timestamp_nano}} AND {{.end_timestamp_nano}} \\nAND ts_bucket_start BETWEEN {{.start_timestamp}} - 1800 AND {{.end_timestamp}} \\nGROUP BY interval;\\n\\n-- Please check docs here https://signoz.io/docs/userguide/logs_clickhouse_queries/\\n\\n-- available variables:\\n-- \\t{{.start_timestamp_nano}}\\n-- \\t{{.end_timestamp_nano}}\\n-- \\t{{.start_timestamp}}\\n-- \\t{{.end_timestamp}}\\n\\n-- required columns (or alias):\\n-- \\tvalue\\n-- \\tinterval`,\n\t\t\t\t\tlegend: '',\n\t\t\t\t\tdisabled: false,\n\t\t\t\t},\n\t\t\t},\n\t\t\tqueryType: EQueryType.QUERY_BUILDER,\n\t\t\tpanelType: PANEL_TYPES.TIME_SERIES,\n\t\t\tunit: undefined,\n\t\t},\n\t\top: defaultCompareOp,\n\t\tmatchType: '4',\n\t},\n\tlabels: {\n\t\tseverity: 'warning',\n\t},\n\tannotations: defaultAnnotations,\n\tevalWindow: defaultEvalWindow,\n\talert: '',\n};\n\nexport const traceAlertDefaults: AlertDef = {\n\talertType: AlertTypes.TRACES_BASED_ALERT,\n\tversion: ENTITY_VERSION_V4,\n\tcondition: {\n\t\tcompositeQuery: {\n\t\t\tbuilderQueries: {\n\t\t\t\tA: initialQueryBuilderFormValuesMap.traces,\n\t\t\t},\n\t\t\tpromQueries: { A: initialQueryPromQLData },\n\t\t\tchQueries: {\n\t\t\t\tA: {\n\t\t\t\t\tname: 'A',\n\t\t\t\t\tquery: `SELECT \\n\\ttoStartOfInterval(timestamp, INTERVAL 1 MINUTE) AS interval, \\n\\tresource_string_service$$name AS \\`service.name\\`, \\n\\ttoFloat64(avg(duration_nano)) AS value \\nFROM signoz_traces.distributed_signoz_index_v3  \\nWHERE resource_string_service$$name !='' \\nAND timestamp BETWEEN {{.start_datetime}} AND {{.end_datetime}} \\nAND ts_bucket_start BETWEEN {{.start_timestamp}} - 1800 AND {{.end_timestamp}} \\nGROUP BY (\\`service.name\\`, interval);\\n\\n-- Please check docs here https://signoz.io/docs/userguide/writing-clickhouse-traces-query/\\n\\n-- available variables:\\n-- \\t{{.start_datetime}}\\n-- \\t{{.end_datetime}}\\n-- \\t{{.start_timestamp}}\\n-- \\t{{.end_timestamp}}\\n\\n-- required column alias:\\n-- \\tvalue\\n-- \\tinterval`,\n\t\t\t\t\tlegend: '',\n\t\t\t\t\tdisabled: false,\n\t\t\t\t},\n\t\t\t},\n\t\t\tqueryType: EQueryType.QUERY_BUILDER,\n\t\t\tpanelType: PANEL_TYPES.TIME_SERIES,\n\t\t\tunit: undefined,\n\t\t},\n\t\top: defaultCompareOp,\n\t\tmatchType: '4',\n\t},\n\tlabels: {\n\t\tseverity: 'warning',\n\t},\n\tannotations: defaultAnnotations,\n\tevalWindow: defaultEvalWindow,\n\talert: '',\n};\n\nexport const exceptionAlertDefaults: AlertDef = {\n\talertType: AlertTypes.EXCEPTIONS_BASED_ALERT,\n\tversion: ENTITY_VERSION_V4,\n\tcondition: {\n\t\tcompositeQuery: {\n\t\t\tbuilderQueries: {\n\t\t\t\tA: initialQueryBuilderFormValuesMap.traces,\n\t\t\t},\n\t\t\tpromQueries: { A: initialQueryPromQLData },\n\t\t\tchQueries: {\n\t\t\t\tA: {\n\t\t\t\t\tname: 'A',\n\t\t\t\t\tquery: `SELECT \\n\\tcount() as value,\\n\\ttoStartOfInterval(timestamp, toIntervalMinute(1)) AS interval,\\n\\tserviceName\\nFROM signoz_traces.distributed_signoz_error_index_v2\\nWHERE exceptionType !='OSError'\\nAND timestamp BETWEEN {{.start_datetime}} AND {{.end_datetime}}\\nGROUP BY serviceName, interval;\\n\\n-- available variables:\\n-- \\t{{.start_datetime}}\\n-- \\t{{.end_datetime}}\\n\\n-- required column alias:\\n-- \\tvalue\\n-- \\tinterval`,\n\t\t\t\t\tlegend: '',\n\t\t\t\t\tdisabled: false,\n\t\t\t\t},\n\t\t\t},\n\t\t\tqueryType: EQueryType.CLICKHOUSE,\n\t\t\tpanelType: PANEL_TYPES.TIME_SERIES,\n\t\t\tunit: undefined,\n\t\t},\n\t\top: defaultCompareOp,\n\t\tmatchType: '4',\n\t},\n\tlabels: {\n\t\tseverity: 'warning',\n\t},\n\tannotations: defaultAnnotations,\n\tevalWindow: defaultEvalWindow,\n\talert: '',\n};\n\nexport const ALERTS_VALUES_MAP: Record<AlertTypes, AlertDef> = {\n\t[AlertTypes.ANOMALY_BASED_ALERT]: anamolyAlertDefaults,\n\t[AlertTypes.METRICS_BASED_ALERT]: alertDefaults,\n\t[AlertTypes.LOGS_BASED_ALERT]: logAlertDefaults,\n\t[AlertTypes.TRACES_BASED_ALERT]: traceAlertDefaults,\n\t[AlertTypes.EXCEPTIONS_BASED_ALERT]: exceptionAlertDefaults,\n};\n","import { Form, Row } from 'antd';\nimport logEvent from 'api/common/logEvent';\nimport { ENTITY_VERSION_V4 } from 'constants/app';\nimport { QueryParams } from 'constants/query';\nimport FormAlertRules, { AlertDetectionTypes } from 'container/FormAlertRules';\nimport { useGetCompositeQueryParam } from 'hooks/queryBuilder/useGetCompositeQueryParam';\nimport history from 'lib/history';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { AlertTypes } from 'types/api/alerts/alertTypes';\nimport { AlertDef } from 'types/api/alerts/def';\n\nimport { ALERT_TYPE_VS_SOURCE_MAPPING } from './config';\nimport {\n\talertDefaults,\n\tanamolyAlertDefaults,\n\texceptionAlertDefaults,\n\tlogAlertDefaults,\n\ttraceAlertDefaults,\n} from './defaults';\nimport SelectAlertType from './SelectAlertType';\n\nfunction CreateRules(): JSX.Element {\n\tconst [initValues, setInitValues] = useState<AlertDef | null>(null);\n\n\tconst location = useLocation();\n\tconst queryParams = new URLSearchParams(location.search);\n\tconst alertTypeFromURL = queryParams.get(QueryParams.ruleType);\n\tconst version = queryParams.get('version');\n\tconst alertTypeFromParams =\n\t\talertTypeFromURL === AlertDetectionTypes.ANOMALY_DETECTION_ALERT\n\t\t\t? AlertTypes.ANOMALY_BASED_ALERT\n\t\t\t: queryParams.get(QueryParams.alertType);\n\n\tconst compositeQuery = useGetCompositeQueryParam();\n\tfunction getAlertTypeFromDataSource(): AlertTypes | null {\n\t\tif (!compositeQuery) {\n\t\t\treturn null;\n\t\t}\n\t\tconst dataSource = compositeQuery?.builder?.queryData[0]?.dataSource;\n\n\t\treturn ALERT_TYPE_VS_SOURCE_MAPPING[dataSource];\n\t}\n\n\tconst [alertType, setAlertType] = useState<AlertTypes>(\n\t\t(alertTypeFromParams as AlertTypes) || getAlertTypeFromDataSource(),\n\t);\n\n\tconst [formInstance] = Form.useForm();\n\n\tconst onSelectType = (typ: AlertTypes): void => {\n\t\tsetAlertType(typ);\n\n\t\tswitch (typ) {\n\t\t\tcase AlertTypes.LOGS_BASED_ALERT:\n\t\t\t\tsetInitValues(logAlertDefaults);\n\t\t\t\tbreak;\n\t\t\tcase AlertTypes.TRACES_BASED_ALERT:\n\t\t\t\tsetInitValues(traceAlertDefaults);\n\t\t\t\tbreak;\n\t\t\tcase AlertTypes.EXCEPTIONS_BASED_ALERT:\n\t\t\t\tsetInitValues(exceptionAlertDefaults);\n\t\t\t\tbreak;\n\t\t\tcase AlertTypes.ANOMALY_BASED_ALERT:\n\t\t\t\tsetInitValues({\n\t\t\t\t\t...anamolyAlertDefaults,\n\t\t\t\t\tversion: version || ENTITY_VERSION_V4,\n\t\t\t\t\truleType: AlertDetectionTypes.ANOMALY_DETECTION_ALERT,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsetInitValues({\n\t\t\t\t\t...alertDefaults,\n\t\t\t\t\tversion: version || ENTITY_VERSION_V4,\n\t\t\t\t\truleType: AlertDetectionTypes.THRESHOLD_ALERT,\n\t\t\t\t});\n\t\t}\n\n\t\tqueryParams.set(\n\t\t\tQueryParams.alertType,\n\t\t\ttyp === AlertTypes.ANOMALY_BASED_ALERT\n\t\t\t\t? AlertTypes.METRICS_BASED_ALERT\n\t\t\t\t: typ,\n\t\t);\n\n\t\tif (\n\t\t\ttyp === AlertTypes.ANOMALY_BASED_ALERT ||\n\t\t\talertTypeFromURL === AlertDetectionTypes.ANOMALY_DETECTION_ALERT\n\t\t) {\n\t\t\tqueryParams.set(\n\t\t\t\tQueryParams.ruleType,\n\t\t\t\tAlertDetectionTypes.ANOMALY_DETECTION_ALERT,\n\t\t\t);\n\t\t} else {\n\t\t\tqueryParams.set(QueryParams.ruleType, AlertDetectionTypes.THRESHOLD_ALERT);\n\t\t}\n\n\t\tconst generatedUrl = `${location.pathname}?${queryParams.toString()}`;\n\t\thistory.replace(generatedUrl);\n\t};\n\n\tuseEffect(() => {\n\t\tif (alertType) {\n\t\t\tonSelectType(alertType);\n\t\t} else {\n\t\t\tlogEvent('Alert: New alert data source selection page visited', {});\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [alertType]);\n\n\tif (!initValues) {\n\t\treturn (\n\t\t\t<Row wrap={false}>\n\t\t\t\t<SelectAlertType onSelect={onSelectType} />\n\t\t\t</Row>\n\t\t);\n\t}\n\n\treturn (\n\t\t<FormAlertRules\n\t\t\talertType={alertType}\n\t\t\tformInstance={formInstance}\n\t\t\tinitialValue={initValues}\n\t\t\truleId=\"\"\n\t\t/>\n\t);\n}\n\nexport default CreateRules;\n","import CreateAlertRule from 'container/CreateAlertRule';\n\nfunction CreateAlertPage(): JSX.Element {\n\treturn <CreateAlertRule />;\n}\n\nexport default CreateAlertPage;\n","/**\n * @license lucide-react v0.498.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M15 3h6v6\", key: \"1q9fwt\" }],\n  [\"path\", { d: \"M10 14 21 3\", key: \"gplh6r\" }],\n  [\"path\", { d: \"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\", key: \"a6xqqp\" }]\n];\nconst ExternalLink = createLucideIcon(\"external-link\", __iconNode);\n\nexport { __iconNode, ExternalLink as default };\n//# sourceMappingURL=external-link.js.map\n","/**\n * @license lucide-react v0.498.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"circle\", { cx: \"19\", cy: \"5\", r: \"2\", key: \"mhkx31\" }],\n  [\"circle\", { cx: \"5\", cy: \"19\", r: \"2\", key: \"v8kfzx\" }],\n  [\"path\", { d: \"M5 17A12 12 0 0 1 17 5\", key: \"1okkup\" }]\n];\nconst Spline = createLucideIcon(\"spline\", __iconNode);\n\nexport { __iconNode, Spline as default };\n//# sourceMappingURL=spline.js.map\n"],"names":["getOptionList","t","isAnomalyDetectionEnabled","optionList","title","selection","AlertTypes","METRICS_BASED_ALERT","description","LOGS_BASED_ALERT","TRACES_BASED_ALERT","EXCEPTIONS_BASED_ALERT","unshift","ANOMALY_BASED_ALERT","isBeta","reactHotLoader","leaveModule","reactHotLoaderGlobal","default","undefined","register","module","SelectAlertType","_ref","_featureFlags$find","onSelect","useTranslation","featureFlags","useAppContext","find","flag","name","FeatureKeys","ANOMALY_DETECTION","active","renderOptions","useMemo","_jsx","_Fragment","children","map","option","_jsxs","AlertTypeCard","extra","Tag","bordered","color","onClick","concat","Typography","Link","e","preventDefault","stopPropagation","url","logEvent","dataSource","ALERTS_DATA_SOURCE_MAP","link","page","window","open","handleRedirection","SelectTypeContainer","Title","level","style","padding","Row","_default","styled","div","_templateObject","_taggedTemplateLiteral","Card","_templateObject2","ALERT_TYPE_VS_SOURCE_MAPPING","DataSource","LOGS","METRICS","TRACES","defaultAlertDescription","defaultAlertSummary","defaultAnnotations","summary","alertDefaults","alertType","version","ENTITY_VERSION_V4","condition","compositeQuery","builderQueries","A","initialQueryBuilderFormValuesMap","metrics","promQueries","initialQueryPromQLData","chQueries","query","legend","disabled","queryType","EQueryType","QUERY_BUILDER","panelType","PANEL_TYPES","TIME_SERIES","unit","op","defaultCompareOp","matchType","defaultMatchType","algorithm","defaultAlgorithm","seasonality","defaultSeasonality","labels","severity","annotations","evalWindow","defaultEvalWindow","alert","anamolyAlertDefaults","ruleType","AlertDetectionTypes","ANOMALY_DETECTION_ALERT","functions","args","namedArgs","z_score_threshold","target","logAlertDefaults","logs","traceAlertDefaults","traces","exceptionAlertDefaults","CLICKHOUSE","ALERTS_VALUES_MAP","CreateRules","initValues","setInitValues","useState","location","useLocation","queryParams","URLSearchParams","search","alertTypeFromURL","get","QueryParams","alertTypeFromParams","useGetCompositeQueryParam","setAlertType","_compositeQuery$build","builder","queryData","getAlertTypeFromDataSource","formInstance","Form","useForm","onSelectType","typ","THRESHOLD_ALERT","set","generatedUrl","pathname","toString","history","replace","useEffect","FormAlertRules","initialValue","ruleId","wrap","CreateAlertPage","CreateAlertRule","ExternalLink","d","key","Spline","cx","cy","r"],"sourceRoot":""}