{"version":3,"file":"src_components_ExplorerCard_ExplorerCard_tsx-src_constants_panelTypes_ts-src_container_Explor-d05c7e.7c102c2ae0cd876f4255.js","mappings":"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","sources":["webpack://frontend/./src/components/ExplorerCard/ExplorerCard.tsx","webpack://frontend/./src/components/ExplorerCard/MenuItemGenerator.tsx","webpack://frontend/./src/components/ExplorerCard/SaveViewWithName.tsx","webpack://frontend/./src/components/ExplorerCard/constants.ts","webpack://frontend/./src/components/ExplorerCard/styles.ts","webpack://frontend/./src/components/TextToolTip/TextToolTip.tsx","webpack://frontend/./src/components/TextToolTip/constant.ts","webpack://frontend/./src/components/TextToolTip/index.tsx","webpack://frontend/./src/constants/panelTypes.ts","webpack://frontend/./src/container/ExplorerOrderBy/index.tsx","webpack://frontend/./src/components/TextToolTip/TextToolTip.style.scss","webpack://frontend/./src/components/TextToolTip/TextToolTip.style.scss?1fd1"],"sourcesContent":["import {\n\tDeleteOutlined,\n\tMoreOutlined,\n\tSaveOutlined,\n\tShareAltOutlined,\n} from '@ant-design/icons';\nimport {\n\tButton,\n\tCol,\n\tDropdown,\n\tMenuProps,\n\tPopover,\n\tRow,\n\tSelect,\n\tSpace,\n\tTypography,\n} from 'antd';\nimport axios from 'axios';\nimport TextToolTip from 'components/TextToolTip';\nimport { SOMETHING_WENT_WRONG } from 'constants/api';\nimport { LOCALSTORAGE } from 'constants/localStorage';\nimport { QueryParams } from 'constants/query';\nimport { useOptionsMenu } from 'container/OptionsMenu';\nimport { useGetSearchQueryParam } from 'hooks/queryBuilder/useGetSearchQueryParam';\nimport { useQueryBuilder } from 'hooks/queryBuilder/useQueryBuilder';\nimport { useDeleteView } from 'hooks/saveViews/useDeleteView';\nimport { useGetAllViews } from 'hooks/saveViews/useGetAllViews';\nimport { useUpdateView } from 'hooks/saveViews/useUpdateView';\nimport useErrorNotification from 'hooks/useErrorNotification';\nimport { useNotifications } from 'hooks/useNotifications';\nimport { mapCompositeQueryFromQuery } from 'lib/newQueryBuilder/queryBuilderMappers/mapCompositeQueryFromQuery';\nimport { useState } from 'react';\nimport { useCopyToClipboard } from 'react-use';\nimport { DataSource, StringOperators } from 'types/common/queryBuilder';\nimport { popupContainer } from 'utils/selectPopupContainer';\n\nimport { ExploreHeaderToolTip, SaveButtonText } from './constants';\nimport MenuItemGenerator from './MenuItemGenerator';\nimport SaveViewWithName from './SaveViewWithName';\nimport {\n\tDropDownOverlay,\n\tExplorerCardHeadContainer,\n\tOffSetCol,\n} from './styles';\nimport { ExplorerCardProps } from './types';\nimport { deleteViewHandler } from './utils';\n\nfunction ExplorerCard({\n\tsourcepage,\n\tchildren,\n}: ExplorerCardProps): JSX.Element {\n\tconst [isOpen, setIsOpen] = useState<boolean>(false);\n\tconst [, setCopyUrl] = useCopyToClipboard();\n\tconst { notifications } = useNotifications();\n\n\tconst onCopyUrlHandler = (): void => {\n\t\tsetCopyUrl(window.location.href);\n\t\tnotifications.success({\n\t\t\tmessage: 'Copied to clipboard',\n\t\t});\n\t};\n\n\tconst {\n\t\tcurrentQuery,\n\t\tpanelType,\n\t\tredirectWithQueryBuilderData,\n\t\tupdateAllQueriesOperators,\n\t\tisStagedQueryUpdated,\n\t} = useQueryBuilder();\n\n\tconst {\n\t\tdata: viewsData,\n\t\tisLoading,\n\t\terror,\n\t\tisRefetching,\n\t\trefetch: refetchAllView,\n\t} = useGetAllViews(sourcepage);\n\n\tuseErrorNotification(error);\n\n\tconst handleOpenChange = (newOpen = false): void => {\n\t\tsetIsOpen(newOpen);\n\t};\n\n\tconst viewName = useGetSearchQueryParam(QueryParams.viewName) || '';\n\n\tconst viewKey = useGetSearchQueryParam(QueryParams.viewKey) || '';\n\n\tconst { options } = useOptionsMenu({\n\t\tstorageKey:\n\t\t\tsourcepage === DataSource.TRACES\n\t\t\t\t? LOCALSTORAGE.TRACES_LIST_OPTIONS\n\t\t\t\t: LOCALSTORAGE.LOGS_LIST_OPTIONS,\n\t\tdataSource: sourcepage,\n\t\taggregateOperator: StringOperators.NOOP,\n\t});\n\n\tconst isQueryUpdated = isStagedQueryUpdated(\n\t\tviewsData?.data?.data,\n\t\tviewKey,\n\t\toptions,\n\t);\n\n\tconst { mutateAsync: updateViewAsync } = useUpdateView({\n\t\tcompositeQuery: mapCompositeQueryFromQuery(currentQuery, panelType),\n\t\tviewKey,\n\t\textraData: '',\n\t\tsourcePage: sourcepage,\n\t\tviewName,\n\t});\n\n\tconst { mutateAsync: deleteViewAsync } = useDeleteView(viewKey);\n\n\tconst showErrorNotification = (err: Error): void => {\n\t\tnotifications.error({\n\t\t\tmessage: axios.isAxiosError(err) ? err.message : SOMETHING_WENT_WRONG,\n\t\t});\n\t};\n\n\tconst onDeleteHandler = (): void =>\n\t\tdeleteViewHandler({\n\t\t\tdeleteViewAsync,\n\t\t\tnotifications,\n\t\t\tpanelType,\n\t\t\tredirectWithQueryBuilderData,\n\t\t\trefetchAllView,\n\t\t\tviewId: viewKey,\n\t\t\tviewKey,\n\t\t\tupdateAllQueriesOperators,\n\t\t\tsourcePage: sourcepage,\n\t\t});\n\n\tconst onUpdateQueryHandler = (): void => {\n\t\tupdateViewAsync(\n\t\t\t{\n\t\t\t\tcompositeQuery: mapCompositeQueryFromQuery(currentQuery, panelType),\n\t\t\t\tviewKey,\n\t\t\t\textraData: '',\n\t\t\t\tsourcePage: sourcepage,\n\t\t\t\tviewName,\n\t\t\t},\n\t\t\t{\n\t\t\t\tonSuccess: () => {\n\t\t\t\t\tnotifications.success({\n\t\t\t\t\t\tmessage: 'View Updated Successfully',\n\t\t\t\t\t});\n\t\t\t\t\trefetchAllView();\n\t\t\t\t},\n\t\t\t\tonError: (err) => {\n\t\t\t\t\tshowErrorNotification(err);\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t};\n\n\tconst moreOptionMenu: MenuProps = {\n\t\titems: [\n\t\t\t{\n\t\t\t\tkey: 'delete',\n\t\t\t\tlabel: <Typography.Text strong>Delete</Typography.Text>,\n\t\t\t\tonClick: onDeleteHandler,\n\t\t\t\ticon: <DeleteOutlined />,\n\t\t\t},\n\t\t],\n\t};\n\n\tconst saveButtonType = isQueryUpdated ? 'default' : 'primary';\n\tconst saveButtonIcon = isQueryUpdated ? null : <SaveOutlined />;\n\n\tconst showSaveView = false;\n\n\treturn (\n\t\t<>\n\t\t\t{showSaveView && (\n\t\t\t\t<ExplorerCardHeadContainer size=\"small\">\n\t\t\t\t\t<Row align=\"middle\">\n\t\t\t\t\t\t<Col span={6}>\n\t\t\t\t\t\t\t<Space>\n\t\t\t\t\t\t\t\t<Typography>Query Builder</Typography>\n\t\t\t\t\t\t\t\t<TextToolTip\n\t\t\t\t\t\t\t\t\turl={ExploreHeaderToolTip.url}\n\t\t\t\t\t\t\t\t\ttext={ExploreHeaderToolTip.text}\n\t\t\t\t\t\t\t\t\tuseFilledIcon={false}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Space>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<OffSetCol span={18}>\n\t\t\t\t\t\t\t<Space size=\"large\">\n\t\t\t\t\t\t\t\t{viewsData?.data.data && viewsData?.data.data.length && (\n\t\t\t\t\t\t\t\t\t<Space>\n\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\tgetPopupContainer={popupContainer}\n\t\t\t\t\t\t\t\t\t\t\tloading={isLoading || isRefetching}\n\t\t\t\t\t\t\t\t\t\t\tshowSearch\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select a view\"\n\t\t\t\t\t\t\t\t\t\t\tdropdownStyle={DropDownOverlay}\n\t\t\t\t\t\t\t\t\t\t\tdropdownMatchSelectWidth={false}\n\t\t\t\t\t\t\t\t\t\t\toptionLabelProp=\"value\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={viewName || undefined}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{viewsData?.data.data.map((view) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<Select.Option key={view.id} value={view.name}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItemGenerator\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tviewName={view.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tviewKey={viewKey}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreatedBy={view.createdBy}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuuid={view.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trefetchAllView={refetchAllView}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tviewData={viewsData.data.data}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsourcePage={sourcepage}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</Select.Option>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</Space>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{isQueryUpdated && (\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\t\t\t\ticon={<SaveOutlined />}\n\t\t\t\t\t\t\t\t\t\tonClick={onUpdateQueryHandler}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSave changes\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\t\t\tgetPopupContainer={popupContainer}\n\t\t\t\t\t\t\t\t\tplacement=\"bottomLeft\"\n\t\t\t\t\t\t\t\t\ttrigger=\"click\"\n\t\t\t\t\t\t\t\t\tcontent={\n\t\t\t\t\t\t\t\t\t\t<SaveViewWithName\n\t\t\t\t\t\t\t\t\t\t\tsourcePage={sourcepage}\n\t\t\t\t\t\t\t\t\t\t\thandlePopOverClose={handleOpenChange}\n\t\t\t\t\t\t\t\t\t\t\trefetchAllView={refetchAllView}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tshowArrow={false}\n\t\t\t\t\t\t\t\t\topen={isOpen}\n\t\t\t\t\t\t\t\t\tonOpenChange={handleOpenChange}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\ttype={saveButtonType}\n\t\t\t\t\t\t\t\t\t\ticon={saveButtonIcon}\n\t\t\t\t\t\t\t\t\t\tdata-testid=\"traces-save-view-action\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{isQueryUpdated\n\t\t\t\t\t\t\t\t\t\t\t? SaveButtonText.SAVE_AS_NEW_VIEW\n\t\t\t\t\t\t\t\t\t\t\t: SaveButtonText.SAVE_VIEW}\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Popover>\n\t\t\t\t\t\t\t\t<ShareAltOutlined onClick={onCopyUrlHandler} />\n\t\t\t\t\t\t\t\t{viewKey && (\n\t\t\t\t\t\t\t\t\t<Dropdown trigger={['click']} menu={moreOptionMenu}>\n\t\t\t\t\t\t\t\t\t\t<MoreOutlined />\n\t\t\t\t\t\t\t\t\t</Dropdown>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Space>\n\t\t\t\t\t\t</OffSetCol>\n\t\t\t\t\t</Row>\n\t\t\t\t</ExplorerCardHeadContainer>\n\t\t\t)}\n\n\t\t\t<div>{children}</div>\n\t\t</>\n\t);\n}\n\nexport default ExplorerCard;\n","import { DeleteOutlined } from '@ant-design/icons';\nimport { Col, Row, Tooltip, Typography } from 'antd';\nimport { useQueryBuilder } from 'hooks/queryBuilder/useQueryBuilder';\nimport { useDeleteView } from 'hooks/saveViews/useDeleteView';\nimport { useHandleExplorerTabChange } from 'hooks/useHandleExplorerTabChange';\nimport { useNotifications } from 'hooks/useNotifications';\nimport { MouseEvent, useCallback } from 'react';\n\nimport { MenuItemContainer } from './styles';\nimport { MenuItemLabelGeneratorProps } from './types';\nimport {\n\tdeleteViewHandler,\n\tgetViewDetailsUsingViewKey,\n\ttrimViewName,\n} from './utils';\n\nfunction MenuItemGenerator({\n\tviewName,\n\tviewKey,\n\tcreatedBy,\n\tuuid,\n\tviewData,\n\trefetchAllView,\n\tsourcePage,\n}: MenuItemLabelGeneratorProps): JSX.Element {\n\tconst {\n\t\tpanelType,\n\t\tredirectWithQueryBuilderData,\n\t\tupdateAllQueriesOperators,\n\t} = useQueryBuilder();\n\tconst { handleExplorerTabChange } = useHandleExplorerTabChange();\n\n\tconst { notifications } = useNotifications();\n\n\tconst { mutateAsync: deleteViewAsync } = useDeleteView(uuid);\n\n\tconst onDeleteHandler = (event: MouseEvent<HTMLElement>): void => {\n\t\tevent.stopPropagation();\n\t\tdeleteViewHandler({\n\t\t\tdeleteViewAsync,\n\t\t\tnotifications,\n\t\t\tpanelType,\n\t\t\tredirectWithQueryBuilderData,\n\t\t\trefetchAllView,\n\t\t\tviewId: uuid,\n\t\t\tviewKey,\n\t\t\tupdateAllQueriesOperators,\n\t\t\tsourcePage,\n\t\t});\n\t};\n\n\tconst onMenuItemSelectHandler = useCallback(\n\t\t({ key }: { key: string }): void => {\n\t\t\tconst currentViewDetails = getViewDetailsUsingViewKey(key, viewData);\n\t\t\tif (!currentViewDetails) return;\n\t\t\tconst { query, name, id, panelType: currentPanelType } = currentViewDetails;\n\n\t\t\thandleExplorerTabChange(currentPanelType, {\n\t\t\t\tquery,\n\t\t\t\tname,\n\t\t\t\tid,\n\t\t\t});\n\t\t},\n\t\t[viewData, handleExplorerTabChange],\n\t);\n\n\tconst onLabelClickHandler = (): void => {\n\t\tonMenuItemSelectHandler({\n\t\t\tkey: uuid,\n\t\t});\n\t};\n\n\tconst newViewName = trimViewName(viewName);\n\n\treturn (\n\t\t<MenuItemContainer onClick={onLabelClickHandler}>\n\t\t\t<Row justify=\"space-between\">\n\t\t\t\t<Col span={22}>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Tooltip title={viewName}>\n\t\t\t\t\t\t\t<Typography.Text strong>{newViewName}</Typography.Text>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Typography.Text type=\"secondary\">Created by {createdBy}</Typography.Text>\n\t\t\t\t\t</Row>\n\t\t\t\t</Col>\n\t\t\t\t<Col span={2}>\n\t\t\t\t\t<Typography.Link>\n\t\t\t\t\t\t<DeleteOutlined onClick={onDeleteHandler} />\n\t\t\t\t\t</Typography.Link>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</MenuItemContainer>\n\t);\n}\n\nexport default MenuItemGenerator;\n","import { Card, Form, Input, Typography } from 'antd';\nimport { PANEL_TYPES } from 'constants/queryBuilder';\nimport { useQueryBuilder } from 'hooks/queryBuilder/useQueryBuilder';\nimport { useSaveView } from 'hooks/saveViews/useSaveView';\nimport { useNotifications } from 'hooks/useNotifications';\nimport { mapCompositeQueryFromQuery } from 'lib/newQueryBuilder/queryBuilderMappers/mapCompositeQueryFromQuery';\nimport { useTranslation } from 'react-i18next';\n\nimport { SaveButton } from './styles';\nimport { SaveViewFormProps, SaveViewWithNameProps } from './types';\nimport { saveViewHandler } from './utils';\n\nfunction SaveViewWithName({\n\tsourcePage,\n\thandlePopOverClose,\n\trefetchAllView,\n}: SaveViewWithNameProps): JSX.Element {\n\tconst [form] = Form.useForm<SaveViewFormProps>();\n\tconst { t } = useTranslation(['explorer']);\n\tconst {\n\t\tcurrentQuery,\n\t\tpanelType,\n\t\tredirectWithQueryBuilderData,\n\t} = useQueryBuilder();\n\tconst { notifications } = useNotifications();\n\tconst compositeQuery = mapCompositeQueryFromQuery(currentQuery, panelType);\n\n\tconst { isLoading, mutateAsync: saveViewAsync } = useSaveView({\n\t\tviewName: form.getFieldValue('viewName'),\n\t\tcompositeQuery,\n\t\tsourcePage,\n\t\textraData: '',\n\t});\n\n\tconst onSaveHandler = (): void => {\n\t\tsaveViewHandler({\n\t\t\tcompositeQuery,\n\t\t\thandlePopOverClose,\n\t\t\textraData: '',\n\t\t\tnotifications,\n\t\t\tpanelType: panelType || PANEL_TYPES.LIST,\n\t\t\tredirectWithQueryBuilderData,\n\t\t\trefetchAllView,\n\t\t\tsaveViewAsync,\n\t\t\tsourcePage,\n\t\t\tviewName: form.getFieldValue('viewName'),\n\t\t\tform,\n\t\t});\n\t};\n\n\treturn (\n\t\t<Card>\n\t\t\t<Typography>{t('name_of_the_view')}</Typography>\n\t\t\t<Form form={form} onFinish={onSaveHandler} requiredMark>\n\t\t\t\t<Form.Item\n\t\t\t\t\tname={['viewName']}\n\t\t\t\t\trequired\n\t\t\t\t\trules={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\tmessage: 'Please enter view name',\n\t\t\t\t\t\t},\n\t\t\t\t\t]}\n\t\t\t\t>\n\t\t\t\t\t<Input placeholder=\"Enter Name\" />\n\t\t\t\t</Form.Item>\n\t\t\t\t<SaveButton\n\t\t\t\t\thtmlType=\"submit\"\n\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\tloading={isLoading}\n\t\t\t\t\tdata-testid=\"save-view-name-action-button\"\n\t\t\t\t>\n\t\t\t\t\tSave\n\t\t\t\t</SaveButton>\n\t\t\t</Form>\n\t\t</Card>\n\t);\n}\n\nexport default SaveViewWithName;\n","import { QueryParams } from 'constants/query';\n\nexport const ExploreHeaderToolTip = {\n\turl:\n\t\t'https://Conoscense.io/docs/userguide/query-builder/?utm_source=product&utm_medium=new-query-builder',\n\ttext: 'More details on how to use query builder',\n};\n\nexport const SaveButtonText = {\n\tSAVE_AS_NEW_VIEW: 'Save as new view',\n\tSAVE_VIEW: 'Save view',\n};\n\nexport type QuerySearchParamNames = QueryParams.viewName | QueryParams.viewKey;\n","import { Button, Card, Col } from 'antd';\nimport styled, { CSSProperties } from 'styled-components';\n\nexport const ExplorerCardHeadContainer = styled(Card)`\n\tmargin: 1rem 0;\n\tpadding: 0;\n`;\n\nexport const OffSetCol = styled(Col)`\n\ttext-align: right;\n`;\n\nexport const SaveButton = styled(Button)`\n\t&&& {\n\t\tmargin: 1rem 0;\n\t\twidth: 5rem;\n\t}\n`;\n\nexport const DropDownOverlay: CSSProperties = {\n\tmaxHeight: '20rem',\n\toverflowY: 'auto',\n\twidth: '20rem',\n\tpadding: 0,\n};\n\nexport const MenuItemContainer = styled(Card)`\n\tpadding: 0;\n`;\n","import './TextToolTip.style.scss';\n\nimport { blue, grey } from '@ant-design/colors';\nimport {\n\tQuestionCircleFilled,\n\tQuestionCircleOutlined,\n} from '@ant-design/icons';\nimport { Tooltip } from 'antd';\nimport { themeColors } from 'constants/theme';\nimport { useIsDarkMode } from 'hooks/useDarkMode';\nimport { useMemo } from 'react';\n\nimport { style } from './constant';\n\nfunction TextToolTip({\n\ttext,\n\turl,\n\tuseFilledIcon = true,\n\turlText,\n}: TextToolTipProps): JSX.Element {\n\tconst isDarkMode = useIsDarkMode();\n\n\tconst onClickHandler = (\n\t\tevent: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n\t): void => {\n\t\tevent.stopPropagation();\n\t};\n\n\tconst overlay = useMemo(\n\t\t() => (\n\t\t\t<div className=\"overlay--text-wrap\">\n\t\t\t\t{`${text} `}\n\t\t\t\t{url && (\n\t\t\t\t\t<a\n\t\t\t\t\t\t// Stopping event propagation on click so that parent click listener are not triggered\n\t\t\t\t\t\tonClick={onClickHandler}\n\t\t\t\t\t\thref={url}\n\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{urlText || 'here'}\n\t\t\t\t\t</a>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t),\n\t\t[text, url, urlText],\n\t);\n\n\tconst iconStyle = useMemo(\n\t\t() => ({\n\t\t\t...style,\n\t\t\tcolor: isDarkMode ? themeColors.whiteCream : grey[0],\n\t\t}),\n\t\t[isDarkMode],\n\t);\n\n\tconst iconOutlinedStyle = useMemo(\n\t\t() => ({\n\t\t\t...style,\n\t\t\tcolor: isDarkMode ? themeColors.navyBlue : blue[6],\n\t\t}),\n\t\t[isDarkMode],\n\t);\n\n\treturn (\n\t\t<Tooltip overlay={overlay}>\n\t\t\t{useFilledIcon ? (\n\t\t\t\t<QuestionCircleFilled style={iconStyle} />\n\t\t\t) : (\n\t\t\t\t<QuestionCircleOutlined style={iconOutlinedStyle} />\n\t\t\t)}\n\t\t</Tooltip>\n\t);\n}\n\nTextToolTip.defaultProps = {\n\turl: '',\n\turlText: '',\n\tuseFilledIcon: true,\n};\ninterface TextToolTipProps {\n\turl?: string;\n\ttext: string;\n\tuseFilledIcon?: boolean;\n\turlText?: string;\n}\n\nexport default TextToolTip;\n","export const style = { fontSize: '1rem' };\n","import TextToolTip from './TextToolTip';\n\nexport default TextToolTip;\n","import Uplot from 'components/Uplot';\nimport GridTableComponent from 'container/GridTableComponent';\nimport GridValueComponent from 'container/GridValueComponent';\nimport LogsPanelComponent from 'container/LogsPanelTable/LogsPanelComponent';\nimport TracesTableComponent from 'container/TracesTableComponent/TracesTableComponent';\nimport { DataSource } from 'types/common/queryBuilder';\n\nimport { PANEL_TYPES } from './queryBuilder';\n\nexport const PANEL_TYPES_COMPONENT_MAP = {\n\t[PANEL_TYPES.TIME_SERIES]: Uplot,\n\t[PANEL_TYPES.VALUE]: GridValueComponent,\n\t[PANEL_TYPES.TABLE]: GridTableComponent,\n\t[PANEL_TYPES.TRACE]: null,\n\t[PANEL_TYPES.LIST]: LogsPanelComponent,\n\t[PANEL_TYPES.EMPTY_WIDGET]: null,\n\t[PANEL_TYPES.BAR]: Uplot,\n} as const;\n\nexport const getComponentForPanelType = (\n\tpanelType: PANEL_TYPES,\n\tdataSource?: DataSource,\n): React.ComponentType<any> | null => {\n\tconst componentsMap = {\n\t\t[PANEL_TYPES.TIME_SERIES]: Uplot,\n\t\t[PANEL_TYPES.VALUE]: GridValueComponent,\n\t\t[PANEL_TYPES.TABLE]: GridTableComponent,\n\t\t[PANEL_TYPES.TRACE]: null,\n\t\t[PANEL_TYPES.LIST]:\n\t\t\tdataSource === DataSource.LOGS ? LogsPanelComponent : TracesTableComponent,\n\t\t[PANEL_TYPES.BAR]: Uplot,\n\t\t[PANEL_TYPES.PIE]: null,\n\t\t[PANEL_TYPES.HISTOGRAM]: Uplot,\n\t\t[PANEL_TYPES.EMPTY_WIDGET]: null,\n\t};\n\n\treturn componentsMap[panelType];\n};\n\nexport const AVAILABLE_EXPORT_PANEL_TYPES = [\n\tPANEL_TYPES.TIME_SERIES,\n\tPANEL_TYPES.TABLE,\n\tPANEL_TYPES.LIST,\n];\n","import { Select, Spin } from 'antd';\nimport { OrderByFilterProps } from 'container/QueryBuilder/filters/OrderByFilter/OrderByFilter.interfaces';\nimport { useOrderByFilter } from 'container/QueryBuilder/filters/OrderByFilter/useOrderByFilter';\nimport { selectStyle } from 'container/QueryBuilder/filters/QueryBuilderSearch/config';\nimport { useGetAggregateKeys } from 'hooks/queryBuilder/useGetAggregateKeys';\nimport { memo, useMemo } from 'react';\nimport { DataTypes } from 'types/api/queryBuilder/queryAutocompleteResponse';\nimport { StringOperators } from 'types/common/queryBuilder';\n\nfunction ExplorerOrderBy({ query, onChange }: OrderByFilterProps): JSX.Element {\n\tconst {\n\t\tdebouncedSearchText,\n\t\tselectedValue,\n\t\taggregationOptions,\n\t\tgenerateOptions,\n\t\tcreateOptions,\n\t\thandleChange,\n\t\thandleSearchKeys,\n\t} = useOrderByFilter({ query, onChange });\n\n\tconst { data, isFetching } = useGetAggregateKeys(\n\t\t{\n\t\t\taggregateAttribute: query.aggregateAttribute.key,\n\t\t\tdataSource: query.dataSource,\n\t\t\taggregateOperator: query.aggregateOperator,\n\t\t\tsearchText: debouncedSearchText,\n\t\t},\n\t\t{\n\t\t\tkeepPreviousData: true,\n\t\t},\n\t);\n\n\tconst options = useMemo(() => {\n\t\tconst keysOptions = createOptions(data?.payload?.attributeKeys || []);\n\n\t\tconst customOptions = createOptions([\n\t\t\t{ key: 'timestamp', isColumn: true, type: '', dataType: DataTypes.EMPTY },\n\t\t]);\n\n\t\tconst baseOptions = [\n\t\t\t...customOptions,\n\t\t\t...(query.aggregateOperator === StringOperators.NOOP\n\t\t\t\t? []\n\t\t\t\t: aggregationOptions),\n\t\t\t...keysOptions,\n\t\t];\n\n\t\treturn generateOptions(baseOptions);\n\t}, [\n\t\taggregationOptions,\n\t\tcreateOptions,\n\t\tdata?.payload?.attributeKeys,\n\t\tgenerateOptions,\n\t\tquery.aggregateOperator,\n\t]);\n\n\treturn (\n\t\t<Select\n\t\t\tmode=\"tags\"\n\t\t\tstyle={selectStyle}\n\t\t\tonSearch={handleSearchKeys}\n\t\t\tshowSearch\n\t\t\tshowArrow={false}\n\t\t\tvalue={selectedValue}\n\t\t\tlabelInValue\n\t\t\toptions={options}\n\t\t\tnotFoundContent={isFetching ? <Spin size=\"small\" /> : null}\n\t\t\tonChange={handleChange}\n\t\t/>\n\t);\n}\n\nexport default memo(ExplorerOrderBy);\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".overlay--text-wrap{white-space:pre-wrap}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/components/TextToolTip/TextToolTip.style.scss\"],\"names\":[],\"mappings\":\"AAAA,oBACC,oBAAA\",\"sourcesContent\":[\".overlay--text-wrap {\\n\\twhite-space: pre-wrap;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./TextToolTip.style.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":["ExplorerCard","_ref","_viewsData$data","sourcepage","children","isOpen","setIsOpen","useState","setCopyUrl","useCopyToClipboard","notifications","useNotifications","currentQuery","panelType","redirectWithQueryBuilderData","updateAllQueriesOperators","isStagedQueryUpdated","useQueryBuilder","data","viewsData","isLoading","error","isRefetching","refetch","refetchAllView","useGetAllViews","useErrorNotification","viewName","useGetSearchQueryParam","QueryParams","viewKey","options","useOptionsMenu","storageKey","DataSource","TRACES","LOCALSTORAGE","TRACES_LIST_OPTIONS","LOGS_LIST_OPTIONS","dataSource","aggregateOperator","StringOperators","NOOP","isQueryUpdated","mutateAsync","updateViewAsync","useUpdateView","compositeQuery","mapCompositeQueryFromQuery","extraData","sourcePage","deleteViewAsync","useDeleteView","Typography","Text","DeleteOutlined","SaveOutlined","_jsxs","_Fragment","_jsx","_default","reactHotLoader","leaveModule","reactHotLoaderGlobal","default","undefined","register","module","MenuItemGenerator","createdBy","uuid","viewData","handleExplorerTabChange","useHandleExplorerTabChange","onMenuItemSelectHandler","useCallback","_ref2","key","currentViewDetails","getViewDetailsUsingViewKey","query","name","id","currentPanelType","newViewName","trimViewName","MenuItemContainer","onClick","onLabelClickHandler","Row","justify","Col","span","Tooltip","title","strong","type","Link","event","stopPropagation","deleteViewHandler","viewId","SaveViewWithName","handlePopOverClose","form","Form","useForm","t","useTranslation","saveViewAsync","useSaveView","getFieldValue","Card","onFinish","onSaveHandler","saveViewHandler","PANEL_TYPES","LIST","requiredMark","Item","required","rules","message","Input","placeholder","SaveButton","htmlType","loading","ExploreHeaderToolTip","url","text","SaveButtonText","SAVE_AS_NEW_VIEW","SAVE_VIEW","ExplorerCardHeadContainer","styled","_templateObject","_taggedTemplateLiteral","OffSetCol","_templateObject2","Button","_templateObject3","DropDownOverlay","maxHeight","overflowY","width","padding","_templateObject4","TextToolTip","useFilledIcon","urlText","isDarkMode","useIsDarkMode","onClickHandler","overlay","useMemo","className","concat","href","rel","target","iconStyle","style","color","themeColors","whiteCream","grey","iconOutlinedStyle","navyBlue","blue","QuestionCircleFilled","QuestionCircleOutlined","defaultProps","fontSize","PANEL_TYPES_COMPONENT_MAP","TIME_SERIES","Uplot","VALUE","GridValueComponent","TABLE","GridTableComponent","TRACE","LogsPanelComponent","EMPTY_WIDGET","BAR","getComponentForPanelType","LOGS","TracesTableComponent","PIE","HISTOGRAM","AVAILABLE_EXPORT_PANEL_TYPES","ExplorerOrderBy","_data$payload2","onChange","debouncedSearchText","selectedValue","aggregationOptions","generateOptions","createOptions","handleChange","handleSearchKeys","useOrderByFilter","isFetching","useGetAggregateKeys","aggregateAttribute","searchText","keepPreviousData","_data$payload","keysOptions","payload","attributeKeys","baseOptions","isColumn","dataType","DataTypes","EMPTY","Select","mode","selectStyle","onSearch","showSearch","showArrow","value","labelInValue","notFoundContent","Spin","size","memo","___CSS_LOADER_EXPORT___","push","api","content","__esModule","exports","locals"],"sourceRoot":""}