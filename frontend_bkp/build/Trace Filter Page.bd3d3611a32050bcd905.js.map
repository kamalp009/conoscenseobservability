{"version":3,"file":"Trace Filter Page.bd3d3611a32050bcd905.js","mappings":"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","sources":["webpack://frontend/./src/api/trace/getFilters.ts","webpack://frontend/./src/api/trace/getSpans.ts","webpack://frontend/./src/api/trace/getSpansAggregate.ts","webpack://frontend/./src/api/trace/getTagFilter.ts","webpack://frontend/./src/api/trace/getTagValue.ts","webpack://frontend/./src/container/Trace/Filters/Panel/PanelBody/Common/Checkbox.tsx","webpack://frontend/./src/container/Trace/Filters/Panel/PanelBody/Common/styles.ts","webpack://frontend/./src/container/Trace/Filters/Panel/PanelBody/CommonCheckBox/index.tsx","webpack://frontend/./src/container/Trace/Filters/Panel/PanelBody/Duration/index.tsx","webpack://frontend/./src/container/Trace/Filters/Panel/PanelBody/Duration/styles.ts","webpack://frontend/./src/container/Trace/Filters/Panel/PanelBody/SearchTraceID/index.tsx","webpack://frontend/./src/container/Trace/Filters/Panel/PanelBody/index.tsx","webpack://frontend/./src/container/Trace/Filters/Panel/PanelHeading/index.tsx","webpack://frontend/./src/container/Trace/Filters/Panel/PanelHeading/styles.ts","webpack://frontend/./src/container/Trace/Filters/Panel/index.tsx","webpack://frontend/./src/container/Trace/Filters/index.tsx","webpack://frontend/./src/container/Trace/Graph/config.ts","webpack://frontend/./src/container/Trace/Graph/index.tsx","webpack://frontend/./src/container/Trace/Graph/styles.ts","webpack://frontend/./src/container/Trace/Search/AllTags/Tag/TagKey.tsx","webpack://frontend/./src/container/Trace/Search/AllTags/Tag/TagValue.tsx","webpack://frontend/./src/container/Trace/Search/AllTags/Tag/index.tsx","webpack://frontend/./src/container/Trace/Search/AllTags/Tag/styles.ts","webpack://frontend/./src/container/Trace/Search/AllTags/Tag/utils.ts","webpack://frontend/./src/container/Trace/Search/AllTags/index.tsx","webpack://frontend/./src/container/Trace/Search/AllTags/styles.ts","webpack://frontend/./src/container/Trace/Search/config.ts","webpack://frontend/./src/container/Trace/Search/index.tsx","webpack://frontend/./src/container/Trace/Search/styles.ts","webpack://frontend/./src/container/Trace/Search/util.ts","webpack://frontend/./src/container/Trace/TraceGraphFilter/config.ts","webpack://frontend/./src/container/Trace/TraceGraphFilter/index.tsx","webpack://frontend/./src/container/Trace/TraceGraphFilter/styles.ts","webpack://frontend/./src/container/Trace/TraceGraphFilter/utils.ts","webpack://frontend/./src/container/Trace/TraceTable/index.tsx","webpack://frontend/./src/container/Trace/TraceTable/util.ts","webpack://frontend/./src/pages/Trace/index.tsx","webpack://frontend/./src/pages/Trace/styles.ts","webpack://frontend/./src/store/actions/trace/getInitialFilter.ts","webpack://frontend/./src/store/actions/trace/getInitialSpansAggregate.ts","webpack://frontend/./src/store/actions/trace/getSpans.ts","webpack://frontend/./src/store/actions/trace/parseFilter/filter.ts","webpack://frontend/./src/store/actions/trace/parseFilter/filterToFetchData.ts","webpack://frontend/./src/store/actions/trace/parseFilter/isFilterExclude.ts","webpack://frontend/./src/store/actions/trace/parseFilter/minMaxTime.ts","webpack://frontend/./src/store/actions/trace/parseFilter/parseSpanKind.ts","webpack://frontend/./src/store/actions/trace/parseFilter/selectedFilter.ts","webpack://frontend/./src/store/actions/trace/parseFilter/selectedTags.ts","webpack://frontend/./src/store/actions/trace/parseFilter/skippedSelected.ts","webpack://frontend/./src/store/actions/trace/parseFilter/spanAggregateCurrentPage.ts","webpack://frontend/./src/store/actions/trace/parseFilter/spanAggregateCurrentPageSize.ts","webpack://frontend/./src/store/actions/trace/parseFilter/spanAggregateOrder.ts","webpack://frontend/./src/store/actions/trace/parseFilter/spanAggregateOrderParam.ts","webpack://frontend/./src/store/actions/trace/updateIsTagsError.ts","webpack://frontend/./src/store/actions/trace/updateTagPanelVisiblity.ts","webpack://frontend/./src/store/actions/trace/util.ts","webpack://frontend/./src/types/reducer/trace.ts"],"sourcesContent":["import axios from 'api';\nimport { ErrorResponseHandler } from 'api/ErrorResponseHandler';\nimport { AxiosError } from 'axios';\nimport omitBy from 'lodash-es/omitBy';\nimport { ErrorResponse, SuccessResponse } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/trace/getFilters';\n\nconst getFilters = async (\n\tprops: Props,\n): Promise<SuccessResponse<PayloadProps> | ErrorResponse> => {\n\ttry {\n\t\tconst duration =\n\t\t\tomitBy(props.other, (_, key) => !key.startsWith('duration')) || [];\n\n\t\tconst nonDuration = omitBy(props.other, (_, key) =>\n\t\t\tkey.startsWith('duration'),\n\t\t);\n\n\t\tconst exclude: string[] = [];\n\n\t\tprops.isFilterExclude.forEach((value, key) => {\n\t\t\tif (value) {\n\t\t\t\texclude.push(key);\n\t\t\t}\n\t\t});\n\n\t\tconst response = await axios.post<PayloadProps>(`/getSpanFilters`, {\n\t\t\tstart: props.start,\n\t\t\tend: props.end,\n\t\t\tgetFilters: props.getFilters,\n\t\t\t...nonDuration,\n\t\t\tmaxDuration: String((duration.duration || [])[0] || ''),\n\t\t\tminDuration: String((duration.duration || [])[1] || ''),\n\t\t\texclude,\n\t\t\tspanKind: props.spanKind,\n\t\t});\n\n\t\treturn {\n\t\t\tstatusCode: 200,\n\t\t\terror: null,\n\t\t\tmessage: 'Success',\n\t\t\tpayload: response.data,\n\t\t};\n\t} catch (error) {\n\t\treturn ErrorResponseHandler(error as AxiosError);\n\t}\n};\n\nexport default getFilters;\n","import axios from 'api';\nimport { ErrorResponseHandler } from 'api/ErrorResponseHandler';\nimport { AxiosError } from 'axios';\nimport omitBy from 'lodash-es/omitBy';\nimport { ErrorResponse, SuccessResponse } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/trace/getSpans';\n\nconst getSpans = async (\n\tprops: Props,\n): Promise<SuccessResponse<PayloadProps> | ErrorResponse> => {\n\ttry {\n\t\tconst updatedSelectedTags = props.selectedTags.map((e) => ({\n\t\t\tKey: `${e.Key}.(string)`,\n\t\t\tOperator: e.Operator,\n\t\t\tStringValues: e.StringValues,\n\t\t\tNumberValues: e.NumberValues,\n\t\t\tBoolValues: e.BoolValues,\n\t\t}));\n\n\t\tconst exclude: string[] = [];\n\n\t\tprops.isFilterExclude.forEach((value, key) => {\n\t\t\tif (value) {\n\t\t\t\texclude.push(key);\n\t\t\t}\n\t\t});\n\n\t\tconst other = Object.fromEntries(props.selectedFilter);\n\n\t\tconst duration = omitBy(other, (_, key) => !key.startsWith('duration')) || [];\n\n\t\tconst nonDuration = omitBy(other, (_, key) => key.startsWith('duration'));\n\n\t\tconst response = await axios.post<PayloadProps>(\n\t\t\t`/getFilteredSpans/aggregates`,\n\t\t\t{\n\t\t\t\tstart: String(props.start),\n\t\t\t\tend: String(props.end),\n\t\t\t\tfunction: props.function,\n\t\t\t\tgroupBy: props.groupBy === 'none' ? '' : props.groupBy,\n\t\t\t\tstep: props.step,\n\t\t\t\ttags: updatedSelectedTags,\n\t\t\t\t...nonDuration,\n\t\t\t\tmaxDuration: String((duration.duration || [])[0] || ''),\n\t\t\t\tminDuration: String((duration.duration || [])[1] || ''),\n\t\t\t\texclude,\n\t\t\t\tspanKind: props.spanKind,\n\t\t\t},\n\t\t);\n\n\t\treturn {\n\t\t\tstatusCode: 200,\n\t\t\terror: null,\n\t\t\tmessage: 'Success',\n\t\t\tpayload: response.data,\n\t\t};\n\t} catch (error) {\n\t\treturn ErrorResponseHandler(error as AxiosError);\n\t}\n};\n\nexport default getSpans;\n","import axios from 'api';\nimport { ErrorResponseHandler } from 'api/ErrorResponseHandler';\nimport { AxiosError } from 'axios';\nimport omitBy from 'lodash-es/omitBy';\nimport { ErrorResponse, SuccessResponse } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/trace/getSpanAggregate';\nimport { TraceFilterEnum } from 'types/reducer/trace';\n\nconst getSpanAggregate = async (\n\tprops: Props,\n): Promise<SuccessResponse<PayloadProps> | ErrorResponse> => {\n\ttry {\n\t\tconst preProps = {\n\t\t\tstart: String(props.start),\n\t\t\tend: String(props.end),\n\t\t\tlimit: props.limit,\n\t\t\toffset: props.offset,\n\t\t\torder: props.order,\n\t\t\torderParam: props.orderParam,\n\t\t};\n\n\t\tconst exclude: TraceFilterEnum[] = [];\n\n\t\tprops.isFilterExclude.forEach((value, key) => {\n\t\t\tif (value) {\n\t\t\t\texclude.push(key);\n\t\t\t}\n\t\t});\n\n\t\tconst updatedSelectedTags = props.selectedTags.map((e) => ({\n\t\t\tKey: `${e.Key}.(string)`,\n\t\t\tOperator: e.Operator,\n\t\t\tStringValues: e.StringValues,\n\t\t\tNumberValues: e.NumberValues,\n\t\t\tBoolValues: e.BoolValues,\n\t\t}));\n\n\t\tconst other = Object.fromEntries(props.selectedFilter);\n\n\t\tconst duration = omitBy(other, (_, key) => !key.startsWith('duration')) || [];\n\n\t\tconst nonDuration = omitBy(other, (_, key) => key.startsWith('duration'));\n\n\t\tconst response = await axios.post<PayloadProps>(`/getFilteredSpans`, {\n\t\t\t...preProps,\n\t\t\ttags: updatedSelectedTags,\n\t\t\t...nonDuration,\n\t\t\tmaxDuration: String((duration.duration || [])[0] || ''),\n\t\t\tminDuration: String((duration.duration || [])[1] || ''),\n\t\t\texclude,\n\t\t\tspanKind: props.spanKind,\n\t\t});\n\n\t\treturn {\n\t\t\tstatusCode: 200,\n\t\t\terror: null,\n\t\t\tmessage: 'Success',\n\t\t\tpayload: response.data,\n\t\t};\n\t} catch (error) {\n\t\treturn ErrorResponseHandler(error as AxiosError);\n\t}\n};\n\nexport default getSpanAggregate;\n","import axios from 'api';\nimport { ErrorResponseHandler } from 'api/ErrorResponseHandler';\nimport { AxiosError } from 'axios';\nimport { omitBy } from 'lodash-es';\nimport { ErrorResponse, SuccessResponse } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/trace/getTagFilters';\nimport { TraceFilterEnum } from 'types/reducer/trace';\n\nconst getTagFilters = async (\n\tprops: Props,\n): Promise<SuccessResponse<PayloadProps> | ErrorResponse> => {\n\ttry {\n\t\tconst duration =\n\t\t\tomitBy(props.other, (_, key) => !key.startsWith('duration')) || [];\n\n\t\tconst exclude: TraceFilterEnum[] = [];\n\n\t\tprops.isFilterExclude.forEach((value, key) => {\n\t\t\tif (value) {\n\t\t\t\texclude.push(key);\n\t\t\t}\n\t\t});\n\n\t\tconst nonDuration = omitBy(props.other, (_, key) =>\n\t\t\tkey.startsWith('duration'),\n\t\t);\n\n\t\tconst response = await axios.post<PayloadProps>(`/getTagFilters`, {\n\t\t\tstart: String(props.start),\n\t\t\tend: String(props.end),\n\t\t\t...nonDuration,\n\t\t\tmaxDuration: String((duration.duration || [])[0] || ''),\n\t\t\tminDuration: String((duration.duration || [])[1] || ''),\n\t\t\texclude,\n\t\t\tspanKind: props.spanKind,\n\t\t});\n\n\t\treturn {\n\t\t\tstatusCode: 200,\n\t\t\terror: null,\n\t\t\tmessage: 'Success',\n\t\t\tpayload: response.data,\n\t\t};\n\t} catch (error) {\n\t\treturn ErrorResponseHandler(error as AxiosError);\n\t}\n};\n\nexport default getTagFilters;\n","import axios from 'api';\nimport { ErrorResponseHandler } from 'api/ErrorResponseHandler';\nimport { AxiosError } from 'axios';\nimport { ErrorResponse, SuccessResponse } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/trace/getTagValue';\n\nconst getTagValue = async (\n\tprops: Props,\n): Promise<SuccessResponse<PayloadProps> | ErrorResponse> => {\n\ttry {\n\t\tconst response = await axios.post<PayloadProps>(`/getTagValues`, {\n\t\t\tstart: props.start.toString(),\n\t\t\tend: props.end.toString(),\n\t\t\ttagKey: {\n\t\t\t\tKey: props.tagKey.Key,\n\t\t\t\tType: props.tagKey.Type,\n\t\t\t},\n\t\t\tspanKind: props.spanKind,\n\t\t});\n\t\treturn {\n\t\t\tstatusCode: 200,\n\t\t\terror: null,\n\t\t\tmessage: 'Success',\n\t\t\tpayload: response.data,\n\t\t};\n\t} catch (error) {\n\t\treturn ErrorResponseHandler(error as AxiosError);\n\t}\n};\n\nexport default getTagValue;\n","import { Checkbox, Tooltip, Typography } from 'antd';\nimport getFilters from 'api/trace/getFilters';\nimport { AxiosError } from 'axios';\nimport { useNotifications } from 'hooks/useNotifications';\nimport { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { getFilter, updateURL } from 'store/actions/trace/util';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport { UPDATE_ALL_FILTERS } from 'types/actions/trace';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport { CheckBoxContainer, ParaGraph } from './styles';\n\nfunction CheckBoxComponent(props: CheckBoxProps): JSX.Element {\n\tconst {\n\t\tselectedFilter,\n\t\tfilterLoading,\n\t\tfilterToFetchData,\n\t\tspansAggregate,\n\t\tselectedTags,\n\t\tfilter,\n\t\tuserSelectedFilter,\n\t\tisFilterExclude,\n\t\tspanKind,\n\t} = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst globalTime = useSelector<AppState, GlobalReducer>(\n\t\t(state) => state.globalTime,\n\t);\n\tconst { keyValue, name, value } = props;\n\n\tconst dispatch = useDispatch<Dispatch<AppActions>>();\n\n\tconst [isLoading, setIsLoading] = useState<boolean>(false);\n\n\tconst isUserSelected =\n\t\t(userSelectedFilter.get(name) || []).find((e) => e === keyValue) !==\n\t\tundefined;\n\n\tconst { notifications } = useNotifications();\n\n\t// eslint-disable-next-line sonarjs/cognitive-complexity\n\tconst onCheckHandler = async (): Promise<void> => {\n\t\ttry {\n\t\t\tsetIsLoading(true);\n\n\t\t\tconst newSelectedMap = new Map(selectedFilter);\n\t\t\tconst preUserSelectedMap = new Map(userSelectedFilter);\n\t\t\tconst preIsFilterExclude = new Map(isFilterExclude);\n\n\t\t\tconst isTopicPresent = preUserSelectedMap.get(name);\n\n\t\t\t// append the value\n\t\t\tif (!isTopicPresent) {\n\t\t\t\tpreUserSelectedMap.set(name, [keyValue]);\n\t\t\t} else {\n\t\t\t\tconst isValuePresent =\n\t\t\t\t\tisTopicPresent.find((e) => e === keyValue) !== undefined;\n\n\t\t\t\t// check the value if present then remove the value or isChecked\n\t\t\t\tif (isValuePresent) {\n\t\t\t\t\tpreUserSelectedMap.set(\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tisTopicPresent.filter((e) => e !== keyValue),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// if not present add into the array of string\n\t\t\t\t\tpreUserSelectedMap.set(name, [...isTopicPresent, keyValue]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newSelectedMap.get(name)?.find((e) => e === keyValue)) {\n\t\t\t\tnewSelectedMap.set(name, [\n\t\t\t\t\t...(newSelectedMap.get(name) || []).filter((e) => e !== keyValue),\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tnewSelectedMap.set(name, [\n\t\t\t\t\t...new Set([...(newSelectedMap.get(name) || []), keyValue]),\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tif (preIsFilterExclude.get(name) !== false) {\n\t\t\t\tpreIsFilterExclude.set(name, true);\n\t\t\t}\n\n\t\t\tconst response = await getFilters({\n\t\t\t\tother: Object.fromEntries(newSelectedMap),\n\t\t\t\tend: String(globalTime.maxTime),\n\t\t\t\tstart: String(globalTime.minTime),\n\t\t\t\tgetFilters: filterToFetchData.filter((e) => e !== name),\n\t\t\t\tisFilterExclude: preIsFilterExclude,\n\t\t\t\tspanKind,\n\t\t\t});\n\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\tconst updatedFilter = getFilter(response.payload);\n\n\t\t\t\t// updatedFilter.forEach((value, key) => {\n\t\t\t\t// \tif (key !== 'duration' && name !== key) {\n\t\t\t\t// \t\tpreUserSelectedMap.set(key, Object.keys(value));\n\t\t\t\t// \t}\n\n\t\t\t\t// \tif (key === 'duration') {\n\t\t\t\t// \t\tnewSelectedMap.set('duration', [value.maxDuration, value.minDuration]);\n\t\t\t\t// \t}\n\t\t\t\t// });\n\n\t\t\t\tupdatedFilter.set(name, {\n\t\t\t\t\t[`${keyValue}`]: '-1',\n\t\t\t\t\t...(filter.get(name) || {}),\n\t\t\t\t\t...(updatedFilter.get(name) || {}),\n\t\t\t\t});\n\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_ALL_FILTERS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tselectedTags,\n\t\t\t\t\t\tcurrent: spansAggregate.currentPage,\n\t\t\t\t\t\tfilter: updatedFilter,\n\t\t\t\t\t\tfilterToFetchData,\n\t\t\t\t\t\tselectedFilter: newSelectedMap,\n\t\t\t\t\t\tuserSelected: preUserSelectedMap,\n\t\t\t\t\t\tisFilterExclude: preIsFilterExclude,\n\t\t\t\t\t\torder: spansAggregate.order,\n\t\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t\t\tpageSize: spansAggregate.pageSize,\n\t\t\t\t\t\tspanKind,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tsetIsLoading(false);\n\n\t\t\t\tupdateURL(\n\t\t\t\t\tnewSelectedMap,\n\t\t\t\t\tfilterToFetchData,\n\t\t\t\t\tspansAggregate.currentPage,\n\t\t\t\t\tselectedTags,\n\t\t\t\t\tpreIsFilterExclude,\n\t\t\t\t\tpreUserSelectedMap,\n\t\t\t\t\tspansAggregate.order,\n\t\t\t\t\tspansAggregate.pageSize,\n\t\t\t\t\tspansAggregate.orderParam,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tsetIsLoading(false);\n\n\t\t\t\tnotifications.error({\n\t\t\t\t\tmessage: response.error || 'Something went wrong',\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as AxiosError).toString() || 'Something went wrong',\n\t\t\t});\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\tconst isCheckBoxSelected = isUserSelected;\n\n\tconst TooTipOverLay = useMemo((): JSX.Element => <div>{keyValue}</div>, [\n\t\tkeyValue,\n\t]);\n\n\treturn (\n\t\t<CheckBoxContainer>\n\t\t\t<Checkbox\n\t\t\t\tdisabled={isLoading || filterLoading}\n\t\t\t\tonClick={onCheckHandler}\n\t\t\t\tchecked={isCheckBoxSelected}\n\t\t\t\tdefaultChecked\n\t\t\t\tkey={keyValue}\n\t\t\t>\n\t\t\t\t<Tooltip overlay={TooTipOverLay}>\n\t\t\t\t\t<ParaGraph ellipsis>{keyValue}</ParaGraph>\n\t\t\t\t</Tooltip>\n\t\t\t</Checkbox>\n\t\t\t{isCheckBoxSelected ? (\n\t\t\t\t<Typography>{value}</Typography>\n\t\t\t) : (\n\t\t\t\t<Typography>-</Typography>\n\t\t\t)}\n\t\t</CheckBoxContainer>\n\t);\n}\n\ninterface CheckBoxProps {\n\tkeyValue: string;\n\tname: TraceFilterEnum;\n\tvalue: string;\n}\n\nexport default CheckBoxComponent;\n","import { Typography } from 'antd';\nimport styled from 'styled-components';\n\nexport const CheckBoxContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tmargin-left: 1rem;\n\tmargin-right: 1rem;\n\n\tmargin-top: 0.5rem;\n\tmargin-bottom: 0.5rem;\n`;\n\nexport const ParaGraph = styled(Typography.Paragraph)`\n\t&&& {\n\t\tmargin: 0;\n\t\tmax-width: 8rem;\n\t}\n`;\n","import { Button, Input } from 'antd';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { AppState } from 'store/reducers';\nimport { INITIAL_FILTER_VALUE } from 'store/reducers/trace';\nimport AppActions from 'types/actions';\nimport { UPDATE_SPAN_UPDATE_FILTER_DISPLAY_VALUE } from 'types/actions/trace';\nimport { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport CheckBoxComponent from '../Common/Checkbox';\n\nconst { Search } = Input;\n\nfunction CommonCheckBox(props: CommonCheckBoxProps): JSX.Element {\n\tconst { filter, filterDisplayValue } = useSelector<AppState, TraceReducer>(\n\t\t(state) => state.traces,\n\t);\n\n\tconst { name } = props;\n\n\tconst status = filter.get(name) || {};\n\n\tconst statusObj = Object.keys(status);\n\tconst numberOfFilters = filterDisplayValue.get(name) || 0;\n\tconst dispatch = useDispatch<Dispatch<AppActions>>();\n\tconst [searchFilter, setSearchFilter] = useState<string>('');\n\n\tconst onClickMoreHandler = (): void => {\n\t\tconst newFilterDisplayValue = new Map(filterDisplayValue);\n\t\tconst preValue =\n\t\t\t(newFilterDisplayValue.get(name) || 0) + INITIAL_FILTER_VALUE;\n\n\t\tnewFilterDisplayValue.set(name, preValue);\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_SPAN_UPDATE_FILTER_DISPLAY_VALUE,\n\t\t\tpayload: newFilterDisplayValue,\n\t\t});\n\t};\n\n\tconst isMoreButtonAvilable = Boolean(\n\t\tnumberOfFilters && statusObj.length > numberOfFilters,\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{statusObj.length > 0 && (\n\t\t\t\t<Search\n\t\t\t\t\tvalue={searchFilter}\n\t\t\t\t\tonChange={(e): void => setSearchFilter(e.target.value)}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tpadding: '0 3%',\n\t\t\t\t\t}}\n\t\t\t\t\tplaceholder=\"Filter Values\"\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t{statusObj\n\t\t\t\t.sort((a, b) => {\n\t\t\t\t\tconst countA = +status[a];\n\t\t\t\t\tconst countB = +status[b];\n\n\t\t\t\t\tif (countA === countB) {\n\t\t\t\t\t\treturn a.length - b.length;\n\t\t\t\t\t}\n\t\t\t\t\treturn countA - countB;\n\t\t\t\t})\n\t\t\t\t.filter((filter) => {\n\t\t\t\t\tif (searchFilter.length === 0) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn filter\n\t\t\t\t\t\t.toLocaleLowerCase()\n\t\t\t\t\t\t.includes(searchFilter.toLocaleLowerCase());\n\t\t\t\t})\n\t\t\t\t.filter((_, index) => index < numberOfFilters)\n\t\t\t\t.map((e) => (\n\t\t\t\t\t<CheckBoxComponent\n\t\t\t\t\t\tkey={e}\n\t\t\t\t\t\t{...{\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkeyValue: e,\n\t\t\t\t\t\t\tvalue: status[e],\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\n\t\t\t{isMoreButtonAvilable && (\n\t\t\t\t<Button onClick={onClickMoreHandler} type=\"link\">\n\t\t\t\t\tMore\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t</>\n\t);\n}\n\ninterface CommonCheckBoxProps {\n\tname: TraceFilterEnum;\n}\n\nexport default CommonCheckBox;\n","import { Slider } from 'antd';\nimport { SliderRangeProps } from 'antd/lib/slider';\nimport getFilters from 'api/trace/getFilters';\nimport useDebouncedFn from 'hooks/useDebouncedFunction';\nimport {\n\tChangeEventHandler,\n\tuseCallback,\n\tuseEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { getFilter, updateURL } from 'store/actions/trace/util';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport { UPDATE_ALL_FILTERS } from 'types/actions/trace';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport { Container, InputComponent, InputContainer, Text } from './styles';\nimport { getMs } from './util';\n\nfunction Duration(): JSX.Element {\n\tconst {\n\t\tfilter,\n\t\tselectedFilter,\n\t\tfilterToFetchData,\n\t\tspansAggregate,\n\t\tselectedTags,\n\t\tuserSelectedFilter,\n\t\tisFilterExclude,\n\t\tspanKind,\n\t} = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst dispatch = useDispatch<Dispatch<AppActions>>();\n\tconst globalTime = useSelector<AppState, GlobalReducer>(\n\t\t(state) => state.globalTime,\n\t);\n\n\tconst preLocalMaxDuration = useRef<number>();\n\tconst preLocalMinDuration = useRef<number>();\n\n\tconst getDuration = useMemo(() => {\n\t\tconst selectedDuration = selectedFilter.get('duration');\n\n\t\tif (selectedDuration) {\n\t\t\treturn {\n\t\t\t\tmaxDuration: selectedDuration[0],\n\t\t\t\tminDuration: selectedDuration[1],\n\t\t\t};\n\t\t}\n\n\t\treturn filter.get('duration') || {};\n\t}, [selectedFilter, filter]);\n\n\tconst [preMax, setPreMax] = useState<string>('');\n\tconst [preMin, setPreMin] = useState<string>('');\n\n\tuseEffect(() => {\n\t\tconst duration = getDuration || {};\n\n\t\tconst maxDuration = duration.maxDuration || '0';\n\t\tconst minDuration = duration.minDuration || '0';\n\n\t\tif (preLocalMaxDuration.current === undefined) {\n\t\t\tpreLocalMaxDuration.current = parseFloat(maxDuration);\n\t\t}\n\t\tif (preLocalMinDuration.current === undefined) {\n\t\t\tpreLocalMinDuration.current = parseFloat(minDuration);\n\t\t}\n\n\t\tsetPreMax(getMs(maxDuration));\n\t\tsetPreMin(getMs(minDuration));\n\t}, [getDuration]);\n\n\tconst updatedUrl = async (min: number, max: number): Promise<void> => {\n\t\tconst preSelectedFilter = new Map(selectedFilter);\n\t\tconst preUserSelected = new Map(userSelectedFilter);\n\n\t\tpreSelectedFilter.set('duration', [\n\t\t\tString(max * 1000000),\n\t\t\tString(min * 1000000),\n\t\t]);\n\n\t\tconst response = await getFilters({\n\t\t\tend: String(globalTime.maxTime),\n\t\t\tgetFilters: filterToFetchData,\n\t\t\tother: Object.fromEntries(preSelectedFilter),\n\t\t\tstart: String(globalTime.minTime),\n\t\t\tisFilterExclude,\n\t\t\tspanKind,\n\t\t});\n\n\t\tif (response.statusCode === 200) {\n\t\t\tconst preFilter = getFilter(response.payload);\n\n\t\t\tpreFilter.forEach((value, key) => {\n\t\t\t\tconst values = Object.keys(value);\n\t\t\t\tif (key !== 'duration' && values.length) {\n\t\t\t\t\tpreUserSelected.set(key, values);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_ALL_FILTERS,\n\t\t\t\tpayload: {\n\t\t\t\t\tcurrent: spansAggregate.currentPage,\n\t\t\t\t\tfilter: preFilter,\n\t\t\t\t\tfilterToFetchData,\n\t\t\t\t\tselectedFilter: preSelectedFilter,\n\t\t\t\t\tselectedTags,\n\t\t\t\t\tuserSelected: preUserSelected,\n\t\t\t\t\tisFilterExclude,\n\t\t\t\t\torder: spansAggregate.order,\n\t\t\t\t\tpageSize: spansAggregate.pageSize,\n\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t\tspanKind,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tupdateURL(\n\t\t\t\tpreSelectedFilter,\n\t\t\t\tfilterToFetchData,\n\t\t\t\tspansAggregate.currentPage,\n\t\t\t\tselectedTags,\n\t\t\t\tisFilterExclude,\n\t\t\t\tuserSelectedFilter,\n\t\t\t\tspansAggregate.order,\n\t\t\t\tspansAggregate.pageSize,\n\t\t\t\tspansAggregate.orderParam,\n\t\t\t);\n\t\t}\n\t};\n\n\tconst onRangeSliderHandler = (number: [string, string]): void => {\n\t\tconst [min, max] = number;\n\n\t\tsetPreMin(min);\n\t\tsetPreMax(max);\n\t};\n\n\tconst debouncedFunction = useDebouncedFn(\n\t\t(min, max) => {\n\t\t\tupdatedUrl(min as number, max as number);\n\t\t},\n\t\t1500,\n\t\tundefined,\n\t);\n\n\tconst onChangeMaxHandler: ChangeEventHandler<HTMLInputElement> = (event) => {\n\t\tconst { value } = event.target;\n\t\tconst min = preMin;\n\t\tconst max = value;\n\n\t\tonRangeSliderHandler([min, max]);\n\t\tdebouncedFunction(min, max);\n\t};\n\n\tconst onChangeMinHandler: ChangeEventHandler<HTMLInputElement> = (event) => {\n\t\tconst { value } = event.target;\n\t\tconst min = value;\n\t\tconst max = preMax;\n\n\t\tonRangeSliderHandler([min, max]);\n\t\tdebouncedFunction(min, max);\n\t};\n\n\tconst onRangeHandler: SliderRangeProps['onChange'] = ([min, max]) => {\n\t\tupdatedUrl(min, max);\n\t};\n\n\tconst TipComponent = useCallback((value: undefined | number) => {\n\t\tif (value === undefined) {\n\t\t\treturn <div />;\n\t\t}\n\t\treturn <div>{`${value?.toString()}ms`}</div>;\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<Container>\n\t\t\t\t<InputContainer>\n\t\t\t\t\t<Text>Min</Text>\n\t\t\t\t</InputContainer>\n\t\t\t\t<InputComponent\n\t\t\t\t\taddonAfter=\"ms\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tonChange={onChangeMinHandler}\n\t\t\t\t\tvalue={preMin}\n\t\t\t\t/>\n\n\t\t\t\t<InputContainer>\n\t\t\t\t\t<Text>Max</Text>\n\t\t\t\t</InputContainer>\n\t\t\t\t<InputComponent\n\t\t\t\t\taddonAfter=\"ms\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tonChange={onChangeMaxHandler}\n\t\t\t\t\tvalue={preMax}\n\t\t\t\t/>\n\t\t\t</Container>\n\n\t\t\t<Container>\n\t\t\t\t<Slider\n\t\t\t\t\tmin={Number(getMs(String(preLocalMinDuration.current || 0)))}\n\t\t\t\t\tmax={Number(getMs(String(preLocalMaxDuration.current || 0)))}\n\t\t\t\t\trange\n\t\t\t\t\ttooltip={{ formatter: TipComponent }}\n\t\t\t\t\tonChange={([min, max]): void => {\n\t\t\t\t\t\tonRangeSliderHandler([String(min), String(max)]);\n\t\t\t\t\t}}\n\t\t\t\t\tonAfterChange={onRangeHandler}\n\t\t\t\t\tvalue={[Number(preMin), Number(preMax)]}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t</div>\n\t);\n}\n\nexport default Duration;\n","import { Input, Typography } from 'antd';\nimport styled from 'styled-components';\n\nexport const DurationText = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tmin-height: 8vh;\n\tflex-direction: column;\n`;\n\nexport const InputComponent = styled(Input)`\n\tinput::-webkit-outer-spin-button,\n\tinput::-webkit-inner-spin-button {\n\t\t-webkit-appearance: none;\n\t\tmargin: 0;\n\t}\n\n\t/* Firefox */\n\tinput[type='number'] {\n\t\t-moz-appearance: textfield;\n\t}\n`;\n\nexport const InputContainer = styled.div`\n\twidth: 100%;\n\tmargin-top: 0.5rem;\n\tmargin-bottom: 0.2rem;\n`;\n\nexport const Text = styled(Typography)`\n\t&&& {\n\t\ttext-align: left;\n\t}\n`;\n\nexport const Container = styled.div`\n\tpadding-left: 1rem;\n\tpadding-right: 1rem;\n`;\n","import { Input } from 'antd';\nimport getFilters from 'api/trace/getFilters';\nimport { AxiosError } from 'axios';\nimport { useNotifications } from 'hooks/useNotifications';\nimport { ChangeEvent, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { getFilter, updateURL } from 'store/actions/trace/util';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport { UPDATE_ALL_FILTERS } from 'types/actions/trace';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceReducer } from 'types/reducer/trace';\n\nconst { Search } = Input;\n\nfunction TraceID(): JSX.Element {\n\tconst {\n\t\tselectedFilter,\n\t\tfilterToFetchData,\n\t\tspansAggregate,\n\t\tselectedTags,\n\t\tuserSelectedFilter,\n\t\tisFilterExclude,\n\t\tspanKind,\n\t} = useSelector<AppState, TraceReducer>((state) => state.traces);\n\tconst dispatch = useDispatch<Dispatch<AppActions>>();\n\tconst globalTime = useSelector<AppState, GlobalReducer>(\n\t\t(state) => state.globalTime,\n\t);\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [userEnteredValue, setUserEnteredValue] = useState<string>('');\n\tconst { notifications } = useNotifications();\n\tuseEffect(() => {\n\t\tsetUserEnteredValue(selectedFilter.get('traceID')?.[0] || '');\n\t}, [selectedFilter]);\n\tconst onSearch = async (value: string): Promise<void> => {\n\t\ttry {\n\t\t\tsetIsLoading(true);\n\t\t\tconst preSelectedFilter = new Map(selectedFilter);\n\t\t\tconst preUserSelected = new Map(userSelectedFilter);\n\n\t\t\tif (value !== '') {\n\t\t\t\tpreUserSelected.set('traceID', [value]);\n\t\t\t\tpreSelectedFilter.set('traceID', [value]);\n\t\t\t} else {\n\t\t\t\tpreUserSelected.delete('traceID');\n\t\t\t\tpreSelectedFilter.delete('traceID');\n\t\t\t}\n\t\t\tconst response = await getFilters({\n\t\t\t\tother: Object.fromEntries(preSelectedFilter),\n\t\t\t\tend: String(globalTime.maxTime),\n\t\t\t\tstart: String(globalTime.minTime),\n\t\t\t\tgetFilters: filterToFetchData,\n\t\t\t\tisFilterExclude,\n\t\t\t\tspanKind,\n\t\t\t});\n\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\tconst preFilter = getFilter(response.payload);\n\t\t\t\tpreFilter.set('traceID', { traceID: value });\n\t\t\t\tpreFilter.forEach((value, key) => {\n\t\t\t\t\tconst values = Object.keys(value);\n\t\t\t\t\tif (key !== 'duration' && values.length) {\n\t\t\t\t\t\tpreUserSelected.set(key, values);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_ALL_FILTERS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tcurrent: spansAggregate.currentPage,\n\t\t\t\t\t\tfilter: preFilter,\n\t\t\t\t\t\tfilterToFetchData,\n\t\t\t\t\t\tselectedFilter: preSelectedFilter,\n\t\t\t\t\t\tselectedTags,\n\t\t\t\t\t\tuserSelected: preUserSelected,\n\t\t\t\t\t\tisFilterExclude,\n\t\t\t\t\t\torder: spansAggregate.order,\n\t\t\t\t\t\tpageSize: spansAggregate.pageSize,\n\t\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t\t\tspanKind,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tupdateURL(\n\t\t\t\t\tpreSelectedFilter,\n\t\t\t\t\tfilterToFetchData,\n\t\t\t\t\tspansAggregate.currentPage,\n\t\t\t\t\tselectedTags,\n\t\t\t\t\tisFilterExclude,\n\t\t\t\t\tuserSelectedFilter,\n\t\t\t\t\tspansAggregate.order,\n\t\t\t\t\tspansAggregate.pageSize,\n\t\t\t\t\tspansAggregate.orderParam,\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as AxiosError).toString() || 'Something went wrong',\n\t\t\t});\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\tconst onChange = (e: ChangeEvent<HTMLInputElement>): void => {\n\t\tsetUserEnteredValue(e.target.value);\n\t};\n\tconst onBlur = (): void => {\n\t\tif (userEnteredValue !== selectedFilter.get('traceID')?.[0]) {\n\t\t\tonSearch(userEnteredValue);\n\t\t}\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<Search\n\t\t\t\tplaceholder=\"Filter by Trace ID\"\n\t\t\t\tonSearch={onSearch}\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginBottom: '5rem',\n\t\t\t\t\tpadding: '0 3%',\n\t\t\t\t}}\n\t\t\t\tloading={isLoading}\n\t\t\t\tvalue={userEnteredValue}\n\t\t\t\tonChange={onChange}\n\t\t\t\tonBlur={onBlur}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default TraceID;\n","/* eslint-disable no-nested-ternary */\nimport { Card } from 'antd';\nimport Spinner from 'components/Spinner';\nimport { useSelector } from 'react-redux';\nimport { AppState } from 'store/reducers';\nimport { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport CommonCheckBox from './CommonCheckBox';\nimport Duration from './Duration';\nimport TraceID from './SearchTraceID';\n\nfunction PanelBody(props: PanelBodyProps): JSX.Element {\n\tconst { type } = props;\n\n\tconst { filterLoading } = useSelector<AppState, TraceReducer>(\n\t\t(state) => state.traces,\n\t);\n\n\tif (filterLoading) {\n\t\treturn (\n\t\t\t<Card bordered={false}>\n\t\t\t\t<Spinner height=\"10vh\" tip=\"Loading..\" />\n\t\t\t</Card>\n\t\t);\n\t}\n\tconst renderBody = (type: TraceFilterEnum): JSX.Element => {\n\t\tswitch (type) {\n\t\t\tcase 'traceID':\n\t\t\t\treturn <TraceID />;\n\t\t\tcase 'duration':\n\t\t\t\treturn <Duration />;\n\t\t\tdefault:\n\t\t\t\treturn <CommonCheckBox name={type} />;\n\t\t}\n\t};\n\treturn <Card bordered={false}>{renderBody(type)}</Card>;\n}\n\ninterface PanelBodyProps {\n\ttype: TraceFilterEnum;\n}\n\nexport default PanelBody;\n","import { DownOutlined, RightOutlined } from '@ant-design/icons';\nimport { Card, Divider, Typography } from 'antd';\nimport getFilters from 'api/trace/getFilters';\nimport { AxiosError } from 'axios';\nimport { useNotifications } from 'hooks/useNotifications';\nimport { MouseEventHandler, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { getFilter, updateURL } from 'store/actions/trace/util';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport { UPDATE_ALL_FILTERS } from 'types/actions/trace';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport {\n\tAllPanelHeading,\n\tTraceFilterEnum,\n\tTraceReducer,\n} from 'types/reducer/trace';\n\nimport {\n\tButtonComponent,\n\tButtonContainer,\n\tContainer,\n\tIconContainer,\n\tTextContainer,\n} from './styles';\n\nconst { Text } = Typography;\n\nfunction PanelHeading(props: PanelHeadingProps): JSX.Element {\n\tconst {\n\t\tfilterLoading,\n\t\tfilterToFetchData,\n\t\tselectedFilter,\n\t\tspansAggregate,\n\t\tselectedTags,\n\t\tfilter,\n\t\tisFilterExclude,\n\t\tuserSelectedFilter,\n\t\tspanKind,\n\t} = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst { name: PanelName, isOpen: IsPanelOpen } = props;\n\n\tconst isDefaultOpen =\n\t\tfilterToFetchData.find((e) => e === PanelName) !== undefined;\n\n\tconst [isLoading, setIsLoading] = useState<boolean>(false);\n\n\tconst global = useSelector<AppState, GlobalReducer>(\n\t\t(state) => state.globalTime,\n\t);\n\n\tconst dispatch = useDispatch<Dispatch<AppActions>>();\n\n\tconst defaultErrorMessage = 'Something went wrong';\n\n\tconst { notifications } = useNotifications();\n\n\t// eslint-disable-next-line sonarjs/cognitive-complexity\n\tconst onExpandHandler: MouseEventHandler<HTMLDivElement> = async (e) => {\n\t\ttry {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\n\t\t\tsetIsLoading(true);\n\t\t\tlet updatedFilterData: TraceReducer['filterToFetchData'] = [];\n\t\t\tconst getprepdatedSelectedFilter = new Map(selectedFilter);\n\t\t\tconst getPreUserSelected = new Map(userSelectedFilter);\n\n\t\t\tupdatedFilterData = [PanelName];\n\n\t\t\tconst response = await getFilters({\n\t\t\t\tend: String(global.maxTime),\n\t\t\t\tstart: String(global.minTime),\n\t\t\t\tgetFilters: updatedFilterData,\n\t\t\t\tother: Object.fromEntries(getprepdatedSelectedFilter),\n\t\t\t\tisFilterExclude,\n\t\t\t\tspanKind,\n\t\t\t});\n\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\tconst updatedFilter = getFilter(response.payload);\n\n\t\t\t\tif (!getPreUserSelected.has(PanelName)) {\n\t\t\t\t\tgetPreUserSelected.set(\n\t\t\t\t\t\tPanelName,\n\t\t\t\t\t\tObject.keys(updatedFilter.get(PanelName) || []),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tupdatedFilterData = [...filterToFetchData, PanelName];\n\t\t\t\tfilter.forEach((value, key) => {\n\t\t\t\t\tif (key !== PanelName) {\n\t\t\t\t\t\tupdatedFilter.set(key, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_ALL_FILTERS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tcurrent: spansAggregate.currentPage,\n\t\t\t\t\t\tfilter: updatedFilter,\n\t\t\t\t\t\tfilterToFetchData: updatedFilterData,\n\t\t\t\t\t\tselectedFilter: getprepdatedSelectedFilter,\n\t\t\t\t\t\tselectedTags,\n\t\t\t\t\t\tuserSelected: getPreUserSelected,\n\t\t\t\t\t\tisFilterExclude,\n\t\t\t\t\t\torder: spansAggregate.order,\n\t\t\t\t\t\tpageSize: spansAggregate.pageSize,\n\t\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t\t\tspanKind,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tupdateURL(\n\t\t\t\t\tgetprepdatedSelectedFilter,\n\t\t\t\t\tupdatedFilterData,\n\t\t\t\t\tspansAggregate.currentPage,\n\t\t\t\t\tselectedTags,\n\t\t\t\t\tisFilterExclude,\n\t\t\t\t\tgetPreUserSelected,\n\t\t\t\t\tspansAggregate.order,\n\t\t\t\t\tspansAggregate.pageSize,\n\t\t\t\t\tspansAggregate.orderParam,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tnotifications.error({\n\t\t\t\t\tmessage: response.error || defaultErrorMessage,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsetIsLoading(false);\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as AxiosError).toString() || defaultErrorMessage,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * @description this function removes the selected filter\n\t */\n\tconst onCloseHandler = (): void => {\n\t\tconst preSelectedFilter = new Map(selectedFilter);\n\t\t// removing the filter from filter to fetch the data\n\t\tconst preFilterToFetchTheData = [\n\t\t\t...filterToFetchData.filter((name) => name !== PanelName),\n\t\t];\n\n\t\t// preSelectedFilter.delete(PanelName);\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_ALL_FILTERS,\n\t\t\tpayload: {\n\t\t\t\tcurrent: spansAggregate.currentPage,\n\t\t\t\tfilter,\n\t\t\t\tfilterToFetchData: preFilterToFetchTheData,\n\t\t\t\tselectedFilter: preSelectedFilter,\n\t\t\t\tselectedTags,\n\t\t\t\tuserSelected: userSelectedFilter,\n\t\t\t\tisFilterExclude,\n\t\t\t\torder: spansAggregate.order,\n\t\t\t\tpageSize: spansAggregate.pageSize,\n\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\tspanKind,\n\t\t\t},\n\t\t});\n\n\t\tupdateURL(\n\t\t\tpreSelectedFilter,\n\t\t\tpreFilterToFetchTheData,\n\t\t\tspansAggregate.currentPage,\n\t\t\tselectedTags,\n\t\t\tisFilterExclude,\n\t\t\tuserSelectedFilter,\n\t\t\tspansAggregate.order,\n\t\t\tspansAggregate.pageSize,\n\t\t\tspansAggregate.orderParam,\n\t\t);\n\t};\n\n\tconst onClearAllHandler = async (): Promise<void> => {\n\t\ttry {\n\t\t\tsetIsLoading(true);\n\t\t\tconst updatedFilter = new Map(selectedFilter);\n\t\t\tconst preUserSelected = new Map(userSelectedFilter);\n\n\t\t\tupdatedFilter.delete(PanelName);\n\t\t\tpreUserSelected.delete(PanelName);\n\n\t\t\tconst postIsFilterExclude = new Map(isFilterExclude);\n\n\t\t\tpostIsFilterExclude.set(PanelName, false);\n\n\t\t\tconst response = await getFilters({\n\t\t\t\tend: String(global.maxTime),\n\t\t\t\tstart: String(global.minTime),\n\t\t\t\tgetFilters: filterToFetchData,\n\t\t\t\tother: Object.fromEntries(updatedFilter),\n\t\t\t\tisFilterExclude: postIsFilterExclude,\n\t\t\t\tspanKind,\n\t\t\t});\n\n\t\t\tif (response.statusCode === 200 && response.payload) {\n\t\t\t\tconst getUpdatedFilter = getFilter(response.payload);\n\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_ALL_FILTERS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tcurrent: spansAggregate.currentPage,\n\t\t\t\t\t\tfilter: getUpdatedFilter,\n\t\t\t\t\t\tfilterToFetchData,\n\t\t\t\t\t\tselectedFilter: updatedFilter,\n\t\t\t\t\t\tselectedTags,\n\t\t\t\t\t\tuserSelected: preUserSelected,\n\t\t\t\t\t\tisFilterExclude: postIsFilterExclude,\n\t\t\t\t\t\torder: spansAggregate.order,\n\t\t\t\t\t\tpageSize: spansAggregate.pageSize,\n\t\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t\t\tspanKind,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tupdateURL(\n\t\t\t\t\tupdatedFilter,\n\t\t\t\t\tfilterToFetchData,\n\t\t\t\t\tspansAggregate.currentPage,\n\t\t\t\t\tselectedTags,\n\t\t\t\t\tpostIsFilterExclude,\n\t\t\t\t\tpreUserSelected,\n\t\t\t\t\tspansAggregate.order,\n\t\t\t\t\tspansAggregate.pageSize,\n\t\t\t\t\tspansAggregate.orderParam,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tnotifications.error({\n\t\t\t\t\tmessage: response.error || 'Something went wrong',\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetIsLoading(false);\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as AxiosError).toString(),\n\t\t\t});\n\t\t\tsetIsLoading(false);\n\t\t}\n\t};\n\n\t// const onSelectAllHandler = async () => {\n\t// \ttry {\n\t// \t\tsetIsLoading(true);\n\t// \t\tconst preFilter = new Map(filter);\n\t// \t\tconst preSelectedFilter = new Map(selectedFilter);\n\n\t// \t\tpreSelectedFilter.set(\n\t// \t\t\tprops.name,\n\t// \t\t\tObject.keys(preFilter.get(props.name) || {}),\n\t// \t\t);\n\n\t// \t\tconst response = await getFilters({\n\t// \t\t\tend: String(global.maxTime),\n\t// \t\t\tstart: String(global.minTime),\n\t// \t\t\tgetFilters: filterToFetchData,\n\t// \t\t\tother: Object.fromEntries(preSelectedFilter),\n\t// \t\t});\n\n\t// \t\tif (response.statusCode === 200 && response.payload) {\n\t// \t\t\tconst getUpatedFilter = getFilter(response.payload);\n\n\t// \t\t\tpreSelectedFilter.set(\n\t// \t\t\t\tprops.name,\n\t// \t\t\t\tObject.keys(getUpatedFilter.get(props.name) || {}),\n\t// \t\t\t);\n\n\t// \t\t\tdispatch({\n\t// \t\t\t\ttype: UPDATE_ALL_FILTERS,\n\t// \t\t\t\tpayload: {\n\t// \t\t\t\t\tcurrent: spansAggregate.currentPage,\n\t// \t\t\t\t\tfilter: preFilter,\n\t// \t\t\t\t\tfilterToFetchData,\n\t// \t\t\t\t\tselectedFilter: preSelectedFilter,\n\t// \t\t\t\t\tselectedTags,\n\t// \t\t\t\t},\n\t// \t\t\t});\n\n\t// \t\t\tupdateURL(\n\t// \t\t\t\tpreSelectedFilter,\n\t// \t\t\t\tfilterToFetchData,\n\t// \t\t\t\tspansAggregate.currentPage,\n\t// \t\t\t\tselectedTags,\n\t// \t\t\t\tpreFilter,\n\t// \t\t\t);\n\t// \t\t}\n\t// \t\tsetIsLoading(false);\n\t// \t} catch (error) {\n\t// \t\tsetIsLoading(false);\n\n\t// \t\tnotification.error({\n\t// \t\t\tmessage: (error as AxiosError).toString(),\n\t// \t\t});\n\t// \t}\n\t// };\n\n\treturn (\n\t\t<>\n\t\t\t{PanelName !== 'duration' && <Divider plain style={{ margin: 0 }} />}\n\n\t\t\t<Card bordered={false}>\n\t\t\t\t<Container\n\t\t\t\t\tdisabled={filterLoading || isLoading}\n\t\t\t\t\taria-disabled={filterLoading || isLoading}\n\t\t\t\t\taria-expanded={IsPanelOpen}\n\t\t\t\t>\n\t\t\t\t\t<TextContainer onClick={isDefaultOpen ? onCloseHandler : onExpandHandler}>\n\t\t\t\t\t\t<IconContainer>\n\t\t\t\t\t\t\t{!IsPanelOpen ? <RightOutlined /> : <DownOutlined />}\n\t\t\t\t\t\t</IconContainer>\n\n\t\t\t\t\t\t<Text style={{ textTransform: 'capitalize' }} ellipsis>\n\t\t\t\t\t\t\t{AllPanelHeading.find((e) => e.key === PanelName)?.displayValue || ''}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</TextContainer>\n\n\t\t\t\t\t{PanelName !== 'duration' && (\n\t\t\t\t\t\t<ButtonContainer>\n\t\t\t\t\t\t\t{/* <ButtonComponent\n\t\t\t\t\t\t\t\taria-disabled={isLoading || filterLoading}\n\t\t\t\t\t\t\t\tdisabled={isLoading || filterLoading}\n\t\t\t\t\t\t\t\tonClick={onSelectAllHandler}\n\t\t\t\t\t\t\t\ttype=\"link\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSelect All\n\t\t\t\t\t\t\t</ButtonComponent> */}\n\n\t\t\t\t\t\t\t<ButtonComponent\n\t\t\t\t\t\t\t\taria-disabled={isLoading || filterLoading}\n\t\t\t\t\t\t\t\tdisabled={isLoading || filterLoading}\n\t\t\t\t\t\t\t\tonClick={onClearAllHandler}\n\t\t\t\t\t\t\t\ttype=\"link\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tClear All\n\t\t\t\t\t\t\t</ButtonComponent>\n\t\t\t\t\t\t</ButtonContainer>\n\t\t\t\t\t)}\n\t\t\t\t</Container>\n\t\t\t</Card>\n\t\t</>\n\t);\n}\n\ninterface PanelHeadingProps {\n\tname: TraceFilterEnum;\n\tisOpen: boolean;\n}\n\nexport default PanelHeading;\n","import { Button } from 'antd';\nimport { StyledCSS } from 'container/GantChart/Trace/styles';\nimport styled, { css } from 'styled-components';\n\ninterface Props {\n\tdisabled: boolean;\n}\n\nexport const Container = styled.div<Props>`\n\t&&& {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding-left: 0.5rem;\n\t\tmin-height: 5vh;\n\n\t\tcursor: ${({ disabled }): string => (disabled ? 'not-allowed' : '')};\n\n\t\t${({ disabled }): StyledCSS =>\n\t\t\tdisabled &&\n\t\t\tcss`\n\t\t\t\topacity: 0.5;\n\t\t\t`}\n\t}\n`;\n\nexport const IconContainer = styled.div`\n\t&&& {\n\t\tmargin-right: 0.5rem;\n\t}\n`;\n\nexport const TextContainer = styled.div`\n\t&&& {\n\t\tdisplay: flex;\n\t\tcursor: pointer;\n\t}\n`;\n\nexport const ButtonComponent = styled(Button)`\n\t&&& {\n\t\tfont-size: 0.75rem;\n\t}\n`;\n\nexport const ButtonContainer = styled.div`\n\t&&& {\n\t\tdisplay: flex;\n\t}\n`;\n","import { useSelector } from 'react-redux';\nimport { AppState } from 'store/reducers';\nimport { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport PanelBody from './PanelBody';\nimport PanelHeading from './PanelHeading';\n\nfunction Panel(props: PanelProps): JSX.Element {\n\tconst traces = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst { name } = props;\n\n\tconst isDefaultOpen =\n\t\ttraces.filterToFetchData.find((e) => e === name) !== undefined;\n\n\treturn (\n\t\t<>\n\t\t\t<PanelHeading name={name} isOpen={isDefaultOpen} />\n\n\t\t\t{isDefaultOpen && <PanelBody type={name} />}\n\t\t</>\n\t);\n}\n\ninterface PanelProps {\n\tname: TraceFilterEnum;\n}\n\nexport default Panel;\n","import { TraceFilterEnum } from 'types/reducer/trace';\n\nimport Panel from './Panel';\n\nexport const AllTraceFilterEnum: TraceFilterEnum[] = [\n\t'duration',\n\t'status',\n\t'serviceName',\n\t'operation',\n\t'rpcMethod',\n\t'responseStatusCode',\n\t'httpHost',\n\t'httpMethod',\n\t'httpRoute',\n\t'httpUrl',\n\t'traceID',\n];\n\nfunction Filters(): JSX.Element {\n\treturn (\n\t\t<>\n\t\t\t{AllTraceFilterEnum.map((panelName) => (\n\t\t\t\t<Panel key={panelName} name={panelName} />\n\t\t\t))}\n\t\t</>\n\t);\n}\n\nexport default Filters;\n","import { ChartData, ChartDatasetProperties } from 'chart.js';\nimport dayjs from 'dayjs';\nimport { colors } from 'lib/getRandomColor';\nimport { keys } from 'lodash-es';\nimport { TraceReducer } from 'types/reducer/trace';\n\nfunction transposeArray(array: number[][], arrayLength: number): number[][] {\n\tconst newArray: number[][] = [];\n\tfor (let i = 0; i < array.length; i += 1) {\n\t\tnewArray.push([]);\n\t}\n\n\tfor (let i = 0; i < array.length; i += 1) {\n\t\tfor (let j = 0; j < arrayLength; j += 1) {\n\t\t\tnewArray[j]?.push(array[i][j]);\n\t\t}\n\t}\n\n\treturn newArray;\n}\n\nexport const getChartData = (\n\tdata: TraceReducer['spansGraph']['payload'],\n): ChartData<'line'> => {\n\tconst allDataPoints = data.items;\n\n\tconst chartDataset: ChartDatasetProperties<'line', number[]> = {\n\t\tdata: [],\n\t\ttype: 'line',\n\t};\n\tconst chartLabels: ChartData<'line'>['labels'] = [];\n\n\tObject.keys(allDataPoints ?? {}).forEach((timestamp) => {\n\t\tconst key = allDataPoints[timestamp];\n\t\tif (key.value) {\n\t\t\tchartDataset.data.push(key.value);\n\t\t\tconst date = dayjs(key.timestamp / 1000000);\n\t\t\tchartLabels.push(date.toDate().getTime());\n\t\t}\n\t});\n\n\treturn {\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\t...chartDataset,\n\t\t\t\tborderWidth: 1.5,\n\t\t\t\tspanGaps: true,\n\t\t\t\tborderColor: colors[0] || 'red',\n\t\t\t\tshowLine: true,\n\t\t\t\tpointRadius: 0,\n\t\t\t},\n\t\t],\n\t\tlabels: chartLabels,\n\t};\n};\n\nexport const getChartDataforGroupBy = (\n\tprops: TraceReducer['spansGraph']['payload'],\n): ChartData => {\n\tconst { items } = props;\n\n\tconst chartData: ChartData = {\n\t\tdatasets: [],\n\t\tlabels: [],\n\t};\n\n\tlet max = 0;\n\n\tconst allGroupBy = Object.keys(items).map((e) => items[e].groupBy);\n\n\tkeys(allGroupBy).forEach((e: string): void => {\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tconst { length } = keys(allGroupBy[e]);\n\n\t\tif (length >= max) {\n\t\t\tmax = length;\n\t\t}\n\t});\n\n\tconst numberOfGraphs = max;\n\n\tconst spansGraph: number[][] = [];\n\n\tconst names: string[] = [];\n\n\t// number of data points\n\tObject.keys(items).forEach((item) => {\n\t\tconst spanData = items[item];\n\t\tconst date = dayjs(Number(item) / 1000000)\n\t\t\t.toDate()\n\t\t\t.getTime();\n\n\t\tchartData.labels?.push(date);\n\n\t\tconst { groupBy } = spanData;\n\t\tconst preData: number[] = [];\n\n\t\tif (groupBy) {\n\t\t\tObject.keys(groupBy).forEach((key) => {\n\t\t\t\tconst value = groupBy[key];\n\t\t\t\tpreData.push(value);\n\t\t\t\tnames.push(key);\n\t\t\t});\n\n\t\t\tspansGraph.push(preData);\n\t\t}\n\t});\n\n\tconst updatedName = [...new Set(names)];\n\n\ttransposeArray(spansGraph, numberOfGraphs).forEach((values, index) => {\n\t\tchartData.datasets.push({\n\t\t\tdata: values.map((e) => e || 0),\n\t\t\tborderWidth: 1.5,\n\t\t\tspanGaps: true,\n\t\t\tborderColor: colors[index] || 'red',\n\t\t\tshowLine: true,\n\t\t\tpointRadius: 0,\n\t\t\tlabel: updatedName[index],\n\t\t});\n\t});\n\n\treturn chartData;\n};\n","import { Typography } from 'antd';\nimport Graph from 'components/Graph';\nimport Spinner from 'components/Spinner';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useMeasure } from 'react-use';\nimport { AppState } from 'store/reducers';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport { getChartData, getChartDataforGroupBy } from './config';\nimport { Container } from './styles';\n\nfunction TraceGraph(): JSX.Element {\n\tconst [ref, { width }] = useMeasure();\n\n\tconst { spansGraph, selectedGroupBy, yAxisUnit } = useSelector<\n\t\tAppState,\n\t\tTraceReducer\n\t>((state) => state.traces);\n\n\tconst { loading, error, errorMessage, payload } = spansGraph;\n\n\tconst ChartData = useMemo(\n\t\t() =>\n\t\t\tselectedGroupBy.length === 0 || selectedGroupBy === 'none'\n\t\t\t\t? getChartData(payload)\n\t\t\t\t: getChartDataforGroupBy(payload),\n\t\t[payload, selectedGroupBy],\n\t);\n\n\tif (error) {\n\t\treturn (\n\t\t\t<Container center>\n\t\t\t\t<Typography>{errorMessage || 'Something went wrong'}</Typography>\n\t\t\t</Container>\n\t\t);\n\t}\n\n\tif (loading) {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Spinner height=\"20vh\" size=\"small\" tip=\"Loading...\" />\n\t\t\t</Container>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Container ref={ref as never}>\n\t\t\t<Graph\n\t\t\t\tanimate={false}\n\t\t\t\tdata={ChartData}\n\t\t\t\tname=\"traceGraph\"\n\t\t\t\ttype=\"line\"\n\t\t\t\tyAxisUnit={yAxisUnit}\n\t\t\t\tforceReRender={width}\n\t\t\t/>\n\t\t</Container>\n\t);\n}\n\nexport default TraceGraph;\n","import { StyledCSS } from 'container/GantChart/Trace/styles';\nimport { RefObject } from 'react';\nimport styled, { css } from 'styled-components';\n\ninterface Props {\n\tcenter?: boolean;\n\tref?: RefObject<HTMLDivElement> | null; // The ref type provided by react-use is incorrect -> https://github.com/streamich/react-use/issues/1264 Open Issue\n}\n\nexport const Container = styled.div<Props>`\n\theight: 25vh !important;\n\tmargin-top: 1rem;\n\tmargin-bottom: 1rem;\n\twidth: 100% !important;\n\n\t${({ center }): StyledCSS =>\n\t\tcenter &&\n\t\tcss`\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t`}\n`;\n","import { AutoComplete, Input } from 'antd';\nimport getTagFilters from 'api/trace/getTagFilter';\nimport {\n\tDispatch,\n\tSetStateAction,\n\tuseCallback,\n\tuseMemo,\n\tuseState,\n} from 'react';\nimport { useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { AppState } from 'store/reducers';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport { getTagKeyOptions, onTagKeySelect } from './utils';\n\nfunction TagsKey(props: TagsKeysProps): JSX.Element {\n\tconst globalTime = useSelector<AppState, GlobalReducer>(\n\t\t(state) => state.globalTime,\n\t);\n\n\tconst { index, setLocalSelectedTags, tag } = props;\n\n\tconst [selectedKey, setSelectedKey] = useState<string>(tag.Key || '');\n\n\tconst traces = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst { isLoading, data } = useQuery(\n\t\t[\n\t\t\t'getTagKeys',\n\t\t\tglobalTime.minTime,\n\t\t\tglobalTime.maxTime,\n\t\t\ttraces.selectedFilter,\n\t\t\ttraces.isFilterExclude,\n\t\t\ttraces.spanKind,\n\t\t],\n\t\t{\n\t\t\tqueryFn: () =>\n\t\t\t\tgetTagFilters({\n\t\t\t\t\tstart: globalTime.minTime,\n\t\t\t\t\tend: globalTime.maxTime,\n\t\t\t\t\tother: Object.fromEntries(traces.selectedFilter),\n\t\t\t\t\tisFilterExclude: traces.isFilterExclude,\n\t\t\t\t\tspanKind: traces.spanKind,\n\t\t\t\t}),\n\t\t\tcacheTime: 120000,\n\t\t},\n\t);\n\n\tconst options = useMemo(() => getTagKeyOptions(data?.payload), [data]);\n\n\tconst onSelectHandler = useCallback(\n\t\t(value: unknown) =>\n\t\t\tonTagKeySelect(\n\t\t\t\tvalue,\n\t\t\t\toptions,\n\t\t\t\tsetSelectedKey,\n\t\t\t\tsetLocalSelectedTags,\n\t\t\t\tindex,\n\t\t\t\ttag,\n\t\t\t),\n\t\t[index, options, setLocalSelectedTags, tag],\n\t);\n\n\treturn (\n\t\t<AutoComplete\n\t\t\tstyle={{ width: '100%' }}\n\t\t\tvalue={selectedKey}\n\t\t\tallowClear\n\t\t\tdisabled={isLoading}\n\t\t\tnotFoundContent=\"No tags available\"\n\t\t\tshowSearch\n\t\t\toptions={options?.map((e) => ({\n\t\t\t\tlabel: e.label?.toString(),\n\t\t\t\tvalue: e.value,\n\t\t\t}))}\n\t\t\tfilterOption={(inputValue, option): boolean =>\n\t\t\t\toption?.label?.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n\t\t\t}\n\t\t\tonChange={(e): void => setSelectedKey(e)}\n\t\t\tonSelect={onSelectHandler}\n\t\t>\n\t\t\t<Input placeholder=\"Please select\" />\n\t\t</AutoComplete>\n\t);\n}\n\ninterface TagsKeysProps {\n\tindex: number;\n\ttag: FlatArray<TraceReducer['selectedTags'], 1>;\n\tsetLocalSelectedTags: Dispatch<SetStateAction<TraceReducer['selectedTags']>>;\n}\n\nexport default TagsKey;\n","import { Select } from 'antd';\nimport { BaseOptionType } from 'antd/es/select';\nimport getTagValue from 'api/trace/getTagValue';\nimport {\n\tDispatch,\n\tmemo,\n\tSetStateAction,\n\tuseCallback,\n\tuseMemo,\n\tuseState,\n} from 'react';\nimport { useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { AppState } from 'store/reducers';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport { SelectComponent } from './styles';\nimport {\n\tdisableTagValue,\n\textractTagKey,\n\textractTagType,\n\tgetInitialLocalValue,\n\tgetTagValueOptions,\n\tonTagValueChange,\n\tselectOptions,\n\tseparateTagValues,\n\tTagValueTypes,\n} from './utils';\n\nfunction TagValue(props: TagValueProps): JSX.Element {\n\tconst { tag, setLocalSelectedTags, index, tagKey } = props;\n\tconst {\n\t\tKey: selectedKey,\n\t\tOperator: selectedOperator,\n\t\tStringValues: selectedStringValues,\n\t\tNumberValues: selectedNumberValues,\n\t\tBoolValues: selectedBoolValues,\n\t} = tag;\n\n\tconst traces = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst [localTagValue, setLocalTagValue] = useState<TagValueTypes[]>(\n\t\tgetInitialLocalValue(\n\t\t\tselectedNumberValues,\n\t\t\tselectedBoolValues,\n\t\t\tselectedStringValues,\n\t\t),\n\t);\n\n\tconst globalReducer = useSelector<AppState, GlobalReducer>(\n\t\t(state) => state.globalTime,\n\t);\n\n\tconst tagType = useMemo(() => extractTagType(tagKey), [tagKey]);\n\n\tconst { isLoading, data } = useQuery(\n\t\t[\n\t\t\t'tagKey',\n\t\t\tglobalReducer.minTime,\n\t\t\tglobalReducer.maxTime,\n\t\t\ttagKey,\n\t\t\ttagType,\n\t\t\ttraces.spanKind,\n\t\t],\n\t\t{\n\t\t\tqueryFn: () =>\n\t\t\t\tgetTagValue({\n\t\t\t\t\tend: globalReducer.maxTime,\n\t\t\t\t\tstart: globalReducer.minTime,\n\t\t\t\t\ttagKey: {\n\t\t\t\t\t\tKey: extractTagKey(tagKey),\n\t\t\t\t\t\tType: tagType,\n\t\t\t\t\t},\n\t\t\t\t\tspanKind: traces.spanKind,\n\t\t\t\t}),\n\t\t},\n\t);\n\n\tconst tagValueDisabled = useMemo(\n\t\t() =>\n\t\t\tdisableTagValue(\n\t\t\t\tselectedOperator,\n\t\t\t\tsetLocalTagValue,\n\t\t\t\tselectedKey,\n\t\t\t\tsetLocalSelectedTags,\n\t\t\t\tindex,\n\t\t\t),\n\t\t[index, selectedKey, selectedOperator, setLocalSelectedTags],\n\t);\n\n\tconst onChangeHandler = useCallback(\n\t\t(value: unknown) => {\n\t\t\tconst updatedValues = onTagValueChange(value);\n\t\t\tsetLocalTagValue(updatedValues);\n\t\t\tconst { boolValues, numberValues, stringValues } = separateTagValues(\n\t\t\t\tupdatedValues,\n\t\t\t\tselectedKey,\n\t\t\t);\n\n\t\t\tsetLocalSelectedTags((tags) => [\n\t\t\t\t...tags.slice(0, index),\n\t\t\t\t{\n\t\t\t\t\t...tags[index],\n\t\t\t\t\tBoolValues: boolValues,\n\t\t\t\t\tNumberValues: numberValues,\n\t\t\t\t\tStringValues: stringValues,\n\t\t\t\t},\n\t\t\t\t...tags.slice(index + 1),\n\t\t\t]);\n\t\t},\n\t\t[index, setLocalSelectedTags, selectedKey],\n\t);\n\n\tconst getFilterOptions = useCallback(\n\t\t(inputValue: string, option?: BaseOptionType): boolean => {\n\t\t\tif (typeof option?.label === 'string') {\n\t\t\t\treturn option?.label.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\t[],\n\t);\n\n\treturn (\n\t\t<SelectComponent\n\t\t\tloading={isLoading}\n\t\t\toptions={getTagValueOptions(data?.payload, tagType)}\n\t\t\tmode=\"tags\"\n\t\t\tallowClear\n\t\t\tshowSearch\n\t\t\tfilterOption={getFilterOptions}\n\t\t\tdisabled={isLoading || tagValueDisabled}\n\t\t\tvalue={localTagValue}\n\t\t\tonChange={onChangeHandler}\n\t\t>\n\t\t\t{selectOptions(data?.payload, tagType)?.map((suggestion) => (\n\t\t\t\t<Select.Option key={suggestion.toString()} value={suggestion}>\n\t\t\t\t\t{suggestion}\n\t\t\t\t</Select.Option>\n\t\t\t))}\n\t\t</SelectComponent>\n\t);\n}\n\ninterface TagValueProps {\n\tindex: number;\n\ttag: FlatArray<TraceReducer['selectedTags'], 1>;\n\tsetLocalSelectedTags: Dispatch<SetStateAction<TraceReducer['selectedTags']>>;\n\ttagKey: string;\n}\n\nexport default memo(TagValue);\n","import { CloseOutlined } from '@ant-design/icons';\nimport { Select } from 'antd';\nimport { Dispatch, SetStateAction } from 'react';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport { Container, IconContainer, SelectComponent } from './styles';\nimport TagsKey from './TagKey';\nimport TagValue from './TagValue';\nimport { mapOperators } from './utils';\n\nconst { Option } = Select;\n\ntype Tags = FlatArray<TraceReducer['selectedTags'], 1>['Operator'];\nconst StringBoolNumber = ['string', 'number', 'bool'];\nconst Number = ['number'];\nconst String = ['string'];\nexport interface AllMenuProps {\n\tkey: Tags | '';\n\tvalue: string;\n\tsupportedTypes: string[];\n}\n\nexport const AllMenu: AllMenuProps[] = [\n\t{\n\t\tkey: 'Equals',\n\t\tvalue: 'EQUALS',\n\t\tsupportedTypes: StringBoolNumber,\n\t},\n\t{\n\t\tkey: 'NotEquals',\n\t\tvalue: 'NOT EQUALS',\n\t\tsupportedTypes: StringBoolNumber,\n\t},\n\t{\n\t\tkey: 'In',\n\t\tvalue: 'IN',\n\t\tsupportedTypes: String,\n\t},\n\t{\n\t\tkey: 'NotIn',\n\t\tvalue: 'NOT IN',\n\t\tsupportedTypes: String,\n\t},\n\t{\n\t\tkey: 'Exists',\n\t\tvalue: 'EXISTS',\n\t\tsupportedTypes: StringBoolNumber,\n\t},\n\t{\n\t\tkey: 'NotExists',\n\t\tvalue: 'NOT EXISTS',\n\t\tsupportedTypes: StringBoolNumber,\n\t},\n\t{\n\t\tkey: 'GreaterThan',\n\t\tvalue: 'GREATER THAN',\n\t\tsupportedTypes: Number,\n\t},\n\t{\n\t\tkey: 'LessThan',\n\t\tvalue: 'LESS THAN',\n\t\tsupportedTypes: Number,\n\t},\n\t{\n\t\tkey: 'GreaterThanEquals',\n\t\tvalue: 'GREATER THAN OR EQUALS',\n\t\tsupportedTypes: Number,\n\t},\n\t{\n\t\tkey: 'LessThanEquals',\n\t\tvalue: 'LESS THAN OR EQUALS',\n\t\tsupportedTypes: Number,\n\t},\n\t{\n\t\tkey: 'StartsWith',\n\t\tvalue: 'STARTS WITH',\n\t\tsupportedTypes: String,\n\t},\n\t{\n\t\tkey: 'NotStartsWith',\n\t\tvalue: 'NOT STARTS WITH',\n\t\tsupportedTypes: String,\n\t},\n\t{\n\t\tkey: 'Contains',\n\t\tvalue: 'CONTAINS',\n\t\tsupportedTypes: String,\n\t},\n\t{\n\t\tkey: 'NotContains',\n\t\tvalue: 'NOT CONTAINS',\n\t\tsupportedTypes: String,\n\t},\n];\n\nfunction SingleTags(props: AllTagsProps): JSX.Element {\n\tconst {\n\t\ttag,\n\t\tonCloseHandler,\n\t\tsetLocalSelectedTags,\n\t\tindex,\n\t\tlocalSelectedTags,\n\t} = props;\n\tconst {\n\t\tKey: selectedKey,\n\t\tOperator: selectedOperator,\n\t\tStringValues: selectedStringValues,\n\t\tNumberValues: selectedNumberValues,\n\t\tBoolValues: selectedBoolValues,\n\t} = tag;\n\n\tconst onDeleteTagHandler = (index: number): void => {\n\t\tonCloseHandler(index);\n\t};\n\n\tconst onChangeOperatorHandler = (key: unknown): void => {\n\t\tif (typeof key === 'string') {\n\t\t\tsetLocalSelectedTags([\n\t\t\t\t...localSelectedTags.slice(0, index),\n\t\t\t\t{\n\t\t\t\t\tKey: selectedKey,\n\t\t\t\t\tStringValues: selectedStringValues,\n\t\t\t\t\tNumberValues: selectedNumberValues,\n\t\t\t\t\tBoolValues: selectedBoolValues,\n\t\t\t\t\tOperator: key as Tags,\n\t\t\t\t},\n\t\t\t\t...localSelectedTags.slice(index + 1, localSelectedTags.length),\n\t\t\t]);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<TagsKey\n\t\t\t\tindex={index}\n\t\t\t\ttag={tag}\n\t\t\t\tsetLocalSelectedTags={setLocalSelectedTags}\n\t\t\t/>\n\t\t\t<SelectComponent\n\t\t\t\tonChange={onChangeOperatorHandler}\n\t\t\t\tvalue={AllMenu.find((e) => e.key === selectedOperator)?.value || ''}\n\t\t\t>\n\t\t\t\t{\n\t\t\t\t\t// filter out the operator that does not include supported type of the selected key\n\t\t\t\t\tmapOperators(selectedKey).map((e) => (\n\t\t\t\t\t\t<Option key={e.value} value={e.key}>\n\t\t\t\t\t\t\t{e.value}\n\t\t\t\t\t\t</Option>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</SelectComponent>\n\n\t\t\t{selectedKey ? (\n\t\t\t\t<TagValue\n\t\t\t\t\tindex={index}\n\t\t\t\t\ttag={tag}\n\t\t\t\t\tsetLocalSelectedTags={setLocalSelectedTags}\n\t\t\t\t\ttagKey={selectedKey}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<SelectComponent />\n\t\t\t)}\n\n\t\t\t<IconContainer role=\"button\" onClick={(): void => onDeleteTagHandler(index)}>\n\t\t\t\t<CloseOutlined />\n\t\t\t</IconContainer>\n\t\t</Container>\n\t);\n}\n\ninterface AllTagsProps {\n\tonCloseHandler: (index: number) => void;\n\tindex: number;\n\ttag: FlatArray<TraceReducer['selectedTags'], 1>;\n\tsetLocalSelectedTags: Dispatch<SetStateAction<TraceReducer['selectedTags']>>;\n\tlocalSelectedTags: TraceReducer['selectedTags'];\n}\n\nexport interface Value {\n\tkey: string;\n\tlabel: string;\n\tvalue: string;\n}\n\nexport default SingleTags;\n","import { Select, Space } from 'antd';\nimport styled from 'styled-components';\n\nexport const SpaceComponent = styled(Space)`\n\t&&& {\n\t\twidth: 100%;\n\t}\n`;\n\nexport const Container = styled(Space)`\n\t&&& {\n\t\tdisplay: flex;\n\t\tmargin-top: 1rem;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.ant-space-item:not(:last-child, :nth-child(2)) {\n\t\twidth: 100%;\n\t}\n\t.ant-space-item:nth-child(2) {\n\t\twidth: 50%;\n\t}\n`;\n\nexport const IconContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tcursor: pointer;\n\n\tmargin-left: 1.125rem;\n`;\n\nexport const SelectComponent = styled(Select)`\n\t&&& {\n\t\twidth: 100%;\n\t}\n`;\n","import { AutoCompleteProps } from 'antd';\nimport { DefaultOptionType } from 'antd/es/select';\nimport { Dispatch, SetStateAction } from 'react';\nimport { PayloadProps as TagKeyPayload } from 'types/api/trace/getTagFilters';\nimport { PayloadProps as TagValuePayload } from 'types/api/trace/getTagValue';\nimport { OperatorValues, Tags } from 'types/reducer/trace';\n\nimport { AllMenu, AllMenuProps } from '.';\n\nexport type TagValueTypes = string | number | boolean;\n/**\n * @description extract tag filters from payload\n */\nexport const extractTagFilters = (\n\tpayload: TagKeyPayload,\n): DefaultOptionType[] => {\n\tconst tagFilters: string[] = [];\n\tpayload.stringTagKeys.forEach((element) => {\n\t\ttagFilters.push(`${element}.(string)`);\n\t});\n\tpayload.numberTagKeys.forEach((element) => {\n\t\ttagFilters.push(`${element}.(number)`);\n\t});\n\tpayload.boolTagKeys.forEach((element) => {\n\t\ttagFilters.push(`${element}.(bool)`);\n\t});\n\treturn tagFilters.map((e) => ({\n\t\tvalue: e,\n\t\tlabel: e,\n\t}));\n};\n\nexport const extractTagType = (tagKey: string): string => {\n\tif (tagKey?.includes('.(string)')) {\n\t\treturn 'string';\n\t}\n\tif (tagKey?.includes('.(number)')) {\n\t\treturn 'number';\n\t}\n\tif (tagKey?.includes('.(bool)')) {\n\t\treturn 'bool';\n\t}\n\treturn 'string';\n};\n\nexport const extractTagKey = (tagKey: string): string => {\n\tconst tag = tagKey.split('.(');\n\tif (tag && tag.length > 0) {\n\t\treturn tag[0];\n\t}\n\treturn '';\n};\n\nexport function onTagValueChange(values: unknown): TagValueTypes[] {\n\tconst stringValues = values as string[];\n\n\tif (!Array.isArray(stringValues) || stringValues.length === 0) {\n\t\treturn [];\n\t}\n\n\treturn values as TagValueTypes[];\n}\n\nexport function separateTagValues(\n\tvalues: TagValueTypes[],\n\tselectedKey: string,\n): { boolValues: boolean[]; numberValues: number[]; stringValues: string[] } {\n\tif (selectedKey.includes('.(bool)')) {\n\t\tconst boolValues = values.filter(\n\t\t\t(value) => typeof value === 'boolean',\n\t\t) as boolean[];\n\n\t\treturn {\n\t\t\tboolValues,\n\t\t\tnumberValues: [],\n\t\t\tstringValues: [],\n\t\t};\n\t}\n\n\tif (selectedKey.includes('.(number)')) {\n\t\tconst numberValues = values\n\t\t\t.filter((value) => typeof value === 'number' || !Number.isNaN(Number(value)))\n\t\t\t.map((value) => Number(value)) as number[];\n\t\treturn {\n\t\t\tboolValues: [],\n\t\t\tnumberValues,\n\t\t\tstringValues: [],\n\t\t};\n\t}\n\n\tconst stringValues = values.filter(\n\t\t(value) =>\n\t\t\ttypeof value === 'string' &&\n\t\t\tvalue !== 'true' &&\n\t\t\tvalue !== 'false' &&\n\t\t\tNumber.isNaN(Number(value)),\n\t) as string[];\n\n\treturn {\n\t\tboolValues: [],\n\t\tnumberValues: [],\n\t\tstringValues,\n\t};\n}\n\nexport function disableTagValue(\n\tselectedOperator: OperatorValues,\n\tsetLocalValue: Dispatch<SetStateAction<TagValueTypes[]>>,\n\tselectedKeys: string,\n\tsetLocalSelectedTags: Dispatch<SetStateAction<Tags[]>>,\n\tindex: number,\n): boolean {\n\tif (selectedOperator === 'Exists' || selectedOperator === 'NotExists') {\n\t\tsetLocalValue([]);\n\t\tsetLocalSelectedTags((tags) => [\n\t\t\t...tags.slice(0, index),\n\t\t\t{\n\t\t\t\tKey: selectedKeys,\n\t\t\t\tOperator: selectedOperator,\n\t\t\t\tStringValues: [],\n\t\t\t\tNumberValues: [],\n\t\t\t\tBoolValues: [],\n\t\t\t},\n\t\t\t...tags.slice(index + 1, tags.length),\n\t\t]);\n\t\treturn true;\n\t}\n\treturn false;\n}\nexport function getInitialLocalValue(\n\tselectedNumberValues: number[],\n\tselectedBoolValues: boolean[],\n\tselectedStringValues: string[],\n): TagValueTypes[] {\n\treturn [\n\t\t...selectedBoolValues,\n\t\t...selectedNumberValues,\n\t\t...selectedStringValues,\n\t];\n}\n\nexport function getTagValueOptions(\n\tpayload: TagValuePayload | null | undefined,\n\ttagType: string,\n): Array<{ label: string; value: TagValueTypes }> | undefined {\n\tif (tagType === 'string') {\n\t\treturn payload?.stringTagValues?.map((e) => ({\n\t\t\tlabel: e,\n\t\t\tvalue: e,\n\t\t}));\n\t}\n\tif (tagType === 'number') {\n\t\treturn payload?.numberTagValues?.map((e) => ({\n\t\t\tlabel: e.toString(),\n\t\t\tvalue: e,\n\t\t}));\n\t}\n\tif (tagType === 'bool') {\n\t\treturn payload?.boolTagValues?.map((e) => ({\n\t\t\tlabel: e.toString(),\n\t\t\tvalue: e,\n\t\t}));\n\t}\n\treturn [];\n}\n\nexport function getTagKeyOptions(\n\tpayload: TagKeyPayload | null | undefined,\n): DefaultOptionType[] {\n\tif (payload === null) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tvalue: '',\n\t\t\t\tlabel: 'No tags available',\n\t\t\t},\n\t\t];\n\t}\n\tif (payload != null) {\n\t\treturn extractTagFilters(payload);\n\t}\n\treturn [];\n}\n\nexport function selectOptions(\n\tpayload: TagValuePayload | null | undefined,\n\ttagType: string,\n): string[] | boolean[] | number[] | undefined {\n\tif (tagType === 'string') {\n\t\treturn payload?.stringTagValues;\n\t}\n\tif (tagType === 'number') {\n\t\treturn payload?.numberTagValues;\n\t}\n\tif (tagType === 'bool') {\n\t\treturn payload?.boolTagValues;\n\t}\n\treturn [];\n}\n\nexport function mapOperators(selectedKey: string): AllMenuProps[] {\n\treturn AllMenu.filter((e) =>\n\t\te?.supportedTypes?.includes(extractTagType(selectedKey)),\n\t);\n}\n\nexport function onTagKeySelect(\n\tvalue: unknown,\n\toptions: AutoCompleteProps['options'],\n\tsetSelectedKey: Dispatch<SetStateAction<string>>,\n\tsetLocalSelectedTags: Dispatch<SetStateAction<Tags[]>>,\n\tindex: number,\n\ttag: Tags,\n): void {\n\tif (\n\t\ttypeof value === 'string' &&\n\t\toptions &&\n\t\toptions.find((option) => option.value === value)\n\t) {\n\t\tsetSelectedKey(value);\n\t\tsetLocalSelectedTags((tags) => [\n\t\t\t...tags.slice(0, index),\n\t\t\t{\n\t\t\t\tKey: value,\n\t\t\t\tOperator: tag.Operator,\n\t\t\t\tStringValues: tag.StringValues,\n\t\t\t\tNumberValues: tag.NumberValues,\n\t\t\t\tBoolValues: tag.BoolValues,\n\t\t\t},\n\t\t\t...tags.slice(index + 1, tags.length),\n\t\t]);\n\t}\n}\n","import { CaretRightFilled, PlusOutlined } from '@ant-design/icons';\nimport { Button, Space, Typography } from 'antd';\nimport { useState } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { UpdateTagIsError } from 'store/actions/trace/updateIsTagsError';\nimport { UpdateTagVisibility } from 'store/actions/trace/updateTagPanelVisiblity';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport { parseTagsToQuery } from '../util';\nimport {\n\tButtonContainer,\n\tContainer,\n\tCurrentTagsContainer,\n\tErrorContainer,\n} from './styles';\nimport Tags from './Tag';\n\nconst { Text } = Typography;\n\nconst { Paragraph } = Typography;\n\nfunction AllTags({\n\tupdateTagIsError,\n\tonChangeHandler,\n\tupdateTagVisibility,\n\tupdateFilters,\n}: AllTagsProps): JSX.Element {\n\tconst traces = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst [localSelectedTags, setLocalSelectedTags] = useState<\n\t\tTraceReducer['selectedTags']\n\t>(traces.selectedTags);\n\n\tconst onTagAddHandler = (): void => {\n\t\tsetLocalSelectedTags((tags) => [\n\t\t\t...tags,\n\t\t\t{\n\t\t\t\tKey: '',\n\t\t\t\tOperator: 'Equals',\n\t\t\t\tStringValues: [],\n\t\t\t\tNumberValues: [],\n\t\t\t\tBoolValues: [],\n\t\t\t},\n\t\t]);\n\t};\n\n\tconst onCloseHandler = (index: number): void => {\n\t\tsetLocalSelectedTags([\n\t\t\t...localSelectedTags.slice(0, index),\n\t\t\t...localSelectedTags.slice(index + 1, localSelectedTags.length),\n\t\t]);\n\t};\n\n\tconst onRunQueryHandler = (): void => {\n\t\tconst parsedQuery = parseTagsToQuery(localSelectedTags);\n\n\t\tif (parsedQuery.isError) {\n\t\t\tupdateTagIsError(true);\n\t\t} else {\n\t\t\tonChangeHandler(parsedQuery.payload);\n\t\t\tupdateFilters(localSelectedTags);\n\t\t\tupdateTagIsError(false);\n\t\t\tupdateTagVisibility(false);\n\t\t}\n\t};\n\n\tconst onResetHandler = (): void => {\n\t\tsetLocalSelectedTags([]);\n\t};\n\n\tif (traces.isTagModalError) {\n\t\treturn (\n\t\t\t<ErrorContainer>\n\t\t\t\t<Paragraph style={{ color: '#E89A3C' }}>\n\t\t\t\t\tUnrecognized query format. Please reset your query by clicking `X` in the\n\t\t\t\t\tsearch bar above.\n\t\t\t\t</Paragraph>\n\n\t\t\t\t<Paragraph style={{ color: '#E89A3C' }}>\n\t\t\t\t\tPlease click on the search bar to get a drop down to select relevant tags\n\t\t\t\t</Paragraph>\n\t\t\t</ErrorContainer>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<Typography>Tags</Typography>\n\n\t\t\t<CurrentTagsContainer>\n\t\t\t\t{localSelectedTags.map((tags, index) => (\n\t\t\t\t\t<Tags\n\t\t\t\t\t\tkey={tags.Key}\n\t\t\t\t\t\ttag={tags}\n\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\tonCloseHandler={(): void => onCloseHandler(index)}\n\t\t\t\t\t\tsetLocalSelectedTags={setLocalSelectedTags}\n\t\t\t\t\t\tlocalSelectedTags={localSelectedTags}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</CurrentTagsContainer>\n\n\t\t\t<Space wrap direction=\"horizontal\">\n\t\t\t\t<Button type=\"primary\" onClick={onTagAddHandler} icon={<PlusOutlined />}>\n\t\t\t\t\tAdd Tags Filter\n\t\t\t\t</Button>\n\n\t\t\t\t<Text ellipsis>\n\t\t\t\t\tResults will include spans with ALL the specified tags ( Rows are `ANDed` )\n\t\t\t\t</Text>\n\t\t\t</Space>\n\n\t\t\t<ButtonContainer>\n\t\t\t\t<Space align=\"start\">\n\t\t\t\t\t<Button onClick={onResetHandler}>Reset</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\tonClick={onRunQueryHandler}\n\t\t\t\t\t\ticon={<CaretRightFilled />}\n\t\t\t\t\t>\n\t\t\t\t\t\tRun Query\n\t\t\t\t\t</Button>\n\t\t\t\t</Space>\n\t\t\t</ButtonContainer>\n\t\t</Container>\n\t);\n}\n\ninterface DispatchProps {\n\tupdateTagIsError: (value: boolean) => void;\n\tupdateTagVisibility: (value: boolean) => void;\n}\n\nconst mapDispatchToProps = (\n\tdispatch: ThunkDispatch<unknown, unknown, AppActions>,\n): DispatchProps => ({\n\tupdateTagIsError: bindActionCreators(UpdateTagIsError, dispatch),\n\tupdateTagVisibility: bindActionCreators(UpdateTagVisibility, dispatch),\n});\n\ninterface AllTagsProps extends DispatchProps {\n\tupdateFilters: (tags: TraceReducer['selectedTags']) => void;\n\tonChangeHandler: (search: string) => void;\n}\n\nexport default connect(null, mapDispatchToProps)(AllTags);\n","import { Card } from 'antd';\nimport styled from 'styled-components';\n\nexport const Container = styled(Card)`\n\tmin-height: 20vh;\n\twidth: 100%;\n\tmin-width: 81.5vw;\n`;\n\nexport const ErrorContainer = styled(Card)`\n\tmin-height: 20vh;\n\twidth: 100%;\n\tz-index: 2;\n\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tflex-direction: column;\n`;\n\nexport const ButtonContainer = styled(Card)`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\talign-items: center;\n\n\tpadding-top: 11px !important;\n\tpadding-bottom: 11px !important;\n\tpadding-right: 38.01px !important;\n\n\tmargin-top: 1rem !important;\n\n\t.ant-card-body {\n\t\tpadding: 0;\n\t}\n`;\n\nexport const CurrentTagsContainer = styled.div`\n\tmargin-bottom: 1rem;\n`;\n","export const contentStyle = { padding: 0 };\n","import { CaretRightFilled } from '@ant-design/icons';\nimport { Popover } from 'antd';\nimport { useEffect, useRef, useState } from 'react';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { UpdateTagIsError } from 'store/actions/trace/updateIsTagsError';\nimport { UpdateTagVisibility } from 'store/actions/trace/updateTagPanelVisiblity';\nimport { updateURL } from 'store/actions/trace/util';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport { UPDATE_ALL_FILTERS } from 'types/actions/trace';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport Tags from './AllTags';\nimport { contentStyle } from './config';\nimport { Container, SearchComponent } from './styles';\nimport { parseQueryToTags, parseTagsToQuery } from './util';\n\nfunction Search({\n\tupdateTagVisibility,\n\tupdateTagIsError,\n}: SearchProps): JSX.Element {\n\tconst traces = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst [value, setValue] = useState<string>('');\n\tconst dispatch = useDispatch<Dispatch<AppActions>>();\n\n\tuseEffect(() => {\n\t\tif (!traces.filterLoading) {\n\t\t\tconst initialTags = parseTagsToQuery(traces.selectedTags);\n\t\t\tif (!initialTags.isError) {\n\t\t\t\tsetValue(initialTags.payload);\n\t\t\t}\n\t\t}\n\t}, [traces.selectedTags, traces.filterLoading]);\n\n\tuseEffect(() => {\n\t\tif (value.length === 0 && traces.isTagModalError) {\n\t\t\tupdateTagIsError(false);\n\t\t}\n\t}, [traces.isTagModalError, value, updateTagIsError]);\n\n\tconst tagRef = useRef<HTMLDivElement>(null);\n\n\tconst onChangeHandler = (search: string): void => {\n\t\tsetValue(search);\n\t};\n\n\tconst setIsTagsModalHandler = (value: boolean): void => {\n\t\tupdateTagVisibility(value);\n\t};\n\n\tconst updateFilters = async (\n\t\tselectedTags: TraceReducer['selectedTags'],\n\t): Promise<void> => {\n\t\tdispatch({\n\t\t\ttype: UPDATE_ALL_FILTERS,\n\t\t\tpayload: {\n\t\t\t\tselectedTags,\n\t\t\t\tcurrent: traces.spansAggregate.currentPage,\n\t\t\t\tfilter: traces.filter,\n\t\t\t\tfilterToFetchData: traces.filterToFetchData,\n\t\t\t\tselectedFilter: traces.selectedFilter,\n\t\t\t\tuserSelected: traces.userSelectedFilter,\n\t\t\t\tisFilterExclude: traces.isFilterExclude,\n\t\t\t\torder: traces.spansAggregate.order,\n\t\t\t\tpageSize: traces.spansAggregate.pageSize,\n\t\t\t\torderParam: traces.spansAggregate.orderParam,\n\t\t\t\tspanKind: traces.spanKind,\n\t\t\t},\n\t\t});\n\n\t\tupdateURL(\n\t\t\ttraces.selectedFilter,\n\t\t\ttraces.filterToFetchData,\n\t\t\ttraces.spansAggregate.currentPage,\n\t\t\tselectedTags,\n\t\t\ttraces.isFilterExclude,\n\t\t\ttraces.userSelectedFilter,\n\t\t\ttraces.spansAggregate.order,\n\t\t\ttraces.spansAggregate.pageSize,\n\t\t\ttraces.spansAggregate.orderParam,\n\t\t);\n\t};\n\n\treturn (\n\t\t<Container ref={tagRef}>\n\t\t\t<Popover\n\t\t\t\tplacement=\"bottomLeft\"\n\t\t\t\tdestroyTooltipOnHide\n\t\t\t\topen={traces.isTagModalOpen}\n\t\t\t\ttrigger=\"click\"\n\t\t\t\tonOpenChange={setIsTagsModalHandler}\n\t\t\t\tshowArrow={false}\n\t\t\t\toverlayInnerStyle={contentStyle}\n\t\t\t\tcontent={\n\t\t\t\t\t<Tags updateFilters={updateFilters} onChangeHandler={onChangeHandler} />\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<SearchComponent\n\t\t\t\t\tonChange={(event): void => onChangeHandler(event.target.value)}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tallowClear\n\t\t\t\t\tdisabled={traces.filterLoading}\n\t\t\t\t\tplaceholder=\"Click to filter by tags\"\n\t\t\t\t\ttype=\"search\"\n\t\t\t\t\tenterButton={<CaretRightFilled />}\n\t\t\t\t\tonSearch={(string): void => {\n\t\t\t\t\t\tif (string.length === 0) {\n\t\t\t\t\t\t\tupdateTagVisibility(false);\n\t\t\t\t\t\t\tupdateFilters([]);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { isError, payload } = parseQueryToTags(string);\n\n\t\t\t\t\t\tif (isError) {\n\t\t\t\t\t\t\tupdateTagIsError(true);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdateTagIsError(false);\n\t\t\t\t\t\t\tupdateTagVisibility(false);\n\t\t\t\t\t\t\tupdateFilters(payload);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Popover>\n\t\t</Container>\n\t);\n}\n\ninterface DispatchProps {\n\tupdateTagVisibility: (value: boolean) => void;\n\tupdateTagIsError: (value: boolean) => void;\n}\n\nconst mapDispatchToProps = (\n\tdispatch: ThunkDispatch<unknown, unknown, AppActions>,\n): DispatchProps => ({\n\tupdateTagVisibility: bindActionCreators(UpdateTagVisibility, dispatch),\n\tupdateTagIsError: bindActionCreators(UpdateTagIsError, dispatch),\n});\n\ntype SearchProps = DispatchProps;\n\nexport default connect(null, mapDispatchToProps)(Search);\n","import { Input } from 'antd';\nimport styled from 'styled-components';\n\nconst { Search } = Input;\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tposition: relative;\n\twidth: 100%;\n\tmargin-top: 1rem;\n`;\n\nexport const SearchComponent = styled(Search)`\n\t.ant-btn-primary {\n\t\tsvg {\n\t\t\ttransform: scale(1.5);\n\t\t}\n\t}\n`;\n","import { AllMenu } from 'container/Trace/Search/AllTags/Tag';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport { extractTagType, TagValueTypes } from './AllTags/Tag/utils';\n\ntype Tags = TraceReducer['selectedTags'];\n\ninterface PayloadProps<T> {\n\tisError: boolean;\n\tpayload: T;\n}\n\nfunction extractValues(\n\ttagType: string,\n\tfilters: string[],\n\tisError: boolean,\n): [number[], boolean[], string[], boolean] {\n\tconst StringValues: string[] = [];\n\tconst NumberValues: number[] = [];\n\tconst BoolValues: boolean[] = [];\n\tlet isErr = isError;\n\tif (tagType === 'string') {\n\t\tStringValues.push(...filters);\n\t} else if (tagType === 'number') {\n\t\tfilters.forEach((element) => {\n\t\t\tconst num = Number(element);\n\t\t\tisErr = Number.isNaN(num) ? true : isError;\n\t\t\tNumberValues.push(num);\n\t\t});\n\t} else if (tagType === 'bool') {\n\t\tfilters.forEach((element) => {\n\t\t\tif (element === 'true') {\n\t\t\t\tBoolValues.push(true);\n\t\t\t} else if (element === 'false') {\n\t\t\t\tBoolValues.push(false);\n\t\t\t} else {\n\t\t\t\tisErr = true;\n\t\t\t}\n\t\t});\n\t}\n\treturn [NumberValues, BoolValues, StringValues, isErr];\n}\n\nexport const parseQueryToTags = (query: string): PayloadProps<Tags> => {\n\tlet isError = false;\n\n\t// Split the query string by ' AND '\n\tconst noOfTags = query.split(' AND ');\n\n\t// Map over each tag\n\tconst tags: Tags = noOfTags.map((filter) => {\n\t\t// Find the operator used in the filter\n\t\tconst operator =\n\t\t\tAllMenu.find((e) => `${filter} `.includes(` ${e.key} `))?.key || '';\n\n\t\t// Split the filter by the operator\n\t\tconst [tagName, tagValues] = filter.split(operator).map((e) => e.trim());\n\n\t\t// If the operator is Exists or NotExists, then return the tag object without values\n\t\tif (operator === 'Exists' || operator === 'NotExists') {\n\t\t\treturn {\n\t\t\t\tKey: tagName,\n\t\t\t\tStringValues: [],\n\t\t\t\tNumberValues: [],\n\t\t\t\tBoolValues: [],\n\t\t\t\tOperator: operator as FlatArray<Tags, 1>['Operator'],\n\t\t\t};\n\t\t}\n\t\t// Check for errors in the filter\n\t\tisError = operator.length === 0 || !tagName || !tagValues ? true : isError;\n\n\t\t// Remove the first and last brackets from the tagValues\n\t\tconst formattedTagValues = tagValues.slice(1, -1);\n\n\t\t// Split the tagValues by ',' and remove any quotes\n\t\tconst filters = formattedTagValues\n\t\t\t.split(',')\n\t\t\t.map((e) => e.replaceAll(/\"/g, ''));\n\n\t\t// Check for errors in the filters\n\t\tfilters.forEach((e) => {\n\t\t\tconst firstChar = e.charAt(0);\n\t\t\tconst lastChar = e.charAt(e.length - 1);\n\t\t\tisError = firstChar === '\"' && lastChar === '\"' ? true : isError;\n\t\t});\n\n\t\t// Extract the tag type\n\t\tconst tagType = extractTagType(tagName);\n\n\t\t// Extract the values for the tag\n\t\tconst [NumberValues, BoolValues, StringValues, isErr] = extractValues(\n\t\t\ttagType,\n\t\t\tfilters,\n\t\t\tisError,\n\t\t);\n\t\tisError = isErr;\n\n\t\t// Return the tag object\n\t\treturn {\n\t\t\tKey: tagName,\n\t\t\tStringValues,\n\t\t\tNumberValues,\n\t\t\tBoolValues,\n\t\t\tOperator: operator as FlatArray<Tags, 1>['Operator'],\n\t\t};\n\t});\n\treturn {\n\t\tisError,\n\t\tpayload: tags,\n\t};\n};\n\nconst formatValues = (values: TagValueTypes[]): string =>\n\tvalues.map((e) => `\"${e.toString().replaceAll(/\"/g, '')}\"`).join(',');\n\nexport const parseTagsToQuery = (tags: Tags): PayloadProps<string> => {\n\tlet isError = false;\n\n\t// Map over each tag\n\tconst payload = tags\n\t\t.map(({ StringValues, NumberValues, BoolValues, Key, Operator }) => {\n\t\t\t// Check if the key of the tag is undefined\n\t\t\tif (!Key) {\n\t\t\t\tisError = true;\n\t\t\t}\n\t\t\tif (Operator === 'Exists' || Operator === 'NotExists') {\n\t\t\t\treturn `${Key} ${Operator}`;\n\t\t\t}\n\t\t\t// Check if the tag has string values\n\t\t\tif (StringValues.length > 0) {\n\t\t\t\t// Format the string values and join them with a ','\n\t\t\t\tconst formattedStringValues = formatValues(StringValues);\n\t\t\t\treturn `${Key} ${Operator} (${formattedStringValues})`;\n\t\t\t}\n\n\t\t\t// Check if the tag has number values\n\t\t\tif (NumberValues.length > 0) {\n\t\t\t\t// Format the number values and join them with a ','\n\t\t\t\tconst formattedNumberValues = formatValues(NumberValues);\n\t\t\t\treturn `${Key} ${Operator} (${formattedNumberValues})`;\n\t\t\t}\n\n\t\t\t// Check if the tag has boolean values\n\t\t\tif (BoolValues.length > 0) {\n\t\t\t\t// Format the boolean values and join them with a ','\n\t\t\t\tconst formattedBoolValues = formatValues(BoolValues);\n\t\t\t\treturn `${Key} ${Operator} (${formattedBoolValues})`;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t})\n\t\t.join(' AND ');\n\n\treturn {\n\t\tisError,\n\t\tpayload,\n\t};\n};\n","import { DefaultOptionType } from 'antd/es/select';\n\ninterface Dropdown {\n\tkey: string;\n\tdisplayValue: string;\n\tyAxisUnit?: string;\n}\n\nexport const groupBy: DefaultOptionType[] = [\n\t{\n\t\tlabel: 'None',\n\t\tvalue: 'none',\n\t},\n\t{\n\t\tlabel: 'Service Name',\n\t\tvalue: 'serviceName',\n\t},\n\t{\n\t\tlabel: 'Operation',\n\t\tvalue: 'name',\n\t},\n\t{\n\t\tlabel: 'HTTP URL',\n\t\tvalue: 'httpUrl',\n\t},\n\t{\n\t\tlabel: 'HTTP Method',\n\t\tvalue: 'httpMethod',\n\t},\n\t{\n\t\tlabel: 'HTTP Host',\n\t\tvalue: 'httpHost',\n\t},\n\t{\n\t\tlabel: 'HTTP Route',\n\t\tvalue: 'httpRoute',\n\t},\n\t{\n\t\tlabel: 'RPC Method',\n\t\tvalue: 'rpcMethod',\n\t},\n\t{\n\t\tlabel: 'Status Code',\n\t\tvalue: 'responseStatusCode',\n\t},\n\t{\n\t\tlabel: 'Database Name',\n\t\tvalue: 'dbName',\n\t},\n\t{\n\t\tlabel: 'Database System',\n\t\tvalue: 'dbSystem',\n\t},\n\t{\n\t\tlabel: 'Database Operation',\n\t\tvalue: 'dbOperation',\n\t},\n\t{\n\t\tlabel: 'Messaging System',\n\t\tvalue: 'msgSystem',\n\t},\n\t{\n\t\tlabel: 'Messaging Operation',\n\t\tvalue: 'msgOperation',\n\t},\n];\n\nexport const functions: Dropdown[] = [\n\t{ displayValue: 'Count', key: 'count', yAxisUnit: 'short' },\n\t{\n\t\tdisplayValue: 'Rate per sec',\n\t\tkey: 'ratePerSec',\n\t\tyAxisUnit: 'reqps',\n\t},\n\t{ displayValue: 'Sum (duration)', key: 'sum', yAxisUnit: 'ns' },\n\t{ displayValue: 'Avg (duration)', key: 'avg', yAxisUnit: 'ns' },\n\t{\n\t\tdisplayValue: 'Max (duration)',\n\t\tkey: 'max',\n\t\tyAxisUnit: 'ns',\n\t},\n\t{\n\t\tdisplayValue: 'Min (duration)',\n\t\tkey: 'min',\n\t\tyAxisUnit: 'ns',\n\t},\n\t{\n\t\tdisplayValue: '50th percentile (duration)',\n\t\tkey: 'p50',\n\t\tyAxisUnit: 'ns',\n\t},\n\t{\n\t\tdisplayValue: '90th percentile (duration)',\n\t\tkey: 'p90',\n\t\tyAxisUnit: 'ns',\n\t},\n\t{\n\t\tdisplayValue: '95th percentile (duration)',\n\t\tkey: 'p95',\n\t\tyAxisUnit: 'ns',\n\t},\n\t{\n\t\tdisplayValue: '99th percentile (duration)',\n\t\tkey: 'p99',\n\t\tyAxisUnit: 'ns',\n\t},\n];\n","import { AutoComplete, Input, Space } from 'antd';\nimport getTagFilters from 'api/trace/getTagFilter';\nimport { useMemo, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { useSelector } from 'react-redux';\nimport { AppState } from 'store/reducers';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceReducer } from 'types/reducer/trace';\nimport { popupContainer } from 'utils/selectPopupContainer';\n\nimport { functions } from './config';\nimport { SelectComponent } from './styles';\nimport {\n\tfilterGroupBy,\n\tgetSelectedValue,\n\tinitOptions,\n\tonClickSelectedFunctionHandler,\n\tonClickSelectedGroupByHandler,\n\tselectedGroupByValue,\n} from './utils';\n\nconst { Option } = SelectComponent;\n\nfunction TraceGraphFilter(): JSX.Element {\n\tconst { selectedFunction, selectedGroupBy } = useSelector<\n\t\tAppState,\n\t\tTraceReducer\n\t>((state) => state.traces);\n\tconst [selectedGroupByLocal, setSelectedGroupByLocal] = useState<string>(\n\t\tselectedGroupBy,\n\t);\n\tconst globalTime = useSelector<AppState, GlobalReducer>(\n\t\t(state) => state.globalTime,\n\t);\n\tconst traces = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst { isLoading, data } = useQuery(\n\t\t[\n\t\t\t'getTagKeys',\n\t\t\tglobalTime.minTime,\n\t\t\tglobalTime.maxTime,\n\t\t\ttraces.selectedFilter,\n\t\t\ttraces.isFilterExclude,\n\t\t\ttraces.spanKind,\n\t\t],\n\t\t{\n\t\t\tqueryFn: () =>\n\t\t\t\tgetTagFilters({\n\t\t\t\t\tstart: globalTime.minTime,\n\t\t\t\t\tend: globalTime.maxTime,\n\t\t\t\t\tother: Object.fromEntries(traces.selectedFilter),\n\t\t\t\t\tisFilterExclude: traces.isFilterExclude,\n\t\t\t\t\tspanKind: traces.spanKind,\n\t\t\t\t}),\n\t\t\tcacheTime: 120000,\n\t\t\tenabled: traces.filter.size > 0,\n\t\t},\n\t);\n\n\tconst options = useMemo(() => initOptions(data?.payload), [data?.payload]);\n\n\treturn (\n\t\t<Space>\n\t\t\t<label htmlFor=\"selectedFunction\">Function</label>\n\n\t\t\t<SelectComponent\n\t\t\t\tgetPopupContainer={popupContainer}\n\t\t\t\tdropdownMatchSelectWidth\n\t\t\t\tdata-testid=\"selectedFunction\"\n\t\t\t\tid=\"selectedFunction\"\n\t\t\t\tvalue={getSelectedValue(selectedFunction)}\n\t\t\t\tonChange={onClickSelectedFunctionHandler}\n\t\t\t>\n\t\t\t\t{functions.map((value) => (\n\t\t\t\t\t<Option value={value.key} key={value.key}>\n\t\t\t\t\t\t{value.displayValue}\n\t\t\t\t\t</Option>\n\t\t\t\t))}\n\t\t\t</SelectComponent>\n\n\t\t\t<label htmlFor=\"selectedGroupBy\">Group By</label>\n\t\t\t<AutoComplete\n\t\t\t\tgetPopupContainer={popupContainer}\n\t\t\t\tdropdownMatchSelectWidth\n\t\t\t\tid=\"selectedGroupBy\"\n\t\t\t\tdata-testid=\"selectedGroupBy\"\n\t\t\t\toptions={options}\n\t\t\t\tvalue={selectedGroupByValue(selectedGroupByLocal, options)}\n\t\t\t\tonChange={(e): void => setSelectedGroupByLocal(e.toString())}\n\t\t\t\tonSelect={onClickSelectedGroupByHandler(options)}\n\t\t\t\tfilterOption={(inputValue, option): boolean =>\n\t\t\t\t\tfilterGroupBy(inputValue, option)\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<Input disabled={isLoading} placeholder=\"Please select\" />\n\t\t\t</AutoComplete>\n\t\t</Space>\n\t);\n}\n\nexport default TraceGraphFilter;\n","import { Select } from 'antd';\nimport styled from 'styled-components';\n\nexport const SelectComponent = styled(Select)`\n\t&&& {\n\t\tmin-width: 12rem;\n\t}\n`;\n","import { DefaultOptionType } from 'antd/es/select';\nimport { ReactNode } from 'react';\nimport store from 'store';\nimport {\n\tUPDATE_SELECTED_FUNCTION,\n\tUPDATE_SELECTED_GROUP_BY,\n} from 'types/actions/trace';\nimport { PayloadProps } from 'types/api/trace/getTagFilters';\n\nimport { extractTagFilters } from '../Search/AllTags/Tag/utils';\nimport { functions, groupBy } from './config';\n\nexport function groupByValues(\n\ttagFilters: DefaultOptionType[],\n): DefaultOptionType[] {\n\tconst result: DefaultOptionType[] = [...groupBy];\n\ttagFilters.forEach((e) => {\n\t\tresult.push(e);\n\t});\n\treturn result;\n}\n\nexport function initOptions(\n\tpayload: PayloadProps | null | undefined,\n): DefaultOptionType[] {\n\tif (payload) {\n\t\treturn groupByValues(extractTagFilters(payload));\n\t}\n\treturn groupBy;\n}\n\nexport function onClickSelectedGroupByHandler(options: DefaultOptionType[]) {\n\treturn (ev: unknown): void => {\n\t\tconst { dispatch } = store;\n\t\tif (typeof ev === 'string' && options) {\n\t\t\tconst selected = options.find((e) => e.value === ev);\n\t\t\tif (selected) {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_SELECTED_GROUP_BY,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tselectedGroupBy: selected.value ? selected.value.toString() : '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport function onClickSelectedFunctionHandler(value: unknown): void {\n\tconst { dispatch } = store;\n\tif (typeof value === 'string') {\n\t\tconst selected = functions.find((e) => e.key === value);\n\t\tif (selected) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_SELECTED_FUNCTION,\n\t\t\t\tpayload: {\n\t\t\t\t\tselectedFunction: selected.key,\n\t\t\t\t\tyAxisUnit: selected.yAxisUnit,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport function selectedGroupByValue(\n\tselectedGroupBy: string,\n\toptions: DefaultOptionType[],\n): ReactNode {\n\tconst optionValue = options.find((e) => selectedGroupBy === e.value)?.label;\n\tif (optionValue) {\n\t\treturn optionValue;\n\t}\n\treturn selectedGroupBy;\n}\n\nexport function getSelectedValue(selectedFunction: string): unknown {\n\treturn functions.find((e) => selectedFunction === e.key)?.displayValue;\n}\n\nexport function filterGroupBy(\n\tinputValue: string,\n\toption: DefaultOptionType | undefined,\n): boolean {\n\treturn (\n\t\toption?.label?.toString().toUpperCase().indexOf(inputValue.toUpperCase()) !==\n\t\t-1\n\t);\n}\n","import { TableProps, Tag, Typography } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\nimport { ResizeTable } from 'components/ResizeTable';\nimport { DATE_TIME_FORMATS } from 'constants/dateTimeFormats';\nimport ROUTES from 'constants/routes';\nimport {\n\tgetSpanOrder,\n\tgetSpanOrderParam,\n} from 'container/Trace/TraceTable/util';\nimport { formUrlParams } from 'container/TraceDetail/utils';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport history from 'lib/history';\nimport omit from 'lodash-es/omit';\nimport { HTMLAttributes } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { updateURL } from 'store/actions/trace/util';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport {\n\tUPDATE_SPAN_ORDER,\n\tUPDATE_SPAN_ORDER_PARAMS,\n\tUPDATE_SPANS_AGGREGATE_PAGE_NUMBER,\n\tUPDATE_SPANS_AGGREGATE_PAGE_SIZE,\n} from 'types/actions/trace';\nimport { TraceReducer } from 'types/reducer/trace';\nimport { v4 } from 'uuid';\n\ndayjs.extend(duration);\n\nfunction TraceTable(): JSX.Element {\n\tconst {\n\t\tspansAggregate,\n\t\tselectedFilter,\n\t\tselectedTags,\n\t\tfilterLoading,\n\t\tuserSelectedFilter,\n\t\tisFilterExclude,\n\t\tfilterToFetchData,\n\t\tfilter,\n\t} = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst statusFilter = filter.get('status');\n\tconst selectedStatusFilter = selectedFilter.get('status');\n\n\tconst dispatch = useDispatch<Dispatch<AppActions>>();\n\n\tconst { loading, order: spansAggregateOrder } = spansAggregate;\n\n\ttype TableType = FlatArray<TraceReducer['spansAggregate']['data'], 1>;\n\n\tconst getLink = (record: TableType): string =>\n\t\t`${ROUTES.TRACE}/${record.traceID}${formUrlParams({\n\t\t\tspanId: record.spanID,\n\t\t\tlevelUp: 0,\n\t\t\tlevelDown: 0,\n\t\t})}`;\n\n\tconst getValue = (value: string): JSX.Element => (\n\t\t<Typography>{value}</Typography>\n\t);\n\n\tconst getHttpMethodOrStatus = (\n\t\tvalue: TableType['statusCode'],\n\t): JSX.Element => {\n\t\tif (value.length === 0) {\n\t\t\treturn <Typography>-</Typography>;\n\t\t}\n\t\treturn <Tag color=\"magenta\">{value}</Tag>;\n\t};\n\n\tconst columns: ColumnsType<TableType> = [\n\t\t{\n\t\t\ttitle: 'Date',\n\t\t\tdataIndex: 'timestamp',\n\t\t\tkey: 'timestamp',\n\t\t\twidth: 120,\n\t\t\tsorter: true,\n\t\t\trender: (value: TableType['timestamp']): JSX.Element => {\n\t\t\t\tconst day = dayjs(value);\n\t\t\t\treturn (\n\t\t\t\t\t<Typography>\n\t\t\t\t\t\t{day.format(DATE_TIME_FORMATS.SLASH_DATETIME_SECONDS)}\n\t\t\t\t\t</Typography>\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttitle: 'Service',\n\t\t\tdataIndex: 'serviceName',\n\t\t\tkey: 'serviceName',\n\t\t\twidth: 50,\n\t\t\trender: getValue,\n\t\t},\n\t\t{\n\t\t\ttitle: 'Operation',\n\t\t\tdataIndex: 'operation',\n\t\t\tkey: 'operation',\n\t\t\twidth: 110,\n\t\t\trender: getValue,\n\t\t},\n\t\t{\n\t\t\ttitle: 'Duration',\n\t\t\tdataIndex: 'durationNano',\n\t\t\tkey: 'durationNano',\n\t\t\twidth: 50,\n\t\t\tsorter: true,\n\t\t\trender: (value: TableType['durationNano']): JSX.Element => (\n\t\t\t\t<Typography>\n\t\t\t\t\t{`${dayjs\n\t\t\t\t\t\t.duration({ milliseconds: value / 1000000 })\n\t\t\t\t\t\t.asMilliseconds()\n\t\t\t\t\t\t.toFixed(2)} ms`}\n\t\t\t\t</Typography>\n\t\t\t),\n\t\t},\n\t\t{\n\t\t\ttitle: 'Method',\n\t\t\tdataIndex: 'method',\n\t\t\tkey: 'method',\n\t\t\twidth: 50,\n\t\t\trender: getHttpMethodOrStatus,\n\t\t},\n\t\t{\n\t\t\ttitle: 'Status Code',\n\t\t\tdataIndex: 'statusCode',\n\t\t\tkey: 'statusCode',\n\t\t\twidth: 50,\n\t\t\trender: getHttpMethodOrStatus,\n\t\t},\n\t];\n\n\tconst onChangeHandler: TableProps<TableType>['onChange'] = (\n\t\tprops,\n\t\t_,\n\t\tsort,\n\t) => {\n\t\tif (!Array.isArray(sort)) {\n\t\t\tconst { order = spansAggregateOrder } = sort;\n\t\t\tif (props.current && props.pageSize) {\n\t\t\t\tconst spanOrder = getSpanOrder(order || '');\n\t\t\t\tconst orderParam = getSpanOrderParam(sort.field as string);\n\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_SPAN_ORDER,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\torder: spanOrder,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_SPAN_ORDER_PARAMS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\torderParam,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_SPANS_AGGREGATE_PAGE_SIZE,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tpageSize: props.pageSize,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_SPANS_AGGREGATE_PAGE_NUMBER,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tcurrentPage: props.current,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tupdateURL(\n\t\t\t\t\tselectedFilter,\n\t\t\t\t\tfilterToFetchData,\n\t\t\t\t\tprops.current,\n\t\t\t\t\tselectedTags,\n\t\t\t\t\tisFilterExclude,\n\t\t\t\t\tuserSelectedFilter,\n\t\t\t\t\tspanOrder,\n\t\t\t\t\tprops.pageSize,\n\t\t\t\t\torderParam,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst totalObject = omit(statusFilter, [...(selectedStatusFilter || [])]);\n\tconst totalCount = Object.values(totalObject).reduce(\n\t\t(a, b) => parseInt(String(a), 10) + parseInt(String(b), 10),\n\t\t0,\n\t) as number;\n\n\treturn (\n\t\t<ResizeTable\n\t\t\tcolumns={columns}\n\t\t\tonChange={onChangeHandler}\n\t\t\tdataSource={spansAggregate.data}\n\t\t\tloading={loading || filterLoading}\n\t\t\trowKey={(record: { traceID: string; spanID: string }): string =>\n\t\t\t\t`${record.traceID}-${record.spanID}-${v4()}`\n\t\t\t}\n\t\t\tstyle={{\n\t\t\t\tcursor: 'pointer',\n\t\t\t}}\n\t\t\tonRow={(record: TableType): HTMLAttributes<TableType> => ({\n\t\t\t\tonClick: (event): void => {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tif (event.metaKey || event.ctrlKey) {\n\t\t\t\t\t\twindow.open(getLink(record), '_blank');\n\t\t\t\t\t} else {\n\t\t\t\t\t\thistory.push(getLink(record));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t})}\n\t\t\tpagination={{\n\t\t\t\tcurrent: spansAggregate.currentPage,\n\t\t\t\tpageSize: spansAggregate.pageSize,\n\t\t\t\tresponsive: true,\n\t\t\t\tposition: ['bottomLeft'],\n\t\t\t\ttotal: totalCount,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\nexport default TraceTable;\n","export const getSpanOrderParam = (key: string): string => {\n\tif (key === 'durationNano' || key === 'duration_nano') {\n\t\treturn 'duration';\n\t}\n\tif (key === 'timestamp') {\n\t\treturn 'timestamp';\n\t}\n\treturn '';\n};\n\nexport const getSpanOrder = (order: string): string => {\n\tif (order === 'ascend') {\n\t\treturn 'ascending';\n\t}\n\tif (order === 'descend') {\n\t\treturn 'descending';\n\t}\n\treturn '';\n};\n","import * as Sentry from '@sentry/react';\nimport { Card } from 'antd';\nimport { NotificationInstance } from 'antd/es/notification/interface';\nimport ROUTES from 'constants/routes';\nimport Filters from 'container/Trace/Filters';\nimport TraceGraph from 'container/Trace/Graph';\nimport Search from 'container/Trace/Search';\nimport TraceGraphFilter from 'container/Trace/TraceGraphFilter';\nimport TraceTable from 'container/Trace/TraceTable';\nimport { useNotifications } from 'hooks/useNotifications';\nimport getStep from 'lib/getStep';\nimport history from 'lib/history';\nimport ErrorBoundaryFallback from 'pages/ErrorBoundaryFallback/ErrorBoundaryFallback';\nimport { MouseEventHandler, useCallback, useEffect, useState } from 'react';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { GetInitialTraceFilter } from 'store/actions/trace/getInitialFilter';\nimport {\n\tGetSpansAggregate,\n\tGetSpansAggregateProps,\n} from 'store/actions/trace/getInitialSpansAggregate';\nimport { GetSpans, GetSpansProps } from 'store/actions/trace/getSpans';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport { RESET_TRACE_FILTER } from 'types/actions/trace';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport {\n\tClearAllFilter,\n\tContainer,\n\tLeftContainer,\n\tRightContainer,\n} from './styles';\n\nfunction Trace({\n\tgetSpansAggregate,\n\tgetSpans,\n\tgetInitialFilter,\n}: Props): JSX.Element {\n\tconst { maxTime, minTime } = useSelector<AppState, GlobalReducer>(\n\t\t(state) => state.globalTime,\n\t);\n\n\tconst dispatch = useDispatch<Dispatch<AppActions>>();\n\n\tconst [isChanged, setIsChanged] = useState<boolean>(true);\n\n\tconst {\n\t\tselectedFilter,\n\t\tspansAggregate,\n\t\tselectedTags,\n\t\tselectedFunction,\n\t\tselectedGroupBy,\n\t\tisFilterExclude,\n\t\tspanKind,\n\t} = useSelector<AppState, TraceReducer>((state) => state.traces);\n\n\tconst { notifications } = useNotifications();\n\n\tuseEffect(() => {\n\t\tgetInitialFilter(minTime, maxTime, notifications);\n\t}, [maxTime, minTime, getInitialFilter, isChanged, notifications]);\n\n\tuseEffect(() => {\n\t\tgetSpansAggregate(\n\t\t\t{\n\t\t\t\tmaxTime,\n\t\t\t\tminTime,\n\t\t\t\tselectedFilter,\n\t\t\t\tcurrent: spansAggregate.currentPage,\n\t\t\t\tpageSize: spansAggregate.pageSize,\n\t\t\t\tselectedTags,\n\t\t\t\torder: spansAggregate.order,\n\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\tspanKind,\n\t\t\t},\n\t\t\tnotifications,\n\t\t);\n\t}, [\n\t\tselectedTags,\n\t\tselectedFilter,\n\t\tmaxTime,\n\t\tminTime,\n\t\tgetSpansAggregate,\n\t\tspansAggregate.currentPage,\n\t\tspansAggregate.pageSize,\n\t\tspansAggregate.order,\n\t\tspansAggregate.orderParam,\n\t\tnotifications,\n\t\tspanKind,\n\t]);\n\n\tuseEffect(() => {\n\t\tgetSpans(\n\t\t\t{\n\t\t\t\tend: maxTime,\n\t\t\t\tfunction: selectedFunction,\n\t\t\t\tgroupBy: selectedGroupBy,\n\t\t\t\tselectedFilter,\n\t\t\t\tselectedTags,\n\t\t\t\tstart: minTime,\n\t\t\t\tstep: getStep({ start: minTime, end: maxTime, inputFormat: 'ns' }),\n\t\t\t\tisFilterExclude,\n\t\t\t\tspanKind,\n\t\t\t},\n\t\t\tnotifications,\n\t\t);\n\t}, [\n\t\tselectedFunction,\n\t\tselectedGroupBy,\n\t\tselectedFilter,\n\t\tselectedTags,\n\t\tmaxTime,\n\t\tminTime,\n\t\tgetSpans,\n\t\tisFilterExclude,\n\t\tnotifications,\n\t\tspanKind,\n\t]);\n\n\tuseEffect(\n\t\t() => (): void => {\n\t\t\tdispatch({\n\t\t\t\ttype: RESET_TRACE_FILTER,\n\t\t\t});\n\t\t},\n\t\t[dispatch],\n\t);\n\n\tconst onClickHandler: MouseEventHandler<HTMLElement> = useCallback(\n\t\t(e) => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\n\t\t\thistory.replace(ROUTES.TRACE);\n\n\t\t\tdispatch({\n\t\t\t\ttype: RESET_TRACE_FILTER,\n\t\t\t});\n\n\t\t\tsetIsChanged((state) => !state);\n\t\t},\n\t\t[dispatch],\n\t);\n\n\treturn (\n\t\t<Sentry.ErrorBoundary fallback={<ErrorBoundaryFallback />}>\n\t\t\t<Search />\n\t\t\t<Container>\n\t\t\t\t<div>\n\t\t\t\t\t<ClearAllFilter onClick={onClickHandler} type=\"primary\">\n\t\t\t\t\t\tClear all filters\n\t\t\t\t\t</ClearAllFilter>\n\t\t\t\t\t<LeftContainer>\n\t\t\t\t\t\t<Filters />\n\t\t\t\t\t</LeftContainer>\n\t\t\t\t</div>\n\n\t\t\t\t<RightContainer>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<TraceGraphFilter />\n\t\t\t\t\t\t<TraceGraph />\n\t\t\t\t\t</Card>\n\n\t\t\t\t\t<Card style={{ marginTop: '2rem' }}>\n\t\t\t\t\t\t<TraceTable />\n\t\t\t\t\t</Card>\n\t\t\t\t</RightContainer>\n\t\t\t</Container>\n\t\t</Sentry.ErrorBoundary>\n\t);\n}\n\ninterface DispatchProps {\n\tgetSpansAggregate: (\n\t\tprops: GetSpansAggregateProps,\n\t\tnotify: NotificationInstance,\n\t) => void;\n\tgetSpans: (props: GetSpansProps, notify: NotificationInstance) => void;\n\tgetInitialFilter: (\n\t\tminTime: GlobalReducer['minTime'],\n\t\tmaxTime: GlobalReducer['maxTime'],\n\t\tnotify: NotificationInstance,\n\t) => void;\n}\n\nconst mapDispatchToProps = (\n\tdispatch: ThunkDispatch<unknown, unknown, AppActions>,\n): DispatchProps => ({\n\tgetInitialFilter: bindActionCreators(GetInitialTraceFilter, dispatch),\n\tgetSpansAggregate: bindActionCreators(GetSpansAggregate, dispatch),\n\tgetSpans: bindActionCreators(GetSpans, dispatch),\n});\n\ntype Props = DispatchProps;\n\nexport default connect(null, mapDispatchToProps)(Trace);\n","import { Button, Card } from 'antd';\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex: 1;\n\tmin-height: 80vh;\n\tmargin-top: 1rem;\n`;\n\nexport const LeftContainer = styled(Card)`\n\tflex: 0.5;\n\tmargin-right: 0.5rem;\n\twidth: 15rem;\n\n\t.ant-card-body {\n\t\tpadding: 0;\n\t}\n`;\n\nexport const RightContainer = styled(Card)`\n\t&&& {\n\t\tflex: 2;\n\t}\n\n\t.ant-card-body {\n\t\tpadding: 0.5rem;\n\t}\n`;\n\nexport const ClearAllFilter = styled(Button)`\n\t&&& {\n\t\twidth: 95%;\n\t\tmargin-bottom: 0.5rem;\n\t}\n`;\n","import { NotificationInstance } from 'antd/es/notification/interface';\nimport getFiltersApi from 'api/trace/getFilters';\nimport xor from 'lodash-es/xor';\nimport { Dispatch, Store } from 'redux';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport {\n\tUPDATE_ALL_FILTERS,\n\tUPDATE_TRACE_FILTER_LOADING,\n\tUPDATE_TRACE_GRAPH_LOADING,\n} from 'types/actions/trace';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport { parseQueryIntoSpanKind } from './parseFilter/parseSpanKind';\nimport {\n\tisTraceFilterEnum,\n\tparseAggregateOrderParams,\n\tparseFilterExclude,\n\tparseFilterToFetchData,\n\tparseIsSkippedSelection,\n\tparseQueryIntoCurrent,\n\tparseQueryIntoFilter,\n\tparseQueryIntoOrder,\n\tparseQueryIntoPageSize,\n\tparseQueryIntoSelectedTags,\n\tparseSelectedFilter,\n\tstripTimestampsFromQuery,\n} from './util';\n\nexport const GetInitialTraceFilter = (\n\tminTime: GlobalReducer['minTime'],\n\tmaxTime: GlobalReducer['maxTime'],\n\tnotify: NotificationInstance,\n): ((\n\tdispatch: Dispatch<AppActions>,\n\tgetState: Store<AppState>['getState'],\n\t// eslint-disable-next-line sonarjs/cognitive-complexity\n) => void) => async (dispatch, getState): Promise<void> => {\n\ttry {\n\t\tconst query = window.location.search;\n\n\t\tconst { traces, globalTime } = getState();\n\n\t\tif (globalTime.maxTime !== maxTime && globalTime.minTime !== minTime) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst getSelectedFilter = parseSelectedFilter(\n\t\t\tquery,\n\t\t\ttraces.selectedFilter,\n\t\t\ttrue,\n\t\t);\n\n\t\tconst getFilterToFetchData = parseFilterToFetchData(\n\t\t\tquery,\n\t\t\ttraces.filterToFetchData,\n\t\t);\n\n\t\tconst parsedSpanKind = parseQueryIntoSpanKind(query, traces.spanKind);\n\n\t\tconst getUserSelected = parseSelectedFilter(query, traces.userSelectedFilter);\n\n\t\tconst getIsFilterExcluded = parseFilterExclude(query, traces.isFilterExclude);\n\n\t\tconst parsedQueryCurrent = parseQueryIntoCurrent(\n\t\t\tquery,\n\t\t\ttraces.spansAggregate.currentPage,\n\t\t);\n\n\t\tconst parsedQueryOrder = parseQueryIntoOrder(\n\t\t\tquery,\n\t\t\ttraces.spansAggregate.order,\n\t\t);\n\n\t\tconst parsedPageSize = parseQueryIntoPageSize(\n\t\t\tquery,\n\t\t\ttraces.spansAggregate.pageSize,\n\t\t);\n\n\t\tconst isSelectionSkipped = parseIsSkippedSelection(query);\n\n\t\tconst parsedSelectedTags = parseQueryIntoSelectedTags(\n\t\t\tquery,\n\t\t\ttraces.selectedTags,\n\t\t);\n\n\t\tconst parsedOrderParams = parseAggregateOrderParams(\n\t\t\tquery,\n\t\t\ttraces.spansAggregate.orderParam,\n\t\t);\n\n\t\tconst parsedFilter = parseQueryIntoFilter(query, traces.filter);\n\n\t\t// now filter are not matching we need to fetch the data and make in sync\n\t\tdispatch({\n\t\t\ttype: UPDATE_TRACE_FILTER_LOADING,\n\t\t\tpayload: {\n\t\t\t\tfilterLoading: true,\n\t\t\t},\n\t\t});\n\n\t\tconst response = await getFiltersApi({\n\t\t\tend: String(maxTime),\n\t\t\tgetFilters: getFilterToFetchData.currentValue,\n\t\t\tstart: String(minTime),\n\t\t\tother: Object.fromEntries(getSelectedFilter.currentValue),\n\t\t\tisFilterExclude: getIsFilterExcluded.currentValue,\n\t\t\tspanKind: parsedSpanKind.currentValue,\n\t\t});\n\n\t\tconst preSelectedFilter: Map<TraceFilterEnum, string[]> = new Map(\n\t\t\tgetSelectedFilter.currentValue,\n\t\t);\n\n\t\tif (response.payload && !isSelectionSkipped.currentValue) {\n\t\t\t/**  this is required as now we have timestamps updated in date time selection component\n\t\t\t * \t so for initial filters we need to strip timestamps and check for initial load\n\t\t\t */\n\t\t\tconst diff =\n\t\t\t\tstripTimestampsFromQuery(query).length === 0\n\t\t\t\t\t? traces.filterToFetchData\n\t\t\t\t\t: xor(traces.filterToFetchData, getFilterToFetchData.currentValue);\n\n\t\t\tObject.keys(response.payload).forEach((key) => {\n\t\t\t\tconst value = response.payload[key];\n\t\t\t\tObject.keys(value)\n\t\t\t\t\t// remove maxDuration and minDuration filter from initial selection logic\n\t\t\t\t\t.filter((e) => !['maxDuration', 'minDuration'].includes(e))\n\t\t\t\t\t.forEach((preKey) => {\n\t\t\t\t\t\tif (isTraceFilterEnum(key) && diff.find((v) => v === key)) {\n\t\t\t\t\t\t\t// const preValue = preSelectedFilter?.get(key) || [];\n\t\t\t\t\t\t\tconst preValue = getUserSelected.currentValue?.get(key) || [];\n\t\t\t\t\t\t\t// preSelectedFilter?.set(key, [...new Set([...preValue, preKey])]);\n\t\t\t\t\t\t\tgetUserSelected.currentValue.set(key, [\n\t\t\t\t\t\t\t\t...new Set([...preValue, preKey]),\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (response.statusCode === 200) {\n\t\t\tconst preResponseSelected: TraceReducer['filterResponseSelected'] = new Set();\n\n\t\t\tconst initialFilter = new Map<TraceFilterEnum, Record<string, string>>(\n\t\t\t\tparsedFilter.currentValue,\n\t\t\t);\n\n\t\t\tObject.keys(response.payload).forEach((key) => {\n\t\t\t\tconst value = response.payload[key];\n\t\t\t\tif (isTraceFilterEnum(key)) {\n\t\t\t\t\tObject.keys(value).forEach((e) => preResponseSelected.add(e));\n\n\t\t\t\t\tinitialFilter.set(key, {\n\t\t\t\t\t\t...initialFilter.get(key),\n\t\t\t\t\t\t...value,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_ALL_FILTERS,\n\t\t\t\tpayload: {\n\t\t\t\t\tfilter: initialFilter,\n\t\t\t\t\tselectedFilter: preSelectedFilter,\n\t\t\t\t\tfilterToFetchData: getFilterToFetchData.currentValue,\n\t\t\t\t\tcurrent: parsedQueryCurrent.currentValue,\n\t\t\t\t\tselectedTags: parsedSelectedTags.currentValue,\n\t\t\t\t\tuserSelected: getUserSelected.currentValue,\n\t\t\t\t\tisFilterExclude: getIsFilterExcluded.currentValue,\n\t\t\t\t\torder: parsedQueryOrder.currentValue,\n\t\t\t\t\tpageSize: parsedPageSize.currentValue,\n\t\t\t\t\torderParam: parsedOrderParams.currentValue,\n\t\t\t\t\tspanKind: parsedSpanKind.currentValue,\n\t\t\t\t},\n\t\t\t});\n\t\t} else {\n\t\t\tnotify.error({\n\t\t\t\tmessage: response.error || 'Something went wrong',\n\t\t\t});\n\t\t}\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_TRACE_FILTER_LOADING,\n\t\t\tpayload: {\n\t\t\t\tfilterLoading: false,\n\t\t\t},\n\t\t});\n\t\tdispatch({\n\t\t\ttype: UPDATE_TRACE_GRAPH_LOADING,\n\t\t\tpayload: {\n\t\t\t\tloading: false,\n\t\t\t},\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tdispatch({\n\t\t\ttype: UPDATE_TRACE_FILTER_LOADING,\n\t\t\tpayload: {\n\t\t\t\tfilterLoading: false,\n\t\t\t},\n\t\t});\n\t\tdispatch({\n\t\t\ttype: UPDATE_TRACE_GRAPH_LOADING,\n\t\t\tpayload: {\n\t\t\t\tloading: false,\n\t\t\t},\n\t\t});\n\t}\n};\n","import { NotificationInstance } from 'antd/es/notification/interface';\nimport getSpansAggregate from 'api/trace/getSpansAggregate';\nimport { Dispatch, Store } from 'redux';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport { UPDATE_SPANS_AGGREGATE } from 'types/actions/trace';\nimport { Props as GetSpanAggregateProps } from 'types/api/trace/getSpanAggregate';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { TraceReducer } from 'types/reducer/trace';\n\nimport { updateURL } from './util';\n\nexport const GetSpansAggregate = (\n\tprops: GetSpansAggregateProps,\n\tnotify: NotificationInstance,\n): ((\n\tdispatch: Dispatch<AppActions>,\n\tgetState: Store<AppState>['getState'],\n) => void) => async (dispatch, getState): Promise<void> => {\n\tconst { traces, globalTime } = getState();\n\tconst { spansAggregate } = traces;\n\n\tif (\n\t\tglobalTime.maxTime !== props.maxTime &&\n\t\tglobalTime.minTime !== props.minTime\n\t) {\n\t\treturn;\n\t}\n\n\tif (traces.filterLoading) {\n\t\treturn;\n\t}\n\n\tconst { order = '' } = props;\n\n\ttry {\n\t\t// triggering loading\n\t\tdispatch({\n\t\t\ttype: UPDATE_SPANS_AGGREGATE,\n\t\t\tpayload: {\n\t\t\t\tspansAggregate: {\n\t\t\t\t\tcurrentPage: props.current,\n\t\t\t\t\tloading: true,\n\t\t\t\t\tdata: spansAggregate.data,\n\t\t\t\t\terror: false,\n\t\t\t\t\ttotal: spansAggregate.total,\n\t\t\t\t\tpageSize: props.pageSize,\n\t\t\t\t\torder,\n\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tconst response = await getSpansAggregate({\n\t\t\tend: props.maxTime,\n\t\t\tstart: props.minTime,\n\t\t\tselectedFilter: props.selectedFilter,\n\t\t\tlimit: props.pageSize,\n\t\t\toffset: props.current * props.pageSize - props.pageSize,\n\t\t\tselectedTags: props.selectedTags,\n\t\t\tisFilterExclude: traces.isFilterExclude,\n\t\t\torder,\n\t\t\torderParam: props.orderParam,\n\t\t\tspanKind: props.spanKind,\n\t\t});\n\n\t\tif (response.statusCode === 200) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_SPANS_AGGREGATE,\n\t\t\t\tpayload: {\n\t\t\t\t\tspansAggregate: {\n\t\t\t\t\t\tcurrentPage: props.current,\n\t\t\t\t\t\tloading: false,\n\t\t\t\t\t\tdata: response.payload.spans,\n\t\t\t\t\t\terror: false,\n\t\t\t\t\t\ttotal: response.payload.totalSpans,\n\t\t\t\t\t\tpageSize: props.pageSize,\n\t\t\t\t\t\torder,\n\t\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tupdateURL(\n\t\t\t\ttraces.selectedFilter,\n\t\t\t\ttraces.filterToFetchData,\n\t\t\t\tprops.current,\n\t\t\t\ttraces.selectedTags,\n\t\t\t\ttraces.isFilterExclude,\n\t\t\t\ttraces.userSelectedFilter,\n\t\t\t\torder,\n\t\t\t\ttraces.spansAggregate.pageSize,\n\t\t\t\tspansAggregate.orderParam,\n\t\t\t);\n\t\t} else {\n\t\t\tnotify.error({\n\t\t\t\tmessage: response.error || 'Something went wrong',\n\t\t\t});\n\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_SPANS_AGGREGATE,\n\t\t\t\tpayload: {\n\t\t\t\t\tspansAggregate: {\n\t\t\t\t\t\tcurrentPage: props.current,\n\t\t\t\t\t\tloading: false,\n\t\t\t\t\t\tdata: spansAggregate.data,\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t\ttotal: spansAggregate.total,\n\t\t\t\t\t\tpageSize: props.pageSize,\n\t\t\t\t\t\torder,\n\t\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: UPDATE_SPANS_AGGREGATE,\n\t\t\tpayload: {\n\t\t\t\tspansAggregate: {\n\t\t\t\t\tcurrentPage: props.current,\n\t\t\t\t\tloading: false,\n\t\t\t\t\tdata: spansAggregate.data,\n\t\t\t\t\terror: true,\n\t\t\t\t\ttotal: spansAggregate.total,\n\t\t\t\t\tpageSize: props.pageSize,\n\t\t\t\t\torder,\n\t\t\t\t\torderParam: spansAggregate.orderParam,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n};\n\nexport interface GetSpansAggregateProps {\n\tmaxTime: GlobalReducer['maxTime'];\n\tminTime: GlobalReducer['minTime'];\n\tselectedFilter: TraceReducer['selectedFilter'];\n\tcurrent: TraceReducer['spansAggregate']['currentPage'];\n\tpageSize: TraceReducer['spansAggregate']['pageSize'];\n\tselectedTags: TraceReducer['selectedTags'];\n\torder: GetSpanAggregateProps['order'];\n\torderParam: GetSpanAggregateProps['orderParam'];\n\tspanKind: TraceReducer['spanKind'];\n}\n","import { NotificationInstance } from 'antd/es/notification/interface';\nimport getSpans from 'api/trace/getSpans';\nimport { Dispatch, Store } from 'redux';\nimport { AppState } from 'store/reducers';\nimport AppActions from 'types/actions';\nimport {\n\tUPDATE_TRACE_GRAPH_ERROR,\n\tUPDATE_TRACE_GRAPH_LOADING,\n\tUPDATE_TRACE_GRAPH_SUCCESS,\n} from 'types/actions/trace';\nimport { Props } from 'types/api/trace/getSpans';\n\nexport const GetSpans = (\n\tprops: GetSpansProps,\n\tnotify: NotificationInstance,\n): ((\n\tdispatch: Dispatch<AppActions>,\n\tgetState: Store<AppState>['getState'],\n) => void) => {\n\tconst defaultMessage = 'Something went wrong';\n\n\treturn async (dispatch, getState): Promise<void> => {\n\t\ttry {\n\t\t\tconst { traces, globalTime } = getState();\n\t\t\tconst { spansGraph } = traces;\n\n\t\t\tif (globalTime.maxTime !== props.end && globalTime.minTime !== props.start) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (traces.filterLoading) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!spansGraph.loading) {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_TRACE_GRAPH_LOADING,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tloading: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst response = await getSpans({\n\t\t\t\tend: props.end,\n\t\t\t\tfunction: props.function,\n\t\t\t\tgroupBy: props.groupBy,\n\t\t\t\tselectedFilter: props.selectedFilter,\n\t\t\t\tselectedTags: props.selectedTags,\n\t\t\t\tstart: props.start,\n\t\t\t\tstep: props.step,\n\t\t\t\tisFilterExclude: props.isFilterExclude,\n\t\t\t\tspanKind: props.spanKind,\n\t\t\t});\n\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_TRACE_GRAPH_SUCCESS,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tdata: response.payload,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tnotify.error({\n\t\t\t\t\tmessage: response.error || defaultMessage,\n\t\t\t\t});\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: UPDATE_TRACE_GRAPH_ERROR,\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t\terrorMessage: response.error || defaultMessage,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_TRACE_GRAPH_ERROR,\n\t\t\t\tpayload: {\n\t\t\t\t\terror: true,\n\t\t\t\t\terrorMessage: (error as Error)?.toString() || defaultMessage,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t};\n};\n\nexport type GetSpansProps = Props;\n","import { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport { isTraceFilterEnum, ParsedUrl } from '../util';\n\nexport const parseQueryIntoFilter = (\n\tquery: string,\n\tstateFilter: TraceReducer['filter'],\n): ParsedUrl<TraceReducer['filter']> => {\n\tconst urlFilter = new Map<TraceFilterEnum, Record<string, string>>();\n\tconst url = new URLSearchParams(query);\n\n\tconst selected = url.get('filter');\n\n\tif (selected) {\n\t\ttry {\n\t\t\tconst parsedValue = JSON.parse(selected);\n\n\t\t\tif (typeof parsedValue === 'object') {\n\t\t\t\tObject.keys(parsedValue).forEach((key) => {\n\t\t\t\t\tif (isTraceFilterEnum(key)) {\n\t\t\t\t\t\tconst value = parsedValue[key];\n\t\t\t\t\t\tif (typeof value === 'object') {\n\t\t\t\t\t\t\turlFilter.set(key, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n\tif (selected) {\n\t\treturn {\n\t\t\tcurrentValue: urlFilter,\n\t\t\turlValue: urlFilter,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateFilter,\n\t\turlValue: urlFilter,\n\t};\n};\n","import { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport { ParsedUrl } from '../util';\n\nexport const parseFilterToFetchData = (\n\tquery: string,\n\tstateTraceFilterData: TraceReducer['filterToFetchData'],\n): ParsedUrl<TraceFilterEnum[]> => {\n\tconst url = new URLSearchParams(query);\n\n\tconst filterToFetchData: TraceFilterEnum[] = [];\n\n\tconst selected = url.get('filterToFetchData');\n\n\tif (selected) {\n\t\ttry {\n\t\t\tconst parsedValue = JSON.parse(decodeURIComponent(selected));\n\n\t\t\tif (Array.isArray(parsedValue)) {\n\t\t\t\tfilterToFetchData.push(...parsedValue);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// error while parsing json\n\t\t}\n\t}\n\n\tif (selected) {\n\t\treturn {\n\t\t\tcurrentValue: filterToFetchData,\n\t\t\turlValue: filterToFetchData,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateTraceFilterData,\n\t\turlValue: filterToFetchData,\n\t};\n};\n","import { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport { isTraceFilterEnum, ParsedUrl } from '../util';\n\nexport const parseFilterExclude = (\n\tquery: string,\n\tstateFilterExclude: TraceReducer['isFilterExclude'],\n): ParsedUrl<TraceReducer['isFilterExclude']> => {\n\tconst currentFilter = new Map<TraceFilterEnum, boolean>();\n\n\tconst url = new URLSearchParams(query);\n\n\tconst isPresent = url.get('isFilterExclude');\n\n\tif (isPresent) {\n\t\ttry {\n\t\t\tconst parsedValue = JSON.parse(isPresent);\n\n\t\t\tif (typeof parsedValue === 'object') {\n\t\t\t\tObject.keys(parsedValue).forEach((key) => {\n\t\t\t\t\tif (isTraceFilterEnum(key)) {\n\t\t\t\t\t\tconst keyValue = parsedValue[key];\n\t\t\t\t\t\tif (typeof keyValue === 'boolean') {\n\t\t\t\t\t\t\tcurrentFilter.set(key, keyValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// parsing the value\n\t\t}\n\t}\n\n\tif (isPresent) {\n\t\treturn {\n\t\t\tcurrentValue: currentFilter,\n\t\t\turlValue: currentFilter,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateFilterExclude,\n\t\turlValue: currentFilter,\n\t};\n};\n","import { GlobalTime } from 'types/actions/globalTime';\n\nexport const parseMinMaxTime = (query: string): GlobalTime => {\n\tconst url = new URLSearchParams(query);\n\tlet maxTime = 0;\n\tlet minTime = 0;\n\n\tconst urlMaxTime = url.get('minTime');\n\tconst urlMinTime = url.get('maxTime');\n\n\tif (urlMaxTime && urlMinTime) {\n\t\tmaxTime = parseInt(urlMaxTime, 10);\n\t\tminTime = parseInt(urlMinTime, 10);\n\t}\n\n\treturn {\n\t\tmaxTime,\n\t\tminTime,\n\t};\n};\n","import { TraceReducer } from 'types/reducer/trace';\n\nimport { ParsedUrl } from '../util';\n\nexport const parseQueryIntoSpanKind = (\n\tquery: string,\n\tstateCurrent: TraceReducer['spanKind'],\n): ParsedUrl<TraceReducer['spanKind']> => {\n\tconst url = new URLSearchParams(query);\n\n\tlet current = '';\n\n\tconst selected = url.get('spanKind');\n\n\tif (selected) {\n\t\ttry {\n\t\t\tconst parsedValue = selected;\n\n\t\t\tif (parsedValue && typeof parsedValue === 'string') {\n\t\t\t\tcurrent = parsedValue;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tconsole.log('error while parsing json');\n\t\t}\n\t}\n\n\tif (selected) {\n\t\treturn {\n\t\t\tcurrentValue: current,\n\t\t\turlValue: current,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateCurrent,\n\t\turlValue: current,\n\t};\n};\n","import { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nimport { isTraceFilterEnum, ParsedUrl } from '../util';\n\nexport const parseSelectedFilter = (\n\tquery: string,\n\tselectedFilter: TraceReducer['selectedFilter'],\n\tisUserSelected = false,\n): ParsedUrl<Map<TraceFilterEnum, string[]>> => {\n\tconst url = new URLSearchParams(query);\n\n\tconst filters = new Map<TraceFilterEnum, string[]>();\n\n\tconst title = isUserSelected ? 'selected' : 'userSelectedFilter';\n\n\tconst selected = url.get(title);\n\n\tif (selected) {\n\t\ttry {\n\t\t\tconst parsedValue = JSON.parse(decodeURIComponent(selected));\n\t\t\tif (typeof parsedValue === 'object') {\n\t\t\t\tObject.keys(parsedValue).forEach((e) => {\n\t\t\t\t\tif (isTraceFilterEnum(e)) {\n\t\t\t\t\t\tfilters.set(e, parsedValue[e]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// if the parsing error happens\n\t\t}\n\t}\n\n\tif (selected) {\n\t\treturn {\n\t\t\turlValue: filters,\n\t\t\tcurrentValue: filters,\n\t\t};\n\t}\n\n\treturn {\n\t\turlValue: filters,\n\t\tcurrentValue: selectedFilter,\n\t};\n};\n","import { TraceReducer } from 'types/reducer/trace';\n\nimport { ParsedUrl } from '../util';\n\nexport const parseQueryIntoSelectedTags = (\n\tquery: string,\n\tstateSelectedTags: TraceReducer['selectedTags'],\n): ParsedUrl<TraceReducer['selectedTags']> => {\n\tconst url = new URLSearchParams(query);\n\n\tlet selectedTags: TraceReducer['selectedTags'] = [];\n\n\tconst querySelectedTags = url.get('selectedTags');\n\n\tif (querySelectedTags) {\n\t\ttry {\n\t\t\tconst parsedQuerySelectedTags = JSON.parse(querySelectedTags);\n\n\t\t\tif (Array.isArray(parsedQuerySelectedTags)) {\n\t\t\t\tselectedTags = parsedQuerySelectedTags;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// error while parsing\n\t\t}\n\t}\n\n\tif (querySelectedTags) {\n\t\treturn {\n\t\t\tcurrentValue: selectedTags,\n\t\t\turlValue: selectedTags,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateSelectedTags,\n\t\turlValue: selectedTags,\n\t};\n};\n","import { ParsedUrl } from '../util';\n\nexport const parseIsSkippedSelection = (query: string): ParsedUrl<boolean> => {\n\tconst url = new URLSearchParams(query);\n\n\tlet current = false;\n\n\tconst isSkippedSelected = url.get('isSelectedFilterSkipped');\n\n\tif (isSkippedSelected) {\n\t\ttry {\n\t\t\tconst parsedValue = JSON.parse(isSkippedSelected);\n\n\t\t\tif (typeof parsedValue === 'boolean') {\n\t\t\t\tcurrent = parsedValue;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tcurrent = false;\n\t\t}\n\t}\n\n\tif (isSkippedSelected) {\n\t\treturn {\n\t\t\tcurrentValue: current,\n\t\t\turlValue: current,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: current,\n\t\turlValue: current,\n\t};\n};\n","import { TraceReducer } from 'types/reducer/trace';\n\nimport { ParsedUrl } from '../util';\n\nexport const parseQueryIntoCurrent = (\n\tquery: string,\n\tstateCurrent: TraceReducer['spansAggregate']['currentPage'],\n): ParsedUrl<TraceReducer['spansAggregate']['currentPage']> => {\n\tconst url = new URLSearchParams(query);\n\n\tlet current = 1;\n\n\tconst selected = url.get('spanAggregateCurrentPage');\n\n\tif (selected) {\n\t\ttry {\n\t\t\tconst parsedValue = JSON.parse(decodeURIComponent(selected));\n\t\t\tif (Number.isInteger(parsedValue)) {\n\t\t\t\tcurrent = parseInt(parsedValue, 10);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log('error while parsing json');\n\t\t}\n\t}\n\n\tif (selected) {\n\t\treturn {\n\t\t\tcurrentValue: parseInt(selected, 10),\n\t\t\turlValue: current,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateCurrent,\n\t\turlValue: current,\n\t};\n};\n","import { TraceReducer } from 'types/reducer/trace';\n\nimport { ParsedUrl } from '../util';\n\nexport const parseQueryIntoPageSize = (\n\tquery: string,\n\tstateCurrent: TraceReducer['spansAggregate']['pageSize'],\n): ParsedUrl<TraceReducer['spansAggregate']['pageSize']> => {\n\tconst url = new URLSearchParams(query);\n\n\tlet current = 1;\n\n\tconst selected = url.get('spanAggregateCurrentPageSize');\n\n\tif (selected) {\n\t\ttry {\n\t\t\tconst parsedValue = JSON.parse(decodeURIComponent(selected));\n\t\t\tif (Number.isInteger(parsedValue)) {\n\t\t\t\tcurrent = parseInt(parsedValue, 10);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('error while parsing json');\n\t\t}\n\t}\n\n\tif (selected) {\n\t\treturn {\n\t\t\tcurrentValue: parseInt(selected, 10),\n\t\t\turlValue: current,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateCurrent,\n\t\turlValue: current,\n\t};\n};\n","import { TraceReducer } from 'types/reducer/trace';\n\nimport { ParsedUrl } from '../util';\n\nexport const parseQueryIntoOrder = (\n\tquery: string,\n\tstateCurrent: TraceReducer['spansAggregate']['order'],\n): ParsedUrl<TraceReducer['spansAggregate']['order']> => {\n\tconst url = new URLSearchParams(query);\n\n\tlet current = '';\n\n\tconst selected = url.get('spanAggregateOrder');\n\n\tif (selected) {\n\t\ttry {\n\t\t\tconst parsedValue = selected;\n\n\t\t\tif (parsedValue && typeof parsedValue === 'string') {\n\t\t\t\tcurrent = parsedValue;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tconsole.log('error while parsing json');\n\t\t}\n\t}\n\n\tif (selected) {\n\t\treturn {\n\t\t\tcurrentValue: current,\n\t\t\turlValue: current,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateCurrent,\n\t\turlValue: current,\n\t};\n};\n","import { TraceReducer } from 'types/reducer/trace';\n\nimport { ParsedUrl } from '../util';\n\nexport const parseAggregateOrderParams = (\n\tquery: string,\n\tstateCurrent: TraceReducer['spansAggregate']['orderParam'],\n): ParsedUrl<TraceReducer['spansAggregate']['orderParam']> => {\n\tconst url = new URLSearchParams(query);\n\n\tlet current = '';\n\n\tconst selected = url.get('spanAggregateOrderParam');\n\n\tif (selected) {\n\t\ttry {\n\t\t\tconst parsedValue = selected;\n\n\t\t\tif (parsedValue && typeof parsedValue === 'string') {\n\t\t\t\tcurrent = parsedValue;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tconsole.log('error while parsing json');\n\t\t}\n\t}\n\n\tif (selected) {\n\t\treturn {\n\t\t\tcurrentValue: current,\n\t\t\turlValue: current,\n\t\t};\n\t}\n\n\treturn {\n\t\tcurrentValue: stateCurrent,\n\t\turlValue: current,\n\t};\n};\n","import { Dispatch } from 'redux';\nimport AppActions from 'types/actions';\nimport { UPDATE_IS_TAG_ERROR } from 'types/actions/trace';\nimport { TraceReducer } from 'types/reducer/trace';\n\nexport const UpdateTagIsError = (\n\tisTagModalError: TraceReducer['isTagModalError'],\n): ((dispatch: Dispatch<AppActions>) => void) => (dispatch): void => {\n\tdispatch({\n\t\ttype: UPDATE_IS_TAG_ERROR,\n\t\tpayload: {\n\t\t\tisTagModalError,\n\t\t},\n\t});\n};\n","import { Dispatch } from 'redux';\nimport AppActions from 'types/actions';\nimport { UPDATE_TAG_MODAL_VISIBILITY } from 'types/actions/trace';\nimport { TraceReducer } from 'types/reducer/trace';\n\nexport const UpdateTagVisibility = (\n\tisTagModalOpen: TraceReducer['isTagModalOpen'],\n): ((dispatch: Dispatch<AppActions>) => void) => (dispatch): void => {\n\tdispatch({\n\t\ttype: UPDATE_TAG_MODAL_VISIBILITY,\n\t\tpayload: {\n\t\t\tisTagModalOpen,\n\t\t},\n\t});\n};\n","import { AllTraceFilterEnum } from 'container/Trace/Filters';\nimport createQueryParams from 'lib/createQueryParams';\nimport history from 'lib/history';\nimport { PayloadProps as GetFilterPayload } from 'types/api/trace/getFilters';\nimport { TraceFilterEnum, TraceReducer } from 'types/reducer/trace';\n\nexport * from './parseFilter';\nexport interface ParsedUrl<T> {\n\tcurrentValue: T;\n\turlValue: T;\n}\n\nexport function isTraceFilterEnum(\n\tvalue: TraceFilterEnum | string,\n): value is TraceFilterEnum {\n\treturn !!AllTraceFilterEnum.find((enums) => enums === value);\n}\n\nexport const updateURL = (\n\tselectedFilter: TraceReducer['selectedFilter'],\n\tfilterToFetchData: TraceReducer['filterToFetchData'],\n\tspanAggregateCurrentPage: TraceReducer['spansAggregate']['currentPage'],\n\tselectedTags: TraceReducer['selectedTags'],\n\tisFilterExclude: TraceReducer['isFilterExclude'],\n\tuserSelectedFilter: TraceReducer['userSelectedFilter'],\n\tspanAggregateOrder: TraceReducer['spansAggregate']['order'],\n\tspanAggregateCurrentPageSize: TraceReducer['spansAggregate']['pageSize'],\n\tspanAggregateOrderParam: TraceReducer['spansAggregate']['orderParam'],\n): void => {\n\tconst search = new URLSearchParams(window.location.search);\n\tconst preResult: { key: string; value: string }[] = [];\n\n\tconst keyToSkip = [\n\t\t'selected',\n\t\t'filterToFetchData',\n\t\t'selectedTags',\n\t\t'filter',\n\t\t'isFilterExclude',\n\t\t'userSelectedFilter',\n\t\t'spanAggregateCurrentPage',\n\t\t'spanAggregateOrder',\n\t\t'spanAggregateCurrentPageSize',\n\t\t'spanAggregateOrderParam',\n\t];\n\n\tsearch.forEach((value, key) => {\n\t\tif (!keyToSkip.includes(key)) {\n\t\t\tpreResult.push({\n\t\t\t\tkey,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t});\n\n\tconst preResultParams = preResult.reduce((acc, item) => {\n\t\tacc[item.key] = item.value;\n\t\treturn acc;\n\t}, {} as Record<string, string>);\n\n\tconst queryParams = {\n\t\tselected: JSON.stringify(Object.fromEntries(selectedFilter)),\n\t\tfilterToFetchData: JSON.stringify(filterToFetchData),\n\t\tspanAggregateCurrentPage,\n\t\tspanAggregateOrder,\n\t\tspanAggregateCurrentPageSize,\n\t\tspanAggregateOrderParam,\n\t\tselectedTags: JSON.stringify(selectedTags),\n\t\t...preResultParams,\n\t\tisFilterExclude: JSON.stringify(Object.fromEntries(isFilterExclude)),\n\t\tuserSelectedFilter: JSON.stringify(Object.fromEntries(userSelectedFilter)),\n\t};\n\thistory.replace(\n\t\t`${window.location.pathname}?${createQueryParams(queryParams)}`,\n\t);\n};\n\nexport const getFilter = (data: GetFilterPayload): TraceReducer['filter'] => {\n\tconst filter = new Map<TraceFilterEnum, Record<string, string>>();\n\n\tObject.keys(data).forEach((key) => {\n\t\tconst value = data[key];\n\t\tif (isTraceFilterEnum(key)) {\n\t\t\tfilter.set(key, value);\n\t\t}\n\t});\n\n\treturn filter;\n};\n\nexport const stripTimestampsFromQuery = (query: string): string =>\n\tquery\n\t\t.replace(/(\\?|&)startTime=\\d+/, '')\n\t\t.replace(/&endTime=\\d+/, '')\n\t\t.replace(/[?&]relativeTime=[^&]+/g, '');\n","import { PayloadProps } from 'types/api/trace/getSpans';\n\nexport interface TraceReducer {\n\tfilter: Map<TraceFilterEnum, Record<string, string>>;\n\tfilterToFetchData: TraceFilterEnum[];\n\tfilterLoading: boolean;\n\n\tselectedFilter: Map<TraceFilterEnum, string[]>;\n\tuserSelectedFilter: Map<TraceFilterEnum, string[]>;\n\n\tisFilterExclude: Map<TraceFilterEnum, boolean>;\n\tselectedTags: Tags[];\n\tisTagModalOpen: boolean;\n\tfilterResponseSelected: Set<string>;\n\tisTagModalError: boolean;\n\tspansAggregate: {\n\t\tloading: boolean;\n\t\tcurrentPage: number;\n\t\tdata: SpansAggregateData[];\n\t\terror: boolean;\n\t\ttotal: number;\n\t\tpageSize: number;\n\t\torder: string;\n\t\torderParam: string;\n\t};\n\tselectedGroupBy: string;\n\tselectedFunction: string;\n\tspansGraph: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: string;\n\t\tpayload: PayloadProps;\n\t};\n\tyAxisUnit: string | undefined;\n\tfilterDisplayValue: Map<TraceFilterEnum, number>;\n\tspanKind?: string;\n}\n\ninterface SpansAggregateData {\n\ttimestamp: string;\n\tspanID: string;\n\ttraceID: string;\n\tserviceName: string;\n\toperation: string;\n\tdurationNano: number;\n\tstatusCode: string;\n\tmethod: string;\n}\n\nexport interface Tags {\n\tKey: string;\n\tOperator: OperatorValues;\n\tStringValues: string[];\n\tNumberValues: number[];\n\tBoolValues: boolean[];\n}\n\nexport type OperatorValues =\n\t| 'NotIn'\n\t| 'In'\n\t| 'Equals'\n\t| 'NotEquals'\n\t| 'Contains'\n\t| 'NotContains'\n\t| 'GreaterThan'\n\t| 'Exists'\n\t| 'NotExists'\n\t| 'LessThan'\n\t| 'GreaterThanEquals'\n\t| 'LessThanEquals'\n\t| 'StartsWith'\n\t| 'NotStartsWith';\n\nexport type TraceFilterEnum =\n\t| 'duration'\n\t| 'httpHost'\n\t| 'httpMethod'\n\t| 'httpRoute'\n\t| 'httpUrl'\n\t| 'operation'\n\t| 'serviceName'\n\t| 'status'\n\t| 'responseStatusCode'\n\t| 'rpcMethod'\n\t| 'traceID';\n\nexport const AllPanelHeading: {\n\tkey: TraceFilterEnum;\n\tdisplayValue: string;\n}[] = [\n\t{\n\t\tkey: 'duration',\n\t\tdisplayValue: 'Duration',\n\t},\n\t{\n\t\tkey: 'httpHost',\n\t\tdisplayValue: 'HTTP Host',\n\t},\n\t{\n\t\tkey: 'httpMethod',\n\t\tdisplayValue: 'HTTP Method',\n\t},\n\t{\n\t\tdisplayValue: 'HTTP Route',\n\t\tkey: 'httpRoute',\n\t},\n\t{\n\t\tkey: 'httpUrl',\n\t\tdisplayValue: 'HTTP URL',\n\t},\n\t{\n\t\tkey: 'operation',\n\t\tdisplayValue: 'Operation',\n\t},\n\t{\n\t\tkey: 'responseStatusCode',\n\t\tdisplayValue: 'Status Code',\n\t},\n\t{\n\t\tkey: 'rpcMethod',\n\t\tdisplayValue: 'RPC Method',\n\t},\n\t{\n\t\tkey: 'serviceName',\n\t\tdisplayValue: 'Service Name',\n\t},\n\t{\n\t\tkey: 'status',\n\t\tdisplayValue: 'Status',\n\t},\n\t{\n\t\tkey: 'traceID',\n\t\tdisplayValue: 'Trace ID',\n\t},\n];\n"],"names":["getFilters","async","duration","omitBy","props","other","_","key","startsWith","nonDuration","exclude","isFilterExclude","forEach","value","push","statusCode","error","message","payload","axios","post","start","end","maxDuration","String","minDuration","spanKind","data","ErrorResponseHandler","_default","reactHotLoader","leaveModule","reactHotLoaderGlobal","default","undefined","register","module","getSpans","updatedSelectedTags","selectedTags","map","e","Key","concat","Operator","StringValues","NumberValues","BoolValues","Object","fromEntries","selectedFilter","function","groupBy","step","tags","getSpanAggregate","preProps","limit","offset","order","orderParam","getTagFilters","getTagValue","toString","tagKey","Type","CheckBoxComponent","filterLoading","filterToFetchData","spansAggregate","filter","userSelectedFilter","useSelector","state","traces","globalTime","keyValue","name","dispatch","useDispatch","isLoading","setIsLoading","useState","isUserSelected","get","find","notifications","useNotifications","isCheckBoxSelected","TooTipOverLay","useMemo","_jsx","children","_jsxs","CheckBoxContainer","Checkbox","disabled","onClick","_newSelectedMap$get","newSelectedMap","Map","preUserSelectedMap","preIsFilterExclude","isTopicPresent","set","Set","response","maxTime","minTime","updatedFilter","getFilter","type","UPDATE_ALL_FILTERS","current","currentPage","userSelected","pageSize","updateURL","checked","defaultChecked","Tooltip","overlay","ParaGraph","ellipsis","Typography","styled","div","_templateObject","_taggedTemplateLiteral","Paragraph","_templateObject2","Search","Input","CommonCheckBox","filterDisplayValue","status","statusObj","keys","numberOfFilters","searchFilter","setSearchFilter","isMoreButtonAvilable","Boolean","length","_Fragment","onChange","target","style","padding","placeholder","sort","a","b","countA","countB","toLocaleLowerCase","includes","index","Button","onClickMoreHandler","newFilterDisplayValue","preValue","INITIAL_FILTER_VALUE","UPDATE_SPAN_UPDATE_FILTER_DISPLAY_VALUE","__signature__","Duration","preLocalMaxDuration","useRef","preLocalMinDuration","getDuration","selectedDuration","preMax","setPreMax","preMin","setPreMin","useEffect","parseFloat","getMs","updatedUrl","min","max","preSelectedFilter","preUserSelected","preFilter","values","onRangeSliderHandler","number","debouncedFunction","useDebouncedFn","TipComponent","useCallback","Container","InputContainer","Text","InputComponent","addonAfter","event","Slider","Number","range","tooltip","formatter","_ref2","onAfterChange","_ref","DurationText","_templateObject3","_templateObject4","_templateObject5","TraceID","userEnteredValue","setUserEnteredValue","_selectedFilter$get","onSearch","delete","traceID","marginBottom","loading","onBlur","_selectedFilter$get2","PanelBody","Card","bordered","Spinner","height","tip","renderBody","PanelHeading","_AllPanelHeading$find","PanelName","isOpen","IsPanelOpen","isDefaultOpen","global","defaultErrorMessage","Divider","plain","margin","TextContainer","onCloseHandler","preFilterToFetchTheData","preventDefault","stopPropagation","updatedFilterData","getprepdatedSelectedFilter","getPreUserSelected","has","IconContainer","DownOutlined","RightOutlined","textTransform","AllPanelHeading","displayValue","ButtonContainer","ButtonComponent","postIsFilterExclude","getUpdatedFilter","css","_templateObject6","Panel","AllTraceFilterEnum","Filters","panelName","transposeArray","array","arrayLength","newArray","i","j","_newArray$j","getChartData","allDataPoints","items","chartDataset","chartLabels","timestamp","date","dayjs","toDate","getTime","datasets","borderWidth","spanGaps","borderColor","colors","showLine","pointRadius","labels","getChartDataforGroupBy","chartData","allGroupBy","numberOfGraphs","spansGraph","names","item","_chartData$labels","spanData","preData","updatedName","label","TraceGraph","ref","width","useMeasure","selectedGroupBy","yAxisUnit","errorMessage","ChartData","center","size","Graph","animate","forceReRender","TagsKey","setLocalSelectedTags","tag","selectedKey","setSelectedKey","useQuery","queryFn","cacheTime","options","getTagKeyOptions","onSelectHandler","onTagKeySelect","AutoComplete","allowClear","notFoundContent","showSearch","_e$label","filterOption","inputValue","option","_option$label","toUpperCase","indexOf","onSelect","TagValue","_selectOptions","selectedOperator","selectedStringValues","selectedNumberValues","selectedBoolValues","localTagValue","setLocalTagValue","getInitialLocalValue","globalReducer","tagType","extractTagType","extractTagKey","tagValueDisabled","disableTagValue","onChangeHandler","updatedValues","onTagValueChange","boolValues","numberValues","stringValues","separateTagValues","slice","getFilterOptions","SelectComponent","getTagValueOptions","mode","selectOptions","suggestion","Select","Option","memo","StringBoolNumber","AllMenu","supportedTypes","SingleTags","_AllMenu$find","localSelectedTags","mapOperators","role","onDeleteTagHandler","CloseOutlined","SpaceComponent","Space","extractTagFilters","tagFilters","stringTagKeys","element","numberTagKeys","boolTagKeys","split","Array","isArray","isNaN","setLocalValue","selectedKeys","_payload$stringTagVal","_payload$numberTagVal","_payload$boolTagValue","stringTagValues","numberTagValues","boolTagValues","_e$supportedTypes","AllTags","updateTagIsError","updateTagVisibility","updateFilters","isTagModalError","ErrorContainer","color","CurrentTagsContainer","Tags","wrap","direction","onTagAddHandler","icon","PlusOutlined","align","onResetHandler","onRunQueryHandler","parsedQuery","parseTagsToQuery","isError","CaretRightFilled","mapDispatchToProps","bindActionCreators","UpdateTagIsError","UpdateTagVisibility","connect","contentStyle","setValue","initialTags","tagRef","search","Popover","placement","destroyTooltipOnHide","open","isTagModalOpen","trigger","onOpenChange","showArrow","overlayInnerStyle","content","SearchComponent","enterButton","string","parseQueryToTags","extractValues","filters","isErr","num","query","operator","tagName","tagValues","trim","replaceAll","firstChar","charAt","lastChar","formatValues","join","formattedStringValues","formattedNumberValues","formattedBoolValues","functions","TraceGraphFilter","selectedFunction","selectedGroupByLocal","setSelectedGroupByLocal","enabled","initOptions","htmlFor","getPopupContainer","popupContainer","dropdownMatchSelectWidth","id","getSelectedValue","onClickSelectedFunctionHandler","selectedGroupByValue","onClickSelectedGroupByHandler","filterGroupBy","groupByValues","result","ev","store","selected","UPDATE_SELECTED_GROUP_BY","UPDATE_SELECTED_FUNCTION","_options$find","optionValue","_functions$find","TraceTable","statusFilter","selectedStatusFilter","spansAggregateOrder","getLink","record","ROUTES","TRACE","formUrlParams","spanId","spanID","levelUp","levelDown","getValue","getHttpMethodOrStatus","Tag","columns","title","dataIndex","sorter","render","day","format","DATE_TIME_FORMATS","SLASH_DATETIME_SECONDS","milliseconds","asMilliseconds","toFixed","totalObject","omit","totalCount","reduce","parseInt","ResizeTable","spanOrder","getSpanOrder","getSpanOrderParam","field","UPDATE_SPAN_ORDER","UPDATE_SPAN_ORDER_PARAMS","UPDATE_SPANS_AGGREGATE_PAGE_SIZE","UPDATE_SPANS_AGGREGATE_PAGE_NUMBER","dataSource","rowKey","v4","cursor","onRow","metaKey","ctrlKey","window","history","pagination","responsive","position","total","Trace","getSpansAggregate","getInitialFilter","isChanged","setIsChanged","getStep","inputFormat","RESET_TRACE_FILTER","onClickHandler","replace","Sentry","fallback","ErrorBoundaryFallback","ClearAllFilter","LeftContainer","RightContainer","marginTop","GetInitialTraceFilter","GetSpansAggregate","GetSpans","notify","getState","location","getSelectedFilter","parseSelectedFilter","getFilterToFetchData","parseFilterToFetchData","parsedSpanKind","parseQueryIntoSpanKind","getUserSelected","getIsFilterExcluded","parseFilterExclude","parsedQueryCurrent","parseQueryIntoCurrent","parsedQueryOrder","parseQueryIntoOrder","parsedPageSize","parseQueryIntoPageSize","isSelectionSkipped","parseIsSkippedSelection","parsedSelectedTags","parseQueryIntoSelectedTags","parsedOrderParams","parseAggregateOrderParams","parsedFilter","parseQueryIntoFilter","UPDATE_TRACE_FILTER_LOADING","getFiltersApi","currentValue","diff","stripTimestampsFromQuery","xor","preKey","isTraceFilterEnum","v","_getUserSelected$curr","preResponseSelected","initialFilter","add","UPDATE_TRACE_GRAPH_LOADING","console","UPDATE_SPANS_AGGREGATE","spans","totalSpans","defaultMessage","UPDATE_TRACE_GRAPH_SUCCESS","UPDATE_TRACE_GRAPH_ERROR","stateFilter","urlFilter","URLSearchParams","parsedValue","JSON","parse","urlValue","stateTraceFilterData","decodeURIComponent","stateFilterExclude","currentFilter","isPresent","parseMinMaxTime","url","urlMaxTime","urlMinTime","stateCurrent","log","arguments","stateSelectedTags","querySelectedTags","parsedQuerySelectedTags","isSkippedSelected","isInteger","UPDATE_IS_TAG_ERROR","UPDATE_TAG_MODAL_VISIBILITY","enums","spanAggregateCurrentPage","spanAggregateOrder","spanAggregateCurrentPageSize","spanAggregateOrderParam","preResult","keyToSkip","preResultParams","acc","queryParams","stringify","pathname","createQueryParams"],"sourceRoot":""}