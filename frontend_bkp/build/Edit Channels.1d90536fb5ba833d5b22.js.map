{"version":3,"file":"Edit Channels.1d90536fb5ba833d5b22.js","mappings":"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","sources":["webpack://frontend/./src/api/channels/editEmail.ts","webpack://frontend/./src/api/channels/editMsTeams.ts","webpack://frontend/./src/api/channels/editOpsgenie.ts","webpack://frontend/./src/api/channels/editPager.ts","webpack://frontend/./src/api/channels/editSlack.ts","webpack://frontend/./src/api/channels/editWebhook.ts","webpack://frontend/./src/api/channels/get.ts","webpack://frontend/./src/container/EditAlertChannels/index.tsx","webpack://frontend/./src/pages/ChannelsEdit/index.tsx"],"sourcesContent":["import axios from 'api';\nimport { ErrorResponseHandlerV2 } from 'api/ErrorResponseHandlerV2';\nimport { AxiosError } from 'axios';\nimport { ErrorV2Resp, SuccessResponseV2 } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/channels/editEmail';\n\nconst editEmail = async (\n\tprops: Props,\n): Promise<SuccessResponseV2<PayloadProps>> => {\n\ttry {\n\t\tconst response = await axios.put<PayloadProps>(`/channels/${props.id}`, {\n\t\t\tname: props.name,\n\t\t\temail_configs: [\n\t\t\t\t{\n\t\t\t\t\tsend_resolved: props.send_resolved,\n\t\t\t\t\tto: props.to,\n\t\t\t\t\thtml: props.html,\n\t\t\t\t\theaders: props.headers,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\treturn {\n\t\t\thttpStatusCode: response.status,\n\t\t\tdata: response.data,\n\t\t};\n\t} catch (error) {\n\t\tErrorResponseHandlerV2(error as AxiosError<ErrorV2Resp>);\n\t\tthrow error;\n\t}\n};\n\nexport default editEmail;\n","import axios from 'api';\nimport { ErrorResponseHandlerV2 } from 'api/ErrorResponseHandlerV2';\nimport { AxiosError } from 'axios';\nimport { ErrorV2Resp, SuccessResponseV2 } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/channels/editMsTeams';\n\nconst editMsTeams = async (\n\tprops: Props,\n): Promise<SuccessResponseV2<PayloadProps>> => {\n\ttry {\n\t\tconst response = await axios.put<PayloadProps>(`/channels/${props.id}`, {\n\t\t\tname: props.name,\n\t\t\tmsteamsv2_configs: [\n\t\t\t\t{\n\t\t\t\t\tsend_resolved: props.send_resolved,\n\t\t\t\t\twebhook_url: props.webhook_url,\n\t\t\t\t\ttitle: props.title,\n\t\t\t\t\ttext: props.text,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\treturn {\n\t\t\thttpStatusCode: response.status,\n\t\t\tdata: response.data,\n\t\t};\n\t} catch (error) {\n\t\tErrorResponseHandlerV2(error as AxiosError<ErrorV2Resp>);\n\t\tthrow error;\n\t}\n};\n\nexport default editMsTeams;\n","import axios from 'api';\nimport { ErrorResponseHandlerV2 } from 'api/ErrorResponseHandlerV2';\nimport { AxiosError } from 'axios';\nimport { ErrorResponse, ErrorV2Resp, SuccessResponseV2 } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/channels/editOpsgenie';\n\nconst editOpsgenie = async (\n\tprops: Props,\n): Promise<SuccessResponseV2<PayloadProps> | ErrorResponse> => {\n\ttry {\n\t\tconst response = await axios.put<PayloadProps>(`/channels/${props.id}`, {\n\t\t\tname: props.name,\n\t\t\topsgenie_configs: [\n\t\t\t\t{\n\t\t\t\t\tsend_resolved: props.send_resolved,\n\t\t\t\t\tapi_key: props.api_key,\n\t\t\t\t\tdescription: props.description,\n\t\t\t\t\tpriority: props.priority,\n\t\t\t\t\tmessage: props.message,\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\t...props.detailsArray,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\treturn {\n\t\t\thttpStatusCode: response.status,\n\t\t\tdata: response.data,\n\t\t};\n\t} catch (error) {\n\t\treturn ErrorResponseHandlerV2(error as AxiosError<ErrorV2Resp>);\n\t\tthrow error;\n\t}\n};\n\nexport default editOpsgenie;\n","import axios from 'api';\nimport { ErrorResponseHandlerV2 } from 'api/ErrorResponseHandlerV2';\nimport { AxiosError } from 'axios';\nimport { ErrorV2Resp, SuccessResponseV2 } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/channels/editPager';\n\nconst editPager = async (\n\tprops: Props,\n): Promise<SuccessResponseV2<PayloadProps>> => {\n\ttry {\n\t\tconst response = await axios.put<PayloadProps>(`/channels/${props.id}`, {\n\t\t\tname: props.name,\n\t\t\tpagerduty_configs: [\n\t\t\t\t{\n\t\t\t\t\tsend_resolved: props.send_resolved,\n\t\t\t\t\trouting_key: props.routing_key,\n\t\t\t\t\tclient: props.client,\n\t\t\t\t\tclient_url: props.client_url,\n\t\t\t\t\tdescription: props.description,\n\t\t\t\t\tseverity: props.severity,\n\t\t\t\t\tclass: props.class,\n\t\t\t\t\tcomponent: props.component,\n\t\t\t\t\tgroup: props.group,\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\t...props.detailsArray,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\treturn {\n\t\t\thttpStatusCode: response.status,\n\t\t\tdata: response.data,\n\t\t};\n\t} catch (error) {\n\t\tErrorResponseHandlerV2(error as AxiosError<ErrorV2Resp>);\n\t\tthrow error;\n\t}\n};\n\nexport default editPager;\n","import axios from 'api';\nimport { ErrorResponseHandlerV2 } from 'api/ErrorResponseHandlerV2';\nimport { AxiosError } from 'axios';\nimport { ErrorV2Resp, SuccessResponseV2 } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/channels/editSlack';\n\nconst editSlack = async (\n\tprops: Props,\n): Promise<SuccessResponseV2<PayloadProps>> => {\n\ttry {\n\t\tconst response = await axios.put<PayloadProps>(`/channels/${props.id}`, {\n\t\t\tname: props.name,\n\t\t\tslack_configs: [\n\t\t\t\t{\n\t\t\t\t\tsend_resolved: props.send_resolved,\n\t\t\t\t\tapi_url: props.api_url,\n\t\t\t\t\tchannel: props.channel,\n\t\t\t\t\ttitle: props.title,\n\t\t\t\t\ttext: props.text,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\treturn {\n\t\t\thttpStatusCode: response.status,\n\t\t\tdata: response.data,\n\t\t};\n\t} catch (error) {\n\t\tErrorResponseHandlerV2(error as AxiosError<ErrorV2Resp>);\n\t\tthrow error;\n\t}\n};\n\nexport default editSlack;\n","import axios from 'api';\nimport { ErrorResponseHandlerV2 } from 'api/ErrorResponseHandlerV2';\nimport { AxiosError } from 'axios';\nimport { ErrorV2Resp, SuccessResponseV2 } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/channels/editWebhook';\n\nconst editWebhook = async (\n\tprops: Props,\n): Promise<SuccessResponseV2<PayloadProps>> => {\n\ttry {\n\t\tlet httpConfig = {};\n\t\tconst username = props.username ? props.username.trim() : '';\n\t\tconst password = props.password ? props.password.trim() : '';\n\n\t\tif (username !== '' && password !== '') {\n\t\t\thttpConfig = {\n\t\t\t\tbasic_auth: {\n\t\t\t\t\tusername,\n\t\t\t\t\tpassword,\n\t\t\t\t},\n\t\t\t};\n\t\t} else if (username === '' && password !== '') {\n\t\t\thttpConfig = {\n\t\t\t\tauthorization: {\n\t\t\t\t\ttype: 'Bearer',\n\t\t\t\t\tcredentials: password,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst response = await axios.put<PayloadProps>(`/channels/${props.id}`, {\n\t\t\tname: props.name,\n\t\t\twebhook_configs: [\n\t\t\t\t{\n\t\t\t\t\tsend_resolved: props.send_resolved,\n\t\t\t\t\turl: props.api_url,\n\t\t\t\t\thttp_config: httpConfig,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\treturn {\n\t\t\thttpStatusCode: response.status,\n\t\t\tdata: response.data,\n\t\t};\n\t} catch (error) {\n\t\tErrorResponseHandlerV2(error as AxiosError<ErrorV2Resp>);\n\t\tthrow error;\n\t}\n};\n\nexport default editWebhook;\n","import axios from 'api';\nimport { ErrorResponseHandlerV2 } from 'api/ErrorResponseHandlerV2';\nimport { AxiosError } from 'axios';\nimport { ErrorV2Resp, SuccessResponseV2 } from 'types/api';\nimport { PayloadProps, Props } from 'types/api/channels/get';\nimport { Channels } from 'types/api/channels/getAll';\n\nconst get = async (props: Props): Promise<SuccessResponseV2<Channels>> => {\n\ttry {\n\t\tconst response = await axios.get<PayloadProps>(`/channels/${props.id}`);\n\n\t\treturn {\n\t\t\thttpStatusCode: response.status,\n\t\t\tdata: response.data.data,\n\t\t};\n\t} catch (error) {\n\t\tErrorResponseHandlerV2(error as AxiosError<ErrorV2Resp>);\n\t\tthrow error;\n\t}\n};\n\nexport default get;\n","import { Form } from 'antd';\nimport editEmail from 'api/channels/editEmail';\nimport editMsTeamsApi from 'api/channels/editMsTeams';\nimport editOpsgenie from 'api/channels/editOpsgenie';\nimport editPagerApi from 'api/channels/editPager';\nimport editSlackApi from 'api/channels/editSlack';\nimport editWebhookApi from 'api/channels/editWebhook';\nimport testEmail from 'api/channels/testEmail';\nimport testMsTeamsApi from 'api/channels/testMsTeams';\nimport testOpsgenie from 'api/channels/testOpsgenie';\nimport testPagerApi from 'api/channels/testPager';\nimport testSlackApi from 'api/channels/testSlack';\nimport testWebhookApi from 'api/channels/testWebhook';\nimport logEvent from 'api/common/logEvent';\nimport ROUTES from 'constants/routes';\nimport {\n\tChannelType,\n\tEmailChannel,\n\tMsTeamsChannel,\n\tOpsgenieChannel,\n\tPagerChannel,\n\tSlackChannel,\n\tValidatePagerChannel,\n\tWebhookChannel,\n} from 'container/CreateAlertChannels/config';\nimport FormAlertChannels from 'container/FormAlertChannels';\nimport { useNotifications } from 'hooks/useNotifications';\nimport history from 'lib/history';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router-dom';\nimport APIError from 'types/api/error';\n\nfunction EditAlertChannels({\n\tinitialValue,\n}: EditAlertChannelsProps): JSX.Element {\n\t// init namespace for translations\n\tconst { t } = useTranslation('channels');\n\n\tconst [formInstance] = Form.useForm();\n\tconst [selectedConfig, setSelectedConfig] = useState<\n\t\tPartial<\n\t\t\tSlackChannel &\n\t\t\t\tWebhookChannel &\n\t\t\t\tPagerChannel &\n\t\t\t\tMsTeamsChannel &\n\t\t\t\tOpsgenieChannel &\n\t\t\t\tEmailChannel\n\t\t>\n\t>({\n\t\t...initialValue,\n\t});\n\tconst [savingState, setSavingState] = useState<boolean>(false);\n\tconst [testingState, setTestingState] = useState<boolean>(false);\n\tconst { notifications } = useNotifications();\n\tconst { id } = useParams<{ id: string }>();\n\n\tconst [type, setType] = useState<ChannelType>(\n\t\tinitialValue?.type ? (initialValue.type as ChannelType) : ChannelType.Slack,\n\t);\n\n\tconst onTypeChangeHandler = useCallback((value: string) => {\n\t\tsetType(value as ChannelType);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tformInstance.setFieldsValue({\n\t\t\t...initialValue,\n\t\t});\n\t}, [formInstance, initialValue]);\n\n\tconst prepareSlackRequest = useCallback(\n\t\t() => ({\n\t\t\tapi_url: selectedConfig?.api_url || '',\n\t\t\tchannel: selectedConfig?.channel || '',\n\t\t\tname: selectedConfig?.name || '',\n\t\t\tsend_resolved: selectedConfig?.send_resolved || false,\n\t\t\ttext: selectedConfig?.text || '',\n\t\t\ttitle: selectedConfig?.title || '',\n\t\t\tid,\n\t\t}),\n\t\t[id, selectedConfig],\n\t);\n\n\tconst onSlackEditHandler = useCallback(async () => {\n\t\tsetSavingState(true);\n\n\t\tif (selectedConfig?.api_url === '') {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: 'Error',\n\t\t\t\tdescription: t('webhook_url_required'),\n\t\t\t});\n\t\t\tsetSavingState(false);\n\t\t\treturn { status: 'failed', statusMessage: t('webhook_url_required') };\n\t\t}\n\n\t\ttry {\n\t\t\tawait editSlackApi(prepareSlackRequest());\n\t\t\tnotifications.success({\n\t\t\t\tmessage: 'Success',\n\t\t\t\tdescription: t('channel_edit_done'),\n\t\t\t});\n\n\t\t\thistory.replace(ROUTES.ALL_CHANNELS);\n\t\t\treturn { status: 'success', statusMessage: t('channel_edit_done') };\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as APIError).getErrorCode(),\n\t\t\t\tdescription: (error as APIError).getErrorMessage(),\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tstatus: 'failed',\n\t\t\t\tstatusMessage:\n\t\t\t\t\t(error as APIError).getErrorMessage() || t('channel_edit_failed'),\n\t\t\t};\n\t\t} finally {\n\t\t\tsetSavingState(false);\n\t\t}\n\t}, [prepareSlackRequest, t, notifications, selectedConfig]);\n\n\tconst prepareWebhookRequest = useCallback(() => {\n\t\tconst { name, username, password } = selectedConfig;\n\t\treturn {\n\t\t\tapi_url: selectedConfig?.api_url || '',\n\t\t\tname: name || '',\n\t\t\tsend_resolved: selectedConfig?.send_resolved || false,\n\t\t\tusername,\n\t\t\tpassword,\n\t\t\tid,\n\t\t};\n\t}, [id, selectedConfig]);\n\n\tconst onWebhookEditHandler = useCallback(async () => {\n\t\tsetSavingState(true);\n\t\tconst { username, password } = selectedConfig;\n\n\t\tconst showError = (msg: string): void => {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: 'Error',\n\t\t\t\tdescription: msg,\n\t\t\t});\n\t\t};\n\n\t\tif (selectedConfig?.api_url === '') {\n\t\t\tshowError(t('webhook_url_required'));\n\t\t\tsetSavingState(false);\n\t\t\treturn { status: 'failed', statusMessage: t('webhook_url_required') };\n\t\t}\n\n\t\tif (username && (!password || password === '')) {\n\t\t\tshowError(t('username_no_password'));\n\t\t\tsetSavingState(false);\n\t\t\treturn { status: 'failed', statusMessage: t('username_no_password') };\n\t\t}\n\n\t\ttry {\n\t\t\tawait editWebhookApi(prepareWebhookRequest());\n\t\t\tnotifications.success({\n\t\t\t\tmessage: 'Success',\n\t\t\t\tdescription: t('channel_edit_done'),\n\t\t\t});\n\n\t\t\thistory.replace(ROUTES.ALL_CHANNELS);\n\t\t\treturn { status: 'success', statusMessage: t('channel_edit_done') };\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as APIError).getErrorCode(),\n\t\t\t\tdescription: (error as APIError).getErrorMessage(),\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tstatus: 'failed',\n\t\t\t\tstatusMessage:\n\t\t\t\t\t(error as APIError).getErrorMessage() || t('channel_edit_failed'),\n\t\t\t};\n\t\t} finally {\n\t\t\tsetSavingState(false);\n\t\t}\n\t}, [prepareWebhookRequest, t, notifications, selectedConfig]);\n\n\tconst prepareEmailRequest = useCallback(\n\t\t() => ({\n\t\t\tname: selectedConfig?.name || '',\n\t\t\tsend_resolved: selectedConfig?.send_resolved || false,\n\t\t\tto: selectedConfig.to || '',\n\t\t\thtml: selectedConfig.html || '',\n\t\t\theaders: selectedConfig.headers || {},\n\t\t\tid,\n\t\t}),\n\t\t[id, selectedConfig],\n\t);\n\n\tconst onEmailEditHandler = useCallback(async () => {\n\t\tsetSavingState(true);\n\t\tconst request = prepareEmailRequest();\n\n\t\ttry {\n\t\t\tawait editEmail(request);\n\t\t\tnotifications.success({\n\t\t\t\tmessage: 'Success',\n\t\t\t\tdescription: t('channel_edit_done'),\n\t\t\t});\n\t\t\thistory.replace(ROUTES.ALL_CHANNELS);\n\t\t\treturn { status: 'success', statusMessage: t('channel_edit_done') };\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as APIError).getErrorCode(),\n\t\t\t\tdescription: (error as APIError).getErrorMessage(),\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tstatus: 'failed',\n\t\t\t\tstatusMessage:\n\t\t\t\t\t(error as APIError).getErrorMessage() || t('channel_edit_failed'),\n\t\t\t};\n\t\t} finally {\n\t\t\tsetSavingState(false);\n\t\t}\n\t}, [prepareEmailRequest, t, notifications]);\n\n\tconst preparePagerRequest = useCallback(\n\t\t() => ({\n\t\t\tname: selectedConfig.name || '',\n\t\t\tsend_resolved: selectedConfig?.send_resolved || false,\n\t\t\trouting_key: selectedConfig.routing_key,\n\t\t\tclient: selectedConfig.client,\n\t\t\tclient_url: selectedConfig.client_url,\n\t\t\tdescription: selectedConfig.description,\n\t\t\tseverity: selectedConfig.severity,\n\t\t\tcomponent: selectedConfig.component,\n\t\t\tclass: selectedConfig.class,\n\t\t\tgroup: selectedConfig.group,\n\t\t\tdetails: selectedConfig.details,\n\t\t\tdetailsArray: JSON.parse(selectedConfig.details || '{}'),\n\t\t\tid,\n\t\t}),\n\t\t[id, selectedConfig],\n\t);\n\n\tconst onPagerEditHandler = useCallback(async () => {\n\t\tsetSavingState(true);\n\t\tconst validationError = ValidatePagerChannel(selectedConfig as PagerChannel);\n\n\t\tif (validationError !== '') {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: 'Error',\n\t\t\t\tdescription: validationError,\n\t\t\t});\n\t\t\tsetSavingState(false);\n\t\t\treturn { status: 'failed', statusMessage: validationError };\n\t\t}\n\n\t\ttry {\n\t\t\tawait editPagerApi(preparePagerRequest());\n\t\t\tnotifications.success({\n\t\t\t\tmessage: 'Success',\n\t\t\t\tdescription: t('channel_edit_done'),\n\t\t\t});\n\t\t\thistory.replace(ROUTES.ALL_CHANNELS);\n\t\t\treturn { status: 'success', statusMessage: t('channel_edit_done') };\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as APIError).getErrorCode(),\n\t\t\t\tdescription: (error as APIError).getErrorMessage(),\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tstatus: 'failed',\n\t\t\t\tstatusMessage:\n\t\t\t\t\t(error as APIError).getErrorMessage() || t('channel_edit_failed'),\n\t\t\t};\n\t\t} finally {\n\t\t\tsetSavingState(false);\n\t\t}\n\t}, [preparePagerRequest, notifications, selectedConfig, t]);\n\n\tconst prepareOpsgenieRequest = useCallback(\n\t\t() => ({\n\t\t\tname: selectedConfig.name || '',\n\t\t\tsend_resolved: selectedConfig?.send_resolved || false,\n\t\t\tapi_key: selectedConfig.api_key || '',\n\t\t\tmessage: selectedConfig.message || '',\n\t\t\tdescription: selectedConfig.description || '',\n\t\t\tpriority: selectedConfig.priority || '',\n\t\t\tid,\n\t\t}),\n\t\t[id, selectedConfig],\n\t);\n\n\tconst onOpsgenieEditHandler = useCallback(async () => {\n\t\tsetSavingState(true);\n\n\t\tif (selectedConfig?.api_key === '') {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: 'Error',\n\t\t\t\tdescription: t('api_key_required'),\n\t\t\t});\n\t\t\tsetSavingState(false);\n\t\t\treturn { status: 'failed', statusMessage: t('api_key_required') };\n\t\t}\n\t\ttry {\n\t\t\tawait editOpsgenie(prepareOpsgenieRequest());\n\t\t\tnotifications.success({\n\t\t\t\tmessage: 'Success',\n\t\t\t\tdescription: t('channel_edit_done'),\n\t\t\t});\n\t\t\thistory.replace(ROUTES.ALL_CHANNELS);\n\t\t\treturn { status: 'success', statusMessage: t('channel_edit_done') };\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as APIError).getErrorCode(),\n\t\t\t\tdescription: (error as APIError).getErrorMessage(),\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tstatus: 'failed',\n\t\t\t\tstatusMessage:\n\t\t\t\t\t(error as APIError).getErrorMessage() || t('channel_edit_failed'),\n\t\t\t};\n\t\t} finally {\n\t\t\tsetSavingState(false);\n\t\t}\n\t}, [prepareOpsgenieRequest, t, notifications, selectedConfig]);\n\n\tconst prepareMsTeamsRequest = useCallback(\n\t\t() => ({\n\t\t\twebhook_url: selectedConfig?.webhook_url || '',\n\t\t\tname: selectedConfig?.name || '',\n\t\t\tsend_resolved: selectedConfig?.send_resolved || false,\n\t\t\ttext: selectedConfig?.text || '',\n\t\t\ttitle: selectedConfig?.title || '',\n\t\t\tid,\n\t\t}),\n\t\t[id, selectedConfig],\n\t);\n\n\tconst onMsTeamsEditHandler = useCallback(async () => {\n\t\tsetSavingState(true);\n\n\t\tif (selectedConfig?.webhook_url === '') {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: 'Error',\n\t\t\t\tdescription: t('webhook_url_required'),\n\t\t\t});\n\t\t\tsetSavingState(false);\n\t\t\treturn { status: 'failed', statusMessage: t('webhook_url_required') };\n\t\t}\n\n\t\ttry {\n\t\t\tawait editMsTeamsApi(prepareMsTeamsRequest());\n\t\t\tnotifications.success({\n\t\t\t\tmessage: 'Success',\n\t\t\t\tdescription: t('channel_edit_done'),\n\t\t\t});\n\t\t\thistory.replace(ROUTES.ALL_CHANNELS);\n\t\t\treturn { status: 'success', statusMessage: t('channel_edit_done') };\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: (error as APIError).getErrorCode(),\n\t\t\t\tdescription: (error as APIError).getErrorMessage(),\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tstatus: 'failed',\n\t\t\t\tstatusMessage:\n\t\t\t\t\t(error as APIError).getErrorMessage() || t('channel_edit_failed'),\n\t\t\t};\n\t\t} finally {\n\t\t\tsetSavingState(false);\n\t\t}\n\t}, [prepareMsTeamsRequest, t, notifications, selectedConfig]);\n\n\tconst onSaveHandler = useCallback(\n\t\tasync (value: ChannelType) => {\n\t\t\tlet result;\n\t\t\tif (value === ChannelType.Slack) {\n\t\t\t\tresult = await onSlackEditHandler();\n\t\t\t} else if (value === ChannelType.Webhook) {\n\t\t\t\tresult = await onWebhookEditHandler();\n\t\t\t} else if (value === ChannelType.Pagerduty) {\n\t\t\t\tresult = await onPagerEditHandler();\n\t\t\t} else if (value === ChannelType.MsTeams) {\n\t\t\t\tresult = await onMsTeamsEditHandler();\n\t\t\t} else if (value === ChannelType.Opsgenie) {\n\t\t\t\tresult = await onOpsgenieEditHandler();\n\t\t\t} else if (value === ChannelType.Email) {\n\t\t\t\tresult = await onEmailEditHandler();\n\t\t\t}\n\t\t\tlogEvent('Alert Channel: Save channel', {\n\t\t\t\ttype: value,\n\t\t\t\tsendResolvedAlert: selectedConfig?.send_resolved,\n\t\t\t\tname: selectedConfig?.name,\n\t\t\t\tnew: 'false',\n\t\t\t\tstatus: result?.status,\n\t\t\t\tstatusMessage: result?.statusMessage,\n\t\t\t});\n\t\t},\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[\n\t\t\tonSlackEditHandler,\n\t\t\tonWebhookEditHandler,\n\t\t\tonPagerEditHandler,\n\t\t\tonMsTeamsEditHandler,\n\t\t\tonOpsgenieEditHandler,\n\t\t\tonEmailEditHandler,\n\t\t],\n\t);\n\n\tconst performChannelTest = useCallback(\n\t\tasync (channelType: ChannelType) => {\n\t\t\tsetTestingState(true);\n\t\t\ttry {\n\t\t\t\tlet request;\n\t\t\t\tswitch (channelType) {\n\t\t\t\t\tcase ChannelType.Webhook:\n\t\t\t\t\t\trequest = prepareWebhookRequest();\n\t\t\t\t\t\tawait testWebhookApi(request);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ChannelType.Slack:\n\t\t\t\t\t\trequest = prepareSlackRequest();\n\t\t\t\t\t\tawait testSlackApi(request);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ChannelType.Pagerduty:\n\t\t\t\t\t\trequest = preparePagerRequest();\n\t\t\t\t\t\tif (request) await testPagerApi(request);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ChannelType.MsTeams:\n\t\t\t\t\t\trequest = prepareMsTeamsRequest();\n\t\t\t\t\t\tif (request) await testMsTeamsApi(request);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ChannelType.Opsgenie:\n\t\t\t\t\t\trequest = prepareOpsgenieRequest();\n\t\t\t\t\t\tif (request) await testOpsgenie(request);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ChannelType.Email:\n\t\t\t\t\t\trequest = prepareEmailRequest();\n\t\t\t\t\t\tif (request) await testEmail(request);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tnotifications.error({\n\t\t\t\t\t\t\tmessage: 'Error',\n\t\t\t\t\t\t\tdescription: t('test_unsupported'),\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsetTestingState(false);\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnotifications.success({\n\t\t\t\t\tmessage: 'Success',\n\t\t\t\t\tdescription: t('channel_test_done'),\n\t\t\t\t});\n\t\t\t\tlogEvent('Alert Channel: Test notification', {\n\t\t\t\t\ttype: channelType,\n\t\t\t\t\tsendResolvedAlert: selectedConfig?.send_resolved,\n\t\t\t\t\tname: selectedConfig?.name,\n\t\t\t\t\tnew: 'false',\n\t\t\t\t\tstatus: 'Test success',\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tnotifications.error({\n\t\t\t\t\tmessage: (error as APIError).getErrorCode(),\n\t\t\t\t\tdescription: (error as APIError).getErrorMessage(),\n\t\t\t\t});\n\t\t\t\tlogEvent('Alert Channel: Test notification', {\n\t\t\t\t\ttype: channelType,\n\t\t\t\t\tsendResolvedAlert: selectedConfig?.send_resolved,\n\t\t\t\t\tname: selectedConfig?.name,\n\t\t\t\t\tnew: 'false',\n\t\t\t\t\tstatus: 'Test failed',\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetTestingState(false);\n\t\t},\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[\n\t\t\tt,\n\t\t\tprepareWebhookRequest,\n\t\t\tpreparePagerRequest,\n\t\t\tprepareSlackRequest,\n\t\t\tprepareMsTeamsRequest,\n\t\t\tprepareOpsgenieRequest,\n\t\t\tprepareEmailRequest,\n\t\t\tnotifications,\n\t\t],\n\t);\n\n\tconst onTestHandler = useCallback(\n\t\tasync (value: ChannelType) => {\n\t\t\tperformChannelTest(value);\n\t\t},\n\t\t[performChannelTest],\n\t);\n\n\treturn (\n\t\t<FormAlertChannels\n\t\t\t{...{\n\t\t\t\tformInstance,\n\t\t\t\tonTypeChangeHandler,\n\t\t\t\tsetSelectedConfig,\n\t\t\t\ttype,\n\t\t\t\tonTestHandler,\n\t\t\t\tonSaveHandler,\n\t\t\t\ttestingState,\n\t\t\t\tsavingState,\n\t\t\t\ttitle: t('page_title_edit'),\n\t\t\t\tinitialValue,\n\t\t\t\tediting: true,\n\t\t\t}}\n\t\t/>\n\t);\n}\n\ninterface EditAlertChannelsProps {\n\tinitialValue: {\n\t\t[x: string]: unknown;\n\t};\n}\n\nexport default EditAlertChannels;\n","/* eslint-disable sonarjs/cognitive-complexity */\nimport { Typography } from 'antd';\nimport get from 'api/channels/get';\nimport Spinner from 'components/Spinner';\nimport {\n\tChannelType,\n\tMsTeamsChannel,\n\tPagerChannel,\n\tSlackChannel,\n\tWebhookChannel,\n} from 'container/CreateAlertChannels/config';\nimport EditAlertChannels from 'container/EditAlertChannels';\nimport { useTranslation } from 'react-i18next';\nimport { useQuery } from 'react-query';\nimport { useParams } from 'react-router-dom';\nimport { SuccessResponseV2 } from 'types/api';\nimport { Channels } from 'types/api/channels/getAll';\nimport APIError from 'types/api/error';\n\nfunction ChannelsEdit(): JSX.Element {\n\tconst { id } = useParams<Params>();\n\tconst { t } = useTranslation();\n\n\tconst { isFetching, isError, data, error } = useQuery<\n\t\tSuccessResponseV2<Channels>,\n\t\tAPIError\n\t>(['getChannel', id], {\n\t\tqueryFn: () =>\n\t\t\tget({\n\t\t\t\tid,\n\t\t\t}),\n\t});\n\n\tif (isError) {\n\t\treturn (\n\t\t\t<Typography>\n\t\t\t\t{error?.getErrorMessage() || t('something_went_wrong')}\n\t\t\t</Typography>\n\t\t);\n\t}\n\n\tif (isFetching || !data?.data) {\n\t\treturn <Spinner tip=\"Loading Channels...\" />;\n\t}\n\n\tconst { data: ChannelData } = data.data;\n\n\tconst value = JSON.parse(ChannelData);\n\n\tconst prepChannelConfig = (): {\n\t\ttype: string;\n\t\tchannel: SlackChannel & WebhookChannel & PagerChannel & MsTeamsChannel;\n\t} => {\n\t\tlet channel: SlackChannel & WebhookChannel & PagerChannel & MsTeamsChannel = {\n\t\t\tname: '',\n\t\t};\n\t\tif (value && 'slack_configs' in value) {\n\t\t\tconst slackConfig = value.slack_configs[0];\n\t\t\tchannel = slackConfig;\n\t\t\treturn {\n\t\t\t\ttype: ChannelType.Slack,\n\t\t\t\tchannel,\n\t\t\t};\n\t\t}\n\n\t\tif (value && 'msteamsv2_configs' in value) {\n\t\t\tconst msteamsConfig = value.msteamsv2_configs[0];\n\t\t\tchannel = msteamsConfig;\n\t\t\treturn {\n\t\t\t\ttype: ChannelType.MsTeams,\n\t\t\t\tchannel,\n\t\t\t};\n\t\t}\n\t\tif (value && 'pagerduty_configs' in value) {\n\t\t\tconst pagerConfig = value.pagerduty_configs[0];\n\t\t\tchannel = pagerConfig;\n\t\t\tchannel.details = JSON.stringify(pagerConfig.details);\n\t\t\tchannel.detailsArray = { ...pagerConfig.details };\n\t\t\treturn {\n\t\t\t\ttype: ChannelType.Pagerduty,\n\t\t\t\tchannel,\n\t\t\t};\n\t\t}\n\n\t\tif (value && 'opsgenie_configs' in value) {\n\t\t\tconst opsgenieConfig = value.opsgenie_configs[0];\n\t\t\tchannel = opsgenieConfig;\n\t\t\treturn {\n\t\t\t\ttype: ChannelType.Opsgenie,\n\t\t\t\tchannel,\n\t\t\t};\n\t\t}\n\n\t\tif (value && 'email_configs' in value) {\n\t\t\tconst emailConfig = value.email_configs[0];\n\t\t\tchannel = emailConfig;\n\t\t\treturn {\n\t\t\t\ttype: ChannelType.Email,\n\t\t\t\tchannel,\n\t\t\t};\n\t\t}\n\n\t\tif (value && 'webhook_configs' in value) {\n\t\t\tconst webhookConfig = value.webhook_configs[0];\n\t\t\tchannel = webhookConfig;\n\t\t\tchannel.api_url = webhookConfig.url;\n\n\t\t\tif ('http_config' in webhookConfig) {\n\t\t\t\tconst httpConfig = webhookConfig.http_config;\n\t\t\t\tif ('basic_auth' in httpConfig) {\n\t\t\t\t\tchannel.username = webhookConfig.http_config?.basic_auth?.username;\n\t\t\t\t\tchannel.password = webhookConfig.http_config?.basic_auth?.password;\n\t\t\t\t} else if ('authorization' in httpConfig) {\n\t\t\t\t\tchannel.password = webhookConfig.http_config?.authorization?.credentials;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttype: ChannelType.Webhook,\n\t\t\t\tchannel,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\ttype: ChannelType.Slack,\n\t\t\tchannel,\n\t\t};\n\t};\n\n\tconst target = prepChannelConfig();\n\n\treturn (\n\t\t<EditAlertChannels\n\t\t\t{...{\n\t\t\t\tinitialValue: {\n\t\t\t\t\t...target.channel,\n\t\t\t\t\ttype: target.type,\n\t\t\t\t\tname: value.name,\n\t\t\t\t},\n\t\t\t}}\n\t\t/>\n\t);\n}\ninterface Params {\n\tid: string;\n}\n\nexport default ChannelsEdit;\n"],"names":["editEmail","async","response","axios","put","concat","props","id","name","email_configs","send_resolved","to","html","headers","httpStatusCode","status","data","error","ErrorResponseHandlerV2","_default","reactHotLoader","leaveModule","reactHotLoaderGlobal","default","undefined","register","module","editMsTeams","msteamsv2_configs","webhook_url","title","text","editOpsgenie","opsgenie_configs","api_key","description","priority","message","details","detailsArray","editPager","pagerduty_configs","routing_key","client","client_url","severity","class","component","group","editSlack","slack_configs","api_url","channel","editWebhook","httpConfig","username","trim","password","basic_auth","authorization","type","credentials","webhook_configs","url","http_config","get","EditAlertChannels","_ref","initialValue","useTranslation","formInstance","Form","useForm","selectedConfig","setSelectedConfig","useState","savingState","setSavingState","testingState","setTestingState","notifications","useNotifications","useParams","setType","ChannelType","Slack","onTypeChangeHandler","useCallback","value","useEffect","setFieldsValue","prepareSlackRequest","onSlackEditHandler","t","statusMessage","editSlackApi","success","history","replace","ROUTES","ALL_CHANNELS","getErrorCode","getErrorMessage","prepareWebhookRequest","onWebhookEditHandler","showError","msg","editWebhookApi","prepareEmailRequest","onEmailEditHandler","request","preparePagerRequest","JSON","parse","onPagerEditHandler","validationError","ValidatePagerChannel","editPagerApi","prepareOpsgenieRequest","onOpsgenieEditHandler","prepareMsTeamsRequest","onMsTeamsEditHandler","editMsTeamsApi","onSaveHandler","_result","_result2","result","Webhook","Pagerduty","MsTeams","Opsgenie","Email","logEvent","sendResolvedAlert","new","performChannelTest","channelType","testWebhookApi","testSlackApi","testPagerApi","testMsTeamsApi","testOpsgenie","testEmail","onTestHandler","_jsx","FormAlertChannels","editing","ChannelsEdit","isFetching","isError","useQuery","queryFn","Typography","children","Spinner","tip","ChannelData","target","prepChannelConfig","pagerConfig","stringify","webhookConfig","_webhookConfig$http_c","_webhookConfig$http_c2","_webhookConfig$http_c3"],"sourceRoot":""}