{"version":3,"file":"Onboarding.04ec2b93df6421b0fc56.js","mappings":";6oBAEA,QADwB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,gOAAoO,KAAQ,aAAc,MAAS,4DCCla,QADyB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,uOAA2O,KAAQ,cAAe,MAAS,4DCC3a,QADyB,CAAE,KAAQ,SAAgBA,EAAcC,GAAkB,MAAO,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,gLAAiL,KAAQD,IAAkB,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,uRAAwR,KAAQC,IAAoB,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,6LAA8L,KAAQD,KAAqB,EAAG,KAAQ,eAAgB,MAAS,2DCCvhC,QADyB,CAAE,KAAQ,SAAgBA,EAAcC,GAAkB,MAAO,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,gLAAiL,KAAQD,IAAkB,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,sXAAuX,KAAQC,IAAoB,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,2RAA4R,KAAQD,KAAqB,EAAG,KAAQ,eAAgB,MAAS,2DCCptC,QADyB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,0LAA6L,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,oLAAwL,KAAQ,cAAe,MAAS,4DCCtlB,QADmB,CAAE,KAAQ,CAAE,IAAO,MAAO,MAAS,CAAE,QAAW,gBAAiB,UAAa,SAAW,SAAY,CAAC,CAAE,IAAO,OAAQ,MAAS,CAAC,EAAG,SAAY,CAAC,CAAE,IAAO,QAAS,MAAS,CAAC,KAAQ,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,8DAAiE,CAAE,IAAO,OAAQ,MAAS,CAAE,EAAK,gEAAoE,KAAQ,OAAQ,MAAS,gHCKpaE,EAAoB,SAA2BC,EAAOC,GACxD,OAAoB,gBAAoB,EAAAC,GAAU,QAAc,OAAc,CAAC,EAAGF,GAAQ,CAAC,EAAG,CAC5FC,IAAKA,EACLE,KAAM,EAAAD,IAEV,EACAH,EAAkBK,YAAc,oBAChC,QAA4B,aAAiBL,uGCPzCM,EAAqB,SAA4BL,EAAOC,GAC1D,OAAoB,gBAAoB,EAAAC,GAAU,QAAc,OAAc,CAAC,EAAGF,GAAQ,CAAC,EAAG,CAC5FC,IAAKA,EACLE,KAAM,EAAAD,IAEV,EACAG,EAAmBD,YAAc,qBACjC,QAA4B,aAAiBC,uGCPzCC,EAAqB,SAA4BN,EAAOC,GAC1D,OAAoB,gBAAoB,EAAAC,GAAU,QAAc,OAAc,CAAC,EAAGF,GAAQ,CAAC,EAAG,CAC5FC,IAAKA,EACLE,KAAM,MAEV,EACAG,EAAmBF,YAAc,qBACjC,QAA4B,aAAiBE,uGCPzCC,EAAqB,SAA4BP,EAAOC,GAC1D,OAAoB,gBAAoB,EAAAC,GAAU,QAAc,OAAc,CAAC,EAAGF,GAAQ,CAAC,EAAG,CAC5FC,IAAKA,EACLE,KAAM,MAEV,EACAI,EAAmBH,YAAc,qBACjC,QAA4B,aAAiBG,uGCPzCC,EAAqB,SAA4BR,EAAOC,GAC1D,OAAoB,gBAAoB,EAAAC,GAAU,QAAc,OAAc,CAAC,EAAGF,GAAQ,CAAC,EAAG,CAC5FC,IAAKA,EACLE,KAAM,MAEV,EACAK,EAAmBJ,YAAc,qBACjC,QAA4B,aAAiBI,uGCPzCC,EAAe,SAAsBT,EAAOC,GAC9C,OAAoB,gBAAoB,EAAAC,GAAU,QAAc,OAAc,CAAC,EAAGF,GAAQ,CAAC,EAAG,CAC5FC,IAAKA,EACLE,KAAM,MAEV,EACAM,EAAaL,YAAc,eAC3B,QAA4B,aAAiBK,gPCbtC,MAAMC,EAAwBA,CACpCC,EACAC,IAAgB,0GAAAC,OAKFF,EAAc,wCAAAE,OAGnBD,EAAQ,gBAGhB,IAAAE,EAbgCC,GAahCD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SAbWT,EAAqB,oGAAAK,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,sICOlC,SAASC,EAAWC,GAMJ,IANK,SACpBC,EAAQ,YACRC,GAIAF,EACA,MAAOG,EAAiBC,IAAsBC,EAAAA,EAAAA,WAAS,GAkBvD,OACCC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,IAAG,gBAAiBL,EAAkB,SAAW,IAAIF,UACpEK,EAAAA,EAAAA,KAAA,UAAQG,KAAK,SAASC,QAlBJC,KACnB,IAAIC,EAAa,GACbX,GAAYY,MAAMC,QAAQb,KAC7BG,GAAmB,GACnBW,UAAUC,UAAUC,UAAUhB,EAAS,GAAGvB,MAAMuB,SAAS,IAAIiB,SAAQ,KACpEN,EAAcX,EAAS,GAAGvB,MAAMuB,SAAS,GAAckB,MAAM,EAAG,KAChEC,YAAW,KACVhB,GAAmB,EAAM,GACvB,IAAK,IAETQ,EAAcX,EAAS,GAAGvB,MAAMuB,SAAS,GAAckB,MAAM,EAAG,MAGjEjB,SAAAA,EAAc,CAAEU,cAAa,EAKeX,SACxCE,GAAqCG,EAAAA,EAAAA,KAACe,EAAAA,EAAa,KAAjCf,EAAAA,EAAAA,KAACgB,EAAAA,EAAY,OAIrC,+MAhCSvB,EAAW,0DAkCpBA,EAAYwB,aAAe,CAC1BrB,YAAaA,QACZ,MAAAsB,EAEazB,EAAf,IAA2B,IAAAP,EAtCPC,GAsCOD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAtClBE,EAAW,4GAAAP,EAAAK,SAAA2B,EAAA,0GAAA/B,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,gVCYpB,SAAS2B,EAAGzB,GAQI,IARH,SACZC,EAAQ,eACRyB,EAAc,gBACdC,GAKA3B,EACA,MAAM,cAAE4B,EAAgB,MAAOC,GAASH,EAUxC,OACCI,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,yBAAwBN,SAAA,EACtCK,EAAAA,EAAAA,KAACP,EAAAA,EAAW,CAACG,YAVM6B,IACpB,MAAMC,EAAe,IAAKH,EAAMI,cAAeF,GAE3CJ,KAAoBO,EAAAA,EAAAA,GAAQN,KAC/BO,EAAAA,EAAAA,GAASP,EAAyBI,EACnC,EAKuC/B,SAAEA,IACvCA,IAGJ,CAEA,SAASmC,EAAIC,GAMc,IANb,KACbC,EAAI,OACJC,EAAM,UACNhC,EAAY,YAAW,SACvBN,KACGvB,GACQ2D,EACX,MAAMG,EAAQ,iBAAiBC,KAAKlC,GAAa,IACjD,OAAQgC,GAAUC,GACjBlC,EAAAA,EAAAA,KAACoC,EAAAA,EAEA,CACAC,MAAOC,EAAAA,GACPC,SAAUL,EAAM,GAChBM,OAAO,SACHpE,EAAKuB,SAER8C,OAAO9C,GAAU+C,QAAQ,MAAO,OAGlC1C,EAAAA,EAAAA,KAAA,QAAMC,UAAWA,KAAe7B,EAAKuB,SACnCA,GAGJ,CAEA,SAASgD,EAAIC,GAA6C,IAA5C,KAAEC,EAAI,SAAElD,GAAqBiD,EAC1C,OACC5C,EAAAA,EAAAA,KAAA,KAAG6C,KAAMA,EAAMC,OAAO,SAASC,IAAI,sBAAqBpD,SACtDA,GAGJ,CAEA,MAAMqD,EAAsBA,CAC3BC,EACAC,KAEA,IAAIC,EAAsBF,EAE1B,MAAMG,EAAkBC,OAAOC,QAAQJ,GAGvC,IAAK,MAAOK,EAAKC,KAAUJ,EAAiB,CAC3C,MAAMK,EAAc,KAAHxE,OAAQsE,EAAG,MACtBG,EAAQ,IAAIC,OAAOF,EAAa,KACtCN,EAAsBA,EAAoBT,QAAQgB,EAAOF,EAC1D,CAEA,OAAOL,CAAmB,EAG3B,SAASS,EAASC,GAA4C,IAA3C,MAAEC,GAA0BD,EAC9C,OAAO7D,EAAAA,EAAAA,KAAA,MAAIqC,MAAO,CAAEyB,SAAQnE,SAAC,0BAC9B,CAEA,SAASoE,EAAgBC,GAUT,IAVU,gBACzBf,EAAe,UACfC,EAAS,gBACT7B,EAAe,eACfD,GAMA4C,EACA,MAAMC,EAAuBjB,EAAoBC,EAAiBC,GAElE,OACClD,EAAAA,EAAAA,KAACkE,EAAAA,EAAa,CACbC,cAAe,CAACC,EAAAA,GAChBC,WAAY,CAGXC,EAAG3B,EACH4B,IAAKC,IAAA,IAAC,SAAE7E,GAAU6E,EAAA,OACjBrD,EAAI,CACHxB,WACAyB,eAAgBA,QAAAA,EAAkB,CAAC,EACnCC,kBAAmBA,GAClB,EACHoD,KAAM3C,EACN4C,UAAWd,GACVjE,SAEDsE,GAGJ,CAO6C,IAAA/E,EAxCpBC,EAmCzB4E,EAAiB9C,aAAe,CAC/BG,eAAgB,CAAC,EACjBC,iBAAiB,IAG2BnC,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SA3HpC4B,EAAG,6FAAAjC,EAAAK,SA2BHuC,EAAI,8FAAA5C,EAAAK,SA0BJoD,EAAI,8FAAAzD,EAAAK,SAQPyD,EAAmB,6GAAA9D,EAAAK,SAkBhBqE,EAAS,mGAAA1E,EAAAK,SAITwE,EAAgB,4GAAA5E,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,qMC3EvBN,EArBsCC,mFAAzB,SAASwF,EAAgBjF,GAIjB,IAJkB,cACxCkF,GAGAlF,EAIA,OACCM,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+BAA8BN,UAC5C6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,aAAaG,QALNyE,KACvBC,EAAAA,EAAQC,KAAKH,GAAiB,IAAI,EAIoBjF,SAAA,EACpDK,EAAAA,EAAAA,KAAA,OAAKgF,IAAI,+BAA+BC,IAAI,YAE5CjF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBN,SAAC,eAIrC,CAEAgF,EAAiB1D,aAAe,CAC/B2D,cAAe,MACd1F,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SArBsBoF,EAAgB,0GAAAxF,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,ylBCwCjC,IAAK0F,EAAU,SAAVA,GAAU,OAAVA,EAAU,UAAVA,EAAU,gCAAVA,EAAU,oDAAVA,EAAU,8BAAVA,EAAU,kCAAVA,CAAU,MAoBf,MAAMC,EAAW,CACvBC,IAAK,CACJC,GAAIH,EAAWE,IACfE,MAAO,yBACPC,KACC,gGAEFC,eAAgB,CACfH,GAAIH,EAAWM,eACfF,MAAO,kBACPC,KACC,yFAEFE,yBAA0B,CACzBJ,GAAIH,EAAWO,yBACfH,MAAO,4BACPC,KACC,qGAEFG,cAAe,CACdL,GAAIH,EAAWQ,cACfJ,MAAO,iBACPC,KACC,kFAEFI,gBAAiB,CAChBN,GAAIH,EAAWS,gBACfL,MAAO,mBACPC,KACC,wGAIY,SAASK,IAA0B,IAAAC,EACjD,MAAOC,EAAgBC,IAAqBhG,EAAAA,EAAAA,UAC3CoF,EAASC,MAGHY,EAAqBC,IAA0BlG,EAAAA,EAAAA,UAASmG,EAAAA,KACxDC,EAAYC,IAAiBrG,EAAAA,EAAAA,UAAS,IACtCsG,EAASC,IAAcvG,EAAAA,EAAAA,UAAS,IACjC,SAAEwG,GAAazB,EAAAA,GACf,EAAE0B,IAAMC,EAAAA,EAAAA,GAAe,CAAC,gBAExB,aAAEC,IAAiBC,EAAAA,EAAAA,MACnBC,EAAwBF,SAE7B,QAFyCb,EAAZa,EAAcG,MAC1CC,GAASA,EAAKC,OAASC,EAAAA,EAAYC,uBACpC,IAAApB,OAAA,EAF6BA,EAE3BqB,QAEG,mBACLC,EAAkB,oBAClBC,EAAmB,eACnBC,EAAc,qBACdC,EAAoB,yBACpBC,EAAwB,cACxBC,EAAa,iBACbC,EAAgB,oBAChBC,IACGC,EAAAA,EAAAA,OAEJC,EAAAA,EAAAA,IAAc,MACb/F,EAAAA,EAAAA,GAAS,wBAAyB,CAAC,EAAE,IAGtC,MAAM,OAAEgG,EAAQC,KAAMC,IAAkBC,EAAAA,EAAAA,UAAS,CAChDC,QAASA,KAAMC,EAAAA,EAAAA,QAGhBC,EAAAA,EAAAA,YAAU,KACT,GACY,YAAXN,GACAE,GACAA,GACAxH,MAAMC,QAAQuH,EAAcK,SAC3B,CACD,MAAMA,EAAUL,EAAcK,QAAQ,IAAM,CAC3CC,aAAc,GACdC,WAAY,IAGbZ,EAAoB,CACnBa,qBAAsBH,aAAO,EAAPA,EAASC,aAC/BG,OAAQJ,aAAO,EAAPA,EAASE,YAEnB,IAEE,CAACT,EAAQE,aAAa,EAAbA,EAAeK,UAE3B,MAAMK,EACLtB,IAEA,GAAIA,EAAoB,CACvB,IAAIuB,EAAmC,GAEvCA,GAAQC,EAAAA,EAAAA,IAAS,CAChBxB,uBAGDlB,EAAuByC,EACxB,GAGKE,EAAaA,CAClBC,EACAH,IAEAA,EAAMI,QAAQC,GAASA,EAAK1D,KAAOwD,KAqBpCV,EAAAA,EAAAA,YAAU,MACLrC,aAAc,EAAdA,EAAgBT,MAAOH,EAAWO,yBACjC0B,EACHsB,EAAwCtB,IAExClB,EAAuB+C,EAAAA,IACvBzB,EAAyB0B,EAAAA,MAEhBnD,aAAc,EAAdA,EAAgBT,MAAOH,EAAWM,eACxC2B,EACHsB,EAAwCtB,IAExClB,EAAuBiD,EAAAA,IACvB3B,EAAyB4B,EAAAA,MAEhBrD,aAAc,EAAdA,EAAgBT,MAAOH,EAAWQ,cACxCyB,EACHsB,EAAwCtB,IAExClB,EAAuBmD,EAAAA,IACvB7B,EAAyB8B,EAAAA,MAEhBvD,aAAc,EAAdA,EAAgBT,MAAOH,EAAWS,gBACxCwB,EACHsB,EAAwCtB,IAExClB,EAAuBqD,EAAAA,IACvB/B,EAAyBgC,EAAAA,MAEhBzD,aAAc,EAAdA,EAAgBT,MAAOH,EAAWE,MAhDvBoE,MACtB,GAA4B,eAAxBpC,EAOJ,GAAIC,IAAmBoC,EAAAA,GAAkBC,YAOzCzD,EAAuBC,EAAAA,QAPvB,CACC,MAAMyD,EAAef,EAAWgB,EAAAA,GAASC,mBAAoB3D,EAAAA,IAC7DD,EAAuB0D,EAGxB,KAZA,CACC,MAAMA,EAAef,EAAWgB,EAAAA,GAASE,aAAc5D,EAAAA,IACvDD,EAAuB0D,EAGxB,CASiC,EAkChCH,GAEKrC,GACJI,EAAyBwC,EAAAA,IAE3B,GAGE,CAACjE,EAAgBqB,EAAoBC,EAAqBC,IAE7D,MAAM2C,EAAiBA,KACtB,GAAI7D,GAAc,EAAG,CACpB,MAAM8D,EAAW9D,EAAa,GAG9BtE,EAAAA,EAAAA,GAAS,6BAA8B,CACtCiE,eAAgBA,EAAeT,GAC/B6E,WAAYD,IAGb7D,EAAc6D,GACd3D,EAAWD,EAAU,GAGrBoB,EAAiB,CAChBjI,OAAQsG,EACRiD,KAAM/C,EAAoBK,IAE5B,GASK8D,EAAsB3K,IAC3BuG,EAAkBvG,GAClB8H,EAAqB9H,GACrB+H,EAAyB,KAAK,GAU/BY,EAAAA,EAAAA,YAAU,KACT,MAAM,SAAEiC,GAAa7D,EAEjB6D,IAAaC,EAAAA,EAAOC,oCACvBH,EAAmBhF,EAASC,KAC5BmC,EAAyBwC,EAAAA,IACzBC,KACUI,IAAaC,EAAAA,EAAOE,uCAC9BJ,EAAmBhF,EAASM,0BAC5BuE,KACUI,IAAaC,EAAAA,EAAOG,6BAC9BL,EAAmBhF,EAASK,gBAC5BwE,KACUI,IAAaC,EAAAA,EAAOI,4BAC9BN,EAAmBhF,EAASO,eAC5BsE,KACUI,IAAaC,EAAAA,EAAOK,8BAC9BP,EAAmBhF,EAASQ,iBAC5BqE,MAxBD1D,EAAW,GACXF,EAAc,GACdL,EAAkBZ,EAASC,KAC3BoC,IAwBA,GAEE,CAACjB,EAAS6D,WAEb,MAAOO,IAAQC,EAAAA,EAAKC,WAEnBC,GACAC,KACGhL,EAAAA,EAAAA,WAAkB,GAEhBiL,IAAcC,EAAAA,EAAAA,cAClBzH,IACAuH,GAA+BvH,GAC1BA,GACJmH,GAAKO,aACN,GAED,CAACP,KAGF,OACCnJ,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,YAAWN,SAAA,CACT,IAAfwG,IACA3E,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,kBAAiBN,SAAA,EAC/BK,EAAAA,EAAAA,KAAA,OACCI,QAASA,MACRyB,EAAAA,EAAAA,GAAS,qCAAsC,CAAC,GAChDiD,EAAAA,EAAQC,KAAKsF,EAAAA,EAAOc,YAAY,EAEjClL,UAAU,kBAAiBN,SAE1B6G,EAAE,WAEJxG,EAAAA,EAAAA,KAAC2E,EAAAA,EAAgB,KACjB3E,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBN,UAChCK,EAAAA,EAAAA,KAAA,MAAAL,SAAK6G,EAAE,wBAERxG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBN,UAChCK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BN,SACvC0D,OAAO+H,KAAKlG,GAAYmG,KAAK7L,IAC7B,MAAM8L,EAAmBnG,EAAiB3F,GAE1C,OACCgC,EAAAA,EAAAA,MAAC+J,EAAAA,EAAI,CACJtL,UAAWC,IACV,eACA4F,EAAeT,KAAOiG,EAAgBjG,GAAK,WAAa,IAGzDjF,QAASA,IAAY+J,EAAmBmB,GAAiB3L,SAAA,EAEzDK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWC,MAAK,CAACxL,UAAU,mBAAmByL,MAAO,EAAE/L,SACtD2L,EAAgBhG,SAElBtF,EAAAA,EAAAA,KAACwL,EAAAA,EAAWG,UAAS,CAAC1L,UAAU,aAAYN,SAC1C2L,EAAgB/F,SAPb+F,EAAgBjG,GASf,SAKXrF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBN,UACrCK,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CAACzL,KAAK,UAAU5B,MAAMyB,EAAAA,EAAAA,KAACvB,EAAAA,EAAkB,IAAK2B,QAvGvCyL,KACd1F,GAAc,GACjBrB,EAAAA,EAAQC,KAAK+G,EAAAA,GAAehG,EAAeT,IAC5C,EAoG6E1F,SACvE6G,EAAE,oBAGLhF,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,wBAAuBN,SAAA,EACrCK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAC9L,UAAU,cAAaN,SACtC6G,EAAE,8BAEJhF,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,gBAAeN,SAAA,EAC7BK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAApM,SAAE6G,EAAE,kBACpBxG,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CACNxL,QAASA,MACRyB,EAAAA,EAAAA,GAAS,+BAAgC,CACxCrC,OAAQsG,aAAc,EAAdA,EAAgBT,GACxB2G,KAAM,aAEPjB,IAA+B,EAAK,EAErCxM,MAAMyB,EAAAA,EAAAA,KAACiM,EAAAA,EAAQ,CAACC,KAAM,KACtB/L,KAAK,UAASR,SAEb6G,EAAE,qBAOPL,EAAa,IACbnG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBN,UAC9BK,EAAAA,EAAAA,KAACmM,EAAAA,EAAoB,CACpBC,iBAAkBA,KACjB9F,EAAWD,EAAU,GACrBD,EAAcD,EAAa,GAC3BJ,EAAkBZ,EAASC,KAC3BoC,IAEIZ,EACH9B,EAAAA,EAAQC,KAAKsF,EAAAA,EAAOgC,wBAEpBvH,EAAAA,EAAQC,KAAKsF,EAAAA,EAAOiC,YACrB,EAEDxG,eAAgBA,EAChBE,oBAAqBA,EACrB+E,+BAAgCA,QAInC/K,EAAAA,EAAAA,KAACuM,EAAAA,EAAe,CACf5B,KAAMA,GACNG,4BAA6BA,GAC7BE,YAAaA,OAIjB,CA3RiD,IAAA9L,EA/BfC,EA0TjCqN,EA1TuB5G,EAAU,iuBASnBa,EAAAA,EAEWE,EAAAA,GAcrBgB,EAAAA,GAEJC,EAAAA,EAIwCI,EAAAA,aAAQ9I,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAhEpC4F,EAAQ,uGAAAjG,EAAAK,SAiCGqG,EAAU,2GAAAzG,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,2eCzElC,MAAMiN,EAAkB,IAET,SAASC,IACvB,MAAM,QAAEC,EAAO,QAAEC,EAAO,aAAEC,IAAiBC,EAAAA,EAAAA,KAGxCC,GAAUA,EAAMC,aAEbC,GAAWC,EAAAA,EAAAA,KACXC,EAAmBF,EAASG,IAAIC,EAAAA,EAAYF,kBAC5CG,EAA0BL,EAASG,IACxCC,EAAAA,EAAYC,0BAGP,YACLC,EAAW,mBACXpG,EAAkB,oBAClBC,EAAmB,WACnBjB,EAAU,eACVkB,EAAc,kBACdmG,IACG7F,EAAAA,EAAAA,OACE,QAAE8F,IAAYC,EAAAA,EAAAA,MACdC,GAAeC,EAAAA,EAAAA,UACpB,KAAOC,EAAAA,EAAAA,IAAqCJ,IAAuB,IACnE,CAACA,KAGKK,EAAYC,IAAiBhO,EAAAA,EAAAA,UAAS,KACtCiO,EAASC,IAAclO,EAAAA,EAAAA,WAAS,IAChCmO,EAAiBC,IAAsBpO,EAAAA,EAAAA,WAAS,GACjDqO,GAAWC,EAAAA,EAAAA,OAEX,KACLvG,EAAI,MACJwG,EACAC,WAAYC,EAAgB,QAC5BC,EAAO,QACPC,IACGC,EAAAA,EAAAA,GAAgB,CACnBhC,UACAC,UACAC,eACAc,eACAiB,QAAS,CACRC,QAA8B,UAArB1B,MAIJ2B,EAAcC,IAAmBhP,EAAAA,EAAAA,UAAyB,MAEhE+H,KAAMkH,EACNV,MAAOW,EACPV,WAAYW,IACTC,EAAAA,EAAAA,GACH,CACCN,QAA8B,UAArB1B,EACTiC,gBAAiBN,GAElBxB,GAA2B,GAC3B,gCAIA+B,EACAC,IACGvP,EAAAA,EAAAA,WAAkB,IAEtBoI,EAAAA,EAAAA,YAAU,KAEyB,IAAAoH,EAAlC,GAAyB,UAArBpC,EACH,GAA4B,OAAxB6B,aAAO,EAAPA,EAASQ,YACZF,GAA6B,QACvB,GAAiC,aAA7BN,SAAgB,QAATO,EAAPP,EAAS5G,eAAO,IAAAmH,OAAA,EAAhBA,EAAkB1H,QAAsB,CAId,aAHd4H,EAAAA,EAAAA,IACrBT,aAAO,EAAPA,EAAS5G,SAEQsH,eACjBzB,GAAW,GACXE,GAAmB,GACnBY,GAAgB,IAEhBO,GAA6B,EAE/B,CACD,GACE,CACFD,EACAL,EACAC,EACAC,EACA/B,KAGDhF,EAAAA,EAAAA,YAAU,KACL2F,EAAa,GAA0B,UAArBX,IACrB4B,GAAgB,GAChBd,GAAW,GACZ,GACE,CAACH,EAAYX,KAEhBhF,EAAAA,EAAAA,YAAU,KACgB,UAArBgF,GAAiC+B,GACpCnB,GAAe4B,GAAcA,EAAY,GAC1C,GACE,CAACxC,EAAkB6B,EAASE,KAoI/B/G,EAAAA,EAAAA,YAAU,KACT,IAAIyH,EA0BJ,MAxByB,UAArBzC,IACCa,EACH4B,EAAeC,aAAY,KAE1B,MAAMC,EAAiD,KAA/BC,KAAKC,MAAQ,KAG/B5H,EAAU,CACfwE,QAHmC,IAAbmD,KAAKC,MAI3BrD,QAASmD,EACTjD,gBAGDuB,EAAS,CACRjO,KAAM8P,EAAAA,GACN7H,WACC,GACAqE,IACQuB,GAAW4B,GACtBM,cAAcN,IAKT,KACNM,cAAcN,EAAa,CAC3B,GAEC,CAAClB,EAASf,EAAcd,EAAcmB,KAEzC7F,EAAAA,EAAAA,YAAU,KACgB,UAArBgF,GA1E0BgD,KAGT,IAAAC,EAcrB,IAhBItI,GAAQ2G,KACXV,EAAcD,EAAa,GACvBA,EAAa,KAChBjM,EAAAA,EAAAA,GAAS,mCAAoC,CAC5CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACbC,iBACA7H,OAAQ2G,SAAkB,QAARiK,EAAVjK,EAAY3G,cAAM,IAAA4Q,OAAA,EAAlBA,EAAoB/K,GAC5BkI,cACA1F,OAAQ,WAEToG,GAAW,KAITkC,GAAY5P,MAAMC,QAAQ2P,GAC7B,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAASM,OAAQD,GAAK,EAAG,KAAAE,EAC5C,IAAe,QAAXA,EAAAP,EAASK,UAAE,IAAAE,OAAA,EAAXA,EAAanD,eAAgBA,EAAa,KAAAoD,EAC7C1C,GAAW,GACXE,GAAmB,IAEnBtM,EAAAA,EAAAA,GAAS,mCAAoC,CAC5CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACbC,iBACA7H,OAAQ2G,SAAkB,QAARwK,EAAVxK,EAAY3G,cAAM,IAAAmR,OAAA,EAAlBA,EAAoBtL,GAC5BkI,cACA1F,OAAQ,eAGT,KACD,CACD,CACD,EAuCC+I,CAAsB9I,EACvB,GAEE,CAAC0G,EAAkB1G,EAAMwG,EAAOG,KAEnCtG,EAAAA,EAAAA,YAAU,KACgB,UAArBgF,GACHuB,GACD,GAEE,IAEH,MAAMmC,GAAwBjD,EAAAA,EAAAA,UAC7B,IAAMY,GAAoBR,GAAWkB,GACrC,CAACV,EAAkBR,EAASkB,IAG7B,OACC1N,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,8BAA6BN,SAAA,EAC3CK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBN,SAxLLmR,MAC3B,OAAQ3J,aAAkB,EAAlBA,EAAoBJ,MAC3B,IAAK,OACJ,OACC/G,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,OACPC,QAAQ,qCACRC,OAAO,kBACPC,QAAQ,+CACRC,aAAa,2BAIhB,IAAK,SACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,SACPC,QAAQ,uCACRC,OAAO,oBACPC,QAAQ,iDACRC,aAAa,2BAIhB,IAAK,aACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,aACPC,QAAQ,2CACRC,OAAO,wBACPC,QAAQ,qDACRC,aAAa,2BAGhB,IAAK,KACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,KACPC,QAAQ,mCACRC,OAAO,gBACPC,QAAQ,iDACRC,aAAa,2BAGhB,IAAK,QACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,QACPC,QAAQ,8CACRC,OAAO,mBACPC,QAAQ,wDACRC,aAAa,2BAGhB,IAAK,OACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,OACPC,QAAQ,qCACRC,OAAO,kBACPC,QAAQ,+CACRC,aAAa,2BAGhB,IAAK,SACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,OACPC,QAAQ,uCACRC,OAAO,oBACPC,QAAQ,iDACRC,aAAa,2BAGhB,IAAK,QACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,QACPC,QAAQ,sCACRC,OAAO,mBACPC,QAAQ,gDACRC,aAAa,2BAIhB,QACC,OAAOpR,EAAAA,EAAAA,KAAAqR,EAAAA,SAAA,CAAA1R,SAAE,MACX,EAiGkCmR,MACjCtP,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,mBAAkBN,SAAA,EAChC6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,eAAcN,SAAA,EAC5BK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAON,SAAC,oBACvBK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUN,SAAE4N,QAG5B/L,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,gBAAeN,SAAA,EAC7BK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAON,SAAC,4BACvB6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,WAAUN,SAAA,CACvBwH,aAAkB,EAAlBA,EAAoBJ,KAAK,MAAIyG,SAIhChM,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,cAAaN,SAAA,EAC3BK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAON,SAAC,cAEvB6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,SAAQN,SAAA,CACrBkR,IAAyB7Q,EAAAA,EAAAA,KAACsR,EAAAA,EAAe,KACxCT,GACD3C,IACsB,UAArBf,GACA3L,EAAAA,EAAAA,MAAA6P,EAAAA,SAAA,CAAA1R,SAAA,EACCK,EAAAA,EAAAA,KAACtB,EAAAA,EAAkB,CAAC6S,aAAa,aACjCvR,EAAAA,EAAAA,KAAA,QAAAL,SAAM,kBAGPK,EAAAA,EAAAA,KAACwR,EAAAA,EAAyB,CACzBC,iBAAkB,CAACnE,GAA2B,QAG/CuD,IACA3C,IACqB,UAArBf,GACA3L,EAAAA,EAAAA,MAAA6P,EAAAA,SAAA,CAAA1R,SAAA,EACCK,EAAAA,EAAAA,KAACrB,EAAAA,EAAkB,CAAC4S,aAAa,aACjCvR,EAAAA,EAAAA,KAAA,QAAAL,SAAM,iBAGPK,EAAAA,EAAAA,KAACwR,EAAAA,EAAyB,CACzBC,iBAAkB,CAACnE,GAA2B,cAKnD9L,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,eAAcN,SAAA,EAC5BK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAON,SAAC,eAEvB6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,UAASN,SAAA,CACtBkR,IAAyB7Q,EAAAA,EAAAA,KAAA,OAAAL,SAAK,0BAC7BkR,GAAyB3C,IAC1BlO,EAAAA,EAAAA,KAAA,OAAAL,SAAK,wDAEJkR,IAA0B3C,IAC3BlO,EAAAA,EAAAA,KAAA,OAAAL,SAAK,8CAOZ,CA1SwB,IAAAT,EApDgBC,EA8VvCqN,EA9VuBE,EAAgB,y5BACII,EAAAA,GAK1BI,EAAAA,EAabvF,EAAAA,GACgB+F,EAAAA,GASHW,EAAAA,GAQbM,EAAAA,EAeAQ,EAAAA,MAAmBjQ,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAtDlBkN,EAAe,kIAAAvN,EAAAK,SAEGmN,EAAgB,qIAAAvN,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,mEC2CGN,EAnCTC,uSAAnB,SAASuS,IACvB,MAAO/G,GAAQC,EAAAA,EAAKC,WACd,EAAErE,IAAMC,EAAAA,EAAAA,GAAe,CAAC,WACxB3B,GAAU6M,EAAAA,EAAAA,MAEVxE,GAAmBD,EAAAA,EAAAA,KAAcE,IAAIC,EAAAA,EAAYF,mBAEjD,YACLI,EAAW,eACXzH,EAAc,mBACdqB,EAAkB,kBAClBqG,EAAiB,yBACjBjG,EAAwB,0BACxBqK,EAAyB,kBACzBC,EAAiB,wBACjBC,IACGnK,EAAAA,EAAAA,MAEEoK,EACgB,UAArB5E,IAAgCrH,aAAc,EAAdA,EAAgBT,MAAOH,EAAAA,GAAWE,KAE5D4M,EAAsBC,IAA2BlS,EAAAA,EAAAA,UAEtD,KACKmS,EAAqBC,IAA0BpS,EAAAA,EAAAA,UAEpD,IAEIqS,EAA0BxH,EAAAA,EAAKyH,SAAS,0BAA2B1H,IAGxE2H,EACAC,IACGxS,EAAAA,EAAAA,WAAS,IAEP,cAAEyS,IAAkBC,EAAAA,EAAAA,OAEnBC,EAAkBC,IAAuB5S,EAAAA,EAAAA,WAAS,IAEzDoI,EAAAA,EAAAA,YAAU,KACT,GAAIrC,EAAgB,CACnB,MAAMuK,GAAauC,EAAAA,EAAAA,IAAe9M,GAElCmM,EAAwB5B,EACzB,IAEE,KAEHlI,EAAAA,EAAAA,YAAU,KACT,GAAIrC,GAAkBqB,EAAoB,EACtB0L,EAAAA,EAAAA,IAAc,CAChCrT,OAAQsG,EACRuK,WAAYlJ,KAIZwL,GAAoB,GACpBR,GACCW,EAAAA,EAAAA,IAAuB,CACtBtT,OAAQsG,EACRuK,WAAYlJ,MAIdwL,GAAoB,EAEtB,IACE,CAAC7M,EAAgBqB,IAiDpB,OACC3F,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,mBAAkBN,SAAA,EAChC6B,EAAAA,EAAAA,MAACgK,EAAAA,EAAWO,KAAI,CAAC9L,UAAU,oBAAmBN,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBN,SAAC,MAAQ,0BAE3CK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAA+BN,SAC5CqS,aAAoB,EAApBA,EAAsB3G,KAAKgF,IAC3B7O,EAAAA,EAAAA,MAAC+J,EAAAA,EAAI,CACJtL,UAAWC,IACV,sBACAiH,aAAkB,EAAlBA,EAAoBJ,QAASsJ,EAAWtJ,KAAO,WAAa,GAC5DgL,IACEgB,EAAAA,GAAwCC,UAAS3C,aAAU,EAAVA,EAAYhL,KAAM,IAClE,WACA,IAGJjF,QAASA,KACH2R,IACJD,EAAwB,MACxBF,EAA0B,MAC1BrK,EAAyB8I,GACzB1F,EAAKsI,eAAe,CAAEC,gBAAiB,OACxC,EACCvT,SAAA,EAEFK,EAAAA,EAAAA,KAAA,OAAAL,UACCK,EAAAA,EAAAA,KAAA,OACCC,UAAWC,IAAG,0BACd8E,IAAKqL,EAAWa,OAChBjM,IAAI,QAINjF,EAAAA,EAAAA,KAAA,OAAAL,UACCK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAC9L,UAAU,iBAAgBN,SACzC0Q,EAAWtJ,WApBTsJ,EAAWtJ,WA2BnB/G,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBN,UAC9BK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBN,UACtC6B,EAAAA,EAAAA,MAACoJ,EAAAA,EAAI,CACJuI,cAAe,CACd5F,cACA2F,gBAAiB1F,GAElB7C,KAAMA,EACNyI,eAAgBA,KACf,MAAM7F,EAAc5C,EAAK0I,cAAc,eAEvCxB,EAAkBtE,EAAY,EAE/BxG,KAAK,mBACLuM,OAAO,WACPC,gBAAgB,SAAQ5T,SAAA,EAEvBmG,aAAc,EAAdA,EAAgBT,MAAOF,EAAAA,GAASC,IAAIC,KACpC7D,EAAAA,EAAAA,MAAA6P,EAAAA,SAAA,CAAA1R,SAAA,EACCK,EAAAA,EAAAA,KAAC4K,EAAAA,EAAK4I,KAAI,CACTzM,KAAK,cACL0M,MAAM,eACNpR,MAAO,CAAEqR,MAAO,KAChBC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,8BACnCN,gBAAgB,SAAQ5T,UAExBK,EAAAA,EAAAA,KAAC8T,EAAAA,EAAK,CAACC,WAAS,MAGhBrB,IACA1S,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBN,UAClCK,EAAAA,EAAAA,KAAC4K,EAAAA,EAAK4I,KAAI,CACTC,MAAM,mBACN1M,KAAK,kBACL4M,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,4BAA6BlU,UAEhEK,EAAAA,EAAAA,KAACgU,EAAAA,EAAM,CACNxQ,MAAOgK,EACPyG,kBAAmBC,EAAAA,EACnB7R,MAAO,CAAEqR,MAAO,KAChBjQ,YAAY,mBACZ0Q,SAAW3Q,GAAgBsO,EAAwBtO,GACnDoL,QAASsD,YAQf1Q,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,sDAAqDN,SAAA,EACnEK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAC9L,UAAU,kCAAiCN,SAAC,6HAI7DK,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CACNxL,QA5GsBgU,MAC5BvS,EAAAA,EAAAA,GAAS,oCAAqC,CAC7CrC,OAAQsG,aAAc,EAAdA,EAAgBT,GACxBgL,WAAYlJ,aAAkB,EAAlBA,EAAoBJ,KAChCuJ,UAAW9C,IAEZ1I,EAAQC,KAAKsF,EAAAA,EAAOgK,aAAa,EAuG3B9V,MAAMyB,EAAAA,EAAAA,KAACsU,EAAAA,EAAM,CAACpI,KAAM,KACpBjM,UAAU,iCAAgCN,SAC1C,2BAKF6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,2BAA0BN,SAAA,EACxCK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAApM,SAAC,gEAIjBK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcN,UAC5B6B,EAAAA,EAAAA,MAAC+S,EAAAA,EAAMC,QAAO,CAACnS,MAAO,CAAEqR,MAAO,QAAS/T,SAAA,EACvCK,EAAAA,EAAAA,KAAC4K,EAAAA,EAAK4I,KAAI,CACTzM,KAAK,0BACL1E,MAAO,CAAEqR,MAAO,IAAKe,aAAc,GAAI9U,UAEvCK,EAAAA,EAAAA,KAAC8T,EAAAA,EAAK,CAACrQ,YAAY,iCAEpBzD,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CACN3L,UAAU,wBACV1B,KACC+T,GACCtS,EAAAA,EAAAA,KAACsR,EAAAA,EAAe,KAEhBtR,EAAAA,EAAAA,KAAC0U,EAAAA,EAAK,CAACxI,KAAM,KAGf/L,KAAK,UACLC,QAjL6BuU,UACrC,IACCpC,GAAoC,GACpC,MAAMpC,QAAiBtO,EAAAA,EAAAA,GAAS,uCAAwC,CACvErC,OAAQsG,aAAc,EAAdA,EAAgBT,GACxBgL,WAAY+B,IAGe,MAAxBjC,EAASX,YACZgD,EAAcoC,QAAQ,CACrBf,QAAS,kCAGVlJ,EAAKkK,cAAc,0BAA2B,IAE9CtC,GAAoC,KAEpCC,EAAclE,MAAM,CACnBuF,QACC1D,EAAS7B,OACT9H,EAAE,uBAAwB,CACzBsO,GAAI,aAIPvC,GAAoC,GAEtC,CAAE,MAAOjE,GACRkE,EAAclE,MAAM,CACnBuF,QAASrN,EAAE,uBAAwB,CAClCsO,GAAI,aAINvC,GAAoC,EACrC,GA+IQwC,SACCzC,IACCF,GAC0C,KAA3CA,aAAuB,EAAvBA,EAAyB4C,OAAOvE,QAChC9Q,SACD,4BAWV,+MAvQwB+R,EAAU,gsBAEnBjL,EAAAA,EACEkL,EAAAA,GAESzE,EAAAA,EAWrBvF,EAAAA,GAmBsB8K,EAAAA,OAAgBvT,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SAnCnBmS,EAAU,kHAAAvS,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,6dCpBlC,MAAMyV,EAAsD,CAC3D,CACClO,KAAM,aACN1B,GAAI,cAEL,CACC0B,KAAM,cACN1B,GAAI,cAEL,CACC0B,KAAM,cACN1B,GAAI,cAEL,CACC0B,KAAM,cACN1B,GAAI,cAEL,CACC0B,KAAM,cACN1B,GAAI,cAEL,CACC0B,KAAM,SACN1B,GAAI,UAEL,CACC0B,KAAM,UACN1B,GAAI,YAIS,SAAS6P,IACvB,MAAOvK,GAAQC,EAAAA,EAAKC,WACd,EAAErE,IAAMC,EAAAA,EAAAA,GAAe,CAAC,YAExB,oBACLW,EAAmB,0BACnBwK,EAAyB,eACzB9L,EAAc,mBACdqB,EAAkB,kBAClBqG,EAAiB,aACjB2H,EAAY,mBACZC,IACGzN,EAAAA,EAAAA,MAEE0N,EAA2BzK,EAAAA,EAAKyH,SACrC,2BACA1H,IAGK,cAAE6H,IAAkBC,EAAAA,EAAAA,OAGzB6C,EACAC,IACGxV,EAAAA,EAAAA,WAAS,GA0Cb,OACCyB,EAAAA,EAAAA,MAACoJ,EAAAA,EAAI,CACJuI,cAAe,CAAC,EAChBxI,KAAMA,EACN5D,KAAK,mBACLuM,OAAO,WAAU3T,SAAA,EAEjB6B,EAAAA,EAAAA,MAACgK,EAAAA,EAAWO,KAAI,CAAC9L,UAAU,oBAAmBN,SAAA,EAC7CK,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBN,SAAC,MAAQ,0BAG3CK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mCAAkCN,SAC/CsV,EAAsB5J,KAAKkF,IAE1BzK,aAAc,EAAdA,EAAgBT,MAAOF,EAAAA,GAASC,IAAIC,IACjB,eAAnBkL,EAAYlL,KAKZS,aAAc,EAAdA,EAAgBT,MAAOF,EAAAA,GAASC,IAAIC,IACjB,WAAnBkL,EAAYlL,KAKZS,aAAc,EAAdA,EAAgBT,MAAOF,EAAAA,GAASC,IAAIC,IACjB,YAAnBkL,EAAYlL,GAVL,MAgBP7D,EAAAA,EAAAA,MAAC+J,EAAAA,EAAI,CACJtL,UAAWC,IACV,cACAkH,IAAwBmJ,EAAYlL,GAAK,WAAa,IAGvDjF,QAASA,KACRwR,EAA0BrB,EAAYlL,IACtC+P,EAAmB,KAAK,EACvBzV,SAAA,EAEFK,EAAAA,EAAAA,KAAA,OAAAL,UACCK,EAAAA,EAAAA,KAACwV,EAAAA,EAAM,CAACtJ,KAAM,QAGflM,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBN,UAChC6B,EAAAA,EAAAA,MAACgK,EAAAA,EAAWO,KAAI,CAAApM,SAAA,CAAC,IAAE4Q,EAAYxJ,KAAK,WAXhCwJ,EAAYlL,SAkBrB7D,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,2BAA0BN,SAAA,EACxCK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAApM,SAAC,iEAIjBK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcN,UAC5B6B,EAAAA,EAAAA,MAAC+S,EAAAA,EAAMC,QAAO,CAACnS,MAAO,CAAEqR,MAAO,QAAS/T,SAAA,EACvCK,EAAAA,EAAAA,KAAC4K,EAAAA,EAAK4I,KAAI,CACTzM,KAAK,2BACL1E,MAAO,CAAEqR,MAAO,IAAKe,aAAc,GAAI9U,UAEvCK,EAAAA,EAAAA,KAAC8T,EAAAA,EAAK,CAACrQ,YAAY,iCAEpBzD,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CACN3L,UAAU,wBACV1B,KACC+W,GACCtV,EAAAA,EAAAA,KAACsR,EAAAA,EAAe,KAEhBtR,EAAAA,EAAAA,KAAC0U,EAAAA,EAAK,CAACxI,KAAM,KAGf/L,KAAK,UACLC,QAvHmCuU,UACxC,IACCY,GAAqC,GACrC,MAAMpF,QAAiBtO,EAAAA,EAAAA,GAAS,uCAAwC,CACvErC,OAAQsG,aAAc,EAAdA,EAAgBT,GACxBgL,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAa8E,IAGc,MAAxBlF,EAASX,YACZgD,EAAcoC,QAAQ,CACrBf,QAAS,kCAGVlJ,EAAKkK,cAAc,2BAA4B,IAE/CU,GAAqC,KAErC/C,EAAclE,MAAM,CACnBuF,QACC1D,EAAS7B,OACT9H,EAAE,uBAAwB,CACzBsO,GAAI,aAIPS,GAAqC,GAEvC,CAAE,MAAOjH,GACRkE,EAAclE,MAAM,CACnBuF,QAASrN,EAAE,uBAAwB,CAClCsO,GAAI,aAINS,GAAqC,EACtC,GAmFKR,SACCO,IACCD,GAC2C,KAA5CA,aAAwB,EAAxBA,EAA0BL,OAAOvE,QACjC9Q,SACD,mBAOHwV,IACAnV,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBN,UAC/B6B,EAAAA,EAAAA,MAACgK,EAAAA,EAAWO,KAAI,CAAC5L,KAAK,SAAQR,SAAA,CAAC,IAAEwV,EAAa,WAKnD,CAlJ2C,IAAAjW,EAnBDC,EAqKzCqN,EArKuB0I,EAAkB,8aAE3BzO,EAAAA,EAUVkB,EAAAA,GAOsB8K,EAAAA,OAAgBvT,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAlDrC0V,EAAmD,4IAAA/V,EAAAK,SA+BjC2V,EAAkB,2IAAA/V,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,iVCuC4BN,EA3D1BC,0GALjCsW,EAAmB,SAAnBA,GAAmB,OAAnBA,EAAmB,8BAAnBA,EAAmB,sCAAnBA,CAAmB,EAAnBA,GAAmB,IAKf,SAASC,IACvB,MAAO1H,EAASC,IAAclO,EAAAA,EAAAA,WAAS,IACjC,mBACLoH,EAAkB,WAClBhB,EAAU,oBACViB,IACGO,EAAAA,EAAAA,OACGuG,EAAiBC,IAAsBpO,EAAAA,EAAAA,WAAS,IAChD0M,EAAiBkJ,IAAsB5V,EAAAA,EAAAA,UAAyB,OAChE+N,EAAYC,IAAiBhO,EAAAA,EAAAA,UAAS,IACvC6V,EAAUzO,aAAkB,EAAlBA,EAAoB9B,GAE9BwQ,EAAqB,CAC1BC,UAAWC,EAAAA,EAAWC,cACtBC,QAAS,CACRC,UAAW,CACV,CACC7F,WAAYqB,EAAAA,GAAWyE,KACvBC,UAAW,IACXC,kBAAmB,OACnBC,mBAAoB,CACnBjR,GAAI,cACJkR,SAAUC,EAAAA,EAAUC,MACpBlT,IAAK,GACLmT,UAAU,EACVvW,KAAM,IAEPwW,QAAS,CACRC,MAAO,GACPC,GAAI,OAELC,WAAY,IACZ/B,UAAU,EACVgC,OAAQ,GACRC,aAAc,GACdC,MAAO,KACPC,QAAS,CACR,CACCC,WAAY,YACZC,MAAO,SAGTC,QAAS,GACTC,OAAQ,GACRC,SAAU,MACVC,OAAQ,EACRC,SAAU,IACVC,gBAAiB,GACjBC,iBAAkB,GAClBC,UAAW,KAGbC,cAAe,IAEhBC,eAAgB,GAChBzS,GAAI,GACJ0S,OAAQ,KAGH,KAAEjQ,EAAI,WAAEyG,EAAU,MAAED,EAAK,QAAEG,IAAYuJ,EAAAA,EAAAA,GAC5CnC,EACAoC,EAAAA,GAAYC,KACZC,EAAAA,GACA,CACCC,kBAAkB,EAClBhJ,gBAAiB3C,EACjBoC,SAAS,GAEV,CAAC,GACD,IA2DD1G,EAAAA,EAAAA,YAAU,KAvDTgI,KACU,IAAAkI,EAIWjI,GAHjBD,GAAa1B,IAChBV,EAAcD,EAAa,GAEvBA,EAAa,KAChBjM,EAAAA,EAAAA,GAAS,mCAAoC,CAC5CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARiK,EAAVjK,EAAY3G,cAAM,IAAA4Q,OAAA,EAAlBA,EAAoB/K,GAC5BwC,OAAQ,WAGToG,GAAW,GACX0H,GAAmB,KAIrB,MAAM2C,GAAcxQ,SAAa,QAATuQ,EAAJvQ,EAAMM,eAAO,IAAAiQ,GAAM,QAANA,EAAbA,EAAevQ,YAAI,IAAAuQ,GAAW,QAAXA,EAAnBA,EAAqBE,iBAAS,IAAAF,GAAM,QAANA,EAA9BA,EAAgCvQ,YAAI,IAAAuQ,OAAA,EAApCA,EAAsCG,SAAU,GACpE,GAAIF,EAAY7H,OAAS,GAAK6H,EAAY,GAAGG,KAAM,CAClD,MAAMC,EAAsBJ,EAAY,GAAGG,KAAKpN,KAAKsN,IAAI,IACrDA,EAAK7Q,KACR8Q,UAAWD,EAAKC,cAGjB,IAAK,IAAIC,EAAQ,EAAGA,EAAQH,EAAYjI,OAAQoI,GAAS,EAAG,CAC3D,MAAMC,EAAMJ,EAAYG,GAElBE,EAAgBD,aAAG,EAAHA,EAAKE,kBAE3B,GACc,eAAZpD,GACAvS,OAAO4V,UAAUC,eAAeC,KAAKJ,EAAe,iBACxC,WAAZnD,GACAvS,OAAO4V,UAAUC,eAAeC,KAAKJ,EAAe,gBACpD,KAAApI,EAED1C,GAAW,GACXE,GAAmB,GACnBJ,GAAe,GACf4H,GAAmB,IAEnB9T,EAAAA,EAAAA,GAAS,mCAAoC,CAC5CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARwK,EAAVxK,EAAY3G,cAAM,IAAAmR,OAAA,EAAlBA,EAAoBtL,GAC5BwC,OAAQ,eAGT,KACD,CACD,CACD,GAIAuR,CAAetR,EAAK,GAElB,CAACyG,EAAYzG,EAAMwG,EAAOG,IAwE7B,OACCjN,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,8BAA6BN,SAAA,EAC3CK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBN,SAxELmR,MAC3B,OAAQ8E,GACP,IAAK,aACJ,OACC5V,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,aACPC,QAAQ,iCACRC,OAAO,wBACPC,QAAQ,4GACRC,aAAa,4BAIhB,IAAK,SACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,SACPC,QAAQ,mCACRC,OAAO,oBACPC,QAAQ,wDACRC,aAAa,4BAIhB,IAAK,UACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,SACPC,QAAQ,qBACRC,OAAO,qBACPC,QAAQ,uDACRC,aAAa,4BAGhB,IAAK,SACJ,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,SACPC,QAAQ,iCACRC,OAAO,qBACPC,QAAQ,mEACRC,aAAa,4BAIhB,QACC,OACCpR,EAAAA,EAAAA,KAAC+Q,EAAAA,EAAM,CACNC,OAAO,SACPC,QACC2E,IAAYH,EAAoB4D,cAC7B,4CACA,6CAEJnI,OAAM,UAAAjS,OACL2W,IAAYH,EAAoB4D,cAC7B,kBACA,eAAc,QAElBlI,QACCyE,IAAYH,EAAoB4D,cAC7B,2DACA,8EAEJjI,aAAa,4BAGjB,EAKkCN,MACjCtP,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,mBAAkBN,SAAA,EAChC6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,eAAcN,SAAA,EAC5BK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAON,SAAC,iBACvB6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,2BAA0BN,SAAA,CAAC,IAAEiW,EAAQ,WAGrDpU,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,cAAaN,SAAA,EAC3BK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAON,SAAC,cAEvB6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,SAAQN,SAAA,EACpBqO,GAAWO,KAAevO,EAAAA,EAAAA,KAACsR,EAAAA,EAAe,MACzCtD,GAAWO,IAAeL,IAC5B1M,EAAAA,EAAAA,MAAA6P,EAAAA,SAAA,CAAA1R,SAAA,EACCK,EAAAA,EAAAA,KAACtB,EAAAA,EAAkB,CAAC6S,aAAa,aACjCvR,EAAAA,EAAAA,KAAA,QAAAL,SAAM,mBAGLqO,GAAWO,KAAgBL,IAC7B1M,EAAAA,EAAAA,MAAA6P,EAAAA,SAAA,CAAA1R,SAAA,EACCK,EAAAA,EAAAA,KAACrB,EAAAA,EAAkB,CAAC4S,aAAa,aACjCvR,EAAAA,EAAAA,KAAA,QAAAL,SAAM,uBAKV6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,eAAcN,SAAA,EAC5BK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAON,SAAC,eAEvB6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,UAASN,SAAA,EACrBqO,GAAWO,KAAevO,EAAAA,EAAAA,KAAA,OAAAL,SAAK,2BAC9BqO,GAAWO,IAAeL,IAC5BlO,EAAAA,EAAAA,KAAA,OAAAL,SAAK,oCAEHqO,GAAWO,KAAgBL,IAC7BlO,EAAAA,EAAAA,KAAA,OAAAL,SAAK,2CAOZ,CAAC6M,EAvPuBkJ,EAAoB,wXAMvC/N,EAAAA,GAqDyCqQ,EAAAA,MAAwB9Y,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SA3D9CmW,EAAoB,gJAAAvW,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,yDCQfN,EAdOC,8IAArB,SAASma,IACvB,MAAM,WACLnT,EAAU,cACV4B,EAAa,YACbwF,EAAW,mBACXpG,EAAkB,eAClBrB,EAAc,oBACdsB,EAAmB,kBACnBoG,EAAiB,eACjBnG,IACGM,EAAAA,EAAAA,OAEG1E,EAAiBsW,IAAsBxZ,EAAAA,EAAAA,UAAS,IAEjDkN,GAAWC,EAAAA,EAAAA,KACXC,EAAmBF,EAASG,IAAIC,EAAAA,EAAYF,kBAC5CG,EAA0BL,EAASG,IACxCC,EAAAA,EAAYC,0BAGP,KAAEvE,GAAS5C,GAgCjBgC,EAAAA,EAAAA,YAAU,KACT,MAAMqR,EA/BaC,MACnB,IAAID,EAAO,GAAHva,OAAM6G,aAAc,EAAdA,EAAgBT,GAAE,KAAApG,OAAIkI,aAAkB,EAAlBA,EAAoB9B,IA0BxD,OAxBImI,IACHgM,GAAQ,IAAJva,OAAQuO,IAGTpG,IACHoS,GAAQ,IAAJva,OAAQmI,KAGTtB,aAAc,EAAdA,EAAgBT,MAAOH,EAAAA,GAAWE,MACT,eAAxBgC,EACHoS,GAAQ,IAAJva,OAAQwK,EAAAA,GAAkBiQ,mBACI,eAAxBtS,GAAwCC,IAClDmS,GAAQ,IAAJva,OAAQoI,KAIdmS,GAAQ,IAAJva,OAAQ8J,aAAI,EAAJA,EAAM1D,IAGI,UAArB8H,GACS,mEAATqM,IAEAA,GAAQ,IAAJva,OAAQqO,IAENkM,CAAI,EAIEC,GAEb,IAAIE,GAEA7T,aAAc,EAAdA,EAAgBT,MAAOH,EAAAA,GAAWE,IACrCuU,EAAeC,EAAAA,GACL9T,aAAc,EAAdA,EAAgBT,MAAOH,EAAAA,GAAWM,eAC5CmU,EAAeE,EAAAA,GACL/T,aAAc,EAAdA,EAAgBT,MAAOH,EAAAA,GAAWO,yBAC5CkU,EAAeG,EAAAA,GACLhU,aAAc,EAAdA,EAAgBT,MAAOH,EAAAA,GAAWQ,cAC5CiU,EAAeI,EAAAA,GACLjU,aAAc,EAAdA,EAAgBT,MAAOH,EAAAA,GAAWS,kBAC5CgU,EAAeK,EAAAA,GAGZL,GAAgBA,EAAaH,IAEhCD,EAAmBI,EAAaH,GACjC,GAGE,CAACzQ,IAEJ,MAAM7F,EAAY,CACjB+W,MAAO1M,GAAe,iBACtBhF,sBACCR,aAAa,EAAbA,EAAeQ,uBAAwB,yBACxCC,QAAQT,aAAa,EAAbA,EAAeS,SAAU,SACjC0R,aAAc,UAGf,OACCla,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBN,UAClCK,EAAAA,EAAAA,KAAC+D,EAAAA,GAAgB,CAACd,gBAAiBA,EAAiBC,UAAWA,KAGlE,+MA1FwBoW,EAAY,0SAU/B3R,EAAAA,GAIauF,EAAAA,MAAWhO,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SAdL+Z,EAAY,wHAAAna,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,yDCbkCN,EADlCC,yEAArB,SAASgb,IACvB,MAAM,eAAE9S,EAAc,qBAAE+S,IAAyBzS,EAAAA,EAAAA,OAC1CnE,EAAO6W,IAAYta,EAAAA,EAAAA,UAASsH,GAOnC,OACCrH,EAAAA,EAAAA,KAAA,OAAAL,UACCK,EAAAA,EAAAA,KAACsa,EAAAA,GAAAA,MAAW,CAACnG,SAPGoG,IACjBF,EAASE,EAAEzX,OAAOU,OAClB4W,EAAqBG,EAAEzX,OAAOU,MAAM,EAKFA,MAAOA,EAAM7D,UAC7C6B,EAAAA,EAAAA,MAAC+S,EAAAA,EAAK,CAACiG,UAAU,WAAU7a,SAAA,EAC1B6B,EAAAA,EAAAA,MAAC8Y,EAAAA,GAAK,CAAC9W,MAAOiG,EAAAA,GAAkBC,YAAY/J,SAAA,EAC3CK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAApM,SAAC,kBAA+B,KAACK,EAAAA,EAAAA,KAAA,UACjDA,EAAAA,EAAAA,KAAA,SAAAL,SAAO,6DAGR6B,EAAAA,EAAAA,MAAC8Y,EAAAA,GAAK,CAAC9W,MAAOiG,EAAAA,GAAkBiQ,kBAAkB/Z,SAAA,EACjDK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAApM,SAAC,4BAAyC,KAACK,EAAAA,EAAAA,KAAA,UAC3DA,EAAAA,EAAAA,KAAA,SAAAL,SAAO,uIASb,+MA7BwBwa,EAAY,oHACcxS,EAAAA,OAAoBzI,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SAD9C4a,EAAY,wHAAAhb,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,mMCyBnCN,EAtB6BC,mFAAf,SAAS4R,EAAMrR,GAMD,IANE,OAC9BsR,EAAM,QACNC,EAAO,OACPC,EAAM,QACNC,EAAO,aACPC,GACa1R,EACb,OACC8B,EAAAA,EAAAA,MAAA,OAAKvB,UAAWC,IAAG,SAAU8Q,GAAQrR,SAAA,EACpCK,EAAAA,EAAAA,KAAA,OAAKC,UAAWmR,EAAcpM,IAAKkM,EAAQjM,IAAI,MAC/CzD,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,QAAON,SAAA,EACrBK,EAAAA,EAAAA,KAAA,MAAAL,SAAKsR,KAELzP,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,qBAAoBN,SAAA,CAAC,sBAEnCK,EAAAA,EAAAA,KAAA,KAAG8C,OAAO,SAASD,KAAMsO,EAASpO,IAAI,aAAYpD,SAAC,iBAOxD,EAACT,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SAtBuBwR,EAAM,uGAAA5R,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,8gBCkC9B,MAAMib,EAAkB,CACvB,CACC1T,KAAM,eACNvD,MAAO,IAER,CACCuD,KAAM,cACNvD,MAAO,IAER,CACCuD,KAAM,YACNvD,MAAO,IAER,CACCuD,KAAM,cACNvD,MAAO,KAIM,SAAS2I,EAAoBzM,GAKD,IAAAgb,EAAAC,EAAAC,EAAA,IALE,iBAC5CxO,EAAgB,eAChBtG,EAAc,oBACdE,EAAmB,+BACnB+E,GAC2BrL,EAC3B,MAAM,WACLyG,EAAU,YACVoH,EAAW,mBACXpG,EAAkB,oBAClBC,EAAmB,kBACnBoG,EAAiB,eACjBnG,EAAc,iBACdI,EAAgB,mBAChB2N,EAAkB,cAClB5N,IACGG,EAAAA,EAAAA,OAEGtB,EAASC,IAAcvG,EAAAA,EAAAA,UAAS,IAChC8a,EAAUC,IAAe/a,EAAAA,EAAAA,UAA0B0a,GACpDM,EAAgB/U,EAAoByK,OAAS,EA8SnD,OACCjP,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,0BAAyBN,SAAA,EACvC6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,kBAAiBN,SAAA,EAC/B6B,EAAAA,EAAAA,MAAA,OAAA7B,SAAA,EACCK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBN,UACtC6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,aAAaG,QATTyE,KACvBC,EAAAA,EAAQC,KAAK,QAAQ,EAQoCpF,SAAA,EACpDK,EAAAA,EAAAA,KAAA,OAAKgF,IAAI,+BAA+BC,IAAI,YAE5CjF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBN,SAAC,iBAInCK,EAAAA,EAAAA,KAACuU,EAAAA,EAAK,CAAClS,MAAO,CAAEoS,aAAc,QAAS9U,UACtCK,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CACNvJ,MAAO,CAAE2Y,QAAS,OAAQC,WAAY,UACtC9a,KAAK,UACL5B,MAAMyB,EAAAA,EAAAA,KAACpB,EAAAA,EAAkB,IACzBwB,QAASgM,EAAiBzM,SAEzBmG,EAAeR,WAIlBtF,EAAAA,EAAAA,KAACkb,EAAAA,EAAK,CACLV,UAAU,WACVtO,KAAK,QACLrE,OAAO,SACPxB,QAASA,EACTuQ,MAAO5Q,QAGThG,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CACNxL,QAASA,MACRyB,EAAAA,EAAAA,GAAS,+BAAgC,CACxCrC,OAAQsG,aAAc,EAAdA,EAAgBT,GACxB2G,KAAM,YAEPjB,GAA+B,EAAK,EAErCxM,MAAMyB,EAAAA,EAAAA,KAACiM,EAAAA,EAAQ,CAACC,KAAM,KACtBjM,UAAU,kBAAiBN,SAC3B,yBAKF6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,wBAAuBN,SAAA,EACrC6B,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,YAAWN,SAAA,CACxB0G,EAAU,IACVrG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBN,SAClCkb,EAASxP,KAAKvD,IAAS,IAAAqT,EACvB,OAAIvZ,EAAAA,EAAAA,GAAQkG,aAAI,EAAJA,EAAMtE,QAKoB,yBAAT,QAA5B2X,EAAAnV,EAAoBK,UAAQ,IAAA8U,OAAA,EAA5BA,EAA8B9V,KACf,iBAAfyC,aAAI,EAAJA,EAAMf,MALC,MAWPvF,EAAAA,EAAAA,MAAA,OAAqBvB,UAAU,SAAQN,SAAA,EACtCK,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAC9L,UAAU,cAAaN,SAAEmI,EAAKf,QAC/C/G,EAAAA,EAAAA,KAACwL,EAAAA,EAAWO,KAAI,CAAC9L,UAAU,eAAcN,SACvCmI,EAAKtE,UAHEsE,EAAKf,KAKT,OAMV/G,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcN,SAC3BqG,EAAoBK,GAAS+U,gBAIhC5Z,EAAAA,EAAAA,MAAA,OAAKvB,UAAU,sCAAqCN,SAAA,EACnDK,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CACNxL,QAjGcib,KACdhV,EAAU,IACbC,EAAWD,EAAU,GAGrBoB,EAAiB,CAChBjI,OAAQsG,EACRiD,KAAM/C,EAAoBK,EAAU,KAEtC,EAyFI0O,SAAsB,IAAZ1O,EACV9H,MAAMyB,EAAAA,EAAAA,KAAC7B,EAAAA,EAAiB,IAAIwB,SAC5B,UAGDK,EAAAA,EAAAA,KAAC4L,EAAAA,GAAM,CAACxL,QAjTOyL,KAAY,IAAAuE,EAAAO,EAAA2K,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAG9B,GApFmBC,MACnB,MAAQpX,GAAIqX,GAAqB5W,EAC3B6W,EAAiB/S,EAAAA,GAASyG,WAC1BuM,EAAyBhT,EAAAA,GAASiT,oBAElC,KAAE9T,GAAS5C,GAGhBY,KAAM+V,EAAyB,IAC5B3V,EAEJ,GACC4B,EAAK1D,KAAOuX,IACa,KAAxBxV,IAA8B2V,EAAAA,EAAAA,GAAO3V,IAGtC,OADAgO,EAAmB,8BACZ,EAKR,GAFAA,EAAmB,MAGlBsH,IAAqBvX,EAAAA,GAASC,IAAIC,IAClCW,EAAoBK,GAAShB,KAAOsX,EAEpC,QAAoB,KAAhBpP,IAAsBuP,OACEjK,EAAAA,EAAAA,IAAc,CACxCrT,OAAQsG,EACRuK,WAAYlJ,KAKW,OAAtBqG,GAAoD,KAAtBA,GAWlC,QACEkP,IAAqBvX,EAAAA,GAASM,yBAAyBJ,IACvDW,EAAoBK,GAAShB,KAAOsX,IACnCG,GACDJ,IAAqBvX,EAAAA,GAASK,eAAeH,IAC7CW,EAAoBK,GAAShB,KAAOsX,IACnCG,EAKQ,EA2BKL,GAEH,CACZ,GAAIpW,IAAY0U,EAGf,OAFAvT,KA3BF3F,EAAAA,EAAAA,GAAS,yBAA0B,CAClCrC,OAAQsG,EAAeT,GACvBgL,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACbC,iBACAkG,qBAGGzH,EAAeT,KAAOH,EAAAA,GAAWE,IACpCN,EAAAA,EAAQC,KAAKsF,EAAAA,EAAOc,aACVrF,EAAeT,KAAOH,EAAAA,GAAWM,eAC3CV,EAAAA,EAAQC,KAAKsF,EAAAA,EAAO2S,gBACVlX,EAAeT,KAAOH,EAAAA,GAAWO,2BAEjCK,EAAeT,GAAOH,EAAAA,GAAWQ,eAD3CZ,EAAAA,EAAQC,KAAKsF,EAAAA,EAAOc,eAkBpB,GAAI9E,GAAW,EASd,OARAC,EAAWD,EAAU,GAGrBoB,EAAiB,CAChBjI,OAAQsG,EACRiD,KAAM/C,EAAoBK,EAAU,KAG7BL,EAAoBK,GAAShB,IACpC,KAAKuE,EAAAA,GAASyG,YACbxO,EAAAA,EAAAA,GAAS,sCAAuC,CAC/CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACXhO,OAAQ2G,SAAkB,QAARiK,EAAVjK,EAAY3G,cAAM,IAAA4Q,OAAA,EAAlBA,EAAoB/K,KAE7B,MACD,KAAKuE,EAAAA,GAASiT,oBACbhb,EAAAA,EAAAA,GAAS,sCAAuC,CAC/CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARwK,EAAVxK,EAAY3G,cAAM,IAAAmR,OAAA,EAAlBA,EAAoBtL,KAE7B,MACD,KAAKuE,EAAAA,GAASE,cACbjI,EAAAA,EAAAA,GAAS,iCAAkC,CAC1CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACbC,iBACA7H,OAAQ2G,SAAkB,QAARmV,EAAVnV,EAAY3G,cAAM,IAAA8b,OAAA,EAAlBA,EAAoBjW,KAE7B,MAED,KAAKuE,EAAAA,GAASC,oBACbhI,EAAAA,EAAAA,GAAS,sCAAuC,CAC/CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACbC,iBACA7H,OAAQ2G,SAAkB,QAARoV,EAAVpV,EAAY3G,cAAM,IAAA+b,OAAA,EAAlBA,EAAoBlW,KAE7B,MACD,KAAKuE,EAAAA,GAASqT,uBACbpb,EAAAA,EAAAA,GAAS,wCAAyC,CACjDwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACbC,iBACA7H,OAAQ2G,SAAkB,QAARqV,EAAVrV,EAAY3G,cAAM,IAAAgc,OAAA,EAAlBA,EAAoBnW,KAE7B,MACD,KAAKuE,EAAAA,GAASsT,iBACbrb,EAAAA,EAAAA,GAAS,kCAAmC,CAC3CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChC7F,OAAQ2G,SAAkB,QAARsV,EAAVtV,EAAY3G,cAAM,IAAAic,OAAA,EAAlBA,EAAoBpW,KAE7B,MACD,KAAKuE,EAAAA,GAASuT,gBACbtb,EAAAA,EAAAA,GAAS,iCAAkC,CAC1CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACbC,iBACA7H,OAAQ2G,SAAkB,QAARuV,EAAVvV,EAAY3G,cAAM,IAAAkc,OAAA,EAAlBA,EAAoBrW,KAE7B,MACD,KAAKuE,EAAAA,GAASwT,cACbvb,EAAAA,EAAAA,GAAS,gCAAiC,CACzCwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChC7F,OAAQ2G,SAAkB,QAARwV,EAAVxV,EAAY3G,cAAM,IAAAmc,OAAA,EAAlBA,EAAoBtW,KAE7B,MACD,KAAKuE,EAAAA,GAASyT,gBACbxb,EAAAA,EAAAA,GAAS,iCAAkC,CAC1CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChC7F,OAAQ2G,SAAkB,QAARyV,EAAVzV,EAAY3G,cAAM,IAAAoc,OAAA,EAAlBA,EAAoBvW,KAE7B,MACD,KAAKuE,EAAAA,GAAS0T,gBACbzb,EAAAA,EAAAA,GAAS,kCAAmC,CAC3CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChC7F,OAAQ2G,SAAkB,QAAR0V,EAAV1V,EAAY3G,cAAM,IAAAqc,OAAA,EAAlBA,EAAoBxW,KAE7B,MACD,KAAKuE,EAAAA,GAAS2T,mBACb1b,EAAAA,EAAAA,GAAS,oCAAqC,CAC7CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAAR2V,EAAV3V,EAAY3G,cAAM,IAAAsc,OAAA,EAAlBA,EAAoBzW,KAE7B,MACD,KAAKuE,EAAAA,GAAS4T,cACb3b,EAAAA,EAAAA,GAAS,+BAAgC,CACxCwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAAR4V,EAAV5V,EAAY3G,cAAM,IAAAuc,OAAA,EAAlBA,EAAoB1W,KAE7B,MACD,KAAKuE,EAAAA,GAAS6T,oBACb5b,EAAAA,EAAAA,GAAS,sCAAuC,CAC/CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAAR6V,EAAV7V,EAAY3G,cAAM,IAAAwc,OAAA,EAAlBA,EAAoB3W,KAE7B,MACD,KAAKuE,EAAAA,GAAS8T,oBACb7b,EAAAA,EAAAA,GAAS,0CAA2C,CACnDwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAAR8V,EAAV9V,EAAY3G,cAAM,IAAAyc,OAAA,EAAlBA,EAAoB5W,KAE7B,MACD,KAAKuE,EAAAA,GAAS+T,kBACb9b,EAAAA,EAAAA,GAAS,wCAAyC,CACjDwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAAR+V,EAAV/V,EAAY3G,cAAM,IAAA0c,OAAA,EAAlBA,EAAoB7W,KAE7B,MACD,KAAKuE,EAAAA,GAASgU,qBACb/b,EAAAA,EAAAA,GAAS,2CAA4C,CACpDwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARgW,EAAVhW,EAAY3G,cAAM,IAAA2c,OAAA,EAAlBA,EAAoB9W,KAE7B,MACD,KAAKuE,EAAAA,GAASiU,aACbhc,EAAAA,EAAAA,GAAS,sCAAuC,CAC/CwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARiW,EAAVjW,EAAY3G,cAAM,IAAA4c,OAAA,EAAlBA,EAAoB/W,KAE7B,MACD,KAAKuE,EAAAA,GAASkU,iCACbjc,EAAAA,EAAAA,GAAS,8CAA+C,CACvDwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARkW,EAAVlW,EAAY3G,cAAM,IAAA6c,OAAA,EAAlBA,EAAoBhX,KAE7B,MACD,KAAKuE,EAAAA,GAASmU,sBACblc,EAAAA,EAAAA,GAAS,4CAA6C,CACrDwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARmW,EAAVnW,EAAY3G,cAAM,IAAA8c,OAAA,EAAlBA,EAAoBjX,KAE7B,MACD,KAAKuE,EAAAA,GAASoU,iBACbnc,EAAAA,EAAAA,GAAS,4CAA6C,CACrDwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARoW,EAAVpW,EAAY3G,cAAM,IAAA+c,OAAA,EAAlBA,EAAoBlX,KAE7B,MACD,KAAKuE,EAAAA,GAASqU,kBACbpc,EAAAA,EAAAA,GAAS,uCAAwC,CAChDwO,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCkL,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARqW,EAAVrW,EAAY3G,cAAM,IAAAgd,OAAA,EAAlBA,EAAoBnX,KAShB,IAAZgB,GAA6B,IAAZA,GACpByU,EAAY,CACX,CACC/T,KAAM,eACNvD,MAAO+J,GAER,CACCxG,KAAM,cACNvD,OAAO2D,aAAkB,EAAlBA,EAAoBJ,OAAQ,IAEpC,CACCA,KAAM,YACNvD,MAAOgK,GAAqB,IAE7B,CACCzG,KAAM,cACNvD,MAAO4D,IAIX,GA0GgCjH,KAAK,UAAU5B,MAAMyB,EAAAA,EAAAA,KAACvB,EAAAA,EAAkB,IAAIkB,SACvE0G,EAAU0U,EAAgB,wBAA0B,UAEtD/a,EAAAA,EAAAA,KAACke,EAAAA,EAAiB,CACjBC,WAAY,CACX9N,WAAYlJ,aAAkB,EAAlBA,EAAoB9B,GAChCiL,UAAW9C,EACX+C,YAAanJ,EACb5H,OAAQ2G,SAAkB,QAARuU,EAAVvU,EAAY3G,cAAM,IAAAkb,OAAA,EAAlBA,EAAoBrV,GAC5B0D,KAAM5C,SAAgB,QAANwU,EAAVxU,EAAY4C,YAAI,IAAA4R,OAAA,EAAhBA,EAAkBtV,GACxB+Y,OAAQ,cAETC,UAAU,sDACVxK,SAAS/U,EAAAA,EAAAA,IACRqI,aAAkB,EAAlBA,EAAoBJ,OAAQ,GAC5BZ,SAAkB,QAARyU,EAAVzU,EAAY3G,cAAM,IAAAob,OAAA,EAAlBA,EAAoBvV,IAErBiZ,WAAW,wCACXC,YAAY,+DAMlB,CAjayB,IAAArf,EAhBmBC,EAib3CqN,EAjbuBL,EAAoB,oUAgBvCxE,EAAAA,OAAoBzI,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAnCnBkb,EAAe,2IAAAvb,EAAAK,SAmBG4M,EAAoB,kJAAAhN,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,w2SCy9BrC,MAAMoa,GAAkB,CAM9B4E,mEAAkE,KAClEC,sEAAqE,KACrEC,+DAA8D,KAC9DC,yEAAwE,KACxEC,yEAAwE,KAGxEC,mEAAkE,KAClEC,sEAAqE,KACrEC,+DAA8D,KAG9DC,gEAA+D,KAC/DC,yDAAwD,KAGxDC,mEAAkE,KAClEC,sEAAqE,KACrEC,+DAA8D,KAG9DC,gEAA+D,KAC/DC,yDAAwD,KAGxDC,mEAAkE,KAClEC,sEAAqE,KACrEC,+DAA8D,KAG9DC,gEAA+D,KAC/DC,yDAAwD,KAGxDC,mEAAkE,KAClEC,sEAAqE,KACrEC,+DAA8D,KAG9DC,gEAA+D,KAC/DC,yDAAwD,KAOxDC,+DAA8D,KAC9DC,kEAAiE,KACjEC,2DAA0D,KAG1DC,+DAA8D,KAC9DC,kEAAiE,KACjEC,2DAA0D,KAG1DC,4DAA2D,KAC3DC,qDAAoD,KAGpDC,+DAA8D,KAC9DC,kEAAiE,KACjEC,2DAA0D,KAG1DC,4DAA2D,KAC3DC,qDAAoD,KAGpDC,+DAA8D,KAC9DC,kEAAiE,KACjEC,2DAA0D,KAG1DC,4DAA2D,KAC3DC,qDAAoD,KAGpDC,+DAA8D,KAC9DC,kEAAiE,KACjEC,2DAA0D,KAG1DC,4DAA2D,KAC3DC,qDAAoD,KAMpDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,2DAA0D,KAC1DC,oDAAmD,KAGnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,2DAA0D,KAC1DC,oDAAmD,KAGnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,2DAA0D,KAC1DC,oDAAmD,KAGnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,2DAA0D,KAC1DC,oDAAmD,KAOnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,2DAA0D,KAC1DC,oDAAmD,KAGnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,2DAA0D,KAC1DC,oDAAmD,KAGnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,2DAA0D,KAC1DC,oDAAmD,KAGnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAGzDC,2DAA0D,KAC1DC,oDAAmD,KAWnDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,8DAA6D,KAC7DC,uDAAsD,KAGtDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,8DAA6D,KAC7DC,uDAAsD,KAGtDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,8DAA6D,KAC7DC,uDAAsD,KAGtDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,8DAA6D,KAC7DC,uDAAsD,KAOtDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,6DAA4D,KAC5DC,sDAAqD,KAGrDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,6DAA4D,KAC5DC,sDAAqD,KAGrDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,6DAA4D,KAC5DC,sDAAqD,KAGrDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,6DAA4D,KAC5DC,sDAAqD,KAOrDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAG7DC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAG7DC,+DAA8D,KAC9DC,wDAAuD,KAGvDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAG7DC,+DAA8D,KAC9DC,wDAAuD,KAGvDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAG7DC,+DAA8D,KAC9DC,wDAAuD,KAGvDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAG7DC,+DAA8D,KAC9DC,wDAAuD,KAOvDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,8DAA6D,KAC7DC,uDAAsD,KAGtDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,8DAA6D,KAC7DC,uDAAsD,KAGtDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,8DAA6D,KAC7DC,uDAAsD,KAGtDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAG5DC,8DAA6D,KAC7DC,uDAAsD,KAOtDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,6DAA4D,KAC5DC,sDAAqD,KAGrDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,6DAA4D,KAC5DC,sDAAqD,KAGrDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,6DAA4D,KAC5DC,sDAAqD,KAGrDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAG3DC,6DAA4D,KAC5DC,sDAAqD,KAWrDC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAO3DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAO1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAK1DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAKjEC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAG3DC,sEAAqE,KACrEC,yEAAwE,KACxEC,kEAAiE,KAGjEC,mEAAkE,KAClEC,4DAA2D,KAM3DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAGhEC,kEAAiE,KACjEC,2DAA0D,KAG1DC,qEAAoE,KACpEC,wEAAuE,KACvEC,iEAAgE,KAShEC,sDAAqD,KACrDC,yDAAwD,KACxDC,kDAAiD,KAGjDC,sDAAqD,KACrDC,yDAAwD,KACxDC,kDAAiD,KAGjDC,mDAAkD,KAClDC,4CAA2C,KAG3CC,sDAAqD,KACrDC,yDAAwD,KACxDC,kDAAiD,KAGjDC,mDAAkD,KAClDC,4CAA2C,KAG3CC,sDAAqD,KACrDC,yDAAwD,KACxDC,kDAAiD,KAGjDC,mDAAkD,KAClDC,4CAA2C,KAG3CC,sDAAqD,KACrDC,yDAAwD,KACxDC,kDAAiD,KAGjDC,mDAAkD,KAClDC,4CAA2C,KAS3CC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAGpDC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAGpDC,sDAAqD,KACrDC,+CAA8C,KAG9CC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAGpDC,sDAAqD,KACrDC,+CAA8C,KAG9CC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAGpDC,sDAAqD,KACrDC,+CAA8C,KAG9CC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAGpDC,sDAAqD,KACrDC,+CAA8C,KAS9CC,0DAAyD,IACzDC,6DAA4D,IAC5DC,sDAAqD,IAGrDC,uDAAsD,IACtDC,gDAA+C,IAG/CC,0DAAyD,IACzDC,6DAA4D,IAC5DC,sDAAqD,IAGrDC,uDAAsD,IACtDC,gDAA+C,IAG/CC,0DAAyD,IACzDC,6DAA4D,IAC5DC,sDAAqD,IAGrDC,uDAAsD,IACtDC,gDAA+C,IAG/CC,0DAAyD,IACzDC,6DAA4D,IAC5DC,sDAAqD,IAGrDC,uDAAsD,IACtDC,gDAA+C,IAG/CC,0DAAyD,IACzDC,6DAA4D,IAC5DC,sDAAqD,IAGrDC,wDAAuD,KACvDC,2DAA0D,KAC1DC,oDAAmD,KAEnDC,qDAAoD,KACpDC,8CAA6C,KAE7CC,wDAAuD,KACvDC,2DAA0D,KAC1DC,oDAAmD,KAEnDC,qDAAoD,KACpDC,8CAA6C,KAE7CC,wDAAuD,KACvDC,2DAA0D,KAC1DC,oDAAmD,KAEnDC,qDAAoD,KACpDC,8CAA6C,KAE7CC,wDAAuD,KACvDC,2DAA0D,KAC1DC,oDAAmD,KAEnDC,qDAAoD,KACpDC,8CAA6C,KAE7CC,wDAAuD,KACvDC,2DAA0D,KAC1DC,oDAAmD,KAGnDC,0DAAyD,IACzDC,6DAA4D,IAC5DC,sDAAqD,IAErDC,uDAAsD,IACtDC,gDAA+C,IAE/CC,0DAAyD,IACzDC,6DAA4D,IAC5DC,sDAAqD,IAErDC,uDAAsD,IACtDC,gDAA+C,IAE/CC,0DAAyD,IACzDC,6DAA4D,IAC5DC,sDAAqD,KAErDC,uDAAsD,KACtDC,gDAA+C,KAE/CC,0DAAyD,KACzDC,6DAA4D,KAC5DC,sDAAqD,KAErDC,uDAAsD,KACtDC,gDAA+C,KAE/CC,0DAAyD,KACzDC,6DAA4D,KAC5DC,sDAAqD,KAGrDC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAEpDC,sDAAqD,KACrDC,+CAA8C,KAE9CC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAEpDC,sDAAqD,KACrDC,+CAA8C,KAE9CC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAEpDC,sDAAqD,KACrDC,+CAA8C,KAE9CC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAEpDC,sDAAqD,KACrDC,+CAA8C,KAE9CC,yDAAwD,KACxDC,4DAA2D,KAC3DC,qDAAoD,KAEpDC,uDAAsD,KACtDC,0DAAyD,KACzDC,mDAAkD,KAElDC,oDAAmD,KACnDC,6CAA4C,KAE5CC,uDAAsD,KACtDC,0DAAyD,KACzDC,mDAAkD,KAElDC,oDAAmD,KACnDC,6CAA4C,KAE5CC,uDAAsD,KACtDC,0DAAyD,KACzDC,mDAAkD,KAElDC,oDAAmD,KACnDC,6CAA4C,KAE5CC,uDAAsD,KACtDC,0DAAyD,KACzDC,mDAAkD,KAElDC,oDAAmD,KACnDC,6CAA4C,KAE5CC,uDAAsD,KACtDC,0DAAyD,KACzDC,mDAAkD,KAIlDC,0DAAyD,KACzDC,mDAAkD,KAElDC,6DAA4D,KAC5DC,gEAA+D,KAC/DC,yDAAwD,KAExDC,yDAAwD,KACxDC,kDAAiD,KAEjDC,4DAA2D,KAC3DC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,2DAA0D,KAC1DC,oDAAmD,KAEnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAEzDC,0DAAyD,KACzDC,mDAAkD,KAElDC,6DAA4D,KAC5DC,gEAA+D,KAC/DC,yDAAwD,KAExDC,yDAAwD,KACxDC,kDAAiD,KAEjDC,4DAA2D,KAC3DC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,8DAA6D,KAC7DC,uDAAsD,KAEtDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAE5DC,8DAA6D,KAC7DC,uDAAsD,KAEtDC,oEAAmE,KACnEC,iEAAgE,KAChEC,6DAA4D,KAE5DC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAE7DC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAE7DC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAE7DC,8DAA6D,KAC7DC,uDAAsD,KAEtDC,iEAAgE,KAChEC,oEAAmE,KACnEC,6DAA4D,KAE5DC,uDAAsD,KACtDC,gDAA+C,KAE/CC,0DAAyD,KACzDC,6DAA4D,KAC5DC,sDAAqD,KAErDC,4DAA2D,KAC3DC,qDAAoD,KAEpDC,+DAA8D,KAC9DC,kEAAiE,KACjEC,2DAA0D,KAE1DC,wDAAuD,KACvDC,iDAAgD,KAEhDC,2DAA0D,KAC1DC,8DAA6D,KAC7DC,uDAAsD,KAEtDC,uDAAsD,KACtDC,gDAA+C,KAE/CC,0DAAyD,KACzDC,6DAA4D,KAC5DC,sDAAqD,KAErDC,+CAA8C,KAC9CC,wCAAuC,KAEvCC,kDAAiD,KACjDC,qDAAoD,KACpDC,8CAA6C,KAE7CC,iDAAgD,KAChDC,0CAAyC,KAEzCC,oDAAmD,KACnDC,uDAAsD,KACtDC,gDAA+C,KAE/CC,mDAAkD,IAClDC,4CAA2C,IAE3CC,sDAAqD,IACrDC,yDAAwD,IACxDC,kDAAiD,IAEjDC,mDAAkD,IAClDC,4CAA2C,IAE3CC,sDAAqD,IACrDC,yDAAwD,IACxDC,kDAAiD,IAEjDC,kDAAiD,KACjDC,2CAA0C,KAE1CC,qDAAoD,KACpDC,wDAAuD,KACvDC,iDAAgD,KAEhDC,kDAAiD,KACjDC,2CAA0C,KAE1CC,qDAAoD,KACpDC,wDAAuD,KACvDC,iDAAgD,KAEhDC,gDAA+C,KAC/CC,yCAAwC,KAExCC,mDAAkD,KAClDC,sDAAqD,KACrDC,+CAA8C,KAI9CC,2DAA0D,KAC1DC,oDAAmD,KAEnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAEzDC,0DAAyD,KACzDC,mDAAkD,KAElDC,6DAA4D,KAC5DC,gEAA+D,KAC/DC,yDAAwD,KAExDC,4DAA2D,KAC3DC,qDAAoD,KAEpDC,+DAA8D,KAC9DC,kEAAiE,KACjEC,2DAA0D,KAE1DC,2DAA0D,KAC1DC,oDAAmD,KAEnDC,8DAA6D,KAC7DC,iEAAgE,KAChEC,0DAAyD,KAEzDC,0DAAyD,KACzDC,mDAAkD,KAElDC,6DAA4D,KAC5DC,gEAA+D,KAC/DC,yDAAwD,KAExDC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAE7DC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,qEAAoE,KACpEC,kEAAiE,KACjEC,8DAA6D,KAE7DC,gEAA+D,KAC/DC,yDAAwD,KAExDC,mEAAkE,KAClEC,sEAAqE,KACrEC,+DAA8D,KAE9DC,gEAA+D,KAC/DC,yDAAwD,KAExDC,mEAAkE,KAClEC,sEAAqE,KACrEC,+DAA8D,KAE9DC,gEAA+D,KAC/DC,yDAAwD,KAExDC,mEAAkE,KAClEC,sEAAqE,KACrEC,+DAA8D,KAE9DC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,kEAAiE,KACjEC,qEAAoE,KACpEC,8DAA6D,KAE7DC,wDAAuD,KACvDC,iDAAgD,KAEhDC,2DAA0D,KAC1DC,8DAA6D,KAC7DC,uDAAsD,KAEtDC,6DAA4D,KAC5DC,sDAAqD,KAErDC,gEAA+D,KAC/DC,mEAAkE,KAClEC,4DAA2D,KAE3DC,yDAAwD,KACxDC,kDAAiD,KAEjDC,4DAA2D,KAC3DC,+DAA8D,KAC9DC,wDAAuD,KAEvDC,wDAAuD,KACvDC,iDAAgD,KAEhDC,2DAA0D,KAC1DC,8DAA6D,KAC7DC,uDAAsD,KAEtDC,gDAA+C,KAC/CC,yCAAwC,KAExCC,mDAAkD,KAClDC,sDAAqD,KACrDC,+CAA8C,KAE9CC,kDAAiD,KACjDC,2CAA0C,KAE1CC,qDAAoD,KACpDC,wDAAuD,KACvDC,iDAAgD,KAEhDC,oDAAmD,KACnDC,6CAA4C,KAE5CC,uDAAsD,KACtDC,0DAAyD,KACzDC,mDAAkD,KAElDC,oDAAmD,IACnDC,6CAA4C,IAE5CC,uDAAsD,IACtDC,0DAAyD,IACzDC,mDAAkD,IAElDC,mDAAkD,KAClDC,4CAA2C,KAE3CC,sDAAqD,KACrDC,yDAAwD,KACxDC,kDAAiD,KAEjDC,mDAAkD,KAClDC,4CAA2C,KAE3CC,sDAAqD,KACrDC,yDAAwD,KACxDC,kDAAiD,KAEjDC,iDAAgD,KAChDC,0CAAyC,KAEzCC,oDAAmD,KACnDC,uDAAsD,KACtDC,gDAA+CA,GAAAA,GAC9C,IAAA7sC,GA/uC0BC,IA+uC1BD,GAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,GAAAK,SA/uCWqa,GAAe,oHAAAza,GAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,GAAAK,gpBCt9BrB,MAAMua,EAA4B,CAIxCiyB,kEAAiE,IACjEC,iEAAgE,IAChEC,oEAAmE,IAEnEC,kEAAiE,IACjEC,iEAAgE,IAChEC,oEAAmE,IAEnEC,kEAAiE,IACjEC,iEAAgE,IAChEC,oEAAmE,IAEnEC,kEAAiE,IACjEC,iEAAgE,IAChEC,oEAAmE,IAKnEC,wEAAuE,IACvEC,8EAA6E,IAG7EC,wEAAuE,IACvEC,8EAA6E,IAG7EC,wEAAuE,IACvEC,8EAA6E,IAG7EC,wEAAuE,IACvEC,8EAA6E,IAG7EC,2CAA0C,IAC1CC,yCAAwC,IACxCC,4CAA2C,IAC3CC,oCAAmC,IAGnCC,gDAA+C,IAC/CC,8CAA6C,IAC7CC,iDAAgD,IAChDC,yCAAwC,IAGxCC,6CAA4C,IAC5CC,4DAA2D,IAC3DC,iDAAgD,IAChDC,wCAAuC,IACvCC,4CAA2C,IAG3CC,wCAAuC,IACvCC,sCAAqCA,EAAAA,GACpC,IAAAhvC,EA5DoCC,GA4DpCD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SA5DWwa,EAAyB,wIAAA5a,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,klBC7B/B,MAAMwa,EAA8B,CAE1Cm0B,+CAA8C,IAC9CC,6CAA4C,IAC5CC,oCAAmC,IACnCC,kCAAiC,IACjCC,qCAAoC,IAGpCC,qDAAoD,IACpDC,mDAAkD,IAClDC,0CAAyC,IACzCC,wCAAuC,IACvCC,2CAA0C,IAG1CC,sDAAqD,IACrDC,oDAAmD,IACnDC,2CAA0C,IAC1CC,yCAAwC,IACxCC,4CAA2C,IAG3CC,yDAAwD,IACxDC,uDAAsD,IACtDC,8CAA6C,IAC7CC,4CAA2C,IAC3CC,+CAA8C,IAG9CC,8CAA6C,IAC7CC,4CAA2C,IAC3CC,4CAA2C,IAG3CC,8DAA6D,IAC7DC,4DAA2D,IAC3DC,oDAAmD,IAGnDC,uDAAsD,IACtDC,qDAAoD,IACpDC,0CAAyC,IACzCC,6CAA4CA,EAAAA,GAC3C,IAAA9wC,EA5CsCC,GA4CtCD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SA5CWya,EAA2B,4IAAA7a,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,scCQjC,MAAMsa,EAA8B,CAE1Cm2B,mEAAkE,IAClEC,4DAA2D,IAM3DC,mEAAkE,IAClEC,yEAAwE,IAGxEC,mEAAkE,IAClEC,yEAAwE,IAGxEC,mEAAkE,IAClEC,yEAAwE,IAGxEC,mEAAkE,IAClEC,yEAAwE,IAMxEC,oEAAmE,IACnEC,0EAAyE,IAGzEC,oEAAmE,IACnEC,0EAAyE,IAGzEC,oEAAmE,IACnEC,0EAAyE,IAGzEC,oEAAmE,IACnEC,0EAAyEA,EAAAA,GAGxE,IAAAhyC,EA5CsCC,GA4CtCD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SA5CWua,EAA2B,4IAAA3a,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,quCCgHjC,MAAMqa,GAA6B,CAEzCs3B,6CAA4C,IAG5CC,sCAAqC,IACrCC,qCAAoC,IAKpCC,qDAAoD,IACpDC,oDAAmD,IACnDC,qDAAoD,IAGpDC,qDAAoD,IACpDC,oDAAmD,IACnDC,qDAAoD,IAGpDC,qDAAoD,IACpDC,oDAAmD,IACnDC,qDAAoD,IAGpDC,qDAAoD,IACpDC,oDAAmD,IACnDC,qDAAoD,IAGpDC,8DAA6D,IAC7DC,6DAA4D,IAC5DC,gEAA+D,IAG/DC,8DAA6D,IAC7DC,6DAA4D,IAC5DC,gEAA+D,IAG/DC,8DAA6D,IAC7DC,6DAA4D,IAC5DC,gEAA+D,IAG/DC,8DAA6D,IAC7DC,6DAA4D,IAC5DC,gEAA+D,IAK/DC,uDAAsD,IACtDC,sDAAqD,IACrDC,yDAAwD,IAGxDC,uDAAsD,IACtDC,sDAAqD,IACrDC,yDAAwD,IAGxDC,uDAAsD,IACtDC,sDAAqD,IACrDC,yDAAwD,IAGxDC,uDAAsD,IACtDC,sDAAqD,IACrDC,yDAAwD,IAKxDC,qDAAoD,IACpDC,oDAAmD,IACnDC,uDAAsD,IAGtDC,qDAAoD,IACpDC,oDAAmD,IACnDC,uDAAsD,IAGtDC,qDAAoD,IACpDC,oDAAmD,IACnDC,uDAAsD,IAGtDC,qDAAoD,IACpDC,oDAAmD,IACnDC,uDAAsD,KAItDC,sDAAqD,KACrDC,qDAAoD,KACpDC,wDAAuD,KAGvDC,sDAAqD,KACrDC,qDAAoD,KACpDC,wDAAuD,KAGvDC,sDAAqD,KACrDC,qDAAoD,KACpDC,wDAAuD,KAGvDC,sDAAqD,KACrDC,qDAAoD,KACpDC,wDAAuD,KAGvDC,mCAAkC,KAIlCC,qCAAoC,KAGpCC,sCAAqC,KAIrCC,wDAAuD,KACvDC,kDAAiD,KACjDC,uDAAsD,KACtDC,wDAAuD,KAEvDC,wDAAuD,KACvDC,kDAAiD,KACjDC,uDAAsD,KACtDC,wDAAuD,KAEvDC,wDAAuD,KACvDC,kDAAiD,KACjDC,uDAAsD,KACtDC,wDAAuD,KAEvDC,wDAAuD,KACvDC,kDAAiD,KACjDC,uDAAsD,KACtDC,wDAAuDA,GAAAA,GACtD,IAAAl3C,GAlJqCC,IAkJrCD,GAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,GAAAK,SAlJWsa,GAA0B,0IAAA1a,GAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,GAAAK,4nBCrJhC,MAAMoK,EAAW,CACvByG,WAAY,aACZwM,mBAAoB,qBACpB/S,aAAc,eACdD,mBAAoB,qBACpBoT,sBAAuB,wBACvBC,gBAAiB,kBACjBG,eAAgB,iBAChBF,eAAgB,iBAChBk5B,eAAgB,iBAChB94B,kBAAmB,oBACnB+4B,mBAAoB,qBACpBC,qBAAsB,uBACtBC,YAAa,cACbC,yBAA0B,2BAC1BC,yBAA0B,2BAC1Bt5B,aAAc,eACdE,eAAgB,iBAChBq5B,kBAAmB,oBACnBn5B,aAAc,eACdC,mBAAoB,qBACpBC,mBAAoB,qBACpBC,iBAAkB,mBAClBC,oBAAqB,sBACrBC,YAAa,cACbC,gCAAiC,kCACjCC,qBAAsB,uBACtBC,gBAAiB,kBACjBC,iBAAkB,mBAClB24B,sBAAuB,wBACvBC,oBAAqB,sBACrBC,WAAY,aACZC,SAAU,WACVC,YAAa,cACbC,oBAAqB,uBAGTC,EAA0C,CACtD7xC,GAAIuE,EAASyG,WACb/K,MAAO,cACP8V,WAAWpb,EAAAA,EAAAA,KAAC0R,EAAAA,EAAU,KAGVylC,EAA0C,CACtD9xC,GAAIuE,EAASiT,mBACbvX,MAAO,sBACP8V,WAAWpb,EAAAA,EAAAA,KAACkV,EAAAA,EAAkB,KAGlBkiC,EAA4C,CACxD/xC,GAAIuE,EAASE,aACbxE,MAAO,gBACP8V,WAAWpb,EAAAA,EAAAA,KAACma,EAAAA,EAAY,KAGZk9B,EAAkD,CAC9DhyC,GAAIuE,EAASC,mBACbvE,MAAO,uBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZg+B,EAAoD,CAChEjyC,GAAIuE,EAASqT,sBACb3X,MAAO,yBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZi+B,EAAqC,CACjDlyC,GAAIuE,EAASsT,gBACb5X,MAAO,mBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZk+B,EAA0C,CACtDnyC,GAAIuE,EAASyT,eACb/X,MAAO,kBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZm+B,EAA8C,CAC1DpyC,GAAIuE,EAASuT,eACb7X,MAAO,kBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZo+B,EAA8C,CAC1DryC,GAAIuE,EAASysC,eACb/wC,MAAO,kBACP8V,WAAWpb,EAAAA,EAAAA,KAAC0M,EAAAA,EAAgB,KAGhBirC,EAAkD,CAC9DtyC,GAAIuE,EAASysC,eACb/wC,MAAO,kBACP8V,WAAWpb,EAAAA,EAAAA,KAAC0V,EAAAA,EAAoB,KAGpBkiC,EAA6C,CACzDvyC,GAAIuE,EAAS2T,kBACbjY,MAAO,qBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZu+B,EAA8C,CAC1DxyC,GAAIuE,EAAS0sC,mBACbhxC,MAAO,uBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZw+B,EAAgD,CAC5DzyC,GAAIuE,EAAS2sC,qBACbjxC,MAAO,yBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZy+B,EAAuC,CACnD1yC,GAAIuE,EAAS4sC,YACblxC,MAAO,eACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZ0+B,EAAoD,CAChE3yC,GAAIuE,EAAS6sC,yBACbnxC,MAAO,6BACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZ2+B,EAAoD,CAChE5yC,GAAIuE,EAAS8sC,yBACbpxC,MAAO,6BACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZ4+B,EAAwC,CACpD7yC,GAAIuE,EAASwT,aACb9X,MAAO,iBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZ6+B,EAA0C,CACtD9yC,GAAIuE,EAAS0T,eACbhY,MAAO,mBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZ8+B,EAA6C,CACzD/yC,GAAIuE,EAAS+sC,kBACbrxC,MAAO,sBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAGZ++B,EAAwC,CACpDhzC,GAAIuE,EAAS4T,aACblY,MAAO,gBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZg/B,EAA8C,CAC1DjzC,GAAIuE,EAAS6T,mBACbnY,MAAO,YACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZi/B,EAA8C,CAC1DlzC,GAAIuE,EAAS8T,mBACbpY,MAAO,uBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZk/B,EAA4C,CACxDnzC,GAAIuE,EAAS+T,iBACbrY,MAAO,qBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZm/B,EAA+C,CAC3DpzC,GAAIuE,EAASgU,oBACbtY,MAAO,wBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZo/B,EAAuC,CACnDrzC,GAAIuE,EAASiU,YACbvY,MAAO,mBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZq/B,EAA2D,CACvEtzC,GAAIuE,EAASkU,gCACbxY,MAAO,2BACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZs/B,EAAgD,CAC5DvzC,GAAIuE,EAASmU,qBACbzY,MAAO,yBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZu/B,EAA2C,CACvDxzC,GAAIuE,EAASoU,gBACb1Y,MAAO,iBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZw/B,EAA4C,CACxDzzC,GAAIuE,EAASqU,iBACb3Y,MAAO,2BACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZy/B,EAAqD,CACjE1zC,GAAIuE,EAASgtC,sBACbtxC,MAAO,2BACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZ0/B,EAA+C,CAC3D3zC,GAAIuE,EAASitC,oBACbvxC,MAAO,kBACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZ2/B,EAAsC,CAClD5zC,GAAIuE,EAASktC,WACbxxC,MAAO,cACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZ4/B,EAAoC,CAChD7zC,GAAIuE,EAASmtC,SACbzxC,MAAO,YACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZ6/B,EAAuC,CACnD9zC,GAAIuE,EAASotC,YACb1xC,MAAO,eACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KAEZ8/B,EAA+C,CAC3D/zC,GAAIuE,EAASqtC,oBACb3xC,MAAO,0BACP8V,WAAWpb,EAAAA,EAAAA,KAACsZ,EAAAA,EAAY,KACvB,IAAApa,EAJuDC,GAIvDD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAtOWqK,EAAQ,yGAAA1K,EAAAK,SAqCR23C,EAAuC,+GAAAh4C,EAAAK,SAMvC43C,EAAuC,+GAAAj4C,EAAAK,SAMvC63C,EAAyC,iHAAAl4C,EAAAK,SAMzC83C,EAA+C,uHAAAn4C,EAAAK,SAM/C+3C,EAAiD,yHAAAp4C,EAAAK,SAMjDg4C,EAAkC,0GAAAr4C,EAAAK,SAMlCi4C,EAAuC,+GAAAt4C,EAAAK,SAMvCk4C,EAA2C,mHAAAv4C,EAAAK,SAM3Cm4C,EAA2C,mHAAAx4C,EAAAK,SAM3Co4C,EAA+C,uHAAAz4C,EAAAK,SAM/Cq4C,EAA0C,kHAAA14C,EAAAK,SAM1Cs4C,EAA2C,mHAAA34C,EAAAK,SAM3Cu4C,EAA6C,qHAAA54C,EAAAK,SAM7Cw4C,EAAoC,4GAAA74C,EAAAK,SAMpCy4C,EAAiD,yHAAA94C,EAAAK,SAMjD04C,EAAiD,yHAAA/4C,EAAAK,SAMjD24C,EAAqC,6GAAAh5C,EAAAK,SAMrC44C,EAAuC,+GAAAj5C,EAAAK,SAMvC64C,EAA0C,kHAAAl5C,EAAAK,SAM1C84C,EAAqC,6GAAAn5C,EAAAK,SAKrC+4C,EAA2C,mHAAAp5C,EAAAK,SAK3Cg5C,EAA2C,mHAAAr5C,EAAAK,SAK3Ci5C,EAAyC,iHAAAt5C,EAAAK,SAKzCk5C,EAA4C,oHAAAv5C,EAAAK,SAK5Cm5C,EAAoC,4GAAAx5C,EAAAK,SAKpCo5C,EAAwD,gIAAAz5C,EAAAK,SAKxDq5C,EAA6C,qHAAA15C,EAAAK,SAK7Cs5C,EAAwC,gHAAA35C,EAAAK,SAKxCu5C,EAAyC,iHAAA55C,EAAAK,SAKzCw5C,EAAkD,0HAAA75C,EAAAK,SAKlDy5C,EAA4C,oHAAA95C,EAAAK,SAK5C05C,EAAmC,2GAAA/5C,EAAAK,SAKnC25C,EAAiC,yGAAAh6C,EAAAK,SAKjC45C,EAAoC,4GAAAj6C,EAAAK,SAKpC65C,EAA4C,sHAAAj6C,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,4UCpOlD,MAAMiK,EAAoB,CAChCC,YAAa,aACbgQ,kBAAmB,oBAyBd2/B,GAAoBC,EAAAA,EAAAA,oBACzBh6C,GAOD,SAASi6C,EAAyB75C,GAEM,IAFL,SAClCC,GACgCD,EAChC,MAAO6N,EAAaisC,IAAkBz5C,EAAAA,EAAAA,UAAiB,KAChDgI,EAAe0xC,IAAoB15C,EAAAA,EAAAA,UAAiB,KACpDoG,EAAYC,IAAiBrG,EAAAA,EAAAA,UAAc,OAC3C+F,EAAgBC,IAAqBhG,EAAAA,EAAAA,UAC3CoF,EAAAA,GAASC,MAGH+P,EAAcukC,IAAmB35C,EAAAA,EAAAA,UAAS,OAC1CqH,EAAqBuyC,IAA0B55C,EAAAA,EAAAA,UAAiB,KAChEyN,EAAmBosC,IAAwB75C,EAAAA,EAAAA,UACjD,OAGMsH,EAAgBwyC,IAAqB95C,EAAAA,EAAAA,UAC3C0J,EAAkBC,cAIlBvC,EACA2yC,IACG/5C,EAAAA,EAAAA,UAAgCgK,EAAAA,IAE9B8H,EAAqBkoC,IAC1BP,EAAeO,EAAS,EA2BnBtyC,EAAoBsB,IACzB3C,EAAc2C,EAAK,EAkBdixC,EAAsC,CAC3C7zC,aACAoH,cACAzH,iBACAqB,qBACAqG,oBACApG,sBACAC,iBACA8N,eACApN,gBACA8J,oBACAvK,qBAtD6B9H,IAC7BuG,EAAkBvG,EAAO,EAsDzBsS,wBA3CgCxB,IAChCspC,EAAqBtpC,EAAU,EA2C/B/I,yBApDiC8I,IACjCypC,EAAsBzpC,EAAW,EAoDjCuB,0BAjDkCrB,IAClCopC,EAAuBppC,EAAY,EAiDnC6J,qBA1C6B6/B,IAC7BJ,EAAkBI,EAAO,EA0CzBzyC,cA3BqBA,KACrBqK,EAAkB,IAClB9L,EAAkBZ,EAAAA,GAASC,KAC3B00C,EAAsB/vC,EAAAA,IACtB4vC,EAAuB,IACvBC,EAAqB,IACrBC,EAAkBpwC,EAAkBC,aACpCjC,EAAiB,KAAK,EAqBtBA,mBACA2N,mBAzC2BD,IAC3BukC,EAAgBvkC,EAAa,EAyC7BzN,oBAlC4BK,IAC5B0xC,EAAiB1xC,EAAc,GAoChC,OACC/H,EAAAA,EAAAA,KAACq5C,EAAkBa,SAAQ,CAAC12C,MAAOw2C,EAAar6C,SAC9CA,GAGJ,CAAC6M,EAnGQ+sC,EAAyB,siBAqGlC,MAAM5xC,EAAuBA,KAC5B,MAAMwyC,GAAUC,EAAAA,EAAAA,YAAWf,GAC3B,IAAKc,EACJ,MAAM,IAAIE,MACT,wEAGF,OAAOF,CAAO,EAG4C,IAAAj7C,EAVjCC,EAQxBqN,EARI7E,EAAoB,wBAUiCzI,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAlJ9CkK,EAAiB,sHAAAvK,EAAAK,SA2BxB85C,EAAiB,sHAAAn6C,EAAAK,SAQdg6C,EAAyB,8HAAAr6C,EAAAK,SAqG5BoI,EAAoB,2HAAAxI,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,2PC9I8B,MAAA0B,EAEzCo5C,EAAAA,GAAf,IAAmC,IAAAp7C,EAAAC,GAAAD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SAAA2B,EAAA,yFAAA/B,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,8UCG5B,IAAK0F,EAAU,SAAVA,GAAU,OAAVA,EAAU,UAAVA,EAAU,gCAAVA,EAAU,oDAAVA,EAAU,8BAAVA,EAAU,kCAAVA,CAAU,MAQf,MAAMq1C,EAAgB,CAC5Bn1C,IAAK,CACJo1C,KAAM,CACL,CACCh3C,MAAO,aACPiQ,MAAO,eAER,CACCjQ,MAAO,SACPiQ,MAAO,UAER,CACCjQ,MAAO,QACPiQ,MAAO,SAER,CACCjQ,MAAO,QACPiQ,MAAO,WAGTgnC,WAAY,CACX,CACCj3C,MAAO,UACPiQ,MAAO,WAER,CACCjQ,MAAO,SACPiQ,MAAO,WAER,CACCjQ,MAAO,SACPiQ,MAAO,UAER,CACCjQ,MAAO,UACPiQ,MAAO,YAER,CACCjQ,MAAO,UACPiQ,MAAO,WAER,CACCjQ,MAAO,SACPiQ,MAAO,8BAGTinC,OAAQ,CACP,CACCl3C,MAAO,SACPiQ,MAAO,UAER,CACCjQ,MAAO,UACPiQ,MAAO,YAER,CACCjQ,MAAO,QACPiQ,MAAO,SAER,CACCjQ,MAAO,SACPiQ,MAAO,UAER,CACCjQ,MAAO,QACPiQ,MAAO,YAIVjO,eAAgB,CAAC,EACjBC,yBAA0B,CAAC,EAC3BC,cAAe,CAAC,EAChBC,gBAAiB,CAAC,GAGNoE,EAA+B,CAC3ChD,KAAM,OACN1B,GAAI,OACJ6L,OAAQ,kBAGHypC,EAAqB,CAC1B,CACC5zC,KAAM,OACN1B,GAAI,OACJ6L,OAAQ,mBAET,CACCnK,KAAM,SACN1B,GAAI,SACJ6L,OAAQ,qBAET,CACCnK,KAAM,KACN1B,GAAI,KACJ6L,OAAQ,iBAET,CACCnK,KAAM,aACN1B,GAAI,aACJ6L,OAAQ,yBAET,CACCnK,KAAM,QACN1B,GAAI,QACJ6L,OAAQ,oBAET,CACCnK,KAAM,OACN1B,GAAI,SACJ6L,OAAQ,qBAET,CACCnK,KAAM,OACN1B,GAAI,OACJ6L,OAAQ,mBAET,CACCnK,KAAM,SACN1B,GAAI,SACJ6L,OAAQ,qBAET,CACCnK,KAAM,QACN1B,GAAI,QACJ6L,OAAQ,oBAET,CACCnK,KAAM,MACN1B,GAAI,MACJ6L,OAAQ,mBAIG/H,EAAkB,CAC9BpC,KAAM,sBACN1B,GAAI,aACJ6L,OAAQ,yBAGH0pC,EAAqB,CAC1B,CACC7zC,KAAM,sBACN1B,GAAI,aACJ6L,OAAQ,yBAET,CACCnK,KAAM,wBACN1B,GAAI,SACJ6L,OAAQ,qBAET,CACCnK,KAAM,UACN1B,GAAI,UACJ6L,OAAQ,sBAET,CACCnK,KAAM,mBACN1B,GAAI,mBACJ6L,OAAQ,8BAET,CACCnK,KAAM,YACN1B,GAAI,YACJ6L,OAAQ,yBAET,CACCnK,KAAM,UACN1B,GAAI,UACJ6L,OAAQ,sBAET,CACCnK,KAAM,WACN1B,GAAI,WACJ6L,OAAQ,uBAET,CACCnK,KAAM,SACN1B,GAAI,SACJ6L,OAAQ,qBAET,CACCnK,KAAM,SACN1B,GAAI,SACJ6L,OAAQ,qBAET,CACCnK,KAAM,OACN1B,GAAI,OACJ6L,OAAQ,mBAET,CACCnK,KAAM,aACN1B,GAAI,aACJ6L,OAAQ,0BAIGjI,EAA0B,CACtClC,KAAM,2BACN1B,GAAI,yBACJ6L,OAAQ,yBAGH2pC,EAAwB,CAC7B,CACC9zC,KAAM,2BACN1B,GAAI,yBACJ6L,OAAQ,yBAET,CACCnK,KAAM,cACN1B,GAAI,cACJ6L,OAAQ,8BAET,CACCnK,KAAM,gBACN1B,GAAI,eACJ6L,OAAQ,4BAIG7H,EAAqB,CACjCtC,KAAM,wBACN1B,GAAI,wBACJ6L,OAAQ,kBAGH4pC,EAAuB,CAC5B,CACC/zC,KAAM,wBACN1B,GAAI,wBACJ6L,OAAQ,kBAET,CACCnK,KAAM,sBACN1B,GAAI,8BACJ6L,OAAQ,kBAET,CACCnK,KAAM,YACN1B,GAAI,YACJ6L,OAAQ,kBAET,CACCnK,KAAM,gBACN1B,GAAI,gBACJ6L,OAAQ,kBAET,CACCnK,KAAM,iBACN1B,GAAI,iBACJ6L,OAAQ,kBAET,CACCnK,KAAM,MACN1B,GAAI,SACJ6L,OAAQ,mBAIG3H,EAAuB,CACnCxC,KAAM,KACN1B,GAAI,UACJ6L,OAAQ,uBAGH6pC,EAAyB,CAC9B,CACCh0C,KAAM,KACN1B,GAAI,UACJ6L,OAAQ,uBAET,CACCnK,KAAM,cACN1B,GAAI,kBACJ6L,OAAQ,gCAET,CACCnK,KAAM,MACN1B,GAAI,WACJ6L,OAAQ,wBAET,CACCnK,KAAM,kBACN1B,GAAI,iBACJ6L,OAAQ,8BAET,CACCnK,KAAM,uBACN1B,GAAI,qBACJ6L,OAAQ,mCAET,CACCnK,KAAM,uBACN1B,GAAI,0BACJ6L,OAAQ,yCAET,CACCnK,KAAM,qBACN1B,GAAI,mBACJ6L,OAAQ,kCAIG0B,EAAkBpT,GAC1BA,EAAO6F,KAAOH,EAAWE,IACrBu1C,EAGJn7C,EAAO6F,KAAOH,EAAWO,yBACrBo1C,EAGJr7C,EAAO6F,KAAOH,EAAWM,eACrBo1C,EAGJp7C,EAAO6F,KAAOH,EAAWQ,cACrBo1C,EAGDC,EAGKjoC,EAAyBpT,IAM5B,IAN6B,OACtCF,EAAM,WACN6Q,GAIA3Q,EACA,MAAQ2F,GAAI21C,GAAax7C,GACjBuH,KAAMhI,GAAmBsR,EAEjC,OACE2qC,IAAa91C,EAAWE,KAA0B,OAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,UAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,SAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,SAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,WAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,UAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,QAAnBrG,EAEzB,GAKDw7C,EAAcS,GAAUj8C,EAAe,EAGlC8T,EAAgB9Q,IAMd,IANe,OAC7BvC,EAAM,WACN6Q,GAIAtO,EACA,MAAQsD,GAAI21C,GAAax7C,GACjBuH,KAAMhI,GAAmBsR,EAGjC,QACC2qC,IAAa91C,EAAWM,gBACxBw1C,IAAa91C,EAAWO,0BACvBu1C,IAAa91C,EAAWE,KAA0B,OAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,UAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,SAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,SAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,WAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,UAAnBrG,GAC/Bi8C,IAAa91C,EAAWE,KAA0B,QAAnBrG,EAKtB,EAGC+M,EAAiB,CAC7B,CAAC5G,EAAWE,KAAMiF,EAAAA,EAAOC,mCACzB,CAACpF,EAAWM,gBAAiB6E,EAAAA,EAAOG,4BACpC,CAACtF,EAAWO,0BACX4E,EAAAA,EAAOE,sCACR,CAACrF,EAAWQ,eAAgB2E,EAAAA,EAAOI,2BACnC,CAACvF,EAAWS,iBAAkB0E,EAAAA,EAAOK,8BAGzBqI,EAA0C,CAAC,QAAQ,IAAA7T,EAAZC,GAAYD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SArYnDg7C,EAAa,6GAAAr7C,EAAAK,SA2EbwK,EAA4B,4HAAA7K,EAAAK,SAMnCo7C,EAAkB,kHAAAz7C,EAAAK,SAqDX4J,EAAe,+GAAAjK,EAAAK,SAMtBq7C,EAAkB,kHAAA17C,EAAAK,SA0DX0J,EAAuB,uHAAA/J,EAAAK,SAM9Bs7C,EAAqB,qHAAA37C,EAAAK,SAkBd8J,EAAkB,kHAAAnK,EAAAK,SAMzBu7C,EAAoB,oHAAA57C,EAAAK,SAiCbgK,EAAoB,oHAAArK,EAAAK,SAM3Bw7C,EAAsB,sHAAA77C,EAAAK,SAsCfqT,EAAc,8GAAA1T,EAAAK,SAoBduT,EAAsB,sHAAA5T,EAAAK,SA2BtBsT,EAAa,6GAAA3T,EAAAK,SA4BbuM,EAAc,8GAAA5M,EAAAK,SASdwT,EAAuC,yIAAA5T,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,ySCrW7C,MAAM0G,EAAuC,CACnDgxC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAG,EAAAA,GACAC,EAAAA,IAGYxuC,EAAmD,CAC/DguC,EAAAA,IAGYluC,EAA6D,CACzEkuC,EAAAA,IAGY9tC,EAAkD,CAAC8tC,EAAAA,IAEnD5tC,EAAoD,CAChE4tC,EAAAA,IAGYvuC,EAAWjJ,IAEwB,IAFvB,mBACxByH,GACezH,EACf,MAAQ2F,GAAI41C,EAAuB,IAAO9zC,EAE1C,OAAQ8zC,GACP,IAAK,aACJ,MAAO,CAAC/D,EAAAA,GAAgBG,EAAAA,GAAwBM,EAAAA,IAEjD,IAAK,SACJ,MAAO,CAACT,EAAAA,GAAgBK,EAAAA,GAAWC,EAAAA,GAAgBG,EAAAA,IAEpD,IAAK,UACJ,MAAO,CACNT,EAAAA,GACAC,EAAAA,GACAE,EAAAA,GACAO,EAAAA,GACAC,EAAAA,IAGF,IAAK,mBACL,IAAK,UACL,IAAK,YACL,IAAK,WACL,IAAK,wBACJ,MAAO,CACNX,EAAAA,GACAC,EAAAA,GACAE,EAAAA,GACAO,EAAAA,GACAE,EAAAA,IAEF,IAAK,SACJ,MAAO,CAACZ,EAAAA,GAAgBgB,EAAAA,IACzB,IAAK,SACJ,MAAO,CAAChB,EAAAA,GAAgBiB,EAAAA,IACzB,IAAK,OACJ,MAAO,CAACjB,EAAAA,GAAgBkB,EAAAA,IACzB,IAAK,aACJ,MAAO,CACNlB,EAAAA,GACAC,EAAAA,GACAE,EAAAA,GACAgB,EAAAA,GACAT,EAAAA,GACAU,EAAAA,IAGF,IAAK,yBACJ,MAAO,CAACpB,EAAAA,GAAgBG,EAAAA,GAAwBU,EAAAA,IACjD,IAAK,cACL,IAAK,8BACJ,MAAO,CACNb,EAAAA,GACAC,EAAAA,GACAE,EAAAA,GACAW,EAAAA,IAEF,IAAK,eACJ,MAAO,CACNd,EAAAA,GACAC,EAAAA,GACAE,EAAAA,GACAY,EAAAA,IAEF,IAAK,iBACL,IAAK,YACJ,MAAO,CACNf,EAAAA,GACAqB,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IAGF,IAAK,gBACJ,MAAO,CACNxB,EAAAA,GACAsB,EAAAA,GACAG,EAAAA,GACAC,EAAAA,GACAF,EAAAA,GACAG,EAAAA,IAEF,IAAK,SACJ,MAAO,CAAC3B,EAAAA,GAAgBG,EAAAA,GAAwByB,EAAAA,IACjD,IAAK,UACJ,MAAO,CACN5B,EAAAA,GACA8B,EAAAA,EACAD,EAAAA,GACAK,EAAAA,IAGF,IAAK,WAUL,IAAK,kBAUL,IAAK,iBAUL,IAAK,qBACJ,MAAO,CACNlC,EAAAA,GACA8B,EAAAA,EACAD,EAAAA,GACAE,EAAAA,EACAC,EAAAA,GACAC,EAAAA,IAGF,IAAK,mBACJ,MAAO,CACNjC,EAAAA,GACA8B,EAAAA,EACAD,EAAAA,GACAG,EAAAA,GACAC,EAAAA,IAGF,IAAK,0BACJ,MAAO,CACNjC,EAAAA,GACA8B,EAAAA,EACAD,EAAAA,GACAI,EAAAA,IAGF,QACC,MAAO,CAACjC,EAAAA,IACV,EACC,IAAAh4C,EA3JmBC,GA2JnBD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAnLW2G,EAAoC,kGAAAhH,EAAAK,SAUpC2J,EAAgD,8GAAAhK,EAAAK,SAIhDyJ,EAA0D,wHAAA9J,EAAAK,SAI1D6J,EAA+C,6GAAAlK,EAAAK,SAE/C+J,EAAiD,+GAAApK,EAAAK,SAIjDoJ,EAAQ,mGAAAxJ,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,mSCrDd,MAAMmP,EAAkBjP,IAAA,IAAC,QAC/BiN,EAAO,QACPC,EAAO,aACPC,EAAY,aACZc,EAAY,QACZiB,GACsBlP,EAAA,OACtBsI,EAAAA,EAAAA,UAAmC,CAClCC,QAASA,KAAMizC,EAAAA,EAAAA,GAAW,CAAEC,IAAKvuC,EAASe,eAAcytC,MAAOzuC,IAC/D0uC,SAAU,CAAC1uC,EAASC,EAASC,EAAcc,MACxCiB,GACF,EAJM,IAAA1P,EAPmBC,EAWxBqN,EAXSmC,EAAe,mBAO3B3G,EAAAA,aAAQ9I,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SAPIoP,EAAe,kFAAAxP,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,6RCX5B,SAAS87C,IACR,OACCt7C,EAAAA,EAAAA,KAACu5C,EAAAA,GAAyB,CAAA55C,UACzBK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBN,UACvCK,EAAAA,EAAAA,KAACs6C,EAAAA,EAAmB,OAIxB,CAAC,MAAAp5C,EAEco6C,EAAf,IAA8B,IAAAp8C,EAVPC,GAUOD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,KAAAJ,EAAAK,SAVrB+7C,EAAc,+FAAAp8C,EAAAK,SAAA2B,EAAA,0FAAA/B,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,yQCLuB,MAAA0B,EAE/Bo6C,EAAAA,EAAf,IAA8B,IAAAp8C,EAAAC,GAAAD,EAAA,oBAAAE,qBAAAA,qBAAAC,aAAAC,IAAAJ,EAAAK,SAAA2B,EAAA,gFAAA/B,EAAA,oBAAAC,qBAAAA,qBAAAD,iBAAAG,IAAAH,EAAAK,oGCC1B+7C,QAA0B,GAA4B,KAE1DA,EAAwBx2C,KAAK,CAACvF,EAAO6F,GAAI,kcAAmc,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,0EAA0E,MAAQ,GAAG,SAAW,8NAA8N,eAAiB,CAAC,urBAAurB,WAAa,MAE3hD,4GCJIk2C,QAA0B,GAA4B,KAE1DA,EAAwBx2C,KAAK,CAACvF,EAAO6F,GAAI,mgBAAsgB,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,yEAAyE,MAAQ,GAAG,SAAW,2NAA2N,eAAiB,CAAC,gnBAAgnB,WAAa,MAEnhD,4GCJIk2C,QAA0B,GAA4B,KAE1DA,EAAwBx2C,KAAK,CAACvF,EAAO6F,GAAI,y+GAA0+G,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,sEAAsE,MAAQ,GAAG,SAAW,gkDAAgkD,eAAiB,CAAC,w1IAAw1I,WAAa,MAEjkT,4GCJIk2C,QAA0B,GAA4B,KAE1DA,EAAwBx2C,KAAK,CAACvF,EAAO6F,GAAI,s6CAAu6C,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,mGAAmG,MAAQ,GAAG,SAAW,2bAA2b,eAAiB,CAAC,w4CAAw4C,WAAa,MAEt8G,4GCJIk2C,QAA0B,GAA4B,KAE1DA,EAAwBx2C,KAAK,CAACvF,EAAO6F,GAAI,wlCAAylC,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,uFAAuF,MAAQ,GAAG,SAAW,ofAAof,eAAiB,CAAC,63CAA63C,WAAa,MAE1pG,4GCJIk2C,QAA0B,GAA4B,KAE1DA,EAAwBx2C,KAAK,CAACvF,EAAO6F,GAAI,y5CAA05C,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,2GAA2G,MAAQ,GAAG,SAAW,6bAA6b,eAAiB,CAAC,85CAA85C,WAAa,MAEz9G,4GCJIk2C,QAA0B,GAA4B,KAE1DA,EAAwBx2C,KAAK,CAACvF,EAAO6F,GAAI,i1HAAo1H,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,4GAA4G,MAAQ,GAAG,SAAW,82CAA82C,eAAiB,CAAC,4sIAA4sI,WAAa,MAEnnT,4GCJIk2C,QAA0B,GAA4B,KAE1DA,EAAwBx2C,KAAK,CAACvF,EAAO6F,GAAI,2EAA4E,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,iEAAiE,MAAQ,GAAG,SAAW,gDAAgD,eAAiB,CAAC,4IAA4I,WAAa,MAElc,yDCEA,MAUMiP,GAAS,eAAiB,SAVb,CACjB,CAAC,OAAQ,CAAEZ,MAAO,IAAK8nC,OAAQ,IAAKC,EAAG,KAAMC,EAAG,IAAKC,GAAI,IAAKp4C,IAAK,WACnE,CACE,OACA,CACEq4C,EAAG,8FACHr4C,IAAK,4DCNX,MAKMs4C,GAAa,eAAiB,cALjB,CACjB,CAAC,SAAU,CAAE37C,GAAI,KAAM47C,GAAI,KAAMC,EAAG,KAAMx4C,IAAK,WAC/C,CAAC,OAAQ,CAAEq4C,EAAG,uCAAwCr4C,IAAK,WAC3D,CAAC,OAAQ,CAAEq4C,EAAG,aAAcr4C,IAAK,6DCHnC,MAMMiS,GAAS,eAAiB,SANb,CACjB,CAAC,OAAQ,CAAE9B,MAAO,KAAM8nC,OAAQ,IAAKC,EAAG,IAAKC,EAAG,IAAKC,GAAI,IAAKK,GAAI,IAAKz4C,IAAK,WAC5E,CAAC,OAAQ,CAAEmQ,MAAO,KAAM8nC,OAAQ,IAAKC,EAAG,IAAKC,EAAG,KAAMC,GAAI,IAAKK,GAAI,IAAKz4C,IAAK,WAC7E,CAAC,OAAQ,CAAE04C,GAAI,IAAKC,GAAI,OAAQC,GAAI,IAAKC,GAAI,IAAK74C,IAAK,WACvD,CAAC,OAAQ,CAAE04C,GAAI,IAAKC,GAAI,OAAQC,GAAI,KAAMC,GAAI,KAAM74C,IAAK,6DCb3D,swHCAA,saCAA,waCAA,w5GCAA,saCAA,urCCAA,w5ECAA,2SCAA,0xFCAA,6SCAA,2nFCAA,k6ECAA,6cCAA,wxFCAA,6SCAA,6nFCAA,o6ECAA,6cCAA,wxFCAA,6SCAA,2nFCAA,k6ECAA,6cCAA,wxFCAA,6SCAA,6nFCAA,o6ECAA,6cCAA,s+ECAA,6SCAA,waCAA,iyECAA,6cCAA,45DCAA,ikBCAA,waCAA,u0DCAA,ikBCAA,srCCAA,2lDCAA,+bCAA,8qDCAA,+bCAA,mnFCAA,2lDCAA,y5BCAA,8qDCAA,+bCAA,mnFCAA,2lDCAA,u5BCAA,8qDCAA,+bCAA,snFCAA,0lDCAA,s5BCAA,8qDCAA,+bCAA,qnFCAA,2lDCAA,u5BCAA,8qDCAA,8bCAA,upFCAA,0lDCAA,igECAA,ulICAA,saCAA,waCAA,mmICAA,saCAA,urCCAA,k2HCAA,iPCAA,suHCAA,4UCAA,unFCAA,61HCAA,uyBCAA,suHCAA,4UCAA,yoFCAA,61HCAA,uyBCAA,quHCAA,6UCAA,ynFCAA,61HCAA,uyBCAA,suHCAA,6UCAA,+mFCAA,61HCAA,uyBCAA,woICAA,4WCAA,waCAA,+hICAA,2cCAA,i6BCAA,kmBCAA,waCAA,kyBCAA,kmBCAA,urCCAA,4YCAA,4tBCAA,6RCAA,8lCCAA,mnFCAA,0YCAA,snCCAA,6RCAA,8lCCAA,mnFCAA,0YCAA,snCCAA,6RCAA,8lCCAA,snFCAA,0YCAA,snCCAA,6RCAA,8lCCAA,qnFCAA,0YCAA,snCCAA,ooCCAA,ibCAA,waCAA,4SCAA,6kBCAA,k6BCAA,smBCAA,waCAA,ouBCAA,mmBCAA,urCCAA,sYCAA,ytBCAA,mSCAA,kwBCAA,mnFCAA,oYCAA,22BCAA,mSCAA,kwBCAA,mnFCAA,oYCAA,22BCAA,mSCAA,kwBCAA,snFCAA,oYCAA,22BCAA,mSCAA,kwBCAA,qnFCAA,oYCAA,i2BCAA,2SCAA,saCAA,waCAA,8ZCAA,6KCAA,k6BCAA,+mBCAA,uaCAA,wuBCAA,ymBCAA,urCCAA,4YCAA,0yCCAA,ulCCAA,kuBCAA,uSCAA,wwBCAA,mnFCAA,oYCAA,ojCCAA,uSCAA,wwBCAA,mnFCAA,oYCAA,ojCCAA,uSCAA,wwBCAA,snFCAA,oYCAA,ojCCAA,uSCAA,wwBCAA,onFCAA,oYCAA,ojCCAA,4SCAA,ybCAA,waCAA,iZCAA,4YCAA,qmCCAA,umBCAA,olFCAA,u9BCAA,smBCAA,urCCAA,0YCAA,m4BCAA,iSCAA,07BCAA,mnFCAA,0YCAA,8vCCAA,iSCAA,y7BCAA,mnFCAA,0YCAA,+vCCAA,iSCAA,07BCAA,snFCAA,0YCAA,gwCCAA,iSCAA,07BCAA,qnFCAA,0YCAA,8vCCAA,iTCAA,8oBCAA,qlFCAA,uZCAA,iiBCAA,iqFCAA,gbCAA,0qCCAA,mqFCAA,gbCAA,urCCAA,g8ECAA,8MCAA,o7ECAA,yMCAA,u8FCAA,i7ECAA,yrBCAA,o7ECAA,yMCAA,i8FCAA,i7ECAA,urBCAA,o7ECAA,yMCAA,o8FCAA,i7ECAA,urBCAA,o7ECAA,wMCAA,q8FCAA,i7ECAA,urBCAA,isFCAA,yMCAA,qzCCAA,6/ECAA,ggBCAA,26ECAA,knBCAA,waCAA,upECAA,knBCAA,urCCAA,uyDCAA,wZCAA,+5DCAA,+dCAA,mnFCAA,2xDCAA,k4BCAA,85DCAA,+dCAA,knFCAA,2xDCAA,k4BCAA,+5DCAA,8dCAA,snFCAA,2xDCAA,k4BCAA,+5DCAA,+dCAA,qnFCAA,2xDCAA,k4BCAA,+5DCAA,mUCAA,kzCCAA,2xDCAA,yICAA,+hGCAA,inBCAA,waCAA,i7FCAA,inBCAA,urCCAA,0nFCAA,kVCAA,whFCAA,2ZCAA,knFCAA,0nFCAA,w2BCAA,whFCAA,2ZCAA,mnFCAA,0nFCAA,u2BCAA,whFCAA,2ZCAA,snFCAA,0nFCAA,w2BCAA,whFCAA,2ZCAA,qnFCAA,0nFCAA,w2BCAA,0sFCAA,+UCAA,omBCAA,q2FCAA,seCAA,o6ECAA,qnBCAA,waCAA,4pECAA,qnBCAA,urCCAA,0yDCAA,6YCAA,s6DCAA,wdCAA,mnFCAA,2yDCAA,m4BCAA,s6DCAA,wdCAA,mnFCAA,4yDCAA,m4BCAA,s6DCAA,wdCAA,0nFCAA,4yDCAA,m4BCAA,s6DCAA,wdCAA,qnFCAA,4yDCAA,m4BCAA,s6DCAA,6YCAA,mnFCAA,4yDCAA,m4BCAA,o6ECAA,qnBCAA,waCAA,4pECAA,onBCAA,urCCAA,k9ECAA,sZCAA,gkFCAA,sZCAA,knFCAA,i9ECAA,w8BCAA,gkFCAA,sZCAA,mnFCAA,k9ECAA,y8BCAA,gkFCAA,sZCAA,snFCAA,k9ECAA,y8BCAA,gkFCAA,sZCAA,qnFCAA,k9ECAA,y8BCAA,gkFCAA,sZCAA,unFCAA,0+ECAA,i9BCAA,oxFCAA,ykBCAA,waCAA,0pFCAA,ykBCAA,urCCAA,k9ECAA,sZCAA,gkFCAA,sZCAA,mnFCAA,k9ECAA,y8BCAA,gkFCAA,sZCAA,mnFCAA,k9ECAA,y8BCAA,gkFCAA,qZCAA,snFCAA,i9ECAA,y8BCAA,+jFCAA,sZCAA,qnFCAA,k9ECAA,y8BCAA,wlFCAA,sZCAA,mnFCAA,89ECAA,y8BCAA,w7DCAA,oaCAA,waCAA,0iECAA,oaCAA,urCCAA,ihDCAA,2mBCAA,q6CCAA,wmBCAA,knFCAA,6gDCAA,uqCCAA,q6CCAA,wmBCAA,mnFCAA,6gDCAA,wqCCAA,q6CCAA,smBCAA,snFCAA,6gDCAA,wqCCAA,q6CCAA,wmBCAA,qnFCAA,6gDCAA,uqCCAA,goHCAA,gRCAA,6lBCAA,0wGCAA,0RCAA,sgDCAA,kwBCAA,waCAA,6hDCAA,8uBCAA,srCCAA,83BCAA,yhCCAA,o/BCAA,g5BCAA,mnFCAA,83BCAA,y3CCAA,o/BCAA,g5BCAA,mnFCAA,83BCAA,y3CCAA,o/BCAA,g5BCAA,snFCAA,83BCAA,y3CCAA,o/BCAA,g5BCAA,qnFCAA,83BCAA,y3CCAA,8/BCAA,s6BCAA,snFCAA,83BCAA,++CCAA,oxCCAA,kwBCAA,waCAA,2yCCAA,8uBCAA,urCCAA,+5BCAA,shCCAA,4yBCAA,43BCAA,knFCAA,+5BCAA,69CCAA,4yBCAA,43BCAA,knFCAA,+5BCAA,69CCAA,2yBCAA,43BCAA,snFCAA,85BCAA,69CCAA,4yBCAA,43BCAA,qnFCAA,85BCAA,i+CCAA,2yBCAA,k5BCAA,knFCAA,+5BCAA,2lDCAA,8zCCAA,mwBCAA,waCAA,q1CCAA,+uBCAA,urCCAA,85BCAA,6gCCAA,gzBCAA,u5BCAA,mnFCAA,gzBCAA,k0CCAA,gzBCAA,u5BCAA,mnFCAA,gzBCAA,k0CCAA,gzBCAA,u5BCAA,snFCAA,gzBCAA,k0CCAA,gzBCAA,u5BCAA,qnFCAA,gzBCAA,i0CCAA,0zBCAA,66BCAA,knFCAA,gzBCAA,w7CCAA,+xCCAA,iwBCAA,waCAA,wzCCAA,6uBCAA,urCCAA,+5BCAA,y/BCAA,kzBCAA,23BCAA,mnFCAA,gzBCAA,syCCAA,kzBCAA,23BCAA,mnFCAA,gzBCAA,qyCCAA,kzBCAA,23BCAA,snFCAA,+yBCAA,qyCCAA,kzBCAA,23BCAA,qnFCAA,gzBCAA,syCCAA,0zBCAA,i5BCAA,mnFCAA,0zBCAA,25CCAA,oxCCAA,kwBCAA,waCAA,2yCCAA,8uBCAA,urCCAA,wrBCAA,u/BCAA,srBCAA,y3BCAA,knFCAA,ikBCAA,wyCCAA,srBCAA,y3BCAA,mnFCAA,ikBCAA,wyCCAA,orBCAA,y3BCAA,snFCAA,ikBCAA,wyCCAA,srBCAA,y3BCAA,qnFCAA,ikBCAA,wyCCAA,gsBCAA,i5BCAA,mnFCAA,ikBCAA,s6CCAA,4vCCAA,oaCAA,waCAA,mxCCAA,oaCAA,urCCAA,w+BCAA,uRCAA,s3BCAA,iXCAA,mnFCAA,k/BCAA,69BCAA,s3BCAA,iXCAA,mnFCAA,k/BCAA,69BCAA,s3BCAA,iXCAA,snFCAA,k/BCAA,69BCAA,s3BCAA,gXCAA,qnFCAA,k/BCAA,69BCAA,mgDCAA,+KCAA,umBCAA,2hDCAA,mKCAA,ivICAA,saCAA,waCAA,8rGCAA,saCAA,urCCAA,k5FCAA,yQCAA,8jICAA,qOCAA,mnFCAA,i5FCAA,y0BCAA,+jICAA,sOCAA,mnFCAA,i5FCAA,y0BCAA,8jICAA,sOCAA,snFCAA,k5FCAA,y0BCAA,8jICAA,sOCAA,qnFCAA,k5FCAA,w0BCAA,mrICAA,kYCAA,2ZCAA,0vHCAA,yICAA,qrFCAA,qaCAA,waCAA,0yFCAA,saCAA,urCCAA,q4ECAA,wKCAA,q8ECAA,0KCAA,mnFCAA,ujFCAA,wuBCAA,qjFCAA,0KCAA,mnFCAA,qjFCAA,wuBCAA,i8ECAA,0KCAA,snFCAA,sjFCAA,wuBCAA,g8ECAA,0KCAA,onFCAA,y8ECAA,wuBCAA,q8ECAA,0KCAA,mnFCAA,wjFCAA,wuBCAA,srCCAA,+gGCAA,6hBCAA,srCCAA,ihGCAA,6hBCAA,srCCAA,ihGCAA,6hBCAA,srCCAA,ihGCAA,4hBCAA,6uBCAA,4gGCAA,6uBCAA,8gGCAA,6uBCAA,8gGCAA,6uBCAA,0gGCAA,q4FCAA,2pCCAA,qvFCAA,ghCCAA,o4FCAA,4pCCAA,88FCAA,qhCCAA,mxCCAA,ymKCAA,+2BCAA,mrFCAA,wxHCAA,mvCCAA,koBCAA,i6JCAA,kOCAA,4OCAA,8hDCAA,y3BCAA,wsLCAA,y2BCAA,wnCCAA,66ECAA,y0CCAA,wsLCAA,uzBCAA,iyCCAA,66ECAA,wsLCAA,m4BCAA,sqCCAA,66ECAA,g1CCAA,wsLCAA,stBCAA,0mCCAA,66ECAA,s0CCAA,wsLCAA,0gDCAA,26ECAA,ikICAA,wsLCAA,66ECAA,6tBCAA,m9FCAA,6tBCAA,o9FCAA,6tBCAA,q9FCAA,6tBCAA,m9FCAA,gRCAA,urCCAA,smICAA,m9FCAA,smICAA,q9FCAA,smICAA,q9FCAA,smICAA,q9FCAA,oqCCAA,m9FCAA,6hBCAA,oqCCAA,q9FCAA,6hBCAA,oqCCAA,q9FCAA,6hBCAA,oqCCAA,q9FCAA,6hBCAA,i7CCAA,wyCCAA,8lFCAA,08BCAA,i7CCAA,wyCCAA,gmFCAA,08BCAA,i7CCAA,wyCCAA,gmFCAA,08BCAA,i7CCAA,wyCCAA,8lFCAA,08BCAA,omBCAA,6NCAA,q0CCAA,m9FCAA,mjBCAA,s0CCAA,q9FCAA,mjBCAA,s0CCAA,q9FCAA,kjBCAA,mjBCAA,s0CCAA,m9FCAA,y5CCAA,m9FCAA,ijBCAA,y5CCAA,q9FCAA,ijBCAA,y5CCAA,q9FCAA,ijBCAA,y5CCAA,m9FCAA,ijBCAA,s7BCAA,g0ECAA,urCCAA,u7CCAA,ggGCAA,6oBCAA,u7CCAA,w/FCAA,6oBCAA,u7CCAA,y/FCAA,6oBCAA,s7CCAA,w/FCAA,6oBCAA,iRCAA,q+ECAA,m9FCAA,iRCAA,q+ECAA,q9FCAA,iRCAA,q+ECAA,q9FCAA,iRCAA,q+ECAA,m9FCAA,ywCCIA,QAHoB,SAAU84C,IAC1B,IAAAl0C,WAAUk0C,EAAQ,GACtB,oBCHA,IAAIC,EAAM,EAAQ,QACFC,EAAU,EAAQ,OAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQl9C,QAAUk9C,KAG/CA,EAAU,CAAC,CAAC/8C,EAAO6F,GAAIk3C,EAAS,MAG9C,IAAI3tC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP0tC,EAAIC,EAAS3tC,GAI1BpP,EAAOi9C,QAAUF,EAAQG,QAAU,CAAC,oBClBpC,IAAIJ,EAAM,EAAQ,QACFC,EAAU,EAAQ,QAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQl9C,QAAUk9C,KAG/CA,EAAU,CAAC,CAAC/8C,EAAO6F,GAAIk3C,EAAS,MAG9C,IAAI3tC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP0tC,EAAIC,EAAS3tC,GAI1BpP,EAAOi9C,QAAUF,EAAQG,QAAU,CAAC,oBClBpC,IAAIJ,EAAM,EAAQ,QACFC,EAAU,EAAQ,QAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQl9C,QAAUk9C,KAG/CA,EAAU,CAAC,CAAC/8C,EAAO6F,GAAIk3C,EAAS,MAG9C,IAAI3tC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP0tC,EAAIC,EAAS3tC,GAI1BpP,EAAOi9C,QAAUF,EAAQG,QAAU,CAAC,mBClBpC,IAAIJ,EAAM,EAAQ,QACFC,EAAU,EAAQ,QAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQl9C,QAAUk9C,KAG/CA,EAAU,CAAC,CAAC/8C,EAAO6F,GAAIk3C,EAAS,MAG9C,IAAI3tC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP0tC,EAAIC,EAAS3tC,GAI1BpP,EAAOi9C,QAAUF,EAAQG,QAAU,CAAC,oBClBpC,IAAIJ,EAAM,EAAQ,QACFC,EAAU,EAAQ,QAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQl9C,QAAUk9C,KAG/CA,EAAU,CAAC,CAAC/8C,EAAO6F,GAAIk3C,EAAS,MAG9C,IAAI3tC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP0tC,EAAIC,EAAS3tC,GAI1BpP,EAAOi9C,QAAUF,EAAQG,QAAU,CAAC,mBClBpC,IAAIJ,EAAM,EAAQ,QACFC,EAAU,EAAQ,QAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQl9C,QAAUk9C,KAG/CA,EAAU,CAAC,CAAC/8C,EAAO6F,GAAIk3C,EAAS,MAG9C,IAAI3tC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP0tC,EAAIC,EAAS3tC,GAI1BpP,EAAOi9C,QAAUF,EAAQG,QAAU,CAAC,oBClBpC,IAAIJ,EAAM,EAAQ,QACFC,EAAU,EAAQ,QAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQl9C,QAAUk9C,KAG/CA,EAAU,CAAC,CAAC/8C,EAAO6F,GAAIk3C,EAAS,MAG9C,IAAI3tC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP0tC,EAAIC,EAAS3tC,GAI1BpP,EAAOi9C,QAAUF,EAAQG,QAAU,CAAC,oBClBpC,IAAIJ,EAAM,EAAQ,QACFC,EAAU,EAAQ,QAIC,iBAFvBA,EAAUA,EAAQC,WAAaD,EAAQl9C,QAAUk9C,KAG/CA,EAAU,CAAC,CAAC/8C,EAAO6F,GAAIk3C,EAAS,MAG9C,IAAI3tC,EAAU,CAEdA,OAAiB,OACjBA,WAAoB,GAEP0tC,EAAIC,EAAS3tC,GAI1BpP,EAAOi9C,QAAUF,EAAQG,QAAU,CAAC","sources":["webpack://frontend/./node_modules/@ant-design/icons-svg/es/asn/ArrowLeftOutlined.js","webpack://frontend/./node_modules/@ant-design/icons-svg/es/asn/ArrowRightOutlined.js","webpack://frontend/./node_modules/@ant-design/icons-svg/es/asn/CheckCircleTwoTone.js","webpack://frontend/./node_modules/@ant-design/icons-svg/es/asn/CloseCircleTwoTone.js","webpack://frontend/./node_modules/@ant-design/icons-svg/es/asn/LeftCircleOutlined.js","webpack://frontend/./node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js","webpack://frontend/./node_modules/@ant-design/icons/es/icons/ArrowLeftOutlined.js","webpack://frontend/./node_modules/@ant-design/icons/es/icons/ArrowRightOutlined.js","webpack://frontend/./node_modules/@ant-design/icons/es/icons/CheckCircleTwoTone.js","webpack://frontend/./node_modules/@ant-design/icons/es/icons/CloseCircleTwoTone.js","webpack://frontend/./node_modules/@ant-design/icons/es/icons/LeftCircleOutlined.js","webpack://frontend/./node_modules/@ant-design/icons/es/icons/PlusOutlined.js","webpack://frontend/./src/components/LaunchChatSupport/util.ts","webpack://frontend/./src/components/MarkdownRenderer/CodeCopyBtn/CodeCopyBtn.tsx","webpack://frontend/./src/components/MarkdownRenderer/MarkdownRenderer.tsx","webpack://frontend/./src/container/FullScreenHeader/FullScreenHeader.tsx","webpack://frontend/./src/container/OnboardingContainer/OnboardingContainer.tsx","webpack://frontend/./src/container/OnboardingContainer/Steps/ConnectionStatus/ConnectionStatus.tsx","webpack://frontend/./src/container/OnboardingContainer/Steps/DataSource/DataSource.tsx","webpack://frontend/./src/container/OnboardingContainer/Steps/EnvironmentDetails/EnvironmentDetails.tsx","webpack://frontend/./src/container/OnboardingContainer/Steps/LogsConnectionStatus/LogsConnectionStatus.tsx","webpack://frontend/./src/container/OnboardingContainer/Steps/MarkdownStep/MarkdownStep.tsx","webpack://frontend/./src/container/OnboardingContainer/Steps/SelectMethod/SelectMethod.tsx","webpack://frontend/./src/container/OnboardingContainer/common/Header/Header.tsx","webpack://frontend/./src/container/OnboardingContainer/common/ModuleStepsContainer/ModuleStepsContainer.tsx","webpack://frontend/./src/container/OnboardingContainer/constants/apmDocFilePaths.ts","webpack://frontend/./src/container/OnboardingContainer/constants/awsMonitoringDocFilePaths.ts","webpack://frontend/./src/container/OnboardingContainer/constants/azureMonitoringDocFilePaths.ts","webpack://frontend/./src/container/OnboardingContainer/constants/infraMonitoringDocFilePaths.ts","webpack://frontend/./src/container/OnboardingContainer/constants/logsManagementDocFilePaths.ts","webpack://frontend/./src/container/OnboardingContainer/constants/stepsConfig.tsx","webpack://frontend/./src/container/OnboardingContainer/context/OnboardingContext.tsx","webpack://frontend/./src/container/OnboardingContainer/index.tsx","webpack://frontend/./src/container/OnboardingContainer/utils/dataSourceUtils.ts","webpack://frontend/./src/container/OnboardingContainer/utils/getSteps.ts","webpack://frontend/./src/hooks/useQueryService.ts","webpack://frontend/./src/pages/OnboardingPage/OnboardingPage.tsx","webpack://frontend/./src/pages/OnboardingPage/index.tsx","webpack://frontend/./src/components/MarkdownRenderer/CodeCopyBtn/CodeCopyBtn.scss","webpack://frontend/./src/container/FullScreenHeader/FullScreenHeader.styles.scss","webpack://frontend/./src/container/OnboardingContainer/Onboarding.styles.scss","webpack://frontend/./src/container/OnboardingContainer/Steps/ConnectionStatus/ConnectionStatus.styles.scss","webpack://frontend/./src/container/OnboardingContainer/Steps/DataSource/DataSource.styles.scss","webpack://frontend/./src/container/OnboardingContainer/Steps/LogsConnectionStatus/LogsConnectionStatus.styles.scss","webpack://frontend/./src/container/OnboardingContainer/common/ModuleStepsContainer/ModuleStepsContainer.styles.scss","webpack://frontend/./src/pages/OnboardingPage/OnboardingPage.styles.scss","webpack://frontend/./node_modules/lucide-react/dist/esm/icons/blocks.js","webpack://frontend/./node_modules/lucide-react/dist/esm/icons/circle-help.js","webpack://frontend/./node_modules/lucide-react/dist/esm/icons/server.js","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Docker/QuickStart/dotnet-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Docker/QuickStart/dotnet-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Docker/Recommended/dotnet-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Docker/Recommended/dotnet-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Docker/Recommended/dotnet-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Kubernetes/dotnet-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Kubernetes/dotnet-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Kubernetes/dotnet-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxAMD64/QuickStart/dotnet-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxAMD64/QuickStart/dotnet-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxAMD64/Recommended/dotnet-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxAMD64/Recommended/dotnet-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxAMD64/Recommended/dotnet-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxARM64/QuickStart/dotnet-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxARM64/QuickStart/dotnet-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxARM64/Recommended/dotnet-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxARM64/Recommended/dotnet-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/LinuxARM64/Recommended/dotnet-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsAMD64/QuickStart/dotnet-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsAMD64/QuickStart/dotnet-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsAMD64/Recommended/dotnet-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsAMD64/Recommended/dotnet-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsAMD64/Recommended/dotnet-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsARM64/QuickStart/dotnet-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsARM64/QuickStart/dotnet-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsARM64/Recommended/dotnet-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsARM64/Recommended/dotnet-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/MacOsARM64/Recommended/dotnet-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Windows/QuickStart/dotnet-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Windows/QuickStart/dotnet-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Windows/Recommended/dotnet-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Windows/Recommended/dotnet-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Dotnet/md-docs/Windows/Recommended/dotnet-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Docker/QuickStart/elixir-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Docker/QuickStart/elixir-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Docker/Recommended/elixir-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Docker/Recommended/elixir-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Docker/Recommended/elixir-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Kubernetes/elixir-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Kubernetes/elixir-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Kubernetes/elixir-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxAMD64/QuickStart/elixir-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxAMD64/QuickStart/elixir-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxAMD64/Recommended/elixir-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxAMD64/Recommended/elixir-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxAMD64/Recommended/elixir-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxARM64/QuickStart/elixir-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxARM64/QuickStart/elixir-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxARM64/Recommended/elixir-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxARM64/Recommended/elixir-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/LinuxARM64/Recommended/elixir-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsAMD64/QuickStart/elixir-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsAMD64/QuickStart/elixir-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsAMD64/Recommended/elixir-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsAMD64/Recommended/elixir-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsAMD64/Recommended/elixir-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsARM64/QuickStart/elixir-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsARM64/QuickStart/elixir-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsARM64/Recommended/elixir-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsARM64/Recommended/elixir-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/MacOsARM64/Recommended/elixir-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Windows/QuickStart/elixir-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Windows/QuickStart/elixir-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Windows/Recommended/elixir-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Windows/Recommended/elixir-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Elixir/md-docs/Windows/Recommended/elixir-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Docker/QuickStart/golang-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Docker/QuickStart/golang-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Docker/Recommended/golang-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Docker/Recommended/golang-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Docker/Recommended/golang-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Kubernetes/golang-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Kubernetes/golang-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Kubernetes/golang-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxAMD64/QuickStart/golang-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxAMD64/QuickStart/golang-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxAMD64/Recommended/golang-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxAMD64/Recommended/golang-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxAMD64/Recommended/golang-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxARM64/QuickStart/golang-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxARM64/QuickStart/golang-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxARM64/Recommended/golang-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxARM64/Recommended/golang-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/LinuxARM64/Recommended/golang-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsAMD64/QuickStart/golang-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsAMD64/QuickStart/golang-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsAMD64/Recommended/golang-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsAMD64/Recommended/golang-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsAMD64/Recommended/golang-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsARM64/QuickStart/golang-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsARM64/QuickStart/golang-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsARM64/Recommended/golang-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsARM64/Recommended/golang-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/MacOsARM64/Recommended/golang-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Windows/QuickStart/golang-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Windows/QuickStart/golang-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Windows/Recommended/golang-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Windows/Recommended/golang-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/GoLang/md-docs/Windows/Recommended/golang-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Docker/QuickStart/jboss-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Docker/QuickStart/jboss-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Docker/Recommended/jboss-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Docker/Recommended/jboss-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Docker/Recommended/jboss-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Kubernetes/jboss-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Kubernetes/jboss-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Kubernetes/jboss-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxAMD64/QuickStart/jboss-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxAMD64/QuickStart/jboss-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxAMD64/Recommended/jboss-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxAMD64/Recommended/jboss-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxAMD64/Recommended/jboss-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxARM64/QuickStart/jboss-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxARM64/QuickStart/jboss-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxARM64/Recommended/jboss-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxARM64/Recommended/jboss-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/LinuxARM64/Recommended/jboss-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsAMD64/QuickStart/jboss-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsAMD64/QuickStart/jboss-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsAMD64/Recommended/jboss-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsAMD64/Recommended/jboss-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsAMD64/Recommended/jboss-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsARM64/QuickStart/jboss-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsARM64/QuickStart/jboss-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsARM64/Recommended/jboss-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsARM64/Recommended/jboss-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/MacOsARM64/Recommended/jboss-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Windows/QuickStart/jboss-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Windows/QuickStart/jboss-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Windows/Recommended/jboss-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Windows/Recommended/jboss-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Jboss/Windows/Recommended/jboss-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Docker/QuickStart/others-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Docker/QuickStart/others-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Docker/Recommended/others-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Docker/Recommended/others-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Docker/Recommended/others-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Kubernetes/others-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Kubernetes/others-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Kubernetes/others-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Windows/QuickStart/others-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Windows/QuickStart/others-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Windows/Recommended/others-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Windows/Recommended/others-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Others/Windows/Recommended/others-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Docker/QuickStart/springBoot-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Docker/QuickStart/springBoot-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Docker/Recommended/springBoot-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Docker/Recommended/springBoot-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Docker/Recommended/springBoot-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-runApplication-consumers.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-runApplication-producers.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/QuickStart/springBoot-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/QuickStart/springBoot-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/Recommended/springBoot-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/Recommended/springBoot-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/Recommended/springBoot-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/QuickStart/springBoot-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/QuickStart/springBoot-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/Recommended/springBoot-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/Recommended/springBoot-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/Recommended/springBoot-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/QuickStart/springBoot-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/QuickStart/springBoot-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/Recommended/springBoot-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/Recommended/springBoot-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/Recommended/springBoot-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/QuickStart/springBoot-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/QuickStart/springBoot-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/Recommended/springBoot-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/Recommended/springBoot-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/Recommended/springBoot-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Windows/QuickStart/springBoot-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Windows/QuickStart/springBoot-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Windows/Recommended/springBoot-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Windows/Recommended/springBoot-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/SpringBoot/Windows/Recommended/springBoot-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Docker/QuickStart/tomcat-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Docker/QuickStart/tomcat-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Docker/Recommended/tomcat-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Docker/Recommended/tomcat-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Docker/Recommended/tomcat-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Kubernetes/tomcat-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Kubernetes/tomcat-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Kubernetes/tomcat-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/QuickStart/tomcat-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/QuickStart/tomcat-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/Recommended/tomcat-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/Recommended/tomcat-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/Recommended/tomcat-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxARM64/QuickStart/tomcat-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxARM64/QuickStart/tomcat-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxARM64/Recommended/tomcat-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxARM64/Recommended/tomcat-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/LinuxARM64/Recommended/tomcat-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/QuickStart/tomcat-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/QuickStart/tomcat-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/Recommended/tomcat-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/Recommended/tomcat-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/Recommended/tomcat-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsARM64/QuickStart/tomcat-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsARM64/QuickStart/tomcat-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsARM64/Recommended/tomcat-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsARM64/Recommended/tomcat-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/MacOsARM64/Recommended/tomcat-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Windows/QuickStart/tomcat-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Windows/QuickStart/tomcat-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Windows/Recommended/tomcat-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Windows/Recommended/tomcat-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Java/md-docs/Tomcat/Windows/Recommended/tomcat-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Docker/QuickStart/angular-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Docker/QuickStart/angular-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Docker/Recommended/angular-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Docker/Recommended/angular-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Docker/Recommended/angular-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Kubernetes/angular-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Kubernetes/angular-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Kubernetes/angular-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/QuickStart/angular-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/QuickStart/angular-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/Recommended/angular-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/Recommended/angular-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/Recommended/angular-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxARM64/QuickStart/angular-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxARM64/QuickStart/angular-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxARM64/Recommended/angular-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxARM64/Recommended/angular-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/LinuxARM64/Recommended/angular-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/QuickStart/angular-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/QuickStart/angular-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/Recommended/angular-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/Recommended/angular-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/Recommended/angular-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsARM64/QuickStart/angular-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsARM64/QuickStart/angular-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsARM64/Recommended/angular-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsARM64/Recommended/angular-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/MacOsARM64/Recommended/angular-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Windows/QuickStart/angular-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Windows/QuickStart/angular-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Windows/Recommended/angular-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Windows/Recommended/angular-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Angular/Windows/Recommended/angular-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Docker/QuickStart/express-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Docker/QuickStart/express-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Docker/Recommended/express-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Docker/Recommended/express-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Docker/Recommended/express-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Kubernetes/express-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Kubernetes/express-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Kubernetes/express-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxAMD64/QuickStart/express-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxAMD64/QuickStart/express-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxAMD64/Recommended/express-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxAMD64/Recommended/express-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxAMD64/Recommended/express-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxARM64/QuickStart/express-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxARM64/QuickStart/express-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxARM64/Recommended/express-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxARM64/Recommended/express-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/LinuxARM64/Recommended/express-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsAMD64/QuickStart/express-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsAMD64/QuickStart/express-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsAMD64/Recommended/express-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsAMD64/Recommended/express-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsAMD64/Recommended/express-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsARM64/QuickStart/express-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsARM64/QuickStart/express-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsARM64/Recommended/express-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsARM64/Recommended/express-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/MacOsARM64/Recommended/express-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Windows/QuickStart/express-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Windows/QuickStart/express-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Windows/Recommended/express-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Windows/Recommended/express-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Express/Windows/Recommended/express-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Docker/QuickStart/nestjs-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Docker/QuickStart/nestjs-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Docker/Recommended/nestjs-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Docker/Recommended/nestjs-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Docker/Recommended/nestjs-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Kubernetes/nestjs-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Kubernetes/nestjs-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Kubernetes/nestjs-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/QuickStart/nestjs-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/QuickStart/nestjs-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/Recommended/nestjs-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/Recommended/nestjs-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/Recommended/nestjs-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/QuickStart/nestjs-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/QuickStart/nestjs-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/Recommended/nestjs-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/Recommended/nestjs-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/Recommended/nestjs-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/QuickStart/nestjs-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/QuickStart/nestjs-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/Recommended/nestjs-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/Recommended/nestjs-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/Recommended/nestjs-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/QuickStart/nestjs-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/QuickStart/nestjs-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/Recommended/nestjs-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/Recommended/nestjs-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/Recommended/nestjs-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Windows/QuickStart/nestjs-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Windows/QuickStart/nestjs-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Windows/Recommended/nestjs-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Windows/Recommended/nestjs-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NestJS/Windows/Recommended/nestjs-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Docker/QuickStart/nodejs-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Docker/QuickStart/nodejs-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Docker/Recommended/nodejs-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Docker/Recommended/nodejs-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Docker/Recommended/nodejs-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Kubernetes/nodejs-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Kubernetes/nodejs-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Kubernetes/nodejs-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/QuickStart/nodejs-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/QuickStart/nodejs-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/Recommended/nodejs-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/Recommended/nodejs-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/Recommended/nodejs-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/QuickStart/nodejs-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/QuickStart/nodejs-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/Recommended/nodejs-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/Recommended/nodejs-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/Recommended/nodejs-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/QuickStart/nodejs-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/QuickStart/nodejs-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/Recommended/nodejs-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/Recommended/nodejs-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/Recommended/nodejs-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/QuickStart/nodejs-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/QuickStart/nodejs-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/Recommended/nodejs-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/Recommended/nodejs-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/Recommended/nodejs-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Windows/QuickStart/nodejs-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Windows/QuickStart/nodejs-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Windows/Recommended/nodejs-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Windows/Recommended/nodejs-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/NodeJS/Windows/Recommended/nodejs-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Docker/QuickStart/others-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Docker/QuickStart/others-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Docker/Recommended/others-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Docker/Recommended/others-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Docker/Recommended/others-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Kubernetes/others-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Kubernetes/others-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Kubernetes/others-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Windows/QuickStart/others-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Windows/QuickStart/others-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Windows/Recommended/others-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Windows/Recommended/others-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/Others/Windows/Recommended/others-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Docker/QuickStart/reactjs-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Docker/QuickStart/reactjs-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Docker/Recommended/reactjs-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Docker/Recommended/reactjs-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Docker/Recommended/reactjs-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Kubernetes/reactjs-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Kubernetes/reactjs-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Kubernetes/reactjs-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/QuickStart/reactjs-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/QuickStart/reactjs-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/Recommended/reactjs-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/Recommended/reactjs-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/Recommended/reactjs-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/QuickStart/reactjs-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/QuickStart/reactjs-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/Recommended/reactjs-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/Recommended/reactjs-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/Recommended/reactjs-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/QuickStart/reactjs-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/QuickStart/reactjs-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/Recommended/reactjs-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/Recommended/reactjs-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/Recommended/reactjs-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/QuickStart/reactjs-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/QuickStart/reactjs-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/Recommended/reactjs-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/Recommended/reactjs-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/Recommended/reactjs-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Windows/QuickStart/reactjs-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Windows/QuickStart/reactjs-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Windows/Recommended/reactjs-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Windows/Recommended/reactjs-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Javascript/md-docs/ReactJS/Windows/Recommended/reactjs-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Docker/QuickStart/php-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Docker/QuickStart/php-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Docker/Recommended/php-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Docker/Recommended/php-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Docker/Recommended/php-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Kubernetes/php-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Kubernetes/php-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Kubernetes/php-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxAMD64/QuickStart/php-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxAMD64/QuickStart/php-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxAMD64/Recommended/php-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxAMD64/Recommended/php-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxAMD64/Recommended/php-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxARM64/QuickStart/php-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxARM64/QuickStart/php-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxARM64/Recommended/php-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxARM64/Recommended/php-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/LinuxARM64/Recommended/php-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsAMD64/QuickStart/php-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsAMD64/QuickStart/php-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsAMD64/Recommended/php-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsAMD64/Recommended/php-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsAMD64/Recommended/php-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsARM64/QuickStart/php-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsARM64/QuickStart/php-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsARM64/Recommended/php-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsARM64/Recommended/php-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/MacOsARM64/Recommended/php-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Windows/QuickStart/php-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Windows/QuickStart/php-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Windows/Recommended/php-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Windows/Recommended/php-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Php/md-docs/Windows/Recommended/php-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Docker/QuickStart/django-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Docker/QuickStart/django-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Docker/Recommended/django-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Docker/Recommended/django-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Docker/Recommended/django-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Kubernetes/django-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Kubernetes/django-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Kubernetes/django-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxAMD64/QuickStart/django-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxAMD64/QuickStart/django-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxAMD64/Recommended/django-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxAMD64/Recommended/django-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxAMD64/Recommended/django-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxARM64/QuickStart/django-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxARM64/QuickStart/django-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxARM64/Recommended/django-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxARM64/Recommended/django-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/LinuxARM64/Recommended/django-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsAMD64/QuickStart/django-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsAMD64/QuickStart/django-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsAMD64/Recommended/django-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsAMD64/Recommended/django-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsAMD64/Recommended/django-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsARM64/QuickStart/django-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsARM64/QuickStart/django-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsARM64/Recommended/django-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsARM64/Recommended/django-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/MacOsARM64/Recommended/django-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Windows/QuickStart/django-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Windows/QuickStart/django-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Windows/Recommended/django-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Windows/Recommended/django-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Django/Windows/Recommended/django-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Docker/QuickStart/falcon-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Docker/QuickStart/falcon-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Docker/Recommended/falcon-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Docker/Recommended/falcon-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Docker/Recommended/falcon-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Kubernetes/falcon-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Kubernetes/falcon-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Kubernetes/falcon-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxAMD64/QuickStart/falcon-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxAMD64/QuickStart/falcon-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxAMD64/Recommended/falcon-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxAMD64/Recommended/falcon-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxAMD64/Recommended/falcon-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxARM64/QuickStart/falcon-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxARM64/QuickStart/falcon-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxARM64/Recommended/falcon-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxARM64/Recommended/falcon-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/LinuxARM64/Recommended/falcon-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsAMD64/QuickStart/falcon-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsAMD64/QuickStart/falcon-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsAMD64/Recommended/falcon-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsAMD64/Recommended/falcon-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsAMD64/Recommended/falcon-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsARM64/QuickStart/falcon-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsARM64/QuickStart/falcon-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsARM64/Recommended/falcon-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsARM64/Recommended/falcon-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/MacOsARM64/Recommended/falcon-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Windows/QuickStart/falcon-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Windows/QuickStart/falcon-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Windows/Recommended/falcon-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Windows/Recommended/falcon-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Falcon/Windows/Recommended/falcon-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Docker/QuickStart/fastapi-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Docker/QuickStart/fastapi-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Docker/Recommended/fastapi-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Docker/Recommended/fastapi-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Docker/Recommended/fastapi-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Kubernetes/fastapi-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Kubernetes/fastapi-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Kubernetes/fastapi-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/QuickStart/fastapi-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/QuickStart/fastapi-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/Recommended/fastapi-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/Recommended/fastapi-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/Recommended/fastapi-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxARM64/QuickStart/fastapi-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxARM64/QuickStart/fastapi-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxARM64/Recommended/fastapi-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxARM64/Recommended/fastapi-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/LinuxARM64/Recommended/fastapi-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/QuickStart/fastapi-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/QuickStart/fastapi-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/Recommended/fastapi-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/Recommended/fastapi-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/Recommended/fastapi-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsARM64/QuickStart/fastapi-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsARM64/QuickStart/fastapi-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsARM64/Recommended/fastapi-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsARM64/Recommended/fastapi-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/MacOsARM64/Recommended/fastapi-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Windows/QuickStart/fastapi-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Windows/QuickStart/fastapi-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Windows/Recommended/fastapi-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Windows/Recommended/fastapi-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/FastAPI/Windows/Recommended/fastapi-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Docker/QuickStart/flask-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Docker/QuickStart/flask-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Docker/Recommended/flask-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Docker/Recommended/flask-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Docker/Recommended/flask-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Kubernetes/flask-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Kubernetes/flask-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Kubernetes/flask-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxAMD64/QuickStart/flask-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxAMD64/QuickStart/flask-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxAMD64/Recommended/flask-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxAMD64/Recommended/flask-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxAMD64/Recommended/flask-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxARM64/QuickStart/flask-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxARM64/QuickStart/flask-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxARM64/Recommended/flask-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxARM64/Recommended/flask-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/LinuxARM64/Recommended/flask-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsAMD64/QuickStart/flask-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsAMD64/QuickStart/flask-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsAMD64/Recommended/flask-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsAMD64/Recommended/flask-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsAMD64/Recommended/flask-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsARM64/QuickStart/flask-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsARM64/QuickStart/flask-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsARM64/Recommended/flask-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsARM64/Recommended/flask-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/MacOsARM64/Recommended/flask-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Windows/QuickStart/flask-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Windows/QuickStart/flask-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Windows/Recommended/flask-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Windows/Recommended/flask-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Flask/Windows/Recommended/flask-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Docker/QuickStart/others-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Docker/QuickStart/others-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Docker/Recommended/others-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Docker/Recommended/others-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Docker/Recommended/others-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Kubernetes/others-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Kubernetes/others-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Kubernetes/others-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Windows/QuickStart/others-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Windows/QuickStart/others-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Windows/Recommended/others-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Windows/Recommended/others-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Python/md-docs/Others/Windows/Recommended/others-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Docker/QuickStart/ror-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Docker/QuickStart/ror-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Docker/Recommended/ror-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Docker/Recommended/ror-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Docker/Recommended/ror-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Kubernetes/ror-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Kubernetes/ror-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Kubernetes/ror-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxAMD64/QuickStart/ror-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxAMD64/QuickStart/ror-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxAMD64/Recommended/ror-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxAMD64/Recommended/ror-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxAMD64/Recommended/ror-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxARM64/QuickStart/ror-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxARM64/QuickStart/ror-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxARM64/Recommended/ror-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxARM64/Recommended/ror-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/LinuxARM64/Recommended/ror-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsAMD64/QuickStart/ror-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsAMD64/QuickStart/ror-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsAMD64/Recommended/ror-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsAMD64/Recommended/ror-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsAMD64/Recommended/ror-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsARM64/QuickStart/ror-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsARM64/QuickStart/ror-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsARM64/Recommended/ror-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsARM64/Recommended/ror-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/MacOsARM64/Recommended/ror-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Windows/QuickStart/ror-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Windows/QuickStart/ror-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Windows/Recommended/ror-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Windows/Recommended/ror-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/RubyOnRails/md-docs/Windows/Recommended/ror-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Docker/QuickStart/rust-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Docker/QuickStart/rust-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Docker/Recommended/rust-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Docker/Recommended/rust-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Docker/Recommended/rust-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Kubernetes/rust-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Kubernetes/rust-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Kubernetes/rust-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxAMD64/QuickStart/rust-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxAMD64/QuickStart/rust-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxAMD64/Recommended/rust-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxAMD64/Recommended/rust-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxAMD64/Recommended/rust-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxARM64/QuickStart/rust-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxARM64/QuickStart/rust-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxARM64/Recommended/rust-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxARM64/Recommended/rust-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/LinuxARM64/Recommended/rust-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsAMD64/QuickStart/rust-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsAMD64/QuickStart/rust-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsAMD64/Recommended/rust-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsAMD64/Recommended/rust-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsAMD64/Recommended/rust-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsARM64/QuickStart/rust-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsARM64/QuickStart/rust-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsARM64/Recommended/rust-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsARM64/Recommended/rust-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/MacOsARM64/Recommended/rust-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Windows/QuickStart/rust-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Windows/QuickStart/rust-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Windows/Recommended/rust-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Windows/Recommended/rust-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Rust/md-docs/Windows/Recommended/rust-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Docker/QuickStart/swift-docker-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Docker/QuickStart/swift-docker-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Docker/Recommended/swift-docker-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Docker/Recommended/swift-docker-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Docker/Recommended/swift-docker-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Kubernetes/swift-kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Kubernetes/swift-kubernetes-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Kubernetes/swift-kubernetes-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxAMD64/QuickStart/swift-linuxamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxAMD64/QuickStart/swift-linuxamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxAMD64/Recommended/swift-linuxamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxAMD64/Recommended/swift-linuxamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxAMD64/Recommended/swift-linuxamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxARM64/QuickStart/swift-linuxarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxARM64/QuickStart/swift-linuxarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxARM64/Recommended/swift-linuxarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxARM64/Recommended/swift-linuxarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/LinuxARM64/Recommended/swift-linuxarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsAMD64/QuickStart/swift-macosamd64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsAMD64/QuickStart/swift-macosamd64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsAMD64/Recommended/swift-macosamd64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsAMD64/Recommended/swift-macosamd64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsAMD64/Recommended/swift-macosamd64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsARM64/QuickStart/swift-macosarm64-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsARM64/QuickStart/swift-macosarm64-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsARM64/Recommended/swift-macosarm64-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsARM64/Recommended/swift-macosarm64-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/MacOsARM64/Recommended/swift-macosarm64-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Windows/QuickStart/swift-windows-quickStart-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Windows/QuickStart/swift-windows-quickStart-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Windows/Recommended/swift-windows-recommended-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Windows/Recommended/swift-windows-recommended-instrumentApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/APM/Swift/md-docs/Windows/Recommended/swift-windows-recommended-runApplication.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-runOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-runOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-runOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-runOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/LinuxAMD64/hostmetrics-configureHostmetricsJson.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/LinuxAMD64/hostmetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/LinuxARM64/hostmetrics-configureHostmetricsJson.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/LinuxARM64/hostmetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/MacOsAMD64/hostmetrics-configureHostmetricsJson.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/MacOsAMD64/hostmetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/MacOsARM64/hostmetrics-configureHostmetricsJson.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/MacOsARM64/hostmetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSEc2/md-docs/ecsEc2-createDaemonService.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSEc2/md-docs/ecsEc2-createOtelConfig.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSEc2/md-docs/ecsEc2-sendData.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSEc2/md-docs/ecsEc2-setupDeamonService.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSExternal/md-docs/ecsExternal-createDaemonService.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSExternal/md-docs/ecsExternal-createOtelConfig.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSExternal/md-docs/ecsExternal-sendData.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSExternal/md-docs/ecsExternal-setupDeamonService.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-createOtelConfig.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-createSidecarCollectorContainer.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-deployTaskDefinition.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-sendData.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-sendLogs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EKS/eks-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AwsMonitoring/EKS/eks-monitorUsingDashboard.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AKS/aks-installCentralCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AKS/aks-logs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AKS/aks-metrics.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AKS/aks-setupEventsHub.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AKS/aks-tracing.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AppService/appService-installCentralCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AppService/appService-logs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AppService/appService-metrics.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AppService/appService-setupEventsHub.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/AppService/appService-tracing.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/BlobStorage/blobStorage-installCentralCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/BlobStorage/blobStorage-logs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/BlobStorage/blobStorage-metrics.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/BlobStorage/blobStorage-setupEventsHub.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/ContainerApps/containerApps-installCentralCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/ContainerApps/containerApps-logs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/ContainerApps/containerApps-metrics.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/ContainerApps/containerApps-setupEventsHub.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/ContainerApps/containerApps-tracing.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/Functions/functions-installCentralCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/Functions/functions-logs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/Functions/functions-metrics.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/Functions/functions-setupEventsHub.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/Functions/functions-tracing.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/SqlDatabaseMetrics/sqlDatabaseMetrics-installCentralCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/SqlDatabaseMetrics/sqlDatabaseMetrics-metrics.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/SqlDatabaseMetrics/sqlDatabaseMetrics-setupEventsHub.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/Vm/vm-hostmetrics-and-logs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/Vm/vm-installCentralCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/AzureMonitoring/Vm/vm-setupEventsHub.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/Hostmetrics/md-docs/LinuxAMD64/hostmetrics-configureHostmetricsJson.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/Hostmetrics/md-docs/LinuxAMD64/hostmetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/Hostmetrics/md-docs/LinuxARM64/hostmetrics-configureHostmetricsJson.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/Hostmetrics/md-docs/LinuxARM64/hostmetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/Hostmetrics/md-docs/MacOsAMD64/hostmetrics-configureHostmetricsJson.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/Hostmetrics/md-docs/MacOsAMD64/hostmetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/Hostmetrics/md-docs/MacOsARM64/hostmetrics-configureHostmetricsJson.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/Hostmetrics/md-docs/MacOsARM64/hostmetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/KubernetesInfraMetrics/md-docs/kubernetes-plotMetrics.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/KubernetesInfraMetrics/md-docs/kubernetes-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/OtherMetrics/md-docs/LinuxAMD64/otherMetrics-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/OtherMetrics/md-docs/LinuxAMD64/otherMetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/OtherMetrics/md-docs/LinuxARM64/otherMetrics-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/OtherMetrics/md-docs/LinuxARM64/otherMetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/OtherMetrics/md-docs/MacOsAMD64/otherMetrics-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/OtherMetrics/md-docs/MacOsAMD64/otherMetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/OtherMetrics/md-docs/MacOsARM64/otherMetrics-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/InfrastructureMonitoring/OtherMetrics/md-docs/MacOsARM64/otherMetrics-setupOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-runOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-runOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-runOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-runOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/LinuxAMD64/cloudwatch-linuxamd64-configureAws.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/LinuxAMD64/cloudwatch-linuxamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/LinuxAMD64/cloudwatch-linuxamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/LinuxAMD64/cloudwatch-linuxamd64-sendLogs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/LinuxARM64/cloudwatch-linuxarm64-configureAws.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/LinuxARM64/cloudwatch-linuxarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/LinuxARM64/cloudwatch-linuxarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/LinuxARM64/cloudwatch-linuxarm64-sendLogs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/MacOsAMD64/cloudwatch-macosamd64-configureAws.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/MacOsAMD64/cloudwatch-macosamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/MacOsAMD64/cloudwatch-macosamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/MacOsAMD64/cloudwatch-macosamd64-sendLogs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/MacOsARM64/cloudwatch-macosarm64-configureAws.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/MacOsARM64/cloudwatch-macosarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/MacOsARM64/cloudwatch-macosarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Cloudwatch/md-docs/MacOsARM64/cloudwatch-macosarm64-sendLogs.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Docker/md-docs/docker-cloneRepository.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Docker/md-docs/docker-startContainers.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/LinuxAMD64/fluentbit-linuxamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/LinuxAMD64/fluentbit-linuxamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/LinuxAMD64/fluentbit-linuxamd64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/LinuxARM64/fluentbit-linuxarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/LinuxARM64/fluentbit-linuxarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/LinuxARM64/fluentbit-linuxarm64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/MacOsAMD64/fluentbit-macosamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/MacOsAMD64/fluentbit-macosamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/MacOsAMD64/fluentbit-macosamd64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/MacOsARM64/fluentBit-macosarm64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/MacOsARM64/fluentbit-macosarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentBit/md-docs/MacOsARM64/fluentbit-macosarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/LinuxAMD64/fluentd-linuxamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/LinuxAMD64/fluentd-linuxamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/LinuxAMD64/fluentd-linuxamd64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/LinuxARM64/fluentd-linuxarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/LinuxARM64/fluentd-linuxarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/LinuxARM64/fluentd-linuxarm64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/MacOsAMD64/fluentd-macosamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/MacOsAMD64/fluentd-macosamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/MacOsAMD64/fluentd-macosamd64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/MacOsARM64/fluentd-macosarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/MacOsARM64/fluentd-macosarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/FluentD/md-docs/MacOsARM64/fluentd-macosarm64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Heroku/md-docs/heroku-addHttpDrain.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Http/md-docs/httpJsonPayload.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Kubernetes/md-docs/kubernetes-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/LinuxAMD64/logstash-linuxamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/LinuxAMD64/logstash-linuxamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/LinuxAMD64/logstash-linuxamd64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/LinuxARM64/logstash-linuxarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/LinuxARM64/logstash-linuxarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/LinuxARM64/logstash-linuxarm64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/MacOsAMD64/logstash-macosamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/MacOsAMD64/logstash-macosamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/MacOsAMD64/logstash-macosamd64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/MacOsARM64/logstash-macosarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/MacOsARM64/logstash-macosarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Logstash/md-docs/MacOsARM64/logstash-macosarm64-restartOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/LinuxAMD64/syslogs-linuxamd64-checkServiceStatus.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/LinuxAMD64/syslogs-linuxamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/LinuxAMD64/syslogs-linuxamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/LinuxARM64/syslogs-linuxarm64-checkServiceStatus.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/LinuxARM64/syslogs-linuxarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/LinuxARM64/syslogs-linuxarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/MacOsAMD64/syslogs-macosamd64-checkServiceStatus.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/MacOsAMD64/syslogs-macosamd64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/MacOsAMD64/syslogs-macosamd64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/MacOsARM64/syslogs-macosarm64-checkServiceStatus.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/MacOsARM64/syslogs-macosarm64-configureReceiver.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/SysLogs/md-docs/MacOsARM64/syslogs-macosarm64-installOtelCollector.md","webpack://frontend/./src/container/OnboardingContainer/Modules/LogsManagement/Vercel/md-docs/vercel-setupLogDrains.md","webpack://frontend/./node_modules/react-use/esm/useEffectOnce.js","webpack://frontend/./src/components/MarkdownRenderer/CodeCopyBtn/CodeCopyBtn.scss?987d","webpack://frontend/./src/container/FullScreenHeader/FullScreenHeader.styles.scss?98ad","webpack://frontend/./src/container/OnboardingContainer/Onboarding.styles.scss?fbf3","webpack://frontend/./src/container/OnboardingContainer/Steps/ConnectionStatus/ConnectionStatus.styles.scss?7dd2","webpack://frontend/./src/container/OnboardingContainer/Steps/DataSource/DataSource.styles.scss?c81e","webpack://frontend/./src/container/OnboardingContainer/Steps/LogsConnectionStatus/LogsConnectionStatus.styles.scss?a755","webpack://frontend/./src/container/OnboardingContainer/common/ModuleStepsContainer/ModuleStepsContainer.styles.scss?98af","webpack://frontend/./src/pages/OnboardingPage/OnboardingPage.styles.scss?b1a3"],"sourcesContent":["// This icon file is generated automatically.\nvar ArrowLeftOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 000 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"arrow-left\", \"theme\": \"outlined\" };\nexport default ArrowLeftOutlined;\n","// This icon file is generated automatically.\nvar ArrowRightOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M869 487.8L491.2 159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 5.2-2L869 536.2a32.07 32.07 0 000-48.4z\" } }] }, \"name\": \"arrow-right\", \"theme\": \"outlined\" };\nexport default ArrowRightOutlined;\n","// This icon file is generated automatically.\nvar CheckCircleTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\", \"fill\": primaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm193.4 225.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.3 0 19.9 5 25.9 13.3l71.2 98.8 157.2-218c6-8.4 15.7-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.4 12.7z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z\", \"fill\": primaryColor } }] }; }, \"name\": \"check-circle\", \"theme\": \"twotone\" };\nexport default CheckCircleTwoTone;\n","// This icon file is generated automatically.\nvar CloseCircleTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\", \"fill\": primaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 140c-205.4 0-372 166.6-372 372s166.6 372 372 372 372-166.6 372-372-166.6-372-372-372zm171.8 527.1c1.2 1.5 1.9 3.3 1.9 5.2 0 4.5-3.6 8-8 8l-66-.3-99.3-118.4-99.3 118.5-66.1.3c-4.4 0-8-3.6-8-8 0-1.9.7-3.7 1.9-5.2L471 512.3l-130.1-155a8.32 8.32 0 01-1.9-5.2c0-4.5 3.6-8 8-8l66.1.3 99.3 118.4 99.4-118.5 66-.3c4.4 0 8 3.6 8 8 0 1.9-.6 3.8-1.8 5.2l-130.1 155 129.9 154.9z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M685.8 352c0-4.4-3.6-8-8-8l-66 .3-99.4 118.5-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155-130.1 154.9a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3 99.3-118.5L611.7 680l66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.9 512.2l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z\", \"fill\": primaryColor } }] }; }, \"name\": \"close-circle\", \"theme\": \"twotone\" };\nexport default CloseCircleTwoTone;\n","// This icon file is generated automatically.\nvar LeftCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M603.3 327.5l-246 178a7.95 7.95 0 000 12.9l246 178c5.3 3.8 12.7 0 12.7-6.5V643c0-10.2-4.9-19.9-13.2-25.9L457.4 512l145.4-105.2c8.3-6 13.2-15.6 13.2-25.9V334c0-6.5-7.4-10.3-12.7-6.5z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }] }, \"name\": \"left-circle\", \"theme\": \"outlined\" };\nexport default LeftCircleOutlined;\n","// This icon file is generated automatically.\nvar PlusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z\" } }] }, \"name\": \"plus\", \"theme\": \"outlined\" };\nexport default PlusOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ArrowLeftOutlinedSvg from \"@ant-design/icons-svg/es/asn/ArrowLeftOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar ArrowLeftOutlined = function ArrowLeftOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: ArrowLeftOutlinedSvg\n  }));\n};\nArrowLeftOutlined.displayName = 'ArrowLeftOutlined';\nexport default /*#__PURE__*/React.forwardRef(ArrowLeftOutlined);","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ArrowRightOutlinedSvg from \"@ant-design/icons-svg/es/asn/ArrowRightOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar ArrowRightOutlined = function ArrowRightOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: ArrowRightOutlinedSvg\n  }));\n};\nArrowRightOutlined.displayName = 'ArrowRightOutlined';\nexport default /*#__PURE__*/React.forwardRef(ArrowRightOutlined);","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CheckCircleTwoToneSvg from \"@ant-design/icons-svg/es/asn/CheckCircleTwoTone\";\nimport AntdIcon from '../components/AntdIcon';\nvar CheckCircleTwoTone = function CheckCircleTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CheckCircleTwoToneSvg\n  }));\n};\nCheckCircleTwoTone.displayName = 'CheckCircleTwoTone';\nexport default /*#__PURE__*/React.forwardRef(CheckCircleTwoTone);","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CloseCircleTwoToneSvg from \"@ant-design/icons-svg/es/asn/CloseCircleTwoTone\";\nimport AntdIcon from '../components/AntdIcon';\nvar CloseCircleTwoTone = function CloseCircleTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CloseCircleTwoToneSvg\n  }));\n};\nCloseCircleTwoTone.displayName = 'CloseCircleTwoTone';\nexport default /*#__PURE__*/React.forwardRef(CloseCircleTwoTone);","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LeftCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/LeftCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar LeftCircleOutlined = function LeftCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LeftCircleOutlinedSvg\n  }));\n};\nLeftCircleOutlined.displayName = 'LeftCircleOutlined';\nexport default /*#__PURE__*/React.forwardRef(LeftCircleOutlined);","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar PlusOutlined = function PlusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: PlusOutlinedSvg\n  }));\n};\nPlusOutlined.displayName = 'PlusOutlined';\nexport default /*#__PURE__*/React.forwardRef(PlusOutlined);","export const onboardingHelpMessage = (\n\tdataSourceName: string,\n\tmoduleId: string,\n): string => `Hi Team,\n\nI am facing issues sending data to SigNoz. Here are my application details\n\nData Source: ${dataSourceName}\nFramework:\nEnvironment:\nModule: ${moduleId}\n\nThanks\n`;\n","/* eslint-disable prefer-destructuring */\nimport './CodeCopyBtn.scss';\n\nimport { CheckOutlined, CopyOutlined } from '@ant-design/icons';\nimport cx from 'classnames';\nimport React, { useState } from 'react';\n\nfunction CodeCopyBtn({\n\tchildren,\n\tonCopyClick,\n}: {\n\tchildren: React.ReactNode;\n\tonCopyClick?: (additionalInfo?: Record<string, unknown>) => void;\n}): JSX.Element {\n\tconst [isSnippetCopied, setIsSnippetCopied] = useState(false);\n\n\tconst handleClick = (): void => {\n\t\tlet copiedText = '';\n\t\tif (children && Array.isArray(children)) {\n\t\t\tsetIsSnippetCopied(true);\n\t\t\tnavigator.clipboard.writeText(children[0].props.children[0]).finally(() => {\n\t\t\t\tcopiedText = (children[0].props.children[0] as string).slice(0, 200); // slicing is done due to the limitation in accepted char length in attributes\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetIsSnippetCopied(false);\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t\tcopiedText = (children[0].props.children[0] as string).slice(0, 200);\n\t\t}\n\n\t\tonCopyClick?.({ copiedText });\n\t};\n\n\treturn (\n\t\t<div className={cx('code-copy-btn', isSnippetCopied ? 'copied' : '')}>\n\t\t\t<button type=\"button\" onClick={handleClick}>\n\t\t\t\t{!isSnippetCopied ? <CopyOutlined /> : <CheckOutlined />}\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nCodeCopyBtn.defaultProps = {\n\tonCopyClick: (): void => {},\n};\n\nexport default CodeCopyBtn;\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\nimport logEvent from 'api/common/logEvent';\nimport { isEmpty } from 'lodash-es';\nimport ReactMarkdown from 'react-markdown';\nimport { CodeProps } from 'react-markdown/lib/ast-to-react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { a11yDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';\nimport rehypeRaw from 'rehype-raw';\n\nimport CodeCopyBtn from './CodeCopyBtn/CodeCopyBtn';\n\ninterface LinkProps {\n\thref: string;\n\tchildren: React.ReactElement;\n}\n\nfunction Pre({\n\tchildren,\n\telementDetails,\n\ttrackCopyAction,\n}: {\n\tchildren: React.ReactNode;\n\ttrackCopyAction: boolean;\n\telementDetails: Record<string, unknown>;\n}): JSX.Element {\n\tconst { trackingTitle = '', ...rest } = elementDetails;\n\n\tconst handleClick = (additionalInfo?: Record<string, unknown>): void => {\n\t\tconst trackingData = { ...rest, copiedContent: additionalInfo };\n\n\t\tif (trackCopyAction && !isEmpty(trackingTitle)) {\n\t\t\tlogEvent(trackingTitle as string, trackingData);\n\t\t}\n\t};\n\n\treturn (\n\t\t<pre className=\"code-snippet-container\">\n\t\t\t<CodeCopyBtn onCopyClick={handleClick}>{children}</CodeCopyBtn>\n\t\t\t{children}\n\t\t</pre>\n\t);\n}\n\nfunction Code({\n\tnode,\n\tinline,\n\tclassName = 'blog-code',\n\tchildren,\n\t...props\n}: CodeProps): JSX.Element {\n\tconst match = /language-(\\w+)/.exec(className || '');\n\treturn !inline && match ? (\n\t\t<SyntaxHighlighter\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-ignore\n\t\t\tstyle={a11yDark}\n\t\t\tlanguage={match[1]}\n\t\t\tPreTag=\"div\"\n\t\t\t{...props}\n\t\t>\n\t\t\t{String(children).replace(/\\n$/, '')}\n\t\t</SyntaxHighlighter>\n\t) : (\n\t\t<code className={className} {...props}>\n\t\t\t{children}\n\t\t</code>\n\t);\n}\n\nfunction Link({ href, children }: LinkProps): JSX.Element {\n\treturn (\n\t\t<a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t{children}\n\t\t</a>\n\t);\n}\n\nconst interpolateMarkdown = (\n\tmarkdownContent: any,\n\tvariables: { [s: string]: unknown } | ArrayLike<unknown>,\n) => {\n\tlet interpolatedContent = markdownContent;\n\n\tconst variableEntries = Object.entries(variables);\n\n\t// Loop through variables and replace placeholders with values\n\tfor (const [key, value] of variableEntries) {\n\t\tconst placeholder = `{{${key}}}`;\n\t\tconst regex = new RegExp(placeholder, 'g');\n\t\tinterpolatedContent = interpolatedContent.replace(regex, value);\n\t}\n\n\treturn interpolatedContent;\n};\n\nfunction CustomTag({ color }: { color: string }): JSX.Element {\n\treturn <h1 style={{ color }}>This is custom element</h1>;\n}\n\nfunction MarkdownRenderer({\n\tmarkdownContent,\n\tvariables,\n\ttrackCopyAction,\n\telementDetails,\n}: {\n\tmarkdownContent: any;\n\tvariables: any;\n\ttrackCopyAction?: boolean;\n\telementDetails?: Record<string, unknown>;\n}): JSX.Element {\n\tconst interpolatedMarkdown = interpolateMarkdown(markdownContent, variables);\n\n\treturn (\n\t\t<ReactMarkdown\n\t\t\trehypePlugins={[rehypeRaw as any]}\n\t\t\tcomponents={{\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\ta: Link,\n\t\t\t\tpre: ({ children }) =>\n\t\t\t\t\tPre({\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\telementDetails: elementDetails ?? {},\n\t\t\t\t\t\ttrackCopyAction: !!trackCopyAction,\n\t\t\t\t\t}),\n\t\t\t\tcode: Code,\n\t\t\t\tcustomtag: CustomTag,\n\t\t\t}}\n\t\t>\n\t\t\t{interpolatedMarkdown}\n\t\t</ReactMarkdown>\n\t);\n}\n\nMarkdownRenderer.defaultProps = {\n\telementDetails: {},\n\ttrackCopyAction: false,\n};\n\nexport { Code, Link, MarkdownRenderer, Pre };\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport './FullScreenHeader.styles.scss';\n\nimport history from 'lib/history';\n\nexport default function FullScreenHeader({\n\toverrideRoute,\n}: {\n\toverrideRoute?: string;\n}): React.ReactElement {\n\tconst handleLogoClick = (): void => {\n\t\thistory.push(overrideRoute || '/');\n\t};\n\treturn (\n\t\t<div className=\"full-screen-header-container\">\n\t\t\t<div className=\"brand-logo\" onClick={handleLogoClick}>\n\t\t\t\t<img src=\"/Logos/signoz-brand-logo.svg\" alt=\"SigNoz\" />\n\n\t\t\t\t<div className=\"brand-logo-name\">SigNoz</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nFullScreenHeader.defaultProps = {\n\toverrideRoute: '/',\n};\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport './Onboarding.styles.scss';\n\nimport { ArrowRightOutlined } from '@ant-design/icons';\nimport { Button, Card, Form, Typography } from 'antd';\nimport logEvent from 'api/common/logEvent';\nimport getIngestionData from 'api/settings/getIngestionData';\nimport cx from 'classnames';\nimport { FeatureKeys } from 'constants/features';\nimport ROUTES from 'constants/routes';\nimport FullScreenHeader from 'container/FullScreenHeader/FullScreenHeader';\nimport InviteUserModal from 'container/OrganizationSettings/InviteUserModal/InviteUserModal';\nimport { InviteMemberFormValues } from 'container/OrganizationSettings/PendingInvitesContainer';\nimport history from 'lib/history';\nimport { UserPlus } from 'lucide-react';\nimport { useAppContext } from 'providers/App/App';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useQuery } from 'react-query';\nimport { useEffectOnce } from 'react-use';\n\nimport ModuleStepsContainer from './common/ModuleStepsContainer/ModuleStepsContainer';\nimport { stepsMap } from './constants/stepsConfig';\nimport {\n\tOnboardingMethods,\n\tuseOnboardingContext,\n} from './context/OnboardingContext';\nimport { DataSourceType } from './Steps/DataSource/DataSource';\nimport {\n\tdefaultApplicationDataSource,\n\tdefaultAwsServices,\n\tdefaultAzureServices,\n\tdefaultInfraMetricsType,\n\tdefaultLogsType,\n\tmoduleRouteMap,\n} from './utils/dataSourceUtils';\nimport {\n\tAPM_STEPS,\n\tAWS_MONITORING_STEPS,\n\tAZURE_MONITORING_STEPS,\n\tgetSteps,\n\tINFRASTRUCTURE_MONITORING_STEPS,\n\tLOGS_MANAGEMENT_STEPS,\n} from './utils/getSteps';\n\nexport enum ModulesMap {\n\tAPM = 'APM',\n\tLogsManagement = 'LogsManagement',\n\tInfrastructureMonitoring = 'InfrastructureMonitoring',\n\tAwsMonitoring = 'AwsMonitoring',\n\tAzureMonitoring = 'AzureMonitoring',\n}\n\nexport interface ModuleProps {\n\tid: string;\n\ttitle: string;\n\tdesc: string;\n}\n\nexport interface SelectedModuleStepProps {\n\tid: string;\n\ttitle: string;\n\tcomponent: any;\n}\n\nexport const useCases = {\n\tAPM: {\n\t\tid: ModulesMap.APM,\n\t\ttitle: 'Application Monitoring',\n\t\tdesc:\n\t\t\t'Monitor application metrics like p99 latency, error rates, external API calls, and db calls.',\n\t},\n\tLogsManagement: {\n\t\tid: ModulesMap.LogsManagement,\n\t\ttitle: 'Logs Management',\n\t\tdesc:\n\t\t\t'Easily filter and query logs, build dashboards and alerts based on attributes in logs',\n\t},\n\tInfrastructureMonitoring: {\n\t\tid: ModulesMap.InfrastructureMonitoring,\n\t\ttitle: 'Infrastructure Monitoring',\n\t\tdesc:\n\t\t\t'Monitor Kubernetes infrastructure metrics, hostmetrics, or metrics of any third-party integration',\n\t},\n\tAwsMonitoring: {\n\t\tid: ModulesMap.AwsMonitoring,\n\t\ttitle: 'AWS Monitoring',\n\t\tdesc:\n\t\t\t'Monitor your traces, logs and metrics for AWS services like EC2, ECS, EKS etc.',\n\t},\n\tAzureMonitoring: {\n\t\tid: ModulesMap.AzureMonitoring,\n\t\ttitle: 'Azure Monitoring',\n\t\tdesc:\n\t\t\t'Monitor your traces, logs and metrics for Azure services like AKS, Container Apps, App Service etc.',\n\t},\n};\n\nexport default function Onboarding(): JSX.Element {\n\tconst [selectedModule, setSelectedModule] = useState<ModuleProps>(\n\t\tuseCases.APM,\n\t);\n\n\tconst [selectedModuleSteps, setSelectedModuleSteps] = useState(APM_STEPS);\n\tconst [activeStep, setActiveStep] = useState(1);\n\tconst [current, setCurrent] = useState(0);\n\tconst { location } = history;\n\tconst { t } = useTranslation(['onboarding']);\n\n\tconst { featureFlags } = useAppContext();\n\tconst isOnboardingV3Enabled = featureFlags?.find(\n\t\t(flag) => flag.name === FeatureKeys.ONBOARDING_V3,\n\t)?.active;\n\n\tconst {\n\t\tselectedDataSource,\n\t\tselectedEnvironment,\n\t\tselectedMethod,\n\t\tupdateSelectedModule,\n\t\tupdateSelectedDataSource,\n\t\tresetProgress,\n\t\tupdateActiveStep,\n\t\tupdateIngestionData,\n\t} = useOnboardingContext();\n\n\tuseEffectOnce(() => {\n\t\tlogEvent('Onboarding V2 Started', {});\n\t});\n\n\tconst { status, data: ingestionData } = useQuery({\n\t\tqueryFn: () => getIngestionData(),\n\t});\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\tstatus === 'success' &&\n\t\t\tingestionData &&\n\t\t\tingestionData &&\n\t\t\tArray.isArray(ingestionData.payload)\n\t\t) {\n\t\t\tconst payload = ingestionData.payload[0] || {\n\t\t\t\tingestionKey: '',\n\t\t\t\tdataRegion: '',\n\t\t\t};\n\n\t\t\tupdateIngestionData({\n\t\t\t\tSIGNOZ_INGESTION_KEY: payload?.ingestionKey,\n\t\t\t\tREGION: payload?.dataRegion,\n\t\t\t});\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [status, ingestionData?.payload]);\n\n\tconst setModuleStepsBasedOnSelectedDataSource = (\n\t\tselectedDataSource: DataSourceType | null,\n\t): void => {\n\t\tif (selectedDataSource) {\n\t\t\tlet steps: SelectedModuleStepProps[] = [];\n\n\t\t\tsteps = getSteps({\n\t\t\t\tselectedDataSource,\n\t\t\t});\n\n\t\t\tsetSelectedModuleSteps(steps);\n\t\t}\n\t};\n\n\tconst removeStep = (\n\t\tstepToRemove: string,\n\t\tsteps: SelectedModuleStepProps[],\n\t): SelectedModuleStepProps[] =>\n\t\tsteps.filter((step) => step.id !== stepToRemove);\n\n\tconst handleAPMSteps = (): void => {\n\t\tif (selectedEnvironment === 'kubernetes') {\n\t\t\tconst updatedSteps = removeStep(stepsMap.selectMethod, APM_STEPS);\n\t\t\tsetSelectedModuleSteps(updatedSteps);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (selectedMethod === OnboardingMethods.QUICK_START) {\n\t\t\tconst updatedSteps = removeStep(stepsMap.setupOtelCollector, APM_STEPS);\n\t\t\tsetSelectedModuleSteps(updatedSteps);\n\n\t\t\treturn;\n\t\t}\n\n\t\tsetSelectedModuleSteps(APM_STEPS);\n\t};\n\n\t// eslint-disable-next-line sonarjs/cognitive-complexity\n\tuseEffect(() => {\n\t\tif (selectedModule?.id === ModulesMap.InfrastructureMonitoring) {\n\t\t\tif (selectedDataSource) {\n\t\t\t\tsetModuleStepsBasedOnSelectedDataSource(selectedDataSource);\n\t\t\t} else {\n\t\t\t\tsetSelectedModuleSteps(INFRASTRUCTURE_MONITORING_STEPS);\n\t\t\t\tupdateSelectedDataSource(defaultInfraMetricsType);\n\t\t\t}\n\t\t} else if (selectedModule?.id === ModulesMap.LogsManagement) {\n\t\t\tif (selectedDataSource) {\n\t\t\t\tsetModuleStepsBasedOnSelectedDataSource(selectedDataSource);\n\t\t\t} else {\n\t\t\t\tsetSelectedModuleSteps(LOGS_MANAGEMENT_STEPS);\n\t\t\t\tupdateSelectedDataSource(defaultLogsType);\n\t\t\t}\n\t\t} else if (selectedModule?.id === ModulesMap.AwsMonitoring) {\n\t\t\tif (selectedDataSource) {\n\t\t\t\tsetModuleStepsBasedOnSelectedDataSource(selectedDataSource);\n\t\t\t} else {\n\t\t\t\tsetSelectedModuleSteps(AWS_MONITORING_STEPS);\n\t\t\t\tupdateSelectedDataSource(defaultAwsServices);\n\t\t\t}\n\t\t} else if (selectedModule?.id === ModulesMap.AzureMonitoring) {\n\t\t\tif (selectedDataSource) {\n\t\t\t\tsetModuleStepsBasedOnSelectedDataSource(selectedDataSource);\n\t\t\t} else {\n\t\t\t\tsetSelectedModuleSteps(AZURE_MONITORING_STEPS);\n\t\t\t\tupdateSelectedDataSource(defaultAzureServices);\n\t\t\t}\n\t\t} else if (selectedModule?.id === ModulesMap.APM) {\n\t\t\thandleAPMSteps();\n\n\t\t\tif (!selectedDataSource) {\n\t\t\t\tupdateSelectedDataSource(defaultApplicationDataSource);\n\t\t\t}\n\t\t}\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [selectedModule, selectedDataSource, selectedEnvironment, selectedMethod]);\n\n\tconst handleNextStep = (): void => {\n\t\tif (activeStep <= 3) {\n\t\t\tconst nextStep = activeStep + 1;\n\n\t\t\t// on next\n\t\t\tlogEvent('Onboarding V2: Get Started', {\n\t\t\t\tselectedModule: selectedModule.id,\n\t\t\t\tnextStepId: nextStep,\n\t\t\t});\n\n\t\t\tsetActiveStep(nextStep);\n\t\t\tsetCurrent(current + 1);\n\n\t\t\t// set the active step info\n\t\t\tupdateActiveStep({\n\t\t\t\tmodule: selectedModule,\n\t\t\t\tstep: selectedModuleSteps[current],\n\t\t\t});\n\t\t}\n\t};\n\n\tconst handleNext = (): void => {\n\t\tif (activeStep <= 3) {\n\t\t\thistory.push(moduleRouteMap[selectedModule.id as ModulesMap]);\n\t\t}\n\t};\n\n\tconst handleModuleSelect = (module: ModuleProps): void => {\n\t\tsetSelectedModule(module);\n\t\tupdateSelectedModule(module);\n\t\tupdateSelectedDataSource(null);\n\t};\n\n\tconst handleBackNavigation = (): void => {\n\t\tsetCurrent(0);\n\t\tsetActiveStep(1);\n\t\tsetSelectedModule(useCases.APM);\n\t\tresetProgress();\n\t};\n\n\tuseEffect(() => {\n\t\tconst { pathname } = location;\n\n\t\tif (pathname === ROUTES.GET_STARTED_APPLICATION_MONITORING) {\n\t\t\thandleModuleSelect(useCases.APM);\n\t\t\tupdateSelectedDataSource(defaultApplicationDataSource);\n\t\t\thandleNextStep();\n\t\t} else if (pathname === ROUTES.GET_STARTED_INFRASTRUCTURE_MONITORING) {\n\t\t\thandleModuleSelect(useCases.InfrastructureMonitoring);\n\t\t\thandleNextStep();\n\t\t} else if (pathname === ROUTES.GET_STARTED_LOGS_MANAGEMENT) {\n\t\t\thandleModuleSelect(useCases.LogsManagement);\n\t\t\thandleNextStep();\n\t\t} else if (pathname === ROUTES.GET_STARTED_AWS_MONITORING) {\n\t\t\thandleModuleSelect(useCases.AwsMonitoring);\n\t\t\thandleNextStep();\n\t\t} else if (pathname === ROUTES.GET_STARTED_AZURE_MONITORING) {\n\t\t\thandleModuleSelect(useCases.AzureMonitoring);\n\t\t\thandleNextStep();\n\t\t} else {\n\t\t\thandleBackNavigation();\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [location.pathname]);\n\n\tconst [form] = Form.useForm<InviteMemberFormValues>();\n\tconst [\n\t\tisInviteTeamMemberModalOpen,\n\t\tsetIsInviteTeamMemberModalOpen,\n\t] = useState<boolean>(false);\n\n\tconst toggleModal = useCallback(\n\t\t(value: boolean): void => {\n\t\t\tsetIsInviteTeamMemberModalOpen(value);\n\t\t\tif (!value) {\n\t\t\t\tform.resetFields();\n\t\t\t}\n\t\t},\n\t\t[form],\n\t);\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t{activeStep === 1 && (\n\t\t\t\t<div className=\"onboarding-page\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tonClick={(): void => {\n\t\t\t\t\t\t\tlogEvent('Onboarding V2: Skip Button Clicked', {});\n\t\t\t\t\t\t\thistory.push(ROUTES.APPLICATION);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"skip-to-console\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{t('skip')}\n\t\t\t\t\t</div>\n\t\t\t\t\t<FullScreenHeader />\n\t\t\t\t\t<div className=\"onboardingHeader\">\n\t\t\t\t\t\t<h1>{t('select_use_case')}</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"modulesContainer\">\n\t\t\t\t\t\t<div className=\"moduleContainerRowStyles\">\n\t\t\t\t\t\t\t{Object.keys(ModulesMap).map((module) => {\n\t\t\t\t\t\t\t\tconst selectedUseCase = (useCases as any)[module];\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t\t\t\t'moduleStyles',\n\t\t\t\t\t\t\t\t\t\t\tselectedModule.id === selectedUseCase.id ? 'selected' : '',\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\tkey={selectedUseCase.id}\n\t\t\t\t\t\t\t\t\t\tonClick={(): void => handleModuleSelect(selectedUseCase)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Typography.Title className=\"moduleTitleStyle\" level={4}>\n\t\t\t\t\t\t\t\t\t\t\t{selectedUseCase.title}\n\t\t\t\t\t\t\t\t\t\t</Typography.Title>\n\t\t\t\t\t\t\t\t\t\t<Typography.Paragraph className=\"moduleDesc\">\n\t\t\t\t\t\t\t\t\t\t\t{selectedUseCase.desc}\n\t\t\t\t\t\t\t\t\t\t</Typography.Paragraph>\n\t\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"continue-to-next-step\">\n\t\t\t\t\t\t<Button type=\"primary\" icon={<ArrowRightOutlined />} onClick={handleNext}>\n\t\t\t\t\t\t\t{t('get_started')}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"invite-member-wrapper\">\n\t\t\t\t\t\t<Typography.Text className=\"helper-text\">\n\t\t\t\t\t\t\t{t('invite_user_helper_text')}\n\t\t\t\t\t\t</Typography.Text>\n\t\t\t\t\t\t<div className=\"invite-member\">\n\t\t\t\t\t\t\t<Typography.Text>{t('invite_user')}</Typography.Text>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={(): void => {\n\t\t\t\t\t\t\t\t\tlogEvent('Onboarding V2: Invite Member', {\n\t\t\t\t\t\t\t\t\t\tmodule: selectedModule?.id,\n\t\t\t\t\t\t\t\t\t\tpage: 'homepage',\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tsetIsInviteTeamMemberModalOpen(true);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ticon={<UserPlus size={16} />}\n\t\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{t('invite')}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{activeStep > 1 && (\n\t\t\t\t<div className=\"stepsContainer\">\n\t\t\t\t\t<ModuleStepsContainer\n\t\t\t\t\t\tonReselectModule={(): void => {\n\t\t\t\t\t\t\tsetCurrent(current - 1);\n\t\t\t\t\t\t\tsetActiveStep(activeStep - 1);\n\t\t\t\t\t\t\tsetSelectedModule(useCases.APM);\n\t\t\t\t\t\t\tresetProgress();\n\n\t\t\t\t\t\t\tif (isOnboardingV3Enabled) {\n\t\t\t\t\t\t\t\thistory.push(ROUTES.GET_STARTED_WITH_CLOUD);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\thistory.push(ROUTES.GET_STARTED);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tselectedModule={selectedModule}\n\t\t\t\t\t\tselectedModuleSteps={selectedModuleSteps}\n\t\t\t\t\t\tsetIsInviteTeamMemberModalOpen={setIsInviteTeamMemberModalOpen}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<InviteUserModal\n\t\t\t\tform={form}\n\t\t\t\tisInviteTeamMemberModalOpen={isInviteTeamMemberModalOpen}\n\t\t\t\ttoggleModal={toggleModal}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","import './ConnectionStatus.styles.scss';\n\nimport {\n\tCheckCircleTwoTone,\n\tCloseCircleTwoTone,\n\tLoadingOutlined,\n} from '@ant-design/icons';\nimport logEvent from 'api/common/logEvent';\nimport MessagingQueueHealthCheck from 'components/MessagingQueueHealthCheck/MessagingQueueHealthCheck';\nimport { QueryParams } from 'constants/query';\nimport Header from 'container/OnboardingContainer/common/Header/Header';\nimport { useOnboardingContext } from 'container/OnboardingContainer/context/OnboardingContext';\nimport { useOnboardingStatus } from 'hooks/messagingQueue/useOnboardingStatus';\nimport { useQueryService } from 'hooks/useQueryService';\nimport useResourceAttribute from 'hooks/useResourceAttribute';\nimport { convertRawQueriesToTraceSelectedTags } from 'hooks/useResourceAttribute/utils';\nimport useUrlQuery from 'hooks/useUrlQuery';\nimport { getAttributeDataFromOnboardingStatus } from 'pages/MessagingQueues/MessagingQueuesUtils';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppState } from 'store/reducers';\nimport { UPDATE_TIME_INTERVAL } from 'types/actions/globalTime';\nimport { PayloadProps as QueryServicePayloadProps } from 'types/api/metrics/getService';\nimport { GlobalReducer } from 'types/reducer/globalTime';\nimport { Tags } from 'types/reducer/trace';\n\nconst pollingInterval = 10000;\n\nexport default function ConnectionStatus(): JSX.Element {\n\tconst { minTime, maxTime, selectedTime } = useSelector<\n\t\tAppState,\n\t\tGlobalReducer\n\t>((state) => state.globalTime);\n\n\tconst urlQuery = useUrlQuery();\n\tconst getStartedSource = urlQuery.get(QueryParams.getStartedSource);\n\tconst getStartedSourceService = urlQuery.get(\n\t\tQueryParams.getStartedSourceService,\n\t);\n\n\tconst {\n\t\tserviceName,\n\t\tselectedDataSource,\n\t\tselectedEnvironment,\n\t\tactiveStep,\n\t\tselectedMethod,\n\t\tselectedFramework,\n\t} = useOnboardingContext();\n\tconst { queries } = useResourceAttribute();\n\tconst selectedTags = useMemo(\n\t\t() => (convertRawQueriesToTraceSelectedTags(queries) as Tags[]) || [],\n\t\t[queries],\n\t);\n\n\tconst [retryCount, setRetryCount] = useState(20); // Retry for 3 mins 20s\n\tconst [loading, setLoading] = useState(true);\n\tconst [isReceivingData, setIsReceivingData] = useState(false);\n\tconst dispatch = useDispatch();\n\n\tconst {\n\t\tdata,\n\t\terror,\n\t\tisFetching: isServiceLoading,\n\t\tisError,\n\t\trefetch,\n\t} = useQueryService({\n\t\tminTime,\n\t\tmaxTime,\n\t\tselectedTime,\n\t\tselectedTags,\n\t\toptions: {\n\t\t\tenabled: getStartedSource !== 'kafka',\n\t\t},\n\t});\n\n\tconst [pollInterval, setPollInterval] = useState<number | false>(10000);\n\tconst {\n\t\tdata: onbData,\n\t\terror: onbErr,\n\t\tisFetching: onbFetching,\n\t} = useOnboardingStatus(\n\t\t{\n\t\t\tenabled: getStartedSource === 'kafka',\n\t\t\trefetchInterval: pollInterval,\n\t\t},\n\t\tgetStartedSourceService || '',\n\t\t'query-key-onboarding-status',\n\t);\n\n\tconst [\n\t\tshouldRetryOnboardingCall,\n\t\tsetShouldRetryOnboardingCall,\n\t] = useState<boolean>(false);\n\n\tuseEffect(() => {\n\t\t// runs only when the caller is coming from 'kafka' i.e. coming from Messaging Queues - setup helper\n\t\tif (getStartedSource === 'kafka') {\n\t\t\tif (onbData?.statusCode !== 200) {\n\t\t\t\tsetShouldRetryOnboardingCall(true);\n\t\t\t} else if (onbData?.payload?.status === 'success') {\n\t\t\t\tconst attributeData = getAttributeDataFromOnboardingStatus(\n\t\t\t\t\tonbData?.payload,\n\t\t\t\t);\n\t\t\t\tif (attributeData.overallStatus === 'success') {\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t\tsetIsReceivingData(true);\n\t\t\t\t\tsetPollInterval(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetShouldRetryOnboardingCall(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [\n\t\tshouldRetryOnboardingCall,\n\t\tonbData,\n\t\tonbErr,\n\t\tonbFetching,\n\t\tgetStartedSource,\n\t]);\n\n\tuseEffect(() => {\n\t\tif (retryCount < 0 && getStartedSource === 'kafka') {\n\t\t\tsetPollInterval(false);\n\t\t\tsetLoading(false);\n\t\t}\n\t}, [retryCount, getStartedSource]);\n\n\tuseEffect(() => {\n\t\tif (getStartedSource === 'kafka' && !onbFetching) {\n\t\t\tsetRetryCount((prevCount) => prevCount - 1);\n\t\t}\n\t}, [getStartedSource, onbData, onbFetching]);\n\n\tconst renderDocsReference = (): JSX.Element => {\n\t\tswitch (selectedDataSource?.name) {\n\t\t\tcase 'java':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"java\"\n\t\t\t\t\t\theading=\"Java OpenTelemetry Instrumentation\"\n\t\t\t\t\t\timgURL=\"/Logos/java.png\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/instrumentation/java/\"\n\t\t\t\t\t\timgClassName=\"supported-language-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\tcase 'python':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"python\"\n\t\t\t\t\t\theading=\"Python OpenTelemetry Instrumentation\"\n\t\t\t\t\t\timgURL=\"/Logos/python.png\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/instrumentation/python/\"\n\t\t\t\t\t\timgClassName=\"supported-language-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\tcase 'javascript':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"javascript\"\n\t\t\t\t\t\theading=\"Javascript OpenTelemetry Instrumentation\"\n\t\t\t\t\t\timgURL=\"/Logos/javascript.png\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/instrumentation/javascript/\"\n\t\t\t\t\t\timgClassName=\"supported-language-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 'go':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"go\"\n\t\t\t\t\t\theading=\"Go OpenTelemetry Instrumentation\"\n\t\t\t\t\t\timgURL=\"/Logos/go.png\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/instrumentation/golang/\"\n\t\t\t\t\t\timgClassName=\"supported-language-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 'rails':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"rails\"\n\t\t\t\t\t\theading=\"Ruby on Rails OpenTelemetry Instrumentation\"\n\t\t\t\t\t\timgURL=\"/Logos/rails.png\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/instrumentation/ruby-on-rails/\"\n\t\t\t\t\t\timgClassName=\"supported-language-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 'rust':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"rust\"\n\t\t\t\t\t\theading=\"Rust OpenTelemetry Instrumentation\"\n\t\t\t\t\t\timgURL=\"/Logos/rust.png\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/instrumentation/rust/\"\n\t\t\t\t\t\timgClassName=\"supported-language-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 'elixir':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"rust\"\n\t\t\t\t\t\theading=\"Elixir OpenTelemetry Instrumentation\"\n\t\t\t\t\t\timgURL=\"/Logos/elixir.png\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/instrumentation/elixir/\"\n\t\t\t\t\t\timgClassName=\"supported-language-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 'swift':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"swift\"\n\t\t\t\t\t\theading=\"Swift OpenTelemetry Instrumentation\"\n\t\t\t\t\t\timgURL=\"/Logos/swift.png\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/instrumentation/swift/\"\n\t\t\t\t\t\timgClassName=\"supported-language-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\tdefault:\n\t\t\t\treturn <> </>;\n\t\t}\n\t};\n\n\tconst verifyApplicationData = (response?: QueryServicePayloadProps): void => {\n\t\tif (data || isError) {\n\t\t\tsetRetryCount(retryCount - 1);\n\t\t\tif (retryCount < 0) {\n\t\t\t\tlogEvent('Onboarding V2: Connection Status', {\n\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\tselectedMethod,\n\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\tserviceName,\n\t\t\t\t\tstatus: 'Failed',\n\t\t\t\t});\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t}\n\n\t\tif (response && Array.isArray(response)) {\n\t\t\tfor (let i = 0; i < response.length; i += 1) {\n\t\t\t\tif (response[i]?.serviceName === serviceName) {\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t\tsetIsReceivingData(true);\n\n\t\t\t\t\tlogEvent('Onboarding V2: Connection Status', {\n\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\tselectedMethod,\n\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\tserviceName,\n\t\t\t\t\t\tstatus: 'Successful',\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Use useEffect to update query parameters when the polling interval lapses\n\tuseEffect(() => {\n\t\tlet pollingTimer: string | number | NodeJS.Timer | undefined;\n\n\t\tif (getStartedSource !== 'kafka') {\n\t\t\tif (loading) {\n\t\t\t\tpollingTimer = setInterval(() => {\n\t\t\t\t\t// Trigger a refetch with the updated parameters\n\t\t\t\t\tconst updatedMinTime = (Date.now() - 15 * 60 * 1000) * 1000000;\n\t\t\t\t\tconst updatedMaxTime = Date.now() * 1000000;\n\n\t\t\t\t\tconst payload = {\n\t\t\t\t\t\tmaxTime: updatedMaxTime,\n\t\t\t\t\t\tminTime: updatedMinTime,\n\t\t\t\t\t\tselectedTime,\n\t\t\t\t\t};\n\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: UPDATE_TIME_INTERVAL,\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t});\n\t\t\t\t}, pollingInterval); // Same interval as pollingInterval\n\t\t\t} else if (!loading && pollingTimer) {\n\t\t\t\tclearInterval(pollingTimer);\n\t\t\t}\n\t\t}\n\n\t\t// Clean up the interval when the component unmounts\n\t\treturn (): void => {\n\t\t\tclearInterval(pollingTimer);\n\t\t};\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [refetch, selectedTags, selectedTime, loading]);\n\n\tuseEffect(() => {\n\t\tif (getStartedSource !== 'kafka') {\n\t\t\tverifyApplicationData(data);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [isServiceLoading, data, error, isError]);\n\n\tuseEffect(() => {\n\t\tif (getStartedSource !== 'kafka') {\n\t\t\trefetch();\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst isQueryServiceLoading = useMemo(\n\t\t() => isServiceLoading || loading || onbFetching,\n\t\t[isServiceLoading, loading, onbFetching],\n\t);\n\n\treturn (\n\t\t<div className=\"connection-status-container\">\n\t\t\t<div className=\"full-docs-link\">{renderDocsReference()}</div>\n\t\t\t<div className=\"status-container\">\n\t\t\t\t<div className=\"service-info\">\n\t\t\t\t\t<div className=\"label\"> Service Name </div>\n\t\t\t\t\t<div className=\"language\">{serviceName}</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"language-info\">\n\t\t\t\t\t<div className=\"label\"> Language - Framework </div>\n\t\t\t\t\t<div className=\"language\">\n\t\t\t\t\t\t{selectedDataSource?.name} - {selectedFramework}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"status-info\">\n\t\t\t\t\t<div className=\"label\"> Status </div>\n\n\t\t\t\t\t<div className=\"status\">\n\t\t\t\t\t\t{isQueryServiceLoading && <LoadingOutlined />}\n\t\t\t\t\t\t{!isQueryServiceLoading &&\n\t\t\t\t\t\t\tisReceivingData &&\n\t\t\t\t\t\t\t(getStartedSource !== 'kafka' ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n\t\t\t\t\t\t\t\t\t<span> Success </span>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<MessagingQueueHealthCheck\n\t\t\t\t\t\t\t\t\tserviceToInclude={[getStartedSourceService || '']}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t{!isQueryServiceLoading &&\n\t\t\t\t\t\t\t!isReceivingData &&\n\t\t\t\t\t\t\t(getStartedSource !== 'kafka' ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<CloseCircleTwoTone twoToneColor=\"#e84749\" />\n\t\t\t\t\t\t\t\t\t<span> Failed </span>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<MessagingQueueHealthCheck\n\t\t\t\t\t\t\t\t\tserviceToInclude={[getStartedSourceService || '']}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"details-info\">\n\t\t\t\t\t<div className=\"label\"> Details </div>\n\n\t\t\t\t\t<div className=\"details\">\n\t\t\t\t\t\t{isQueryServiceLoading && <div> Waiting for Update </div>}\n\t\t\t\t\t\t{!isQueryServiceLoading && isReceivingData && (\n\t\t\t\t\t\t\t<div> Received data from the application successfully. </div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!isQueryServiceLoading && !isReceivingData && (\n\t\t\t\t\t\t\t<div> Could not detect the install </div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport './DataSource.styles.scss';\n\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Button, Card, Form, Input, Select, Space, Typography } from 'antd';\nimport logEvent from 'api/common/logEvent';\nimport cx from 'classnames';\nimport { QueryParams } from 'constants/query';\nimport ROUTES from 'constants/routes';\nimport { useOnboardingContext } from 'container/OnboardingContainer/context/OnboardingContext';\nimport {\n\tModulesMap,\n\tuseCases,\n} from 'container/OnboardingContainer/OnboardingContainer';\nimport {\n\tgetDataSources,\n\tgetSupportedFrameworks,\n\thasFrameworks,\n\tmessagingQueueKakfaSupportedDataSources,\n} from 'container/OnboardingContainer/utils/dataSourceUtils';\nimport { useNotifications } from 'hooks/useNotifications';\nimport useUrlQuery from 'hooks/useUrlQuery';\nimport { Blocks, Check } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\nimport { popupContainer } from 'utils/selectPopupContainer';\n\nexport interface DataSourceType {\n\tid?: string;\n\tname: string;\n\timgURL?: string;\n\tlabel?: string;\n}\n\nexport default function DataSource(): JSX.Element {\n\tconst [form] = Form.useForm();\n\tconst { t } = useTranslation(['common']);\n\tconst history = useHistory();\n\n\tconst getStartedSource = useUrlQuery().get(QueryParams.getStartedSource);\n\n\tconst {\n\t\tserviceName,\n\t\tselectedModule,\n\t\tselectedDataSource,\n\t\tselectedFramework,\n\t\tupdateSelectedDataSource,\n\t\tupdateSelectedEnvironment,\n\t\tupdateServiceName,\n\t\tupdateSelectedFramework,\n\t} = useOnboardingContext();\n\n\tconst isKafkaAPM =\n\t\tgetStartedSource === 'kafka' && selectedModule?.id === ModulesMap.APM;\n\n\tconst [supportedDataSources, setSupportedDataSources] = useState<\n\t\tDataSourceType[]\n\t>([]);\n\tconst [supportedframeworks, setSupportedframeworks] = useState<\n\t\tDataSourceType[]\n\t>([]);\n\n\tconst requestedDataSourceName = Form.useWatch('requestedDataSourceName', form);\n\n\tconst [\n\t\tisSubmittingRequestForDataSource,\n\t\tsetIsSubmittingRequestForDataSource,\n\t] = useState(false);\n\n\tconst { notifications } = useNotifications();\n\n\tconst [enableFrameworks, setEnableFrameworks] = useState(false);\n\n\tuseEffect(() => {\n\t\tif (selectedModule) {\n\t\t\tconst dataSource = getDataSources(selectedModule);\n\n\t\t\tsetSupportedDataSources(dataSource);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (selectedModule && selectedDataSource) {\n\t\t\tconst frameworks = hasFrameworks({\n\t\t\t\tmodule: selectedModule,\n\t\t\t\tdataSource: selectedDataSource,\n\t\t\t});\n\n\t\t\tif (frameworks) {\n\t\t\t\tsetEnableFrameworks(true);\n\t\t\t\tsetSupportedframeworks(\n\t\t\t\t\tgetSupportedFrameworks({\n\t\t\t\t\t\tmodule: selectedModule,\n\t\t\t\t\t\tdataSource: selectedDataSource,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tsetEnableFrameworks(false);\n\t\t\t}\n\t\t}\n\t}, [selectedModule, selectedDataSource]);\n\n\tconst handleRequestDataSourceSubmit = async (): Promise<void> => {\n\t\ttry {\n\t\t\tsetIsSubmittingRequestForDataSource(true);\n\t\t\tconst response = await logEvent('Onboarding V2: Data Source Requested', {\n\t\t\t\tmodule: selectedModule?.id,\n\t\t\t\tdataSource: requestedDataSourceName,\n\t\t\t});\n\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\tnotifications.success({\n\t\t\t\t\tmessage: 'Data Source Request Submitted',\n\t\t\t\t});\n\n\t\t\t\tform.setFieldValue('requestedDataSourceName', '');\n\n\t\t\t\tsetIsSubmittingRequestForDataSource(false);\n\t\t\t} else {\n\t\t\t\tnotifications.error({\n\t\t\t\t\tmessage:\n\t\t\t\t\t\tresponse.error ||\n\t\t\t\t\t\tt('something_went_wrong', {\n\t\t\t\t\t\t\tns: 'common',\n\t\t\t\t\t\t}),\n\t\t\t\t});\n\n\t\t\t\tsetIsSubmittingRequestForDataSource(false);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: t('something_went_wrong', {\n\t\t\t\t\tns: 'common',\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tsetIsSubmittingRequestForDataSource(false);\n\t\t}\n\t};\n\n\tconst goToIntegrationsPage = (): void => {\n\t\tlogEvent('Onboarding V2: Go to integrations', {\n\t\t\tmodule: selectedModule?.id,\n\t\t\tdataSource: selectedDataSource?.name,\n\t\t\tframework: selectedFramework,\n\t\t});\n\t\thistory.push(ROUTES.INTEGRATIONS);\n\t};\n\n\treturn (\n\t\t<div className=\"module-container\">\n\t\t\t<Typography.Text className=\"data-source-title\">\n\t\t\t\t<span className=\"required-symbol\">*</span> Select Data Source\n\t\t\t</Typography.Text>\n\t\t\t<div className=\"supported-languages-container\">\n\t\t\t\t{supportedDataSources?.map((dataSource) => (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t'supported-language',\n\t\t\t\t\t\t\tselectedDataSource?.name === dataSource.name ? 'selected' : '',\n\t\t\t\t\t\t\tisKafkaAPM &&\n\t\t\t\t\t\t\t\t!messagingQueueKakfaSupportedDataSources.includes(dataSource?.id || '')\n\t\t\t\t\t\t\t\t? 'disabled'\n\t\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tkey={dataSource.name}\n\t\t\t\t\t\tonClick={(): void => {\n\t\t\t\t\t\t\tif (!isKafkaAPM) {\n\t\t\t\t\t\t\t\tupdateSelectedFramework(null);\n\t\t\t\t\t\t\t\tupdateSelectedEnvironment(null);\n\t\t\t\t\t\t\t\tupdateSelectedDataSource(dataSource);\n\t\t\t\t\t\t\t\tform.setFieldsValue({ selectFramework: null });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName={cx('supported-langauge-img')}\n\t\t\t\t\t\t\t\tsrc={dataSource.imgURL}\n\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Typography.Text className=\"dataSourceName\">\n\t\t\t\t\t\t\t\t{dataSource.name}\n\t\t\t\t\t\t\t</Typography.Text>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Card>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<div className=\"form-container\">\n\t\t\t\t<div className=\"service-name-container\">\n\t\t\t\t\t<Form\n\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\tserviceName,\n\t\t\t\t\t\t\tselectFramework: selectedFramework,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tform={form}\n\t\t\t\t\t\tonValuesChange={(): void => {\n\t\t\t\t\t\t\tconst serviceName = form.getFieldValue('serviceName');\n\n\t\t\t\t\t\t\tupdateServiceName(serviceName);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tname=\"data-source-form\"\n\t\t\t\t\t\tlayout=\"vertical\"\n\t\t\t\t\t\tvalidateTrigger=\"onBlur\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{selectedModule?.id === useCases.APM.id && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\tname=\"serviceName\"\n\t\t\t\t\t\t\t\t\tlabel=\"Service Name\"\n\t\t\t\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\t\t\t\trules={[{ required: true, message: 'Please enter service name' }]}\n\t\t\t\t\t\t\t\t\tvalidateTrigger=\"onBlur\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Input autoFocus />\n\t\t\t\t\t\t\t\t</Form.Item>\n\n\t\t\t\t\t\t\t\t{enableFrameworks && (\n\t\t\t\t\t\t\t\t\t<div className=\"framework-selector\">\n\t\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Select Framework\"\n\t\t\t\t\t\t\t\t\t\t\tname=\"selectFramework\"\n\t\t\t\t\t\t\t\t\t\t\trules={[{ required: true, message: 'Please select framework' }]}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={selectedFramework}\n\t\t\t\t\t\t\t\t\t\t\t\tgetPopupContainer={popupContainer}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select Framework\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={(value): void => updateSelectedFramework(value)}\n\t\t\t\t\t\t\t\t\t\t\t\toptions={supportedframeworks}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t<div className=\"request-entity-container intgeration-page-container\">\n\t\t\t\t\t\t\t<Typography.Text className=\"intgeration-page-container-text\">\n\t\t\t\t\t\t\t\tNot able to find datasources you are looking for, check our Integrations\n\t\t\t\t\t\t\t\tpage which allows more sources of sending data\n\t\t\t\t\t\t\t</Typography.Text>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={goToIntegrationsPage}\n\t\t\t\t\t\t\t\ticon={<Blocks size={14} />}\n\t\t\t\t\t\t\t\tclassName=\"navigate-integrations-page-btn\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tGo to integrations\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"request-entity-container\">\n\t\t\t\t\t\t\t<Typography.Text>\n\t\t\t\t\t\t\t\tCannot find what you’re looking for? Request a data source\n\t\t\t\t\t\t\t</Typography.Text>\n\n\t\t\t\t\t\t\t<div className=\"form-section\">\n\t\t\t\t\t\t\t\t<Space.Compact style={{ width: '100%' }}>\n\t\t\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\t\t\tname=\"requestedDataSourceName\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: 300, marginBottom: 0 }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Input placeholder=\"Enter data source name...\" />\n\t\t\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tclassName=\"periscope-btn primary\"\n\t\t\t\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\t\t\t\tisSubmittingRequestForDataSource ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<LoadingOutlined />\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<Check size={12} />\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\t\t\t\tonClick={handleRequestDataSourceSubmit}\n\t\t\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t\t\tisSubmittingRequestForDataSource ||\n\t\t\t\t\t\t\t\t\t\t\t!requestedDataSourceName ||\n\t\t\t\t\t\t\t\t\t\t\trequestedDataSourceName?.trim().length === 0\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Space.Compact>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","import { LoadingOutlined } from '@ant-design/icons';\nimport { Button, Card, Form, Input, Space, Typography } from 'antd';\nimport logEvent from 'api/common/logEvent';\nimport cx from 'classnames';\nimport { useOnboardingContext } from 'container/OnboardingContainer/context/OnboardingContext';\nimport { useCases } from 'container/OnboardingContainer/OnboardingContainer';\nimport { useNotifications } from 'hooks/useNotifications';\nimport { Check, Server } from 'lucide-react';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface SupportedEnvironmentsProps {\n\tname: string;\n\tid: string;\n}\n\nconst supportedEnvironments: SupportedEnvironmentsProps[] = [\n\t{\n\t\tname: 'Kubernetes',\n\t\tid: 'kubernetes',\n\t},\n\t{\n\t\tname: 'Linux AMD64',\n\t\tid: 'linuxAMD64',\n\t},\n\t{\n\t\tname: 'Linux ARM64',\n\t\tid: 'linuxARM64',\n\t},\n\t{\n\t\tname: 'MacOS AMD64',\n\t\tid: 'macOsAMD64',\n\t},\n\t{\n\t\tname: 'MacOS ARM64',\n\t\tid: 'macOsARM64',\n\t},\n\t{\n\t\tname: 'Docker',\n\t\tid: 'docker',\n\t},\n\t{\n\t\tname: 'Windows',\n\t\tid: 'windows',\n\t},\n];\n\nexport default function EnvironmentDetails(): JSX.Element {\n\tconst [form] = Form.useForm();\n\tconst { t } = useTranslation(['common']);\n\n\tconst {\n\t\tselectedEnvironment,\n\t\tupdateSelectedEnvironment,\n\t\tselectedModule,\n\t\tselectedDataSource,\n\t\tselectedFramework,\n\t\terrorDetails,\n\t\tupdateErrorDetails,\n\t} = useOnboardingContext();\n\n\tconst requestedEnvironmentName = Form.useWatch(\n\t\t'requestedEnvironmentName',\n\t\tform,\n\t);\n\n\tconst { notifications } = useNotifications();\n\n\tconst [\n\t\tisSubmittingRequestForEnvironment,\n\t\tsetIsSubmittingRequestForEnvironment,\n\t] = useState(false);\n\n\tconst handleRequestedEnvironmentSubmit = async (): Promise<void> => {\n\t\ttry {\n\t\t\tsetIsSubmittingRequestForEnvironment(true);\n\t\t\tconst response = await logEvent('Onboarding V2: Environment Requested', {\n\t\t\t\tmodule: selectedModule?.id,\n\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\tframework: selectedFramework,\n\t\t\t\tenvironment: requestedEnvironmentName,\n\t\t\t});\n\n\t\t\tif (response.statusCode === 200) {\n\t\t\t\tnotifications.success({\n\t\t\t\t\tmessage: 'Environment Request Submitted',\n\t\t\t\t});\n\n\t\t\t\tform.setFieldValue('requestedEnvironmentName', '');\n\n\t\t\t\tsetIsSubmittingRequestForEnvironment(false);\n\t\t\t} else {\n\t\t\t\tnotifications.error({\n\t\t\t\t\tmessage:\n\t\t\t\t\t\tresponse.error ||\n\t\t\t\t\t\tt('something_went_wrong', {\n\t\t\t\t\t\t\tns: 'common',\n\t\t\t\t\t\t}),\n\t\t\t\t});\n\n\t\t\t\tsetIsSubmittingRequestForEnvironment(false);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tnotifications.error({\n\t\t\t\tmessage: t('something_went_wrong', {\n\t\t\t\t\tns: 'common',\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tsetIsSubmittingRequestForEnvironment(false);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Form\n\t\t\tinitialValues={{}}\n\t\t\tform={form}\n\t\t\tname=\"environment-form\"\n\t\t\tlayout=\"vertical\"\n\t\t>\n\t\t\t<Typography.Text className=\"environment-title\">\n\t\t\t\t<span className=\"required-symbol\">*</span> Select Environment\n\t\t\t</Typography.Text>\n\n\t\t\t<div className=\"supported-environments-container\">\n\t\t\t\t{supportedEnvironments.map((environment) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tselectedModule?.id !== useCases.APM.id &&\n\t\t\t\t\t\tenvironment.id === 'kubernetes'\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tselectedModule?.id !== useCases.APM.id &&\n\t\t\t\t\t\tenvironment.id === 'docker'\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\tselectedModule?.id !== useCases.APM.id &&\n\t\t\t\t\t\tenvironment.id === 'windows'\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tclassName={cx(\n\t\t\t\t\t\t\t\t'environment',\n\t\t\t\t\t\t\t\tselectedEnvironment === environment.id ? 'selected' : '',\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\tkey={environment.id}\n\t\t\t\t\t\t\tonClick={(): void => {\n\t\t\t\t\t\t\t\tupdateSelectedEnvironment(environment.id);\n\t\t\t\t\t\t\t\tupdateErrorDetails(null);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Server size={36} />\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"environment-name\">\n\t\t\t\t\t\t\t\t<Typography.Text> {environment.name} </Typography.Text>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\n\t\t\t<div className=\"request-entity-container\">\n\t\t\t\t<Typography.Text>\n\t\t\t\t\tCannot find what you’re looking for? Request an environment\n\t\t\t\t</Typography.Text>\n\n\t\t\t\t<div className=\"form-section\">\n\t\t\t\t\t<Space.Compact style={{ width: '100%' }}>\n\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\tname=\"requestedEnvironmentName\"\n\t\t\t\t\t\t\tstyle={{ width: 300, marginBottom: 0 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Input placeholder=\"Enter environment name...\" />\n\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName=\"periscope-btn primary\"\n\t\t\t\t\t\t\ticon={\n\t\t\t\t\t\t\t\tisSubmittingRequestForEnvironment ? (\n\t\t\t\t\t\t\t\t\t<LoadingOutlined />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<Check size={12} />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttype=\"primary\"\n\t\t\t\t\t\t\tonClick={handleRequestedEnvironmentSubmit}\n\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\tisSubmittingRequestForEnvironment ||\n\t\t\t\t\t\t\t\t!requestedEnvironmentName ||\n\t\t\t\t\t\t\t\trequestedEnvironmentName?.trim().length === 0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Space.Compact>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{errorDetails && (\n\t\t\t\t<div className=\"error-container\">\n\t\t\t\t\t<Typography.Text type=\"danger\"> {errorDetails} </Typography.Text>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</Form>\n\t);\n}\n","import './LogsConnectionStatus.styles.scss';\n\nimport {\n\tCheckCircleTwoTone,\n\tCloseCircleTwoTone,\n\tLoadingOutlined,\n} from '@ant-design/icons';\nimport logEvent from 'api/common/logEvent';\nimport { DEFAULT_ENTITY_VERSION } from 'constants/app';\nimport { PANEL_TYPES } from 'constants/queryBuilder';\nimport Header from 'container/OnboardingContainer/common/Header/Header';\nimport { useOnboardingContext } from 'container/OnboardingContainer/context/OnboardingContext';\nimport { useGetExplorerQueryRange } from 'hooks/queryBuilder/useGetExplorerQueryRange';\nimport { useEffect, useState } from 'react';\nimport { SuccessResponse } from 'types/api';\nimport { ILog } from 'types/api/logs/log';\nimport { MetricRangePayloadProps } from 'types/api/metrics/getQueryRange';\nimport { DataTypes } from 'types/api/queryBuilder/queryAutocompleteResponse';\nimport { Query } from 'types/api/queryBuilder/queryBuilderData';\nimport { EQueryType } from 'types/common/dashboard';\nimport { DataSource } from 'types/common/queryBuilder';\n\nconst enum ApplicationLogsType {\n\tFROM_LOG_FILE = 'from-log-file',\n\tUSING_OTEL_COLLECTOR = 'using-otel-sdk',\n}\n\nexport default function LogsConnectionStatus(): JSX.Element {\n\tconst [loading, setLoading] = useState(true);\n\tconst {\n\t\tselectedDataSource,\n\t\tactiveStep,\n\t\tselectedEnvironment,\n\t} = useOnboardingContext();\n\tconst [isReceivingData, setIsReceivingData] = useState(false);\n\tconst [pollingInterval, setPollingInterval] = useState<number | false>(15000); // initial Polling interval of 15 secs , Set to false after 5 mins\n\tconst [retryCount, setRetryCount] = useState(20); // Retry for 5 mins\n\tconst logType = selectedDataSource?.id;\n\n\tconst requestData: Query = {\n\t\tqueryType: EQueryType.QUERY_BUILDER,\n\t\tbuilder: {\n\t\t\tqueryData: [\n\t\t\t\t{\n\t\t\t\t\tdataSource: DataSource.LOGS,\n\t\t\t\t\tqueryName: 'A',\n\t\t\t\t\taggregateOperator: 'noop',\n\t\t\t\t\taggregateAttribute: {\n\t\t\t\t\t\tid: '------false',\n\t\t\t\t\t\tdataType: DataTypes.EMPTY,\n\t\t\t\t\t\tkey: '',\n\t\t\t\t\t\tisColumn: false,\n\t\t\t\t\t\ttype: '',\n\t\t\t\t\t},\n\t\t\t\t\tfilters: {\n\t\t\t\t\t\titems: [],\n\t\t\t\t\t\top: 'AND',\n\t\t\t\t\t},\n\t\t\t\t\texpression: 'A',\n\t\t\t\t\tdisabled: false,\n\t\t\t\t\thaving: [],\n\t\t\t\t\tstepInterval: 60,\n\t\t\t\t\tlimit: null,\n\t\t\t\t\torderBy: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolumnName: 'timestamp',\n\t\t\t\t\t\t\torder: 'desc',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tgroupBy: [],\n\t\t\t\t\tlegend: '',\n\t\t\t\t\treduceTo: 'sum',\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tpageSize: 100,\n\t\t\t\t\ttimeAggregation: '',\n\t\t\t\t\tspaceAggregation: '',\n\t\t\t\t\tfunctions: [],\n\t\t\t\t},\n\t\t\t],\n\t\t\tqueryFormulas: [],\n\t\t},\n\t\tclickhouse_sql: [],\n\t\tid: '',\n\t\tpromql: [],\n\t};\n\n\tconst { data, isFetching, error, isError } = useGetExplorerQueryRange(\n\t\trequestData,\n\t\tPANEL_TYPES.LIST,\n\t\tDEFAULT_ENTITY_VERSION,\n\t\t{\n\t\t\tkeepPreviousData: true,\n\t\t\trefetchInterval: pollingInterval,\n\t\t\tenabled: true,\n\t\t},\n\t\t{},\n\t\tfalse,\n\t);\n\n\tconst verifyLogsData = (\n\t\tresponse?: SuccessResponse<MetricRangePayloadProps, unknown>,\n\t): void => {\n\t\tif (response || !isError) {\n\t\t\tsetRetryCount(retryCount - 1);\n\n\t\t\tif (retryCount < 0) {\n\t\t\t\tlogEvent('Onboarding V2: Connection Status', {\n\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\tstatus: 'Failed',\n\t\t\t\t});\n\n\t\t\t\tsetLoading(false);\n\t\t\t\tsetPollingInterval(false);\n\t\t\t}\n\t\t}\n\n\t\tconst currentData = data?.payload?.data?.newResult?.data?.result || [];\n\t\tif (currentData.length > 0 && currentData[0].list) {\n\t\t\tconst currentLogs: ILog[] = currentData[0].list.map((item) => ({\n\t\t\t\t...item.data,\n\t\t\t\ttimestamp: item.timestamp,\n\t\t\t}));\n\n\t\t\tfor (let index = 0; index < currentLogs.length; index += 1) {\n\t\t\t\tconst log = currentLogs[index];\n\n\t\t\t\tconst attrStringObj = log?.attributes_string;\n\n\t\t\t\tif (\n\t\t\t\t\t(logType === 'kubernetes' &&\n\t\t\t\t\t\tObject.prototype.hasOwnProperty.call(attrStringObj, 'k8s_pod_name')) ||\n\t\t\t\t\t(logType === 'docker' &&\n\t\t\t\t\t\tObject.prototype.hasOwnProperty.call(attrStringObj, 'container_id'))\n\t\t\t\t) {\n\t\t\t\t\t// Logs Found, stop polling\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t\tsetIsReceivingData(true);\n\t\t\t\t\tsetRetryCount(-1);\n\t\t\t\t\tsetPollingInterval(false);\n\n\t\t\t\t\tlogEvent('Onboarding V2: Connection Status', {\n\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\tstatus: 'Successful',\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tverifyLogsData(data);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [isFetching, data, error, isError]);\n\n\tconst renderDocsReference = (): JSX.Element => {\n\t\tswitch (logType) {\n\t\t\tcase 'kubernetes':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"kubernetes\"\n\t\t\t\t\t\theading=\"Collecting Kubernetes Pod logs\"\n\t\t\t\t\t\timgURL=\"/Logos/kubernetes.svg\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/userguide/collect_kubernetes_pod_logs/#collect-kubernetes-pod-logs-in-signoz-cloud\"\n\t\t\t\t\t\timgClassName=\"supported-logs-type-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\tcase 'docker':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"docker\"\n\t\t\t\t\t\theading=\"Collecting Docker container logs\"\n\t\t\t\t\t\timgURL=\"/Logos/docker.svg\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/userguide/collect_docker_logs/\"\n\t\t\t\t\t\timgClassName=\"supported-logs-type-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\tcase 'syslogs':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"syslog\"\n\t\t\t\t\t\theading=\"Collecting Syslogs\"\n\t\t\t\t\t\timgURL=\"/Logos/syslogs.svg\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/userguide/collecting_syslogs/\"\n\t\t\t\t\t\timgClassName=\"supported-logs-type-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase 'nodejs':\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"nodejs\"\n\t\t\t\t\t\theading=\"Collecting NodeJS winston logs\"\n\t\t\t\t\t\timgURL=\"/Logos/node-js.svg\"\n\t\t\t\t\t\tdocsURL=\"https://signoz.io/docs/userguide/collecting_nodejs_winston_logs/\"\n\t\t\t\t\t\timgClassName=\"supported-logs-type-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\n\t\t\tdefault:\n\t\t\t\treturn (\n\t\t\t\t\t<Header\n\t\t\t\t\t\tentity=\"docker\"\n\t\t\t\t\t\theading={\n\t\t\t\t\t\t\tlogType === ApplicationLogsType.FROM_LOG_FILE\n\t\t\t\t\t\t\t\t? 'Collecting Application Logs from Log file'\n\t\t\t\t\t\t\t\t: 'Collecting Application Logs Using OTEL SDK'\n\t\t\t\t\t\t}\n\t\t\t\t\t\timgURL={`/Logos/${\n\t\t\t\t\t\t\tlogType === ApplicationLogsType.FROM_LOG_FILE\n\t\t\t\t\t\t\t\t? 'software-window'\n\t\t\t\t\t\t\t\t: 'cmd-terminal'\n\t\t\t\t\t\t}.svg`}\n\t\t\t\t\t\tdocsURL={\n\t\t\t\t\t\t\tlogType === ApplicationLogsType.FROM_LOG_FILE\n\t\t\t\t\t\t\t\t? 'https://signoz.io/docs/userguide/collect_logs_from_file/'\n\t\t\t\t\t\t\t\t: 'https://signoz.io/docs/userguide/collecting_application_logs_otel_sdk_java/'\n\t\t\t\t\t\t}\n\t\t\t\t\t\timgClassName=\"supported-logs-type-img\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"connection-status-container\">\n\t\t\t<div className=\"full-docs-link\">{renderDocsReference()}</div>\n\t\t\t<div className=\"status-container\">\n\t\t\t\t<div className=\"service-info\">\n\t\t\t\t\t<div className=\"label\"> Logs Type </div>\n\t\t\t\t\t<div className=\"language text-capitalize\"> {logType} </div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"status-info\">\n\t\t\t\t\t<div className=\"label\"> Status </div>\n\n\t\t\t\t\t<div className=\"status\">\n\t\t\t\t\t\t{(loading || isFetching) && <LoadingOutlined />}\n\t\t\t\t\t\t{!(loading || isFetching) && isReceivingData && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n\t\t\t\t\t\t\t\t<span> Success </span>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!(loading || isFetching) && !isReceivingData && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<CloseCircleTwoTone twoToneColor=\"#e84749\" />\n\t\t\t\t\t\t\t\t<span> Failed </span>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"details-info\">\n\t\t\t\t\t<div className=\"label\"> Details </div>\n\n\t\t\t\t\t<div className=\"details\">\n\t\t\t\t\t\t{(loading || isFetching) && <div> Waiting for Update </div>}\n\t\t\t\t\t\t{!(loading || isFetching) && isReceivingData && (\n\t\t\t\t\t\t\t<div> Received logs successfully. </div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{!(loading || isFetching) && !isReceivingData && (\n\t\t\t\t\t\t\t<div> Could not detect the logs </div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { MarkdownRenderer } from 'components/MarkdownRenderer/MarkdownRenderer';\nimport { QueryParams } from 'constants/query';\nimport { ApmDocFilePaths } from 'container/OnboardingContainer/constants/apmDocFilePaths';\nimport { AwsMonitoringDocFilePaths } from 'container/OnboardingContainer/constants/awsMonitoringDocFilePaths';\nimport { AzureMonitoringDocFilePaths } from 'container/OnboardingContainer/constants/azureMonitoringDocFilePaths';\nimport { InfraMonitoringDocFilePaths } from 'container/OnboardingContainer/constants/infraMonitoringDocFilePaths';\nimport { LogsManagementDocFilePaths } from 'container/OnboardingContainer/constants/logsManagementDocFilePaths';\nimport {\n\tOnboardingMethods,\n\tuseOnboardingContext,\n} from 'container/OnboardingContainer/context/OnboardingContext';\nimport { ModulesMap } from 'container/OnboardingContainer/OnboardingContainer';\nimport useUrlQuery from 'hooks/useUrlQuery';\nimport { useEffect, useState } from 'react';\n\nexport interface IngestionInfoProps {\n\tSIGNOZ_INGESTION_KEY?: string;\n\tREGION?: string;\n}\n\nexport default function MarkdownStep(): JSX.Element {\n\tconst {\n\t\tactiveStep,\n\t\tingestionData,\n\t\tserviceName,\n\t\tselectedDataSource,\n\t\tselectedModule,\n\t\tselectedEnvironment,\n\t\tselectedFramework,\n\t\tselectedMethod,\n\t} = useOnboardingContext();\n\n\tconst [markdownContent, setMarkdownContent] = useState('');\n\n\tconst urlQuery = useUrlQuery();\n\tconst getStartedSource = urlQuery.get(QueryParams.getStartedSource);\n\tconst getStartedSourceService = urlQuery.get(\n\t\tQueryParams.getStartedSourceService,\n\t);\n\n\tconst { step } = activeStep;\n\n\tconst getFilePath = (): any => {\n\t\tlet path = `${selectedModule?.id}_${selectedDataSource?.id}`;\n\n\t\tif (selectedFramework) {\n\t\t\tpath += `_${selectedFramework}`;\n\t\t}\n\n\t\tif (selectedEnvironment) {\n\t\t\tpath += `_${selectedEnvironment}`;\n\t\t}\n\n\t\tif (selectedModule?.id === ModulesMap.APM) {\n\t\t\tif (selectedEnvironment === 'kubernetes') {\n\t\t\t\tpath += `_${OnboardingMethods.RECOMMENDED_STEPS}`;\n\t\t\t} else if (selectedEnvironment !== 'kubernetes' && selectedMethod) {\n\t\t\t\tpath += `_${selectedMethod}`;\n\t\t\t}\n\t\t}\n\n\t\tpath += `_${step?.id}`;\n\n\t\tif (\n\t\t\tgetStartedSource === 'kafka' &&\n\t\t\tpath === 'APM_java_springBoot_kubernetes_recommendedSteps_runApplication' // todo: Sagar - Make this generic logic in followup PRs\n\t\t) {\n\t\t\tpath += `_${getStartedSourceService}`;\n\t\t}\n\t\treturn path;\n\t};\n\n\tuseEffect(() => {\n\t\tconst path = getFilePath();\n\n\t\tlet docFilePaths;\n\n\t\tif (selectedModule?.id === ModulesMap.APM) {\n\t\t\tdocFilePaths = ApmDocFilePaths;\n\t\t} else if (selectedModule?.id === ModulesMap.LogsManagement) {\n\t\t\tdocFilePaths = LogsManagementDocFilePaths;\n\t\t} else if (selectedModule?.id === ModulesMap.InfrastructureMonitoring) {\n\t\t\tdocFilePaths = InfraMonitoringDocFilePaths;\n\t\t} else if (selectedModule?.id === ModulesMap.AwsMonitoring) {\n\t\t\tdocFilePaths = AwsMonitoringDocFilePaths;\n\t\t} else if (selectedModule?.id === ModulesMap.AzureMonitoring) {\n\t\t\tdocFilePaths = AzureMonitoringDocFilePaths;\n\t\t}\n\t\t// @ts-ignore\n\t\tif (docFilePaths && docFilePaths[path]) {\n\t\t\t// @ts-ignore\n\t\t\tsetMarkdownContent(docFilePaths[path]);\n\t\t}\n\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [step]);\n\n\tconst variables = {\n\t\tMYAPP: serviceName || '<service-name>',\n\t\tSIGNOZ_INGESTION_KEY:\n\t\t\tingestionData?.SIGNOZ_INGESTION_KEY || '<SIGNOZ_INGESTION_KEY>',\n\t\tREGION: ingestionData?.REGION || 'region',\n\t\tOTEL_VERSION: '0.88.0',\n\t};\n\n\treturn (\n\t\t<div className=\"markdown-container\">\n\t\t\t<MarkdownRenderer markdownContent={markdownContent} variables={variables} />\n\t\t</div>\n\t);\n}\n","import { Radio, RadioChangeEvent, Space, Typography } from 'antd';\nimport {\n\tOnboardingMethods,\n\tuseOnboardingContext,\n} from 'container/OnboardingContainer/context/OnboardingContext';\nimport { useState } from 'react';\n\nexport default function SelectMethod(): JSX.Element {\n\tconst { selectedMethod, updateSelectedMethod } = useOnboardingContext();\n\tconst [value, setValue] = useState(selectedMethod);\n\n\tconst onChange = (e: RadioChangeEvent): void => {\n\t\tsetValue(e.target.value);\n\t\tupdateSelectedMethod(e.target.value);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Radio.Group onChange={onChange} value={value}>\n\t\t\t\t<Space direction=\"vertical\">\n\t\t\t\t\t<Radio value={OnboardingMethods.QUICK_START}>\n\t\t\t\t\t\t<Typography.Text> Quick Start </Typography.Text> <br />\n\t\t\t\t\t\t<small>Send data to SigNoz directly from OpenTelemetry SDK.</small>\n\t\t\t\t\t</Radio>\n\n\t\t\t\t\t<Radio value={OnboardingMethods.RECOMMENDED_STEPS}>\n\t\t\t\t\t\t<Typography.Text> Use Recommended Steps </Typography.Text> <br />\n\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\tSend data to SigNoz via OpenTelemetry Collector (better control on data\n\t\t\t\t\t\t\tyou send to SigNoz, collect host metrics & logs).\n\t\t\t\t\t\t</small>\n\t\t\t\t\t</Radio>\n\t\t\t\t</Space>\n\t\t\t</Radio.Group>\n\t\t</div>\n\t);\n}\n","import cx from 'classnames';\n\ninterface HeaderProps {\n\tentity: string;\n\theading: string;\n\timgURL: string;\n\tdocsURL: string;\n\timgClassName: string;\n}\n\nexport default function Header({\n\tentity,\n\theading,\n\timgURL,\n\tdocsURL,\n\timgClassName,\n}: HeaderProps): JSX.Element {\n\treturn (\n\t\t<div className={cx('header', entity)}>\n\t\t\t<img className={imgClassName} src={imgURL} alt=\"\" />\n\t\t\t<div className=\"title\">\n\t\t\t\t<h1>{heading}</h1>\n\n\t\t\t\t<div className=\"detailed-docs-link\">\n\t\t\t\t\tView detailed docs\n\t\t\t\t\t<a target=\"_blank\" href={docsURL} rel=\"noreferrer\">\n\t\t\t\t\t\there\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable react/jsx-no-comment-textnodes */\n/* eslint-disable sonarjs/prefer-single-boolean-return */\nimport './ModuleStepsContainer.styles.scss';\n\nimport {\n\tArrowLeftOutlined,\n\tArrowRightOutlined,\n\tLeftCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Space, Steps, Typography } from 'antd';\nimport logEvent from 'api/common/logEvent';\nimport LaunchChatSupport from 'components/LaunchChatSupport/LaunchChatSupport';\nimport { onboardingHelpMessage } from 'components/LaunchChatSupport/util';\nimport ROUTES from 'constants/routes';\nimport { stepsMap } from 'container/OnboardingContainer/constants/stepsConfig';\nimport { DataSourceType } from 'container/OnboardingContainer/Steps/DataSource/DataSource';\nimport { hasFrameworks } from 'container/OnboardingContainer/utils/dataSourceUtils';\nimport history from 'lib/history';\nimport { isEmpty, isNull } from 'lodash-es';\nimport { UserPlus } from 'lucide-react';\nimport { SetStateAction, useState } from 'react';\n\nimport { useOnboardingContext } from '../../context/OnboardingContext';\nimport {\n\tModuleProps,\n\tModulesMap,\n\tSelectedModuleStepProps,\n\tuseCases,\n} from '../../OnboardingContainer';\n\ninterface ModuleStepsContainerProps {\n\tonReselectModule: any;\n\tselectedModule: ModuleProps;\n\tselectedModuleSteps: SelectedModuleStepProps[];\n\tsetIsInviteTeamMemberModalOpen: (value: SetStateAction<boolean>) => void;\n}\n\ninterface MetaDataProps {\n\tname: string;\n\tvalue: string;\n}\n\nconst defaultMetaData = [\n\t{\n\t\tname: 'Service Name',\n\t\tvalue: '',\n\t},\n\t{\n\t\tname: 'Data Source',\n\t\tvalue: '',\n\t},\n\t{\n\t\tname: 'Framework',\n\t\tvalue: '',\n\t},\n\t{\n\t\tname: 'Environment',\n\t\tvalue: '',\n\t},\n];\n\nexport default function ModuleStepsContainer({\n\tonReselectModule,\n\tselectedModule,\n\tselectedModuleSteps,\n\tsetIsInviteTeamMemberModalOpen,\n}: ModuleStepsContainerProps): JSX.Element {\n\tconst {\n\t\tactiveStep,\n\t\tserviceName,\n\t\tselectedDataSource,\n\t\tselectedEnvironment,\n\t\tselectedFramework,\n\t\tselectedMethod,\n\t\tupdateActiveStep,\n\t\tupdateErrorDetails,\n\t\tresetProgress,\n\t} = useOnboardingContext();\n\n\tconst [current, setCurrent] = useState(0);\n\tconst [metaData, setMetaData] = useState<MetaDataProps[]>(defaultMetaData);\n\tconst lastStepIndex = selectedModuleSteps.length - 1;\n\n\t// eslint-disable-next-line sonarjs/cognitive-complexity\n\tconst isValidForm = (): boolean => {\n\t\tconst { id: selectedModuleID } = selectedModule;\n\t\tconst dataSourceStep = stepsMap.dataSource;\n\t\tconst environmentDetailsStep = stepsMap.environmentDetails;\n\n\t\tconst { step } = activeStep;\n\n\t\tconst {\n\t\t\tname: selectedDataSourceName = '',\n\t\t} = selectedDataSource as DataSourceType;\n\n\t\tif (\n\t\t\tstep.id === environmentDetailsStep &&\n\t\t\t(selectedEnvironment === '' || isNull(selectedEnvironment))\n\t\t) {\n\t\t\tupdateErrorDetails('Please select environment');\n\t\t\treturn false;\n\t\t}\n\n\t\tupdateErrorDetails(null);\n\n\t\tif (\n\t\t\tselectedModuleID === useCases.APM.id &&\n\t\t\tselectedModuleSteps[current].id === dataSourceStep\n\t\t) {\n\t\t\tif (serviceName !== '' && selectedDataSourceName) {\n\t\t\t\tconst doesHaveFrameworks = hasFrameworks({\n\t\t\t\t\tmodule: selectedModule,\n\t\t\t\t\tdataSource: selectedDataSource,\n\t\t\t\t});\n\n\t\t\t\tif (\n\t\t\t\t\tdoesHaveFrameworks &&\n\t\t\t\t\t(selectedFramework === null || selectedFramework === '')\n\t\t\t\t) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t(selectedModuleID === useCases.InfrastructureMonitoring.id &&\n\t\t\t\tselectedModuleSteps[current].id === dataSourceStep &&\n\t\t\t\t!selectedDataSourceName) ||\n\t\t\t(selectedModuleID === useCases.LogsManagement.id &&\n\t\t\t\tselectedModuleSteps[current].id === dataSourceStep &&\n\t\t\t\t!selectedDataSourceName)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst redirectToModules = (): void => {\n\t\tlogEvent('Onboarding V2 Complete', {\n\t\t\tmodule: selectedModule.id,\n\t\t\tdataSource: selectedDataSource?.id,\n\t\t\tframework: selectedFramework,\n\t\t\tenvironment: selectedEnvironment,\n\t\t\tselectedMethod,\n\t\t\tserviceName,\n\t\t});\n\n\t\tif (selectedModule.id === ModulesMap.APM) {\n\t\t\thistory.push(ROUTES.APPLICATION);\n\t\t} else if (selectedModule.id === ModulesMap.LogsManagement) {\n\t\t\thistory.push(ROUTES.LOGS_EXPLORER);\n\t\t} else if (selectedModule.id === ModulesMap.InfrastructureMonitoring) {\n\t\t\thistory.push(ROUTES.APPLICATION);\n\t\t} else if (selectedModule.id === ModulesMap.AwsMonitoring) {\n\t\t\thistory.push(ROUTES.APPLICATION);\n\t\t} else {\n\t\t\thistory.push(ROUTES.APPLICATION);\n\t\t}\n\t};\n\n\tconst handleNext = (): void => {\n\t\tconst isValid = isValidForm();\n\n\t\tif (isValid) {\n\t\t\tif (current === lastStepIndex) {\n\t\t\t\tresetProgress();\n\t\t\t\tredirectToModules();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (current >= 0) {\n\t\t\t\tsetCurrent(current + 1);\n\n\t\t\t\t// set the active step info\n\t\t\t\tupdateActiveStep({\n\t\t\t\t\tmodule: selectedModule,\n\t\t\t\t\tstep: selectedModuleSteps[current + 1],\n\t\t\t\t});\n\t\t\t\t// on next step click track events\n\t\t\t\tswitch (selectedModuleSteps[current].id) {\n\t\t\t\t\tcase stepsMap.dataSource:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Data Source Selected', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.environmentDetails:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Environment Selected', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.selectMethod:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Method Selected', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tselectedMethod,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase stepsMap.setupOtelCollector:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Setup Otel Collector', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tselectedMethod,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.instrumentApplication:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Instrument Application', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tselectedMethod,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.cloneRepository:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Clone Repository', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.runApplication:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Run Application', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tselectedMethod,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.addHttpDrain:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Add HTTP Drain', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.startContainer:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Start Container', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.setupLogDrains:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Setup Log Drains', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.configureReceiver:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Configure Receiver', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.configureAws:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Configure AWS', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.sendLogsCloudwatch:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Send Logs Cloudwatch', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.setupDaemonService:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Setup ECS Daemon Service', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.createOtelConfig:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Create ECS OTel Config', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.createDaemonService:\n\t\t\t\t\t\tlogEvent('Onboarding V2: Create ECS Daemon Service', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.ecsSendData:\n\t\t\t\t\t\tlogEvent('Onboarding V2: ECS send traces data', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.createSidecarCollectorContainer:\n\t\t\t\t\t\tlogEvent('Onboarding V2: ECS create Sidecar Container', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.deployTaskDefinition:\n\t\t\t\t\t\tlogEvent('Onboarding V2: ECS deploy task definition', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.ecsSendLogsData:\n\t\t\t\t\t\tlogEvent('Onboarding V2: ECS Fargate send logs data', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase stepsMap.monitorDashboard:\n\t\t\t\t\t\tlogEvent('Onboarding V2: EKS monitor dashboard', {\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// set meta data\n\t\t\tif (current === 0 || current === 1) {\n\t\t\t\tsetMetaData([\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Service Name',\n\t\t\t\t\t\tvalue: serviceName,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Data Source',\n\t\t\t\t\t\tvalue: selectedDataSource?.name || '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Framework',\n\t\t\t\t\t\tvalue: selectedFramework || '',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Environment',\n\t\t\t\t\t\tvalue: selectedEnvironment,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handlePrev = (): void => {\n\t\tif (current > 0) {\n\t\t\tsetCurrent(current - 1);\n\n\t\t\t// set the active step info\n\t\t\tupdateActiveStep({\n\t\t\t\tmodule: selectedModule,\n\t\t\t\tstep: selectedModuleSteps[current - 1],\n\t\t\t});\n\t\t}\n\t};\n\n\tconst handleLogoClick = (): void => {\n\t\thistory.push('/home');\n\t};\n\n\treturn (\n\t\t<div className=\"onboarding-module-steps\">\n\t\t\t<div className=\"steps-container\">\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"steps-container-header\">\n\t\t\t\t\t\t<div className=\"brand-logo\" onClick={handleLogoClick}>\n\t\t\t\t\t\t\t<img src=\"/Logos/signoz-brand-logo.svg\" alt=\"SigNoz\" />\n\n\t\t\t\t\t\t\t<div className=\"brand-logo-name\">SigNoz</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<Space style={{ marginBottom: '24px' }}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tstyle={{ display: 'flex', alignItems: 'center' }}\n\t\t\t\t\t\t\ttype=\"default\"\n\t\t\t\t\t\t\ticon={<LeftCircleOutlined />}\n\t\t\t\t\t\t\tonClick={onReselectModule}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{selectedModule.title}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Space>\n\n\t\t\t\t\t<Steps\n\t\t\t\t\t\tdirection=\"vertical\"\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\tstatus=\"finish\"\n\t\t\t\t\t\tcurrent={current}\n\t\t\t\t\t\titems={selectedModuleSteps}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={(): void => {\n\t\t\t\t\t\tlogEvent('Onboarding V2: Invite Member', {\n\t\t\t\t\t\t\tmodule: selectedModule?.id,\n\t\t\t\t\t\t\tpage: 'sidebar',\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsetIsInviteTeamMemberModalOpen(true);\n\t\t\t\t\t}}\n\t\t\t\t\ticon={<UserPlus size={16} />}\n\t\t\t\t\tclassName=\"invite-user-btn\"\n\t\t\t\t>\n\t\t\t\t\tInvite teammates\n\t\t\t\t</Button>\n\t\t\t</div>\n\n\t\t\t<div className=\"selected-step-content\">\n\t\t\t\t<div className=\"step-data\">\n\t\t\t\t\t{current > 0 && (\n\t\t\t\t\t\t<div className=\"selected-step-pills\">\n\t\t\t\t\t\t\t{metaData.map((data) => {\n\t\t\t\t\t\t\t\tif (isEmpty(data?.value)) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tselectedModuleSteps[current]?.id === 'environment-details' &&\n\t\t\t\t\t\t\t\t\tdata?.name === 'Environment'\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={data.name} className=\"entity\">\n\t\t\t\t\t\t\t\t\t\t<Typography.Text className=\"entity-name\">{data.name}</Typography.Text>\n\t\t\t\t\t\t\t\t\t\t<Typography.Text className=\"entity-value\">\n\t\t\t\t\t\t\t\t\t\t\t{data.value}\n\t\t\t\t\t\t\t\t\t\t</Typography.Text>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<div className=\"step-content\">\n\t\t\t\t\t\t{selectedModuleSteps[current].component}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"step-actions actionButtonsContainer\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={handlePrev}\n\t\t\t\t\t\tdisabled={current === 0}\n\t\t\t\t\t\ticon={<ArrowLeftOutlined />}\n\t\t\t\t\t>\n\t\t\t\t\t\tBack\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={handleNext} type=\"primary\" icon={<ArrowRightOutlined />}>\n\t\t\t\t\t\t{current < lastStepIndex ? 'Continue to next step' : 'Done'}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<LaunchChatSupport\n\t\t\t\t\t\tattributes={{\n\t\t\t\t\t\t\tdataSource: selectedDataSource?.id,\n\t\t\t\t\t\t\tframework: selectedFramework,\n\t\t\t\t\t\t\tenvironment: selectedEnvironment,\n\t\t\t\t\t\t\tmodule: activeStep?.module?.id,\n\t\t\t\t\t\t\tstep: activeStep?.step?.id,\n\t\t\t\t\t\t\tscreen: 'Onboarding',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\teventName=\"Onboarding V2: Facing Issues Sending Data to SigNoz\"\n\t\t\t\t\t\tmessage={onboardingHelpMessage(\n\t\t\t\t\t\t\tselectedDataSource?.name || '',\n\t\t\t\t\t\t\tactiveStep?.module?.id,\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tbuttonText=\"Facing issues sending data to SigNoz?\"\n\t\t\t\t\t\tonHoverText=\"Click here to get help with sending data to SigNoz\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n","/// ///////// APM\n\n/// // Java Start\n\n// SpringBoot-Kubernetes\n// ----------------------------------------------------------------------------\n// //// Windows\n// dotnet-windows-instrument-app\n/// ////// JavaScript Done\n/// ///// Go Start\n// Go-Kubernetes\n/// /// ROR Done\n/// /// .NET Start\n// dotnet Docker\nimport APM_dotnet_docker_quickStart_instrumentApplication from '../Modules/APM/Dotnet/md-docs/Docker/QuickStart/dotnet-docker-quickStart-instrumentApplication.md';\nimport APM_dotnet_docker_quickStart_runApplication from '../Modules/APM/Dotnet/md-docs/Docker/QuickStart/dotnet-docker-quickStart-runApplication.md';\n// dotnet-LinuxAMD64-recommended\nimport APM_dotnet_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Dotnet/md-docs/Docker/Recommended/dotnet-docker-recommended-installOtelCollector.md';\nimport APM_dotnet_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Dotnet/md-docs/Docker/Recommended/dotnet-docker-recommended-instrumentApplication.md';\nimport APM_dotnet_docker_recommendedSteps_runApplication from '../Modules/APM/Dotnet/md-docs/Docker/Recommended/dotnet-docker-recommended-runApplication.md';\n// dotnet-Kubernetes\nimport APM_dotnet_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Dotnet/md-docs/Kubernetes/dotnet-kubernetes-installOtelCollector.md';\nimport APM_dotnet_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Dotnet/md-docs/Kubernetes/dotnet-kubernetes-instrumentApplication.md';\nimport APM_dotnet_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Dotnet/md-docs/Kubernetes/dotnet-kubernetes-runApplication.md';\n// dotnet-LinuxAMD64-quickstart\nimport APM_dotnet_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Dotnet/md-docs/LinuxAMD64/QuickStart/dotnet-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_dotnet_linuxAMD64_quickStart_runApplication from '../Modules/APM/Dotnet/md-docs/LinuxAMD64/QuickStart/dotnet-linuxamd64-quickStart-runApplication.md';\n// dotnet-LinuxAMD64-recommended\nimport APM_dotnet_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Dotnet/md-docs/LinuxAMD64/Recommended/dotnet-linuxamd64-recommended-installOtelCollector.md';\nimport APM_dotnet_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Dotnet/md-docs/LinuxAMD64/Recommended/dotnet-linuxamd64-recommended-instrumentApplication.md';\nimport APM_dotnet_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Dotnet/md-docs/LinuxAMD64/Recommended/dotnet-linuxamd64-recommended-runApplication.md';\n// dotnet-LinuxARM64-quickstart\nimport APM_dotnet_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Dotnet/md-docs/LinuxARM64/QuickStart/dotnet-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_dotnet_linuxARM64_quickStart_runApplication from '../Modules/APM/Dotnet/md-docs/LinuxARM64/QuickStart/dotnet-linuxarm64-quickStart-runApplication.md';\n// dotnet-LinuxARM64-recommended\nimport APM_dotnet_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Dotnet/md-docs/LinuxARM64/Recommended/dotnet-linuxarm64-recommended-installOtelCollector.md';\nimport APM_dotnet_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Dotnet/md-docs/LinuxARM64/Recommended/dotnet-linuxarm64-recommended-instrumentApplication.md';\nimport APM_dotnet_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Dotnet/md-docs/LinuxARM64/Recommended/dotnet-linuxarm64-recommended-runApplication.md';\n// dotnet-MacOsAMD64-quickstart\nimport APM_dotnet_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Dotnet/md-docs/MacOsAMD64/QuickStart/dotnet-macosamd64-quickStart-instrumentApplication.md';\nimport APM_dotnet_macOsAMD64_quickStart_runApplication from '../Modules/APM/Dotnet/md-docs/MacOsAMD64/QuickStart/dotnet-macosamd64-quickStart-runApplication.md';\n// dotnet-MacOsAMD64-recommended\nimport APM_dotnet_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Dotnet/md-docs/MacOsAMD64/Recommended/dotnet-macosamd64-recommended-installOtelCollector.md';\nimport APM_dotnet_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Dotnet/md-docs/MacOsAMD64/Recommended/dotnet-macosamd64-recommended-instrumentApplication.md';\nimport APM_dotnet_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Dotnet/md-docs/MacOsAMD64/Recommended/dotnet-macosamd64-recommended-runApplication.md';\n// dotnet-MacOsARM64-quickstart\nimport APM_dotnet_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Dotnet/md-docs/MacOsARM64/QuickStart/dotnet-macosarm64-quickStart-instrumentApplication.md';\nimport APM_dotnet_macOsARM64_quickStart_runApplication from '../Modules/APM/Dotnet/md-docs/MacOsARM64/QuickStart/dotnet-macosarm64-quickStart-runApplication.md';\n// dotnet-MacOsARM64-recommended\nimport APM_dotnet_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Dotnet/md-docs/MacOsARM64/Recommended/dotnet-macosarm64-recommended-installOtelCollector.md';\nimport APM_dotnet_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Dotnet/md-docs/MacOsARM64/Recommended/dotnet-macosarm64-recommended-instrumentApplication.md';\nimport APM_dotnet_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Dotnet/md-docs/MacOsARM64/Recommended/dotnet-macosarm64-recommended-runApplication.md';\nimport APM_dotnet_windows_quickStart_instrumentApplication from '../Modules/APM/Dotnet/md-docs/Windows/QuickStart/dotnet-windows-quickStart-instrumentApplication.md';\nimport APM_dotnet_windows_quickStart_runApplication from '../Modules/APM/Dotnet/md-docs/Windows/QuickStart/dotnet-windows-quickStart-runApplication.md';\n// dotnet-Windows-recommended\nimport APM_dotnet_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Dotnet/md-docs/Windows/Recommended/dotnet-windows-recommended-installOtelCollector.md';\nimport APM_dotnet_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Dotnet/md-docs/Windows/Recommended/dotnet-windows-recommended-instrumentApplication.md';\nimport APM_dotnet_windows_recommendedSteps_runApplication from '../Modules/APM/Dotnet/md-docs/Windows/Recommended/dotnet-windows-recommended-runApplication.md';\n// Elixir Docker\nimport APM_elixir_docker_quickStart_instrumentApplication from '../Modules/APM/Elixir/md-docs/Docker/QuickStart/elixir-docker-quickStart-instrumentApplication.md';\nimport APM_elixir_docker_quickStart_runApplication from '../Modules/APM/Elixir/md-docs/Docker/QuickStart/elixir-docker-quickStart-runApplication.md';\n// Elixir-LinuxAMD64-recommended\nimport APM_elixir_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Elixir/md-docs/Docker/Recommended/elixir-docker-recommended-installOtelCollector.md';\nimport APM_elixir_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Elixir/md-docs/Docker/Recommended/elixir-docker-recommended-instrumentApplication.md';\nimport APM_elixir_docker_recommendedSteps_runApplication from '../Modules/APM/Elixir/md-docs/Docker/Recommended/elixir-docker-recommended-runApplication.md';\n// Elixir-Kubernetes\nimport APM_elixir_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Elixir/md-docs/Kubernetes/elixir-kubernetes-installOtelCollector.md';\nimport APM_elixir_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Elixir/md-docs/Kubernetes/elixir-kubernetes-instrumentApplication.md';\nimport APM_elixir_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Elixir/md-docs/Kubernetes/elixir-kubernetes-runApplication.md';\n// Elixir-LinuxAMD64-quickstart\nimport APM_elixir_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Elixir/md-docs/LinuxAMD64/QuickStart/elixir-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_elixir_linuxAMD64_quickStart_runApplication from '../Modules/APM/Elixir/md-docs/LinuxAMD64/QuickStart/elixir-linuxamd64-quickStart-runApplication.md';\n// Elixir-LinuxAMD64-recommended\nimport APM_elixir_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Elixir/md-docs/LinuxAMD64/Recommended/elixir-linuxamd64-recommended-installOtelCollector.md';\nimport APM_elixir_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Elixir/md-docs/LinuxAMD64/Recommended/elixir-linuxamd64-recommended-instrumentApplication.md';\nimport APM_elixir_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Elixir/md-docs/LinuxAMD64/Recommended/elixir-linuxamd64-recommended-runApplication.md';\n// Elixir-LinuxARM64-quickstart\nimport APM_elixir_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Elixir/md-docs/LinuxARM64/QuickStart/elixir-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_elixir_linuxARM64_quickStart_runApplication from '../Modules/APM/Elixir/md-docs/LinuxARM64/QuickStart/elixir-linuxarm64-quickStart-runApplication.md';\n// Elixir-LinuxARM64-recommended\nimport APM_elixir_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Elixir/md-docs/LinuxARM64/Recommended/elixir-linuxarm64-recommended-installOtelCollector.md';\nimport APM_elixir_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Elixir/md-docs/LinuxARM64/Recommended/elixir-linuxarm64-recommended-instrumentApplication.md';\nimport APM_elixir_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Elixir/md-docs/LinuxARM64/Recommended/elixir-linuxarm64-recommended-runApplication.md';\n// Elixir-MacOsAMD64-quickstart\nimport APM_elixir_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Elixir/md-docs/MacOsAMD64/QuickStart/elixir-macosamd64-quickStart-instrumentApplication.md';\nimport APM_elixir_macOsAMD64_quickStart_runApplication from '../Modules/APM/Elixir/md-docs/MacOsAMD64/QuickStart/elixir-macosamd64-quickStart-runApplication.md';\n// Elixir-MacOsAMD64-recommended\nimport APM_elixir_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Elixir/md-docs/MacOsAMD64/Recommended/elixir-macosamd64-recommended-installOtelCollector.md';\nimport APM_elixir_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Elixir/md-docs/MacOsAMD64/Recommended/elixir-macosamd64-recommended-instrumentApplication.md';\nimport APM_elixir_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Elixir/md-docs/MacOsAMD64/Recommended/elixir-macosamd64-recommended-runApplication.md';\n// Elixir-MacOsARM64-quickstart\nimport APM_elixir_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Elixir/md-docs/MacOsARM64/QuickStart/elixir-macosarm64-quickStart-instrumentApplication.md';\nimport APM_elixir_macOsARM64_quickStart_runApplication from '../Modules/APM/Elixir/md-docs/MacOsARM64/QuickStart/elixir-macosarm64-quickStart-runApplication.md';\n// Elixir-MacOsARM64-recommended\nimport APM_elixir_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Elixir/md-docs/MacOsARM64/Recommended/elixir-macosarm64-recommended-installOtelCollector.md';\nimport APM_elixir_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Elixir/md-docs/MacOsARM64/Recommended/elixir-macosarm64-recommended-instrumentApplication.md';\nimport APM_elixir_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Elixir/md-docs/MacOsARM64/Recommended/elixir-macosarm64-recommended-runApplication.md';\n// Elixir Docker\nimport APM_elixir_windows_quickStart_instrumentApplication from '../Modules/APM/Elixir/md-docs/Windows/QuickStart/elixir-windows-quickStart-instrumentApplication.md';\nimport APM_elixir_windows_quickStart_runApplication from '../Modules/APM/Elixir/md-docs/Windows/QuickStart/elixir-windows-quickStart-runApplication.md';\n// Elixir-LinuxAMD64-recommended\nimport APM_elixir_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Elixir/md-docs/Windows/Recommended/elixir-windows-recommended-installOtelCollector.md';\nimport APM_elixir_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Elixir/md-docs/Windows/Recommended/elixir-windows-recommended-instrumentApplication.md';\nimport APM_elixir_windows_recommendedSteps_runApplication from '../Modules/APM/Elixir/md-docs/Windows/Recommended/elixir-windows-recommended-runApplication.md';\n// Golang Docker\nimport APM_go_docker_quickStart_instrumentApplication from '../Modules/APM/GoLang/md-docs/Docker/QuickStart/golang-docker-quickStart-instrumentApplication.md';\nimport APM_go_docker_quickStart_runApplication from '../Modules/APM/GoLang/md-docs/Docker/QuickStart/golang-docker-quickStart-runApplication.md';\n// Go-LinuxAMD64-recommended\nimport APM_go_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/GoLang/md-docs/Docker/Recommended/golang-docker-recommended-installOtelCollector.md';\nimport APM_go_docker_recommendedSteps_instrumentApplication from '../Modules/APM/GoLang/md-docs/Docker/Recommended/golang-docker-recommended-instrumentApplication.md';\nimport APM_go_docker_recommendedSteps_runApplication from '../Modules/APM/GoLang/md-docs/Docker/Recommended/golang-docker-recommended-runApplication.md';\n// Golang Kubernetes\nimport APM_go_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/GoLang/md-docs/Kubernetes/golang-kubernetes-installOtelCollector.md';\nimport APM_go_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/GoLang/md-docs/Kubernetes/golang-kubernetes-instrumentApplication.md';\nimport APM_go_kubernetes_recommendedSteps_runApplication from '../Modules/APM/GoLang/md-docs/Kubernetes/golang-kubernetes-runApplication.md';\n// Go-LinuxAMD64-quickstart\nimport APM_go_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/GoLang/md-docs/LinuxAMD64/QuickStart/golang-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_go_linuxAMD64_quickStart_runApplication from '../Modules/APM/GoLang/md-docs/LinuxAMD64/QuickStart/golang-linuxamd64-quickStart-runApplication.md';\n// Go-LinuxAMD64-recommended\nimport APM_go_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/GoLang/md-docs/LinuxAMD64/Recommended/golang-linuxamd64-recommended-installOtelCollector.md';\nimport APM_go_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/GoLang/md-docs/LinuxAMD64/Recommended/golang-linuxamd64-recommended-instrumentApplication.md';\nimport APM_go_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/GoLang/md-docs/LinuxAMD64/Recommended/golang-linuxamd64-recommended-runApplication.md';\n// Go-LinuxARM64-quickstart\nimport APM_go_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/GoLang/md-docs/LinuxARM64/QuickStart/golang-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_go_linuxARM64_quickStart_runApplication from '../Modules/APM/GoLang/md-docs/LinuxARM64/QuickStart/golang-linuxarm64-quickStart-runApplication.md';\n// Go-LinuxARM64-recommended\nimport APM_go_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/GoLang/md-docs/LinuxARM64/Recommended/golang-linuxarm64-recommended-installOtelCollector.md';\nimport APM_go_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/GoLang/md-docs/LinuxARM64/Recommended/golang-linuxarm64-recommended-instrumentApplication.md';\nimport APM_go_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/GoLang/md-docs/LinuxARM64/Recommended/golang-linuxarm64-recommended-runApplication.md';\n// Go-MacOsAMD64-quickstart\nimport APM_go_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/GoLang/md-docs/MacOsAMD64/QuickStart/golang-macosamd64-quickStart-instrumentApplication.md';\nimport APM_go_macOsAMD64_quickStart_runApplication from '../Modules/APM/GoLang/md-docs/MacOsAMD64/QuickStart/golang-macosamd64-quickStart-runApplication.md';\n// Go-MacOsAMD64-recommended\nimport APM_go_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/GoLang/md-docs/MacOsAMD64/Recommended/golang-macosamd64-recommended-installOtelCollector.md';\nimport APM_go_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/GoLang/md-docs/MacOsAMD64/Recommended/golang-macosamd64-recommended-instrumentApplication.md';\nimport APM_go_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/GoLang/md-docs/MacOsAMD64/Recommended/golang-macosamd64-recommended-runApplication.md';\n// Go-MacOsARM64-quickstart\nimport APM_go_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/GoLang/md-docs/MacOsARM64/QuickStart/golang-macosarm64-quickStart-instrumentApplication.md';\nimport APM_go_macOsARM64_quickStart_runApplication from '../Modules/APM/GoLang/md-docs/MacOsARM64/QuickStart/golang-macosarm64-quickStart-runApplication.md';\n// Go-MacOsARM64-recommended\nimport APM_go_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/GoLang/md-docs/MacOsARM64/Recommended/golang-macosarm64-recommended-installOtelCollector.md';\nimport APM_go_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/GoLang/md-docs/MacOsARM64/Recommended/golang-macosarm64-recommended-instrumentApplication.md';\nimport APM_go_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/GoLang/md-docs/MacOsARM64/Recommended/golang-macosarm64-recommended-runApplication.md';\n// Golang Docker\nimport APM_go_windows_quickStart_instrumentApplication from '../Modules/APM/GoLang/md-docs/Windows/QuickStart/golang-windows-quickStart-instrumentApplication.md';\nimport APM_go_windows_quickStart_runApplication from '../Modules/APM/GoLang/md-docs/Windows/QuickStart/golang-windows-quickStart-runApplication.md';\n// Go-LinuxAMD64-recommended\nimport APM_go_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/GoLang/md-docs/Windows/Recommended/golang-windows-recommended-installOtelCollector.md';\nimport APM_go_windows_recommendedSteps_instrumentApplication from '../Modules/APM/GoLang/md-docs/Windows/Recommended/golang-windows-recommended-instrumentApplication.md';\nimport APM_go_windows_recommendedSteps_runApplication from '../Modules/APM/GoLang/md-docs/Windows/Recommended/golang-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// JBoss DOcker\nimport APM_java_jboss_docker_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/Docker/QuickStart/jboss-docker-quickStart-instrumentApplication.md';\nimport APM_java_jboss_docker_quickStart_runApplication from '../Modules/APM/Java/md-docs/Jboss/Docker/QuickStart/jboss-docker-quickStart-runApplication.md';\n// Jboss-LinuxAMD64-recommended\nimport APM_java_jboss_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Jboss/Docker/Recommended/jboss-docker-recommended-installOtelCollector.md';\nimport APM_java_jboss_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/Docker/Recommended/jboss-docker-recommended-instrumentApplication.md';\nimport APM_java_jboss_docker_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Jboss/Docker/Recommended/jboss-docker-recommended-runApplication.md';\n// Jboss-Kubernetes\nimport APM_java_jboss_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Jboss/Kubernetes/jboss-kubernetes-installOtelCollector.md';\nimport APM_java_jboss_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/Kubernetes/jboss-kubernetes-instrumentApplication.md';\nimport APM_java_jboss_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Jboss/Kubernetes/jboss-kubernetes-runApplication.md';\n// Jboss-LinuxAMD64-quickstart\nimport APM_java_jboss_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/LinuxAMD64/QuickStart/jboss-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_java_jboss_linuxAMD64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Jboss/LinuxAMD64/QuickStart/jboss-linuxamd64-quickStart-runApplication.md';\n// Jboss-LinuxAMD64-recommended\nimport APM_java_jboss_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Jboss/LinuxAMD64/Recommended/jboss-linuxamd64-recommended-installOtelCollector.md';\nimport APM_java_jboss_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/LinuxAMD64/Recommended/jboss-linuxamd64-recommended-instrumentApplication.md';\nimport APM_java_jboss_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Jboss/LinuxAMD64/Recommended/jboss-linuxamd64-recommended-runApplication.md';\n// Jboss-LinuxARM64-quickstart\nimport APM_java_jboss_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/LinuxARM64/QuickStart/jboss-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_java_jboss_linuxARM64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Jboss/LinuxARM64/QuickStart/jboss-linuxarm64-quickStart-runApplication.md';\n// Jboss-LinuxARM64-recommended\nimport APM_java_jboss_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Jboss/LinuxARM64/Recommended/jboss-linuxarm64-recommended-installOtelCollector.md';\nimport APM_java_jboss_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/LinuxARM64/Recommended/jboss-linuxarm64-recommended-instrumentApplication.md';\nimport APM_java_jboss_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Jboss/LinuxARM64/Recommended/jboss-linuxarm64-recommended-runApplication.md';\n// Jboss-MacOsAMD64-quickstart\nimport APM_java_jboss_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/MacOsAMD64/QuickStart/jboss-macosamd64-quickStart-instrumentApplication.md';\nimport APM_java_jboss_macOsAMD64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Jboss/MacOsAMD64/QuickStart/jboss-macosamd64-quickStart-runApplication.md';\n// Jboss-MacOsAMD64-recommended\nimport APM_java_jboss_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Jboss/MacOsAMD64/Recommended/jboss-macosamd64-recommended-installOtelCollector.md';\nimport APM_java_jboss_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/MacOsAMD64/Recommended/jboss-macosamd64-recommended-instrumentApplication.md';\nimport APM_java_jboss_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Jboss/MacOsAMD64/Recommended/jboss-macosamd64-recommended-runApplication.md';\n// Jboss-MacOsARM64-quickstart\nimport APM_java_jboss_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/MacOsARM64/QuickStart/jboss-macosarm64-quickStart-instrumentApplication.md';\nimport APM_java_jboss_macOsARM64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Jboss/MacOsARM64/QuickStart/jboss-macosarm64-quickStart-runApplication.md';\n// Jboss-MacOsARM64-recommended\nimport APM_java_jboss_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Jboss/MacOsARM64/Recommended/jboss-macosarm64-recommended-installOtelCollector.md';\nimport APM_java_jboss_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/MacOsARM64/Recommended/jboss-macosarm64-recommended-instrumentApplication.md';\nimport APM_java_jboss_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Jboss/MacOsARM64/Recommended/jboss-macosarm64-recommended-runApplication.md';\n// JBoss DOcker\nimport APM_java_jboss_windows_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/Windows/QuickStart/jboss-windows-quickStart-instrumentApplication.md';\nimport APM_java_jboss_windows_quickStart_runApplication from '../Modules/APM/Java/md-docs/Jboss/Windows/QuickStart/jboss-windows-quickStart-runApplication.md';\n// Jboss-LinuxAMD64-recommended\nimport APM_java_jboss_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Jboss/Windows/Recommended/jboss-windows-recommended-installOtelCollector.md';\nimport APM_java_jboss_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Jboss/Windows/Recommended/jboss-windows-recommended-instrumentApplication.md';\nimport APM_java_jboss_windows_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Jboss/Windows/Recommended/jboss-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// Other Docker\nimport APM_java_other_docker_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Others/Docker/QuickStart/others-docker-quickStart-instrumentApplication.md';\nimport APM_java_other_docker_quickStart_runApplication from '../Modules/APM/Java/md-docs/Others/Docker/QuickStart/others-docker-quickStart-runApplication.md';\n// Other-LinuxAMD64-recommended\nimport APM_java_other_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Others/Docker/Recommended/others-docker-recommended-installOtelCollector.md';\nimport APM_java_other_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Others/Docker/Recommended/others-docker-recommended-instrumentApplication.md';\nimport APM_java_other_docker_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Others/Docker/Recommended/others-docker-recommended-runApplication.md';\n// Other-Kubernetes\nimport APM_java_other_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Others/Kubernetes/others-kubernetes-installOtelCollector.md';\nimport APM_java_other_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Others/Kubernetes/others-kubernetes-instrumentApplication.md';\nimport APM_java_other_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Others/Kubernetes/others-kubernetes-runApplication.md';\n// Other-LinuxAMD64-quickstart\nimport APM_java_other_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_java_other_linuxAMD64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-runApplication.md';\n// Other-LinuxAMD64-recommended\nimport APM_java_other_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-installOtelCollector.md';\nimport APM_java_other_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-instrumentApplication.md';\nimport APM_java_other_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-runApplication.md';\n// Other-LinuxARM64-quickstart\nimport APM_java_other_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_java_other_linuxARM64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-runApplication.md';\n// Other-LinuxARM64-recommended\nimport APM_java_other_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-installOtelCollector.md';\nimport APM_java_other_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-instrumentApplication.md';\nimport APM_java_other_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-runApplication.md';\n// Other-MacOsAMD64-quickstart\nimport APM_java_other_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-instrumentApplication.md';\nimport APM_java_other_macOsAMD64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-runApplication.md';\n// Other-MacOsAMD64-recommended\nimport APM_java_other_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-installOtelCollector.md';\nimport APM_java_other_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-instrumentApplication.md';\nimport APM_java_other_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-runApplication.md';\n// Other-MacOsARM64-quickstart\nimport APM_java_other_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-instrumentApplication.md';\nimport APM_java_other_macOsARM64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-runApplication.md';\n// Other-MacOsARM64-recommended\nimport APM_java_other_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-installOtelCollector.md';\nimport APM_java_other_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-instrumentApplication.md';\nimport APM_java_other_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-runApplication.md';\nimport APM_java_other_windows_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Others/Windows/QuickStart/others-windows-quickStart-instrumentApplication.md';\nimport APM_java_other_windows_quickStart_runApplication from '../Modules/APM/Java/md-docs/Others/Windows/QuickStart/others-windows-quickStart-runApplication.md';\n// Other-LinuxAMD64-recommended\nimport APM_java_other_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Others/Windows/Recommended/others-windows-recommended-installOtelCollector.md';\nimport APM_java_other_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Others/Windows/Recommended/others-windows-recommended-instrumentApplication.md';\nimport APM_java_other_windows_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Others/Windows/Recommended/others-windows-recommended-runApplication.md';\n// SpringBoot Docker\nimport APM_java_springBoot_docker_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/Docker/QuickStart/springBoot-docker-quickStart-instrumentApplication.md';\nimport APM_java_springBoot_docker_quickStart_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/Docker/QuickStart/springBoot-docker-quickStart-runApplication.md';\n// SpringBoot-LinuxAMD64-recommended\nimport APM_java_springBoot_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/SpringBoot/Docker/Recommended/springBoot-docker-recommended-installOtelCollector.md';\nimport APM_java_springBoot_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/Docker/Recommended/springBoot-docker-recommended-instrumentApplication.md';\nimport APM_java_springBoot_docker_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/Docker/Recommended/springBoot-docker-recommended-runApplication.md';\n// SpringBoot-Kubernetes\nimport APM_java_springBoot_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-installOtelCollector.md';\nimport APM_java_springBoot_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-instrumentApplication.md';\nimport APM_java_springBoot_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-runApplication.md';\nimport APM_java_springBoot_kubernetes_recommendedSteps_runApplication_consumers from '../Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-runApplication-consumers.md';\nimport APM_java_springBoot_kubernetes_recommendedSteps_runApplication_producers from '../Modules/APM/Java/md-docs/SpringBoot/Kubernetes/springBoot-kubernetes-runApplication-producers.md';\n// SpringBoot-LinuxAMD64-quickstart\nimport APM_java_springBoot_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/QuickStart/springBoot-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_java_springBoot_linuxAMD64_quickStart_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/QuickStart/springBoot-linuxamd64-quickStart-runApplication.md';\n// SpringBoot-LinuxAMD64-recommended\nimport APM_java_springBoot_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/Recommended/springBoot-linuxamd64-recommended-installOtelCollector.md';\nimport APM_java_springBoot_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/Recommended/springBoot-linuxamd64-recommended-instrumentApplication.md';\nimport APM_java_springBoot_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/LinuxAMD64/Recommended/springBoot-linuxamd64-recommended-runApplication.md';\n// SpringBoot-LinuxARM64-quickstart\nimport APM_java_springBoot_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/QuickStart/springBoot-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_java_springBoot_linuxARM64_quickStart_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/QuickStart/springBoot-linuxarm64-quickStart-runApplication.md';\n// SpringBoot-LinuxARM64-recommended\nimport APM_java_springBoot_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/Recommended/springBoot-linuxarm64-recommended-installOtelCollector.md';\nimport APM_java_springBoot_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/Recommended/springBoot-linuxarm64-recommended-instrumentApplication.md';\nimport APM_java_springBoot_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/LinuxARM64/Recommended/springBoot-linuxarm64-recommended-runApplication.md';\n// SpringBoot-MacOsAMD64-quickstart\nimport APM_java_springBoot_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/QuickStart/springBoot-macosamd64-quickStart-instrumentApplication.md';\nimport APM_java_springBoot_macOsAMD64_quickStart_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/QuickStart/springBoot-macosamd64-quickStart-runApplication.md';\n// SpringBoot-MacOsAMD64-recommended\nimport APM_java_springBoot_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/Recommended/springBoot-macosamd64-recommended-installOtelCollector.md';\nimport APM_java_springBoot_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/Recommended/springBoot-macosamd64-recommended-instrumentApplication.md';\nimport APM_java_springBoot_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/MacOsAMD64/Recommended/springBoot-macosamd64-recommended-runApplication.md';\n// SpringBoot-MacOsARM64-quickstart\nimport APM_java_springBoot_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/QuickStart/springBoot-macosarm64-quickStart-instrumentApplication.md';\nimport APM_java_springBoot_macOsARM64_quickStart_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/QuickStart/springBoot-macosarm64-quickStart-runApplication.md';\n// SpringBoot-MacOsARM64-recommended\nimport APM_java_springBoot_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/Recommended/springBoot-macosarm64-recommended-installOtelCollector.md';\nimport APM_java_springBoot_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/Recommended/springBoot-macosarm64-recommended-instrumentApplication.md';\nimport APM_java_springBoot_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/MacOsARM64/Recommended/springBoot-macosarm64-recommended-runApplication.md';\n// SpringBoot Docker\nimport APM_java_springBoot_windows_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/Windows/QuickStart/springBoot-windows-quickStart-instrumentApplication.md';\nimport APM_java_springBoot_windows_quickStart_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/Windows/QuickStart/springBoot-windows-quickStart-runApplication.md';\n// SpringBoot-LinuxAMD64-recommended\nimport APM_java_springBoot_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/SpringBoot/Windows/Recommended/springBoot-windows-recommended-installOtelCollector.md';\nimport APM_java_springBoot_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/SpringBoot/Windows/Recommended/springBoot-windows-recommended-instrumentApplication.md';\nimport APM_java_springBoot_windows_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/SpringBoot/Windows/Recommended/springBoot-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// Tomcat Docker\nimport APM_java_tomcat_docker_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/Docker/QuickStart/tomcat-docker-quickStart-instrumentApplication.md';\nimport APM_java_tomcat_docker_quickStart_runApplication from '../Modules/APM/Java/md-docs/Tomcat/Docker/QuickStart/tomcat-docker-quickStart-runApplication.md';\n// Tomcat-LinuxAMD64-recommended\nimport APM_java_tomcat_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Tomcat/Docker/Recommended/tomcat-docker-recommended-installOtelCollector.md';\nimport APM_java_tomcat_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/Docker/Recommended/tomcat-docker-recommended-instrumentApplication.md';\nimport APM_java_tomcat_docker_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Tomcat/Docker/Recommended/tomcat-docker-recommended-runApplication.md';\n// Tomcat-Kubernetes\nimport APM_java_tomcat_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Tomcat/Kubernetes/tomcat-kubernetes-installOtelCollector.md';\nimport APM_java_tomcat_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/Kubernetes/tomcat-kubernetes-instrumentApplication.md';\nimport APM_java_tomcat_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Tomcat/Kubernetes/tomcat-kubernetes-runApplication.md';\n// Tomcat-LinuxAMD64-quickstart\nimport APM_java_tomcat_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/QuickStart/tomcat-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_java_tomcat_linuxAMD64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/QuickStart/tomcat-linuxamd64-quickStart-runApplication.md';\n// Tomcat-LinuxAMD64-recommended\nimport APM_java_tomcat_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/Recommended/tomcat-linuxamd64-recommended-installOtelCollector.md';\nimport APM_java_tomcat_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/Recommended/tomcat-linuxamd64-recommended-instrumentApplication.md';\nimport APM_java_tomcat_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Tomcat/LinuxAMD64/Recommended/tomcat-linuxamd64-recommended-runApplication.md';\n// Tomcat-LinuxARM64-quickstart\nimport APM_java_tomcat_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/LinuxARM64/QuickStart/tomcat-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_java_tomcat_linuxARM64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Tomcat/LinuxARM64/QuickStart/tomcat-linuxarm64-quickStart-runApplication.md';\n// Tomcat-LinuxARM64-recommended\nimport APM_java_tomcat_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Tomcat/LinuxARM64/Recommended/tomcat-linuxarm64-recommended-installOtelCollector.md';\nimport APM_java_tomcat_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/LinuxARM64/Recommended/tomcat-linuxarm64-recommended-instrumentApplication.md';\nimport APM_java_tomcat_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Tomcat/LinuxARM64/Recommended/tomcat-linuxarm64-recommended-runApplication.md';\n// Tomcat-MacOsAMD64-quickstart\nimport APM_java_tomcat_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/QuickStart/tomcat-macosamd64-quickStart-instrumentApplication.md';\nimport APM_java_tomcat_macOsAMD64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/QuickStart/tomcat-macosamd64-quickStart-runApplication.md';\n// Tomcat-MacOsAMD64-recommended\nimport APM_java_tomcat_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/Recommended/tomcat-macosamd64-recommended-installOtelCollector.md';\nimport APM_java_tomcat_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/Recommended/tomcat-macosamd64-recommended-instrumentApplication.md';\nimport APM_java_tomcat_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Tomcat/MacOsAMD64/Recommended/tomcat-macosamd64-recommended-runApplication.md';\n// Tomcat-MacOsARM64-quickstart\nimport APM_java_tomcat_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/MacOsARM64/QuickStart/tomcat-macosarm64-quickStart-instrumentApplication.md';\nimport APM_java_tomcat_macOsARM64_quickStart_runApplication from '../Modules/APM/Java/md-docs/Tomcat/MacOsARM64/QuickStart/tomcat-macosarm64-quickStart-runApplication.md';\n// Tomcat-MacOsARM64-recommended\nimport APM_java_tomcat_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Tomcat/MacOsARM64/Recommended/tomcat-macosarm64-recommended-installOtelCollector.md';\nimport APM_java_tomcat_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/MacOsARM64/Recommended/tomcat-macosarm64-recommended-instrumentApplication.md';\nimport APM_java_tomcat_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Tomcat/MacOsARM64/Recommended/tomcat-macosarm64-recommended-runApplication.md';\n// Tomcat Docker\nimport APM_java_tomcat_windows_quickStart_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/Windows/QuickStart/tomcat-windows-quickStart-instrumentApplication.md';\nimport APM_java_tomcat_windows_quickStart_runApplication from '../Modules/APM/Java/md-docs/Tomcat/Windows/QuickStart/tomcat-windows-quickStart-runApplication.md';\n// Tomcat-LinuxAMD64-recommended\nimport APM_java_tomcat_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Java/md-docs/Tomcat/Windows/Recommended/tomcat-windows-recommended-installOtelCollector.md';\nimport APM_java_tomcat_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Java/md-docs/Tomcat/Windows/Recommended/tomcat-windows-recommended-instrumentApplication.md';\nimport APM_java_tomcat_windows_recommendedSteps_runApplication from '../Modules/APM/Java/md-docs/Tomcat/Windows/Recommended/tomcat-windows-recommended-runApplication.md';\n// Angular\nimport APM_javascript_angular_docker_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/Docker/QuickStart/angular-docker-quickStart-instrumentApplication.md';\nimport APM_javascript_angular_docker_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Angular/Docker/QuickStart/angular-docker-quickStart-runApplication.md';\n// Angular-Docker-recommended\nimport APM_javascript_angular_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Angular/Docker/Recommended/angular-docker-recommended-installOtelCollector.md';\nimport APM_javascript_angular_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/Docker/Recommended/angular-docker-recommended-instrumentApplication.md';\nimport APM_javascript_angular_docker_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Angular/Docker/Recommended/angular-docker-recommended-runApplication.md';\n// Angular-Kubernetes\nimport APM_javascript_angular_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Angular/Kubernetes/angular-kubernetes-installOtelCollector.md';\nimport APM_javascript_angular_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/Kubernetes/angular-kubernetes-instrumentApplication.md';\nimport APM_javascript_angular_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Angular/Kubernetes/angular-kubernetes-runApplication.md';\n// Angular-LinuxAMD64-quickstart\nimport APM_javascript_angular_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/QuickStart/angular-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_angular_linuxAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/QuickStart/angular-linuxamd64-quickStart-runApplication.md';\n// Angular-LinuxAMD64-recommended\nimport APM_javascript_angular_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/Recommended/angular-linuxamd64-recommended-installOtelCollector.md';\nimport APM_javascript_angular_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/Recommended/angular-linuxamd64-recommended-instrumentApplication.md';\nimport APM_javascript_angular_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Angular/LinuxAMD64/Recommended/angular-linuxamd64-recommended-runApplication.md';\n// Angular-LinuxARM64-quickstart\nimport APM_javascript_angular_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/LinuxARM64/QuickStart/angular-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_angular_linuxARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Angular/LinuxARM64/QuickStart/angular-linuxarm64-quickStart-runApplication.md';\n// Angular-LinuxARM64-recommended\nimport APM_javascript_angular_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Angular/LinuxARM64/Recommended/angular-linuxarm64-recommended-installOtelCollector.md';\nimport APM_javascript_angular_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/LinuxARM64/Recommended/angular-linuxarm64-recommended-instrumentApplication.md';\nimport APM_javascript_angular_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Angular/LinuxARM64/Recommended/angular-linuxarm64-recommended-runApplication.md';\n// Angular-MacOsAMD64-quickstart\nimport APM_javascript_angular_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/QuickStart/angular-macosamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_angular_macOsAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/QuickStart/angular-macosamd64-quickStart-runApplication.md';\n// Angular-MacOsAMD64-recommended\nimport APM_javascript_angular_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/Recommended/angular-macosamd64-recommended-installOtelCollector.md';\nimport APM_javascript_angular_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/Recommended/angular-macosamd64-recommended-instrumentApplication.md';\nimport APM_javascript_angular_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Angular/MacOsAMD64/Recommended/angular-macosamd64-recommended-runApplication.md';\n// Angular-MacOsARM64-quickstart\nimport APM_javascript_angular_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/MacOsARM64/QuickStart/angular-macosarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_angular_macOsARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Angular/MacOsARM64/QuickStart/angular-macosarm64-quickStart-runApplication.md';\n// Angular-MacOsARM64-recommended\nimport APM_javascript_angular_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Angular/MacOsARM64/Recommended/angular-macosarm64-recommended-installOtelCollector.md';\nimport APM_javascript_angular_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/MacOsARM64/Recommended/angular-macosarm64-recommended-instrumentApplication.md';\nimport APM_javascript_angular_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Angular/MacOsARM64/Recommended/angular-macosarm64-recommended-runApplication.md';\nimport APM_javascript_angular_windows_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/Windows/QuickStart/angular-windows-quickStart-instrumentApplication.md';\nimport APM_javascript_angular_windows_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Angular/Windows/QuickStart/angular-windows-quickStart-runApplication.md';\n// Angular-Docker-recommended\nimport APM_javascript_angular_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Angular/Windows/Recommended/angular-windows-recommended-installOtelCollector.md';\nimport APM_javascript_angular_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Angular/Windows/Recommended/angular-windows-recommended-instrumentApplication.md';\nimport APM_javascript_angular_windows_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Angular/Windows/Recommended/angular-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n/// ////// Python Done\n/// ///// JavaScript Start\n// Express\n// Express Docker\nimport APM_javascript_express_docker_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/Docker/QuickStart/express-docker-quickStart-instrumentApplication.md';\nimport APM_javascript_express_docker_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Express/Docker/QuickStart/express-docker-quickStart-runApplication.md';\n// Express-LinuxAMD64-recommended\nimport APM_javascript_express_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Express/Docker/Recommended/express-docker-recommended-installOtelCollector.md';\nimport APM_javascript_express_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/Docker/Recommended/express-docker-recommended-instrumentApplication.md';\nimport APM_javascript_express_docker_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Express/Docker/Recommended/express-docker-recommended-runApplication.md';\n// Express-Kubernetes\nimport APM_javascript_express_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Express/Kubernetes/express-kubernetes-installOtelCollector.md';\nimport APM_javascript_express_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/Kubernetes/express-kubernetes-instrumentApplication.md';\nimport APM_javascript_express_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Express/Kubernetes/express-kubernetes-runApplication.md';\n// Express-LinuxAMD64-quickstart\nimport APM_javascript_express_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/LinuxAMD64/QuickStart/express-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_express_linuxAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Express/LinuxAMD64/QuickStart/express-linuxamd64-quickStart-runApplication.md';\n// Express-LinuxAMD64-recommended\nimport APM_javascript_express_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Express/LinuxAMD64/Recommended/express-linuxamd64-recommended-installOtelCollector.md';\nimport APM_javascript_express_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/LinuxAMD64/Recommended/express-linuxamd64-recommended-instrumentApplication.md';\nimport APM_javascript_express_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Express/LinuxAMD64/Recommended/express-linuxamd64-recommended-runApplication.md';\n// Express-LinuxARM64-quickstart\nimport APM_javascript_express_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/LinuxARM64/QuickStart/express-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_express_linuxARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Express/LinuxARM64/QuickStart/express-linuxarm64-quickStart-runApplication.md';\n// Express-LinuxARM64-recommended\nimport APM_javascript_express_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Express/LinuxARM64/Recommended/express-linuxarm64-recommended-installOtelCollector.md';\nimport APM_javascript_express_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/LinuxARM64/Recommended/express-linuxarm64-recommended-instrumentApplication.md';\nimport APM_javascript_express_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Express/LinuxARM64/Recommended/express-linuxarm64-recommended-runApplication.md';\n// Express-MacOsAMD64-quickstart\nimport APM_javascript_express_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/MacOsAMD64/QuickStart/express-macosamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_express_macOsAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Express/MacOsAMD64/QuickStart/express-macosamd64-quickStart-runApplication.md';\n// Express-MacOsAMD64-recommended\nimport APM_javascript_express_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Express/MacOsAMD64/Recommended/express-macosamd64-recommended-installOtelCollector.md';\nimport APM_javascript_express_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/MacOsAMD64/Recommended/express-macosamd64-recommended-instrumentApplication.md';\nimport APM_javascript_express_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Express/MacOsAMD64/Recommended/express-macosamd64-recommended-runApplication.md';\n// Express-MacOsARM64-quickstart\nimport APM_javascript_express_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/MacOsARM64/QuickStart/express-macosarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_express_macOsARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Express/MacOsARM64/QuickStart/express-macosarm64-quickStart-runApplication.md';\n// Express-MacOsARM64-recommended\nimport APM_javascript_express_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Express/MacOsARM64/Recommended/express-macosarm64-recommended-installOtelCollector.md';\nimport APM_javascript_express_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/MacOsARM64/Recommended/express-macosarm64-recommended-instrumentApplication.md';\nimport APM_javascript_express_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Express/MacOsARM64/Recommended/express-macosarm64-recommended-runApplication.md';\nimport APM_javascript_express_windows_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/Windows/QuickStart/express-windows-quickStart-instrumentApplication.md';\nimport APM_javascript_express_windows_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Express/Windows/QuickStart/express-windows-quickStart-runApplication.md';\n// Express-LinuxAMD64-recommended\nimport APM_javascript_express_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Express/Windows/Recommended/express-windows-recommended-installOtelCollector.md';\nimport APM_javascript_express_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Express/Windows/Recommended/express-windows-recommended-instrumentApplication.md';\nimport APM_javascript_express_windows_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Express/Windows/Recommended/express-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// NestJS\n// NestJS Docker\nimport APM_javascript_nestjs_docker_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/Docker/QuickStart/nestjs-docker-quickStart-instrumentApplication.md';\nimport APM_javascript_nestjs_docker_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/Docker/QuickStart/nestjs-docker-quickStart-runApplication.md';\n// NestJS-LinuxAMD64-recommended\nimport APM_javascript_nestjs_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NestJS/Docker/Recommended/nestjs-docker-recommended-installOtelCollector.md';\nimport APM_javascript_nestjs_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/Docker/Recommended/nestjs-docker-recommended-instrumentApplication.md';\nimport APM_javascript_nestjs_docker_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/Docker/Recommended/nestjs-docker-recommended-runApplication.md';\n// NestJS-Kubernetes\nimport APM_javascript_nestjs_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NestJS/Kubernetes/nestjs-kubernetes-installOtelCollector.md';\nimport APM_javascript_nestjs_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/Kubernetes/nestjs-kubernetes-instrumentApplication.md';\nimport APM_javascript_nestjs_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/Kubernetes/nestjs-kubernetes-runApplication.md';\n// NestJS-LinuxAMD64-quickstart\nimport APM_javascript_nestjs_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/QuickStart/nestjs-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_nestjs_linuxAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/QuickStart/nestjs-linuxamd64-quickStart-runApplication.md';\n// NestJS-LinuxAMD64-recommended\nimport APM_javascript_nestjs_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/Recommended/nestjs-linuxamd64-recommended-installOtelCollector.md';\nimport APM_javascript_nestjs_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/Recommended/nestjs-linuxamd64-recommended-instrumentApplication.md';\nimport APM_javascript_nestjs_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/LinuxAMD64/Recommended/nestjs-linuxamd64-recommended-runApplication.md';\n// NestJS-LinuxARM64-quickstart\nimport APM_javascript_nestjs_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/QuickStart/nestjs-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_nestjs_linuxARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/QuickStart/nestjs-linuxarm64-quickStart-runApplication.md';\n// NestJS-LinuxARM64-recommended\nimport APM_javascript_nestjs_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/Recommended/nestjs-linuxarm64-recommended-installOtelCollector.md';\nimport APM_javascript_nestjs_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/Recommended/nestjs-linuxarm64-recommended-instrumentApplication.md';\nimport APM_javascript_nestjs_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/LinuxARM64/Recommended/nestjs-linuxarm64-recommended-runApplication.md';\n// NestJS-MacOsAMD64-quickstart\nimport APM_javascript_nestjs_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/QuickStart/nestjs-macosamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_nestjs_macOsAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/QuickStart/nestjs-macosamd64-quickStart-runApplication.md';\n// NestJS-MacOsAMD64-recommended\nimport APM_javascript_nestjs_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/Recommended/nestjs-macosamd64-recommended-installOtelCollector.md';\nimport APM_javascript_nestjs_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/Recommended/nestjs-macosamd64-recommended-instrumentApplication.md';\nimport APM_javascript_nestjs_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/MacOsAMD64/Recommended/nestjs-macosamd64-recommended-runApplication.md';\n// NestJS-MacOsARM64-quickstart\nimport APM_javascript_nestjs_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/QuickStart/nestjs-macosarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_nestjs_macOsARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/QuickStart/nestjs-macosarm64-quickStart-runApplication.md';\n// NestJS-MacOsARM64-recommended\nimport APM_javascript_nestjs_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/Recommended/nestjs-macosarm64-recommended-installOtelCollector.md';\nimport APM_javascript_nestjs_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/Recommended/nestjs-macosarm64-recommended-instrumentApplication.md';\nimport APM_javascript_nestjs_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/MacOsARM64/Recommended/nestjs-macosarm64-recommended-runApplication.md';\n// NestJS\n// NestJS Docker\nimport APM_javascript_nestjs_windows_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/Windows/QuickStart/nestjs-windows-quickStart-instrumentApplication.md';\nimport APM_javascript_nestjs_windows_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/Windows/QuickStart/nestjs-windows-quickStart-runApplication.md';\n// NestJS-LinuxAMD64-recommended\nimport APM_javascript_nestjs_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NestJS/Windows/Recommended/nestjs-windows-recommended-installOtelCollector.md';\nimport APM_javascript_nestjs_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NestJS/Windows/Recommended/nestjs-windows-recommended-instrumentApplication.md';\nimport APM_javascript_nestjs_windows_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NestJS/Windows/Recommended/nestjs-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// NodeJS\n// NodeJS Docker\nimport APM_javascript_nodejs_docker_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Docker/QuickStart/nodejs-docker-quickStart-instrumentApplication.md';\nimport APM_javascript_nodejs_docker_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Docker/QuickStart/nodejs-docker-quickStart-runApplication.md';\n// NodeJS-LinuxAMD64-recommended\nimport APM_javascript_nodejs_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NodeJS/Docker/Recommended/nodejs-docker-recommended-installOtelCollector.md';\nimport APM_javascript_nodejs_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Docker/Recommended/nodejs-docker-recommended-instrumentApplication.md';\nimport APM_javascript_nodejs_docker_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Docker/Recommended/nodejs-docker-recommended-runApplication.md';\n// NodeJS-Kubernetes\nimport APM_javascript_nodejs_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NodeJS/Kubernetes/nodejs-kubernetes-installOtelCollector.md';\nimport APM_javascript_nodejs_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Kubernetes/nodejs-kubernetes-instrumentApplication.md';\nimport APM_javascript_nodejs_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Kubernetes/nodejs-kubernetes-runApplication.md';\n// NodeJS-LinuxAMD64-quickstart\nimport APM_javascript_nodejs_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/QuickStart/nodejs-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_nodejs_linuxAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/QuickStart/nodejs-linuxamd64-quickStart-runApplication.md';\n// NodeJS-LinuxAMD64-recommended\nimport APM_javascript_nodejs_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/Recommended/nodejs-linuxamd64-recommended-installOtelCollector.md';\nimport APM_javascript_nodejs_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/Recommended/nodejs-linuxamd64-recommended-instrumentApplication.md';\nimport APM_javascript_nodejs_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxAMD64/Recommended/nodejs-linuxamd64-recommended-runApplication.md';\n// NodeJS-LinuxARM64-quickstart\nimport APM_javascript_nodejs_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/QuickStart/nodejs-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_nodejs_linuxARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/QuickStart/nodejs-linuxarm64-quickStart-runApplication.md';\n// NodeJS-LinuxARM64-recommended\nimport APM_javascript_nodejs_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/Recommended/nodejs-linuxarm64-recommended-installOtelCollector.md';\nimport APM_javascript_nodejs_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/Recommended/nodejs-linuxarm64-recommended-instrumentApplication.md';\nimport APM_javascript_nodejs_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/LinuxARM64/Recommended/nodejs-linuxarm64-recommended-runApplication.md';\n// NodeJS-MacOsAMD64-quickstart\nimport APM_javascript_nodejs_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/QuickStart/nodejs-macosamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_nodejs_macOsAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/QuickStart/nodejs-macosamd64-quickStart-runApplication.md';\n// NodeJS-MacOsAMD64-recommended\nimport APM_javascript_nodejs_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/Recommended/nodejs-macosamd64-recommended-installOtelCollector.md';\nimport APM_javascript_nodejs_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/Recommended/nodejs-macosamd64-recommended-instrumentApplication.md';\nimport APM_javascript_nodejs_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsAMD64/Recommended/nodejs-macosamd64-recommended-runApplication.md';\n// NodeJS-MacOsARM64-quickstart\nimport APM_javascript_nodejs_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/QuickStart/nodejs-macosarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_nodejs_macOsARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/QuickStart/nodejs-macosarm64-quickStart-runApplication.md';\n// NodeJS-MacOsARM64-recommended\nimport APM_javascript_nodejs_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/Recommended/nodejs-macosarm64-recommended-installOtelCollector.md';\nimport APM_javascript_nodejs_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/Recommended/nodejs-macosarm64-recommended-instrumentApplication.md';\nimport APM_javascript_nodejs_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/MacOsARM64/Recommended/nodejs-macosarm64-recommended-runApplication.md';\n// NodeJS Docker\nimport APM_javascript_nodejs_windows_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Windows/QuickStart/nodejs-windows-quickStart-instrumentApplication.md';\nimport APM_javascript_nodejs_windows_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Windows/QuickStart/nodejs-windows-quickStart-runApplication.md';\n// NodeJS-LinuxAMD64-recommended\nimport APM_javascript_nodejs_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/NodeJS/Windows/Recommended/nodejs-windows-recommended-installOtelCollector.md';\nimport APM_javascript_nodejs_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Windows/Recommended/nodejs-windows-recommended-instrumentApplication.md';\nimport APM_javascript_nodejs_windows_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/NodeJS/Windows/Recommended/nodejs-windows-recommended-runApplication.md';\n/// // JavaScript Others\n// Others Docker\nimport APM_javascript_others_docker_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/Docker/QuickStart/others-docker-quickStart-instrumentApplication.md';\nimport APM_javascript_others_docker_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Others/Docker/QuickStart/others-docker-quickStart-runApplication.md';\n// // Others-JavaScript-LinuxAMD64-recommended\nimport APM_javascript_others_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Others/Docker/Recommended/others-docker-recommended-installOtelCollector.md';\nimport APM_javascript_others_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/Docker/Recommended/others-docker-recommended-instrumentApplication.md';\nimport APM_javascript_others_docker_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Others/Docker/Recommended/others-docker-recommended-runApplication.md';\n// Kubernetes\nimport APM_javascript_others_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Others/Kubernetes/others-kubernetes-installOtelCollector.md';\nimport APM_javascript_others_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/Kubernetes/others-kubernetes-instrumentApplication.md';\nimport APM_javascript_others_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Others/Kubernetes/others-kubernetes-runApplication.md';\n// Others-JavaScript-LinuxAMD64-quickstart\nimport APM_javascript_others_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_others_linuxAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-runApplication.md';\n// // Others-JavaScript-LinuxAMD64-recommended\nimport APM_javascript_others_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-installOtelCollector.md';\nimport APM_javascript_others_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-instrumentApplication.md';\nimport APM_javascript_others_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-runApplication.md';\n// Others-JavaScript-LinuxARM64-quiOthers\nimport APM_javascript_others_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_others_linuxARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-runApplication.md';\n// Others-JavaScript-LinuxARM64-recommended\nimport APM_javascript_others_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-installOtelCollector.md';\nimport APM_javascript_others_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-instrumentApplication.md';\nimport APM_javascript_others_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-runApplication.md';\n// Others-JavaScript-MacOsAMD64-quickstart\nimport APM_javascript_others_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_others_macOsAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-runApplication.md';\n// Others-JavaScript-MacOsAMD64-recommended\nimport APM_javascript_others_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-installOtelCollector.md';\nimport APM_javascript_others_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-instrumentApplication.md';\nimport APM_javascript_others_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-runApplication.md';\n// Others-JavaScript-MacOsARM64-quickstart\nimport APM_javascript_others_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_others_macOsARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-runApplication.md';\n// Others-JavaScript-MacOsARM64-recommended\nimport APM_javascript_others_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-installOtelCollector.md';\nimport APM_javascript_others_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-instrumentApplication.md';\nimport APM_javascript_others_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-runApplication.md';\n// Others Docker\nimport APM_javascript_others_windows_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/Windows/QuickStart/others-windows-quickStart-instrumentApplication.md';\nimport APM_javascript_others_windows_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/Others/Windows/QuickStart/others-windows-quickStart-runApplication.md';\n// // Others-JavaScript-LinuxAMD64-recommended\nimport APM_javascript_others_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/Others/Windows/Recommended/others-windows-recommended-installOtelCollector.md';\nimport APM_javascript_others_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/Others/Windows/Recommended/others-windows-recommended-instrumentApplication.md';\nimport APM_javascript_others_windows_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/Others/Windows/Recommended/others-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// ReactJS Docker\nimport APM_javascript_reactjs_docker_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Docker/QuickStart/reactjs-docker-quickStart-instrumentApplication.md';\nimport APM_javascript_reactjs_docker_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Docker/QuickStart/reactjs-docker-quickStart-runApplication.md';\n// // ReactJS-LinuxAMD64-recommended\nimport APM_javascript_reactjs_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/ReactJS/Docker/Recommended/reactjs-docker-recommended-installOtelCollector.md';\nimport APM_javascript_reactjs_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Docker/Recommended/reactjs-docker-recommended-instrumentApplication.md';\nimport APM_javascript_reactjs_docker_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Docker/Recommended/reactjs-docker-recommended-runApplication.md';\n// ReactJS-Kubernetes\nimport APM_javascript_reactjs_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/ReactJS/Kubernetes/reactjs-kubernetes-installOtelCollector.md';\nimport APM_javascript_reactjs_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Kubernetes/reactjs-kubernetes-instrumentApplication.md';\nimport APM_javascript_reactjs_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Kubernetes/reactjs-kubernetes-runApplication.md';\n// ReactJS-LinuxAMD64-quickstart\nimport APM_javascript_reactjs_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/QuickStart/reactjs-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_reactjs_linuxAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/QuickStart/reactjs-linuxamd64-quickStart-runApplication.md';\n// // ReactJS-LinuxAMD64-recommended\nimport APM_javascript_reactjs_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/Recommended/reactjs-linuxamd64-recommended-installOtelCollector.md';\nimport APM_javascript_reactjs_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/Recommended/reactjs-linuxamd64-recommended-instrumentApplication.md';\nimport APM_javascript_reactjs_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxAMD64/Recommended/reactjs-linuxamd64-recommended-runApplication.md';\n// ReactJS-LinuxARM64-quickstart\nimport APM_javascript_reactjs_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/QuickStart/reactjs-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_reactjs_linuxARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/QuickStart/reactjs-linuxarm64-quickStart-runApplication.md';\n// ReactJS-LinuxARM64-recommended\nimport APM_javascript_reactjs_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/Recommended/reactjs-linuxarm64-recommended-installOtelCollector.md';\nimport APM_javascript_reactjs_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/Recommended/reactjs-linuxarm64-recommended-instrumentApplication.md';\nimport APM_javascript_reactjs_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/LinuxARM64/Recommended/reactjs-linuxarm64-recommended-runApplication.md';\n// ReactJS-MacOsAMD64-quickstart\nimport APM_javascript_reactjs_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/QuickStart/reactjs-macosamd64-quickStart-instrumentApplication.md';\nimport APM_javascript_reactjs_macOsAMD64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/QuickStart/reactjs-macosamd64-quickStart-runApplication.md';\n// ReactJS-MacOsAMD64-recommended\nimport APM_javascript_reactjs_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/Recommended/reactjs-macosamd64-recommended-installOtelCollector.md';\nimport APM_javascript_reactjs_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/Recommended/reactjs-macosamd64-recommended-instrumentApplication.md';\nimport APM_javascript_reactjs_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsAMD64/Recommended/reactjs-macosamd64-recommended-runApplication.md';\n// ReactJS-MacOsARM64-quickstart\nimport APM_javascript_reactjs_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/QuickStart/reactjs-macosarm64-quickStart-instrumentApplication.md';\nimport APM_javascript_reactjs_macOsARM64_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/QuickStart/reactjs-macosarm64-quickStart-runApplication.md';\n// ReactJS-MacOsARM64-recommended\nimport APM_javascript_reactjs_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/Recommended/reactjs-macosarm64-recommended-installOtelCollector.md';\nimport APM_javascript_reactjs_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/Recommended/reactjs-macosarm64-recommended-instrumentApplication.md';\nimport APM_javascript_reactjs_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/MacOsARM64/Recommended/reactjs-macosarm64-recommended-runApplication.md';\n// ReactJS Docker\nimport APM_javascript_reactjs_windows_quickStart_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Windows/QuickStart/reactjs-windows-quickStart-instrumentApplication.md';\nimport APM_javascript_reactjs_windows_quickStart_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Windows/QuickStart/reactjs-windows-quickStart-runApplication.md';\n// // ReactJS-LinuxAMD64-recommended\nimport APM_javascript_reactjs_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Javascript/md-docs/ReactJS/Windows/Recommended/reactjs-windows-recommended-installOtelCollector.md';\nimport APM_javascript_reactjs_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Windows/Recommended/reactjs-windows-recommended-instrumentApplication.md';\nimport APM_javascript_reactjs_windows_recommendedSteps_runApplication from '../Modules/APM/Javascript/md-docs/ReactJS/Windows/Recommended/reactjs-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// PHP Docker\nimport APM_php_docker_quickStart_instrumentApplication from '../Modules/APM/Php/md-docs/Docker/QuickStart/php-docker-quickStart-instrumentApplication.md';\nimport APM_php_docker_quickStart_runApplication from '../Modules/APM/Php/md-docs/Docker/QuickStart/php-docker-quickStart-runApplication.md';\n// PHP-LinuxAMD64-recommended\nimport APM_php_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Php/md-docs/Docker/Recommended/php-docker-recommended-installOtelCollector.md';\nimport APM_php_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Php/md-docs/Docker/Recommended/php-docker-recommended-instrumentApplication.md';\nimport APM_php_docker_recommendedSteps_runApplication from '../Modules/APM/Php/md-docs/Docker/Recommended/php-docker-recommended-runApplication.md';\n// PHP-Kubernetes\nimport APM_php_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Php/md-docs/Kubernetes/php-kubernetes-installOtelCollector.md';\nimport APM_php_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Php/md-docs/Kubernetes/php-kubernetes-instrumentApplication.md';\nimport APM_php_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Php/md-docs/Kubernetes/php-kubernetes-runApplication.md';\n// PHP-LinuxAMD64-quickstart\nimport APM_php_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Php/md-docs/LinuxAMD64/QuickStart/php-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_php_linuxAMD64_quickStart_runApplication from '../Modules/APM/Php/md-docs/LinuxAMD64/QuickStart/php-linuxamd64-quickStart-runApplication.md';\n// PHP-LinuxAMD64-recommended\nimport APM_php_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Php/md-docs/LinuxAMD64/Recommended/php-linuxamd64-recommended-installOtelCollector.md';\nimport APM_php_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Php/md-docs/LinuxAMD64/Recommended/php-linuxamd64-recommended-instrumentApplication.md';\nimport APM_php_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Php/md-docs/LinuxAMD64/Recommended/php-linuxamd64-recommended-runApplication.md';\n// PHP-LinuxARM64-quickstart\nimport APM_php_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Php/md-docs/LinuxARM64/QuickStart/php-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_php_linuxARM64_quickStart_runApplication from '../Modules/APM/Php/md-docs/LinuxARM64/QuickStart/php-linuxarm64-quickStart-runApplication.md';\n// PHP-LinuxARM64-recommended\nimport APM_php_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Php/md-docs/LinuxARM64/Recommended/php-linuxarm64-recommended-installOtelCollector.md';\nimport APM_php_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Php/md-docs/LinuxARM64/Recommended/php-linuxarm64-recommended-instrumentApplication.md';\nimport APM_php_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Php/md-docs/LinuxARM64/Recommended/php-linuxarm64-recommended-runApplication.md';\n// PHP-MacOsAMD64-quickstart\nimport APM_php_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Php/md-docs/MacOsAMD64/QuickStart/php-macosamd64-quickStart-instrumentApplication.md';\nimport APM_php_macOsAMD64_quickStart_runApplication from '../Modules/APM/Php/md-docs/MacOsAMD64/QuickStart/php-macosamd64-quickStart-runApplication.md';\n// PHP-MacOsAMD64-recommended\nimport APM_php_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Php/md-docs/MacOsAMD64/Recommended/php-macosamd64-recommended-installOtelCollector.md';\nimport APM_php_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Php/md-docs/MacOsAMD64/Recommended/php-macosamd64-recommended-instrumentApplication.md';\nimport APM_php_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Php/md-docs/MacOsAMD64/Recommended/php-macosamd64-recommended-runApplication.md';\n// PHP-MacOsARM64-quickstart\nimport APM_php_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Php/md-docs/MacOsARM64/QuickStart/php-macosarm64-quickStart-instrumentApplication.md';\nimport APM_php_macOsARM64_quickStart_runApplication from '../Modules/APM/Php/md-docs/MacOsARM64/QuickStart/php-macosarm64-quickStart-runApplication.md';\n// PHP-MacOsARM64-recommended\nimport APM_php_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Php/md-docs/MacOsARM64/Recommended/php-macosarm64-recommended-installOtelCollector.md';\nimport APM_php_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Php/md-docs/MacOsARM64/Recommended/php-macosarm64-recommended-instrumentApplication.md';\nimport APM_php_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Php/md-docs/MacOsARM64/Recommended/php-macosarm64-recommended-runApplication.md';\n// PHP Docker\nimport APM_php_windows_quickStart_instrumentApplication from '../Modules/APM/Php/md-docs/Windows/QuickStart/php-windows-quickStart-instrumentApplication.md';\nimport APM_php_windows_quickStart_runApplication from '../Modules/APM/Php/md-docs/Windows/QuickStart/php-windows-quickStart-runApplication.md';\n// PHP-LinuxAMD64-recommended\nimport APM_php_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Php/md-docs/Windows/Recommended/php-windows-recommended-installOtelCollector.md';\nimport APM_php_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Php/md-docs/Windows/Recommended/php-windows-recommended-instrumentApplication.md';\nimport APM_php_windows_recommendedSteps_runApplication from '../Modules/APM/Php/md-docs/Windows/Recommended/php-windows-recommended-runApplication.md';\n/// ////// Docker instructions\nimport APM_python_django_docker_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Django/Docker/QuickStart/django-docker-quickStart-instrumentApplication.md';\nimport APM_python_django_docker_quickStart_runApplication from '../Modules/APM/Python/md-docs/Django/Docker/QuickStart/django-docker-quickStart-runApplication.md';\n// Django-LinuxAMD64-recommended\nimport APM_python_django_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Django/Docker/Recommended/django-docker-recommended-installOtelCollector.md';\nimport APM_python_django_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Django/Docker/Recommended/django-docker-recommended-instrumentApplication.md';\nimport APM_python_django_docker_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Django/Docker/Recommended/django-docker-recommended-runApplication.md';\n/// ////// Javascript Done\n/// ///// Python Start\n// Django\n// Django-Kubernetes\nimport APM_python_django_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Django/Kubernetes/django-kubernetes-installOtelCollector.md';\nimport APM_python_django_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Django/Kubernetes/django-kubernetes-instrumentApplication.md';\nimport APM_python_django_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Django/Kubernetes/django-kubernetes-runApplication.md';\n// Django-LinuxAMD64-quickstart\nimport APM_python_django_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Django/LinuxAMD64/QuickStart/django-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_python_django_linuxAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Django/LinuxAMD64/QuickStart/django-linuxamd64-quickStart-runApplication.md';\n// Django-LinuxAMD64-recommended\nimport APM_python_django_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Django/LinuxAMD64/Recommended/django-linuxamd64-recommended-installOtelCollector.md';\nimport APM_python_django_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Django/LinuxAMD64/Recommended/django-linuxamd64-recommended-instrumentApplication.md';\nimport APM_python_django_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Django/LinuxAMD64/Recommended/django-linuxamd64-recommended-runApplication.md';\n// Django-LinuxARM64-quickstart\nimport APM_python_django_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Django/LinuxARM64/QuickStart/django-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_python_django_linuxARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Django/LinuxARM64/QuickStart/django-linuxarm64-quickStart-runApplication.md';\n// Django-LinuxARM64-recommended\nimport APM_python_django_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Django/LinuxARM64/Recommended/django-linuxarm64-recommended-installOtelCollector.md';\nimport APM_python_django_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Django/LinuxARM64/Recommended/django-linuxarm64-recommended-instrumentApplication.md';\nimport APM_python_django_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Django/LinuxARM64/Recommended/django-linuxarm64-recommended-runApplication.md';\n// Django-MacOsAMD64-quickstart\nimport APM_python_django_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Django/MacOsAMD64/QuickStart/django-macosamd64-quickStart-instrumentApplication.md';\nimport APM_python_django_macOsAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Django/MacOsAMD64/QuickStart/django-macosamd64-quickStart-runApplication.md';\n// Django-MacOsAMD64-recommended\nimport APM_python_django_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Django/MacOsAMD64/Recommended/django-macosamd64-recommended-installOtelCollector.md';\nimport APM_python_django_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Django/MacOsAMD64/Recommended/django-macosamd64-recommended-instrumentApplication.md';\nimport APM_python_django_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Django/MacOsAMD64/Recommended/django-macosamd64-recommended-runApplication.md';\n// Django-MacOsARM64-quickstart\nimport APM_python_django_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Django/MacOsARM64/QuickStart/django-macosarm64-quickStart-instrumentApplication.md';\nimport APM_python_django_macOsARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Django/MacOsARM64/QuickStart/django-macosarm64-quickStart-runApplication.md';\n// Django-MacOsARM64-recommended\nimport APM_python_django_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Django/MacOsARM64/Recommended/django-macosarm64-recommended-installOtelCollector.md';\nimport APM_python_django_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Django/MacOsARM64/Recommended/django-macosarm64-recommended-instrumentApplication.md';\nimport APM_python_django_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Django/MacOsARM64/Recommended/django-macosarm64-recommended-runApplication.md';\nimport APM_python_django_windows_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Django/Windows/QuickStart/django-windows-quickStart-instrumentApplication.md';\nimport APM_python_django_windows_quickStart_runApplication from '../Modules/APM/Python/md-docs/Django/Windows/QuickStart/django-windows-quickStart-runApplication.md';\n// Django-LinuxAMD64-recommended\nimport APM_python_django_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Django/Windows/Recommended/django-windows-recommended-installOtelCollector.md';\nimport APM_python_django_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Django/Windows/Recommended/django-windows-recommended-instrumentApplication.md';\nimport APM_python_django_windows_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Django/Windows/Recommended/django-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// Falcon\n// Falcon Docker\nimport APM_python_falcon_docker_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/Docker/QuickStart/falcon-docker-quickStart-instrumentApplication.md';\nimport APM_python_falcon_docker_quickStart_runApplication from '../Modules/APM/Python/md-docs/Falcon/Docker/QuickStart/falcon-docker-quickStart-runApplication.md';\n// Falcon-LinuxAMD64-recommended\nimport APM_python_falcon_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Falcon/Docker/Recommended/falcon-docker-recommended-installOtelCollector.md';\nimport APM_python_falcon_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/Docker/Recommended/falcon-docker-recommended-instrumentApplication.md';\nimport APM_python_falcon_docker_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Falcon/Docker/Recommended/falcon-docker-recommended-runApplication.md';\n// Falcon-Kubernetes\nimport APM_python_falcon_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Falcon/Kubernetes/falcon-kubernetes-installOtelCollector.md';\nimport APM_python_falcon_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/Kubernetes/falcon-kubernetes-instrumentApplication.md';\nimport APM_python_falcon_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Falcon/Kubernetes/falcon-kubernetes-runApplication.md';\n// Falcon-LinuxAMD64-quickstart\nimport APM_python_falcon_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/LinuxAMD64/QuickStart/falcon-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_python_falcon_linuxAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Falcon/LinuxAMD64/QuickStart/falcon-linuxamd64-quickStart-runApplication.md';\n// Falcon-LinuxAMD64-recommended\nimport APM_python_falcon_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Falcon/LinuxAMD64/Recommended/falcon-linuxamd64-recommended-installOtelCollector.md';\nimport APM_python_falcon_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/LinuxAMD64/Recommended/falcon-linuxamd64-recommended-instrumentApplication.md';\nimport APM_python_falcon_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Falcon/LinuxAMD64/Recommended/falcon-linuxamd64-recommended-runApplication.md';\n// Falcon-LinuxARM64-quickstart\nimport APM_python_falcon_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/LinuxARM64/QuickStart/falcon-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_python_falcon_linuxARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Falcon/LinuxARM64/QuickStart/falcon-linuxarm64-quickStart-runApplication.md';\n// Falcon-LinuxARM64-recommended\nimport APM_python_falcon_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Falcon/LinuxARM64/Recommended/falcon-linuxarm64-recommended-installOtelCollector.md';\nimport APM_python_falcon_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/LinuxARM64/Recommended/falcon-linuxarm64-recommended-instrumentApplication.md';\nimport APM_python_falcon_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Falcon/LinuxARM64/Recommended/falcon-linuxarm64-recommended-runApplication.md';\n// Falcon-MacOsAMD64-quickstart\nimport APM_python_falcon_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/MacOsAMD64/QuickStart/falcon-macosamd64-quickStart-instrumentApplication.md';\nimport APM_python_falcon_macOsAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Falcon/MacOsAMD64/QuickStart/falcon-macosamd64-quickStart-runApplication.md';\n// Falcon-MacOsAMD64-recommended\nimport APM_python_falcon_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Falcon/MacOsAMD64/Recommended/falcon-macosamd64-recommended-installOtelCollector.md';\nimport APM_python_falcon_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/MacOsAMD64/Recommended/falcon-macosamd64-recommended-instrumentApplication.md';\nimport APM_python_falcon_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Falcon/MacOsAMD64/Recommended/falcon-macosamd64-recommended-runApplication.md';\n// Falcon-MacOsARM64-quickstart\nimport APM_python_falcon_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/MacOsARM64/QuickStart/falcon-macosarm64-quickStart-instrumentApplication.md';\nimport APM_python_falcon_macOsARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Falcon/MacOsARM64/QuickStart/falcon-macosarm64-quickStart-runApplication.md';\n// Falcon-MacOsARM64-recommended\nimport APM_python_falcon_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Falcon/MacOsARM64/Recommended/falcon-macosarm64-recommended-installOtelCollector.md';\nimport APM_python_falcon_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/MacOsARM64/Recommended/falcon-macosarm64-recommended-instrumentApplication.md';\nimport APM_python_falcon_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Falcon/MacOsARM64/Recommended/falcon-macosarm64-recommended-runApplication.md';\nimport APM_python_falcon_windows_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/Windows/QuickStart/falcon-windows-quickStart-instrumentApplication.md';\nimport APM_python_falcon_windows_quickStart_runApplication from '../Modules/APM/Python/md-docs/Falcon/Windows/QuickStart/falcon-windows-quickStart-runApplication.md';\n// Falcon-LinuxAMD64-recommended\nimport APM_python_falcon_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Falcon/Windows/Recommended/falcon-windows-recommended-installOtelCollector.md';\nimport APM_python_falcon_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Falcon/Windows/Recommended/falcon-windows-recommended-instrumentApplication.md';\nimport APM_python_falcon_windows_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Falcon/Windows/Recommended/falcon-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// FastAPI\n// FastAPI Docker\nimport APM_python_fastAPI_docker_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/Docker/QuickStart/fastapi-docker-quickStart-instrumentApplication.md';\nimport APM_python_fastAPI_docker_quickStart_runApplication from '../Modules/APM/Python/md-docs/FastAPI/Docker/QuickStart/fastapi-docker-quickStart-runApplication.md';\n// FastAPI-LinuxAMD64-recommended\nimport APM_python_fastAPI_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/FastAPI/Docker/Recommended/fastapi-docker-recommended-installOtelCollector.md';\nimport APM_python_fastAPI_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/Docker/Recommended/fastapi-docker-recommended-instrumentApplication.md';\nimport APM_python_fastAPI_docker_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/FastAPI/Docker/Recommended/fastapi-docker-recommended-runApplication.md';\n// FastAPI-Kubernetes\nimport APM_python_fastAPI_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/FastAPI/Kubernetes/fastapi-kubernetes-installOtelCollector.md';\nimport APM_python_fastAPI_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/Kubernetes/fastapi-kubernetes-instrumentApplication.md';\nimport APM_python_fastAPI_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/FastAPI/Kubernetes/fastapi-kubernetes-runApplication.md';\n// FastAPI-LinuxAMD64-quickstart\nimport APM_python_fastAPI_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/QuickStart/fastapi-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_python_fastAPI_linuxAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/QuickStart/fastapi-linuxamd64-quickStart-runApplication.md';\n// FastAPI-LinuxAMD64-recommended\nimport APM_python_fastAPI_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/Recommended/fastapi-linuxamd64-recommended-installOtelCollector.md';\nimport APM_python_fastAPI_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/Recommended/fastapi-linuxamd64-recommended-instrumentApplication.md';\nimport APM_python_fastAPI_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/FastAPI/LinuxAMD64/Recommended/fastapi-linuxamd64-recommended-runApplication.md';\n// FastAPI-LinuxARM64-quickstart\nimport APM_python_fastAPI_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/LinuxARM64/QuickStart/fastapi-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_python_fastAPI_linuxARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/FastAPI/LinuxARM64/QuickStart/fastapi-linuxarm64-quickStart-runApplication.md';\n// FastAPI-LinuxARM64-recommfastapi\nimport APM_python_fastAPI_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/FastAPI/LinuxARM64/Recommended/fastapi-linuxarm64-recommended-installOtelCollector.md';\nimport APM_python_fastAPI_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/LinuxARM64/Recommended/fastapi-linuxarm64-recommended-instrumentApplication.md';\nimport APM_python_fastAPI_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/FastAPI/LinuxARM64/Recommended/fastapi-linuxarm64-recommended-runApplication.md';\n// FastAPI-MacOsAMD64-quickstart\nimport APM_python_fastAPI_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/QuickStart/fastapi-macosamd64-quickStart-instrumentApplication.md';\nimport APM_python_fastAPI_macOsAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/QuickStart/fastapi-macosamd64-quickStart-runApplication.md';\n// FastAPI-MacOsAMD64-recommended\nimport APM_python_fastAPI_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/Recommended/fastapi-macosamd64-recommended-installOtelCollector.md';\nimport APM_python_fastAPI_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/Recommended/fastapi-macosamd64-recommended-instrumentApplication.md';\nimport APM_python_fastAPI_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/FastAPI/MacOsAMD64/Recommended/fastapi-macosamd64-recommended-runApplication.md';\n// FastAPI-MacOsARM64-quickstart\nimport APM_python_fastAPI_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/MacOsARM64/QuickStart/fastapi-macosarm64-quickStart-instrumentApplication.md';\nimport APM_python_fastAPI_macOsARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/FastAPI/MacOsARM64/QuickStart/fastapi-macosarm64-quickStart-runApplication.md';\n// FastAPI-MacOsARM64-recommended\nimport APM_python_fastAPI_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/FastAPI/MacOsARM64/Recommended/fastapi-macosarm64-recommended-installOtelCollector.md';\nimport APM_python_fastAPI_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/MacOsARM64/Recommended/fastapi-macosarm64-recommended-instrumentApplication.md';\nimport APM_python_fastAPI_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/FastAPI/MacOsARM64/Recommended/fastapi-macosarm64-recommended-runApplication.md';\n// FastAPI Docker\nimport APM_python_fastAPI_windows_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/Windows/QuickStart/fastapi-windows-quickStart-instrumentApplication.md';\nimport APM_python_fastAPI_windows_quickStart_runApplication from '../Modules/APM/Python/md-docs/FastAPI/Windows/QuickStart/fastapi-windows-quickStart-runApplication.md';\n// FastAPI-LinuxAMD64-recommended\nimport APM_python_fastAPI_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/FastAPI/Windows/Recommended/fastapi-windows-recommended-installOtelCollector.md';\nimport APM_python_fastAPI_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/FastAPI/Windows/Recommended/fastapi-windows-recommended-instrumentApplication.md';\nimport APM_python_fastAPI_windows_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/FastAPI/Windows/Recommended/fastapi-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// Flask\n// Flask Docker\nimport APM_python_flask_docker_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/Docker/QuickStart/flask-docker-quickStart-instrumentApplication.md';\nimport APM_python_flask_docker_quickStart_runApplication from '../Modules/APM/Python/md-docs/Flask/Docker/QuickStart/flask-docker-quickStart-runApplication.md';\nimport APM_python_flask_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Flask/Docker/Recommended/flask-docker-recommended-installOtelCollector.md';\nimport APM_python_flask_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/Docker/Recommended/flask-docker-recommended-instrumentApplication.md';\nimport APM_python_flask_docker_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Flask/Docker/Recommended/flask-docker-recommended-runApplication.md';\n// Flask-Kubernetes\nimport APM_python_flask_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Flask/Kubernetes/flask-kubernetes-installOtelCollector.md';\nimport APM_python_flask_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/Kubernetes/flask-kubernetes-instrumentApplication.md';\nimport APM_python_flask_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Flask/Kubernetes/flask-kubernetes-runApplication.md';\n// Flask-LinuxAMD64-quickstart\nimport APM_python_flask_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/LinuxAMD64/QuickStart/flask-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_python_flask_linuxAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Flask/LinuxAMD64/QuickStart/flask-linuxamd64-quickStart-runApplication.md';\n// Flask-LinuxAMD64-recommended\nimport APM_python_flask_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Flask/LinuxAMD64/Recommended/flask-linuxamd64-recommended-installOtelCollector.md';\nimport APM_python_flask_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/LinuxAMD64/Recommended/flask-linuxamd64-recommended-instrumentApplication.md';\nimport APM_python_flask_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Flask/LinuxAMD64/Recommended/flask-linuxamd64-recommended-runApplication.md';\n// Flask-LinuxARM64-quickstart\nimport APM_python_flask_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/LinuxARM64/QuickStart/flask-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_python_flask_linuxARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Flask/LinuxARM64/QuickStart/flask-linuxarm64-quickStart-runApplication.md';\n// Flask-LinuxARM64-recommended\nimport APM_python_flask_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Flask/LinuxARM64/Recommended/flask-linuxarm64-recommended-installOtelCollector.md';\nimport APM_python_flask_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/LinuxARM64/Recommended/flask-linuxarm64-recommended-instrumentApplication.md';\nimport APM_python_flask_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Flask/LinuxARM64/Recommended/flask-linuxarm64-recommended-runApplication.md';\n// Flask-MacOsAMD64-quickstart\nimport APM_python_flask_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/MacOsAMD64/QuickStart/flask-macosamd64-quickStart-instrumentApplication.md';\nimport APM_python_flask_macOsAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Flask/MacOsAMD64/QuickStart/flask-macosamd64-quickStart-runApplication.md';\n// Flask-MacOsAMD64-recommended\nimport APM_python_flask_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Flask/MacOsAMD64/Recommended/flask-macosamd64-recommended-installOtelCollector.md';\nimport APM_python_flask_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/MacOsAMD64/Recommended/flask-macosamd64-recommended-instrumentApplication.md';\nimport APM_python_flask_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Flask/MacOsAMD64/Recommended/flask-macosamd64-recommended-runApplication.md';\n// Flask-MacOsARM64-quickstart\nimport APM_python_flask_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/MacOsARM64/QuickStart/flask-macosarm64-quickStart-instrumentApplication.md';\nimport APM_python_flask_macOsARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Flask/MacOsARM64/QuickStart/flask-macosarm64-quickStart-runApplication.md';\n// Flask-MacOsARM64-recommended\nimport APM_python_flask_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Flask/MacOsARM64/Recommended/flask-macosarm64-recommended-installOtelCollector.md';\nimport APM_python_flask_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/MacOsARM64/Recommended/flask-macosarm64-recommended-instrumentApplication.md';\nimport APM_python_flask_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Flask/MacOsARM64/Recommended/flask-macosarm64-recommended-runApplication.md';\n// Flask Docker\nimport APM_python_flask_windows_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/Windows/QuickStart/flask-windows-quickStart-instrumentApplication.md';\nimport APM_python_flask_windows_quickStart_runApplication from '../Modules/APM/Python/md-docs/Flask/Windows/QuickStart/flask-windows-quickStart-runApplication.md';\nimport APM_python_flask_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Flask/Windows/Recommended/flask-windows-recommended-installOtelCollector.md';\nimport APM_python_flask_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Flask/Windows/Recommended/flask-windows-recommended-instrumentApplication.md';\nimport APM_python_flask_windows_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Flask/Windows/Recommended/flask-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n// Others\n// Others Docker\nimport APM_python_other_docker_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Others/Docker/QuickStart/others-docker-quickStart-instrumentApplication.md';\nimport APM_python_other_docker_quickStart_runApplication from '../Modules/APM/Python/md-docs/Others/Docker/QuickStart/others-docker-quickStart-runApplication.md';\n// Others-LinuxAMD64-recommended\nimport APM_python_other_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Others/Docker/Recommended/others-docker-recommended-installOtelCollector.md';\nimport APM_python_other_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Others/Docker/Recommended/others-docker-recommended-instrumentApplication.md';\nimport APM_python_other_docker_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Others/Docker/Recommended/others-docker-recommended-runApplication.md';\n// Others-Kubernetes\nimport APM_python_other_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Others/Kubernetes/others-kubernetes-installOtelCollector.md';\nimport APM_python_other_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Others/Kubernetes/others-kubernetes-instrumentApplication.md';\nimport APM_python_other_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Others/Kubernetes/others-kubernetes-runApplication.md';\n// Others-LinuxAMD64-quickstart\nimport APM_python_other_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_python_other_linuxAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Others/LinuxAMD64/QuickStart/others-linuxamd64-quickStart-runApplication.md';\n// Others-LinuxAMD64-recommended\nimport APM_python_other_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-installOtelCollector.md';\nimport APM_python_other_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-instrumentApplication.md';\nimport APM_python_other_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Others/LinuxAMD64/Recommended/others-linuxamd64-recommended-runApplication.md';\n// Others-LinuxARM64-quickstart\nimport APM_python_other_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_python_other_linuxARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Others/LinuxARM64/QuickStart/others-linuxarm64-quickStart-runApplication.md';\n// Others-LinuxARM64-recommended\nimport APM_python_other_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-installOtelCollector.md';\nimport APM_python_other_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-instrumentApplication.md';\nimport APM_python_other_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Others/LinuxARM64/Recommended/others-linuxarm64-recommended-runApplication.md';\n// Others-MacOsAMD64-quickstart\nimport APM_python_other_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-instrumentApplication.md';\nimport APM_python_other_macOsAMD64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Others/MacOsAMD64/QuickStart/others-macosamd64-quickStart-runApplication.md';\n// Others-MacOsAMD64-recommended\nimport APM_python_other_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-installOtelCollector.md';\nimport APM_python_other_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-instrumentApplication.md';\nimport APM_python_other_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Others/MacOsAMD64/Recommended/others-macosamd64-recommended-runApplication.md';\n// Others-MacOsARM64-quickstart\nimport APM_python_other_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-instrumentApplication.md';\nimport APM_python_other_macOsARM64_quickStart_runApplication from '../Modules/APM/Python/md-docs/Others/MacOsARM64/QuickStart/others-macosarm64-quickStart-runApplication.md';\n// Others-MacOsARM64-recommended\nimport APM_python_other_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-installOtelCollector.md';\nimport APM_python_other_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-instrumentApplication.md';\nimport APM_python_other_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Others/MacOsARM64/Recommended/others-macosarm64-recommended-runApplication.md';\n// Others Docker\nimport APM_python_other_windows_quickStart_instrumentApplication from '../Modules/APM/Python/md-docs/Others/Windows/QuickStart/others-windows-quickStart-instrumentApplication.md';\nimport APM_python_other_windows_quickStart_runApplication from '../Modules/APM/Python/md-docs/Others/Windows/QuickStart/others-windows-quickStart-runApplication.md';\n// Others-LinuxAMD64-recommended\nimport APM_python_other_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Python/md-docs/Others/Windows/Recommended/others-windows-recommended-installOtelCollector.md';\nimport APM_python_other_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Python/md-docs/Others/Windows/Recommended/others-windows-recommended-instrumentApplication.md';\nimport APM_python_other_windows_recommendedSteps_runApplication from '../Modules/APM/Python/md-docs/Others/Windows/Recommended/others-windows-recommended-runApplication.md';\n// ----------------------------------------------------------------------------\n/// ///// ROR Start\n// ROR Docker\nimport APM_rails_docker_quickStart_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/Docker/QuickStart/ror-docker-quickStart-instrumentApplication.md';\nimport APM_rails_docker_quickStart_runApplication from '../Modules/APM/RubyOnRails/md-docs/Docker/QuickStart/ror-docker-quickStart-runApplication.md';\n// ROR-LinuxAMD64-recommended\nimport APM_rails_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/RubyOnRails/md-docs/Docker/Recommended/ror-docker-recommended-installOtelCollector.md';\nimport APM_rails_docker_recommendedSteps_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/Docker/Recommended/ror-docker-recommended-instrumentApplication.md';\nimport APM_rails_docker_recommendedSteps_runApplication from '../Modules/APM/RubyOnRails/md-docs/Docker/Recommended/ror-docker-recommended-runApplication.md';\n// ROR-Kubernetes\nimport APM_rails_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/RubyOnRails/md-docs/Kubernetes/ror-kubernetes-installOtelCollector.md';\nimport APM_rails_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/Kubernetes/ror-kubernetes-instrumentApplication.md';\nimport APM_rails_kubernetes_recommendedSteps_runApplication from '../Modules/APM/RubyOnRails/md-docs/Kubernetes/ror-kubernetes-runApplication.md';\n// ROR-LinuxAMD64-quickstart\nimport APM_rails_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/LinuxAMD64/QuickStart/ror-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_rails_linuxAMD64_quickStart_runApplication from '../Modules/APM/RubyOnRails/md-docs/LinuxAMD64/QuickStart/ror-linuxamd64-quickStart-runApplication.md';\n// ROR-LinuxAMD64-recommended\nimport APM_rails_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/RubyOnRails/md-docs/LinuxAMD64/Recommended/ror-linuxamd64-recommended-installOtelCollector.md';\nimport APM_rails_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/LinuxAMD64/Recommended/ror-linuxamd64-recommended-instrumentApplication.md';\nimport APM_rails_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/RubyOnRails/md-docs/LinuxAMD64/Recommended/ror-linuxamd64-recommended-runApplication.md';\n// ROR-LinuxARM64-quickstart\nimport APM_rails_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/LinuxARM64/QuickStart/ror-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_rails_linuxARM64_quickStart_runApplication from '../Modules/APM/RubyOnRails/md-docs/LinuxARM64/QuickStart/ror-linuxarm64-quickStart-runApplication.md';\n// ROR-LinuxARM64-recommended\nimport APM_rails_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/RubyOnRails/md-docs/LinuxARM64/Recommended/ror-linuxarm64-recommended-installOtelCollector.md';\nimport APM_rails_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/LinuxARM64/Recommended/ror-linuxarm64-recommended-instrumentApplication.md';\nimport APM_rails_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/RubyOnRails/md-docs/LinuxARM64/Recommended/ror-linuxarm64-recommended-runApplication.md';\n// ROR-MacOsAMD64-quickstart\nimport APM_rails_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/MacOsAMD64/QuickStart/ror-macosamd64-quickStart-instrumentApplication.md';\nimport APM_rails_macOsAMD64_quickStart_runApplication from '../Modules/APM/RubyOnRails/md-docs/MacOsAMD64/QuickStart/ror-macosamd64-quickStart-runApplication.md';\n// ROR-MacOsAMD64-recommended\nimport APM_rails_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/RubyOnRails/md-docs/MacOsAMD64/Recommended/ror-macosamd64-recommended-installOtelCollector.md';\nimport APM_rails_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/MacOsAMD64/Recommended/ror-macosamd64-recommended-instrumentApplication.md';\nimport APM_rails_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/RubyOnRails/md-docs/MacOsAMD64/Recommended/ror-macosamd64-recommended-runApplication.md';\n// ROR-MacOsARM64-quickstart\nimport APM_rails_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/MacOsARM64/QuickStart/ror-macosarm64-quickStart-instrumentApplication.md';\nimport APM_rails_macOsARM64_quickStart_runApplication from '../Modules/APM/RubyOnRails/md-docs/MacOsARM64/QuickStart/ror-macosarm64-quickStart-runApplication.md';\n// ROR-MacOsARM64-recommended\nimport APM_rails_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/RubyOnRails/md-docs/MacOsARM64/Recommended/ror-macosarm64-recommended-installOtelCollector.md';\nimport APM_rails_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/MacOsARM64/Recommended/ror-macosarm64-recommended-instrumentApplication.md';\nimport APM_rails_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/RubyOnRails/md-docs/MacOsARM64/Recommended/ror-macosarm64-recommended-runApplication.md';\n// ROR Docker\nimport APM_rails_windows_quickStart_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/Windows/QuickStart/ror-windows-quickStart-instrumentApplication.md';\nimport APM_rails_windows_quickStart_runApplication from '../Modules/APM/RubyOnRails/md-docs/Windows/QuickStart/ror-windows-quickStart-runApplication.md';\n// ROR-LinuxAMD64-recommended\nimport APM_rails_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/RubyOnRails/md-docs/Windows/Recommended/ror-windows-recommended-installOtelCollector.md';\nimport APM_rails_windows_recommendedSteps_instrumentApplication from '../Modules/APM/RubyOnRails/md-docs/Windows/Recommended/ror-windows-recommended-instrumentApplication.md';\nimport APM_rails_windows_recommendedSteps_runApplication from '../Modules/APM/RubyOnRails/md-docs/Windows/Recommended/ror-windows-recommended-runApplication.md';\n// Rust DOcker\nimport APM_rust_docker_quickStart_instrumentApplication from '../Modules/APM/Rust/md-docs/Docker/QuickStart/rust-docker-quickStart-instrumentApplication.md';\nimport APM_rust_docker_quickStart_runApplication from '../Modules/APM/Rust/md-docs/Docker/QuickStart/rust-docker-quickStart-runApplication.md';\n// Rust-LinuxAMD64-recommended\nimport APM_rust_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Rust/md-docs/Docker/Recommended/rust-docker-recommended-installOtelCollector.md';\nimport APM_rust_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Rust/md-docs/Docker/Recommended/rust-docker-recommended-instrumentApplication.md';\nimport APM_rust_docker_recommendedSteps_runApplication from '../Modules/APM/Rust/md-docs/Docker/Recommended/rust-docker-recommended-runApplication.md';\n// Rust-Kubernetes\nimport APM_rust_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Rust/md-docs/Kubernetes/rust-kubernetes-installOtelCollector.md';\nimport APM_rust_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Rust/md-docs/Kubernetes/rust-kubernetes-instrumentApplication.md';\nimport APM_rust_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Rust/md-docs/Kubernetes/rust-kubernetes-runApplication.md';\n// Rust-LinuxAMD64-quickstart\nimport APM_rust_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Rust/md-docs/LinuxAMD64/QuickStart/rust-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_rust_linuxAMD64_quickStart_runApplication from '../Modules/APM/Rust/md-docs/LinuxAMD64/QuickStart/rust-linuxamd64-quickStart-runApplication.md';\n// Rust-LinuxAMD64-recommended\nimport APM_rust_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Rust/md-docs/LinuxAMD64/Recommended/rust-linuxamd64-recommended-installOtelCollector.md';\nimport APM_rust_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Rust/md-docs/LinuxAMD64/Recommended/rust-linuxamd64-recommended-instrumentApplication.md';\nimport APM_rust_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Rust/md-docs/LinuxAMD64/Recommended/rust-linuxamd64-recommended-runApplication.md';\n// Rust-LinuxARM64-quickstart\nimport APM_rust_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Rust/md-docs/LinuxARM64/QuickStart/rust-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_rust_linuxARM64_quickStart_runApplication from '../Modules/APM/Rust/md-docs/LinuxARM64/QuickStart/rust-linuxarm64-quickStart-runApplication.md';\n// Rust-LinuxARM64-recommended\nimport APM_rust_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Rust/md-docs/LinuxARM64/Recommended/rust-linuxarm64-recommended-installOtelCollector.md';\nimport APM_rust_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Rust/md-docs/LinuxARM64/Recommended/rust-linuxarm64-recommended-instrumentApplication.md';\nimport APM_rust_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Rust/md-docs/LinuxARM64/Recommended/rust-linuxarm64-recommended-runApplication.md';\n// Rust-MacOsAMD64-quickstart\nimport APM_rust_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Rust/md-docs/MacOsAMD64/QuickStart/rust-macosamd64-quickStart-instrumentApplication.md';\nimport APM_rust_macOsAMD64_quickStart_runApplication from '../Modules/APM/Rust/md-docs/MacOsAMD64/QuickStart/rust-macosamd64-quickStart-runApplication.md';\n// Rust-MacOsAMD64-recommended\nimport APM_rust_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Rust/md-docs/MacOsAMD64/Recommended/rust-macosamd64-recommended-installOtelCollector.md';\nimport APM_rust_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Rust/md-docs/MacOsAMD64/Recommended/rust-macosamd64-recommended-instrumentApplication.md';\nimport APM_rust_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Rust/md-docs/MacOsAMD64/Recommended/rust-macosamd64-recommended-runApplication.md';\n// Rust-MacOsARM64-quickstart\nimport APM_rust_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Rust/md-docs/MacOsARM64/QuickStart/rust-macosarm64-quickStart-instrumentApplication.md';\nimport APM_rust_macOsARM64_quickStart_runApplication from '../Modules/APM/Rust/md-docs/MacOsARM64/QuickStart/rust-macosarm64-quickStart-runApplication.md';\n// Rust-MacOsARM64-recommended\nimport APM_rust_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Rust/md-docs/MacOsARM64/Recommended/rust-macosarm64-recommended-installOtelCollector.md';\nimport APM_rust_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Rust/md-docs/MacOsARM64/Recommended/rust-macosarm64-recommended-instrumentApplication.md';\nimport APM_rust_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Rust/md-docs/MacOsARM64/Recommended/rust-macosarm64-recommended-runApplication.md';\n// Rust DOcker\nimport APM_rust_windows_quickStart_instrumentApplication from '../Modules/APM/Rust/md-docs/Windows/QuickStart/rust-windows-quickStart-instrumentApplication.md';\nimport APM_rust_windows_quickStart_runApplication from '../Modules/APM/Rust/md-docs/Windows/QuickStart/rust-windows-quickStart-runApplication.md';\n// Rust-LinuxAMD64-recommended\nimport APM_rust_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Rust/md-docs/Windows/Recommended/rust-windows-recommended-installOtelCollector.md';\nimport APM_rust_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Rust/md-docs/Windows/Recommended/rust-windows-recommended-instrumentApplication.md';\nimport APM_rust_windows_recommendedSteps_runApplication from '../Modules/APM/Rust/md-docs/Windows/Recommended/rust-windows-recommended-runApplication.md';\n// Swift Docker\nimport APM_swift_docker_quickStart_instrumentApplication from '../Modules/APM/Swift/md-docs/Docker/QuickStart/swift-docker-quickStart-instrumentApplication.md';\nimport APM_swift_docker_quickStart_runApplication from '../Modules/APM/Swift/md-docs/Docker/QuickStart/swift-docker-quickStart-runApplication.md';\n// Swift-LinuxAMD64-recommended\nimport APM_swift_docker_recommendedSteps_setupOtelCollector from '../Modules/APM/Swift/md-docs/Docker/Recommended/swift-docker-recommended-installOtelCollector.md';\nimport APM_swift_docker_recommendedSteps_instrumentApplication from '../Modules/APM/Swift/md-docs/Docker/Recommended/swift-docker-recommended-instrumentApplication.md';\nimport APM_swift_docker_recommendedSteps_runApplication from '../Modules/APM/Swift/md-docs/Docker/Recommended/swift-docker-recommended-runApplication.md';\n// Swift-Kubernetes\nimport APM_swift_kubernetes_recommendedSteps_setupOtelCollector from '../Modules/APM/Swift/md-docs/Kubernetes/swift-kubernetes-installOtelCollector.md';\nimport APM_swift_kubernetes_recommendedSteps_instrumentApplication from '../Modules/APM/Swift/md-docs/Kubernetes/swift-kubernetes-instrumentApplication.md';\nimport APM_swift_kubernetes_recommendedSteps_runApplication from '../Modules/APM/Swift/md-docs/Kubernetes/swift-kubernetes-runApplication.md';\n// Swift-LinuxAMD64-quickstart\nimport APM_swift_linuxAMD64_quickStart_instrumentApplication from '../Modules/APM/Swift/md-docs/LinuxAMD64/QuickStart/swift-linuxamd64-quickStart-instrumentApplication.md';\nimport APM_swift_linuxAMD64_quickStart_runApplication from '../Modules/APM/Swift/md-docs/LinuxAMD64/QuickStart/swift-linuxamd64-quickStart-runApplication.md';\n// Swift-LinuxAMD64-recommended\nimport APM_swift_linuxAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Swift/md-docs/LinuxAMD64/Recommended/swift-linuxamd64-recommended-installOtelCollector.md';\nimport APM_swift_linuxAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Swift/md-docs/LinuxAMD64/Recommended/swift-linuxamd64-recommended-instrumentApplication.md';\nimport APM_swift_linuxAMD64_recommendedSteps_runApplication from '../Modules/APM/Swift/md-docs/LinuxAMD64/Recommended/swift-linuxamd64-recommended-runApplication.md';\n// Swift-LinuxARM64-quickstart\nimport APM_swift_linuxARM64_quickStart_instrumentApplication from '../Modules/APM/Swift/md-docs/LinuxARM64/QuickStart/swift-linuxarm64-quickStart-instrumentApplication.md';\nimport APM_swift_linuxARM64_quickStart_runApplication from '../Modules/APM/Swift/md-docs/LinuxARM64/QuickStart/swift-linuxarm64-quickStart-runApplication.md';\n// Swift-LinuxARM64-recommended\nimport APM_swift_linuxARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Swift/md-docs/LinuxARM64/Recommended/swift-linuxarm64-recommended-installOtelCollector.md';\nimport APM_swift_linuxARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Swift/md-docs/LinuxARM64/Recommended/swift-linuxarm64-recommended-instrumentApplication.md';\nimport APM_swift_linuxARM64_recommendedSteps_runApplication from '../Modules/APM/Swift/md-docs/LinuxARM64/Recommended/swift-linuxarm64-recommended-runApplication.md';\n// Swift-MacOsAMD64-quickstart\nimport APM_swift_macOsAMD64_quickStart_instrumentApplication from '../Modules/APM/Swift/md-docs/MacOsAMD64/QuickStart/swift-macosamd64-quickStart-instrumentApplication.md';\nimport APM_swift_macOsAMD64_quickStart_runApplication from '../Modules/APM/Swift/md-docs/MacOsAMD64/QuickStart/swift-macosamd64-quickStart-runApplication.md';\n// Swift-MacOsAMD64-recommended\nimport APM_swift_macOsAMD64_recommendedSteps_setupOtelCollector from '../Modules/APM/Swift/md-docs/MacOsAMD64/Recommended/swift-macosamd64-recommended-installOtelCollector.md';\nimport APM_swift_macOsAMD64_recommendedSteps_instrumentApplication from '../Modules/APM/Swift/md-docs/MacOsAMD64/Recommended/swift-macosamd64-recommended-instrumentApplication.md';\nimport APM_swift_macOsAMD64_recommendedSteps_runApplication from '../Modules/APM/Swift/md-docs/MacOsAMD64/Recommended/swift-macosamd64-recommended-runApplication.md';\n// Swift-MacOsARM64-quickstart\nimport APM_swift_macOsARM64_quickStart_instrumentApplication from '../Modules/APM/Swift/md-docs/MacOsARM64/QuickStart/swift-macosarm64-quickStart-instrumentApplication.md';\nimport APM_swift_macOsARM64_quickStart_runApplication from '../Modules/APM/Swift/md-docs/MacOsARM64/QuickStart/swift-macosarm64-quickStart-runApplication.md';\n// Swift-MacOsARM64-recommended\nimport APM_swift_macOsARM64_recommendedSteps_setupOtelCollector from '../Modules/APM/Swift/md-docs/MacOsARM64/Recommended/swift-macosarm64-recommended-installOtelCollector.md';\nimport APM_swift_macOsARM64_recommendedSteps_instrumentApplication from '../Modules/APM/Swift/md-docs/MacOsARM64/Recommended/swift-macosarm64-recommended-instrumentApplication.md';\nimport APM_swift_macOsARM64_recommendedSteps_runApplication from '../Modules/APM/Swift/md-docs/MacOsARM64/Recommended/swift-macosarm64-recommended-runApplication.md';\n// Swift Docker\nimport APM_swift_windows_quickStart_instrumentApplication from '../Modules/APM/Swift/md-docs/Windows/QuickStart/swift-windows-quickStart-instrumentApplication.md';\nimport APM_swift_windows_quickStart_runApplication from '../Modules/APM/Swift/md-docs/Windows/QuickStart/swift-windows-quickStart-runApplication.md';\n// Swift-LinuxAMD64-recommended\nimport APM_swift_windows_recommendedSteps_setupOtelCollector from '../Modules/APM/Swift/md-docs/Windows/Recommended/swift-windows-recommended-installOtelCollector.md';\nimport APM_swift_windows_recommendedSteps_instrumentApplication from '../Modules/APM/Swift/md-docs/Windows/Recommended/swift-windows-recommended-instrumentApplication.md';\nimport APM_swift_windows_recommendedSteps_runApplication from '../Modules/APM/Swift/md-docs/Windows/Recommended/swift-windows-recommended-runApplication.md';\n\nexport const ApmDocFilePaths = {\n\t// Aust\n\n\t/// //// Java Start\n\n\t// SpringBoot-Kubernetes\n\tAPM_java_springBoot_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_java_springBoot_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_java_springBoot_kubernetes_recommendedSteps_runApplication,\n\tAPM_java_springBoot_kubernetes_recommendedSteps_runApplication_producers,\n\tAPM_java_springBoot_kubernetes_recommendedSteps_runApplication_consumers,\n\n\t// SpringBoot-LinuxAMD64-recommended\n\tAPM_java_springBoot_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_java_springBoot_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_java_springBoot_linuxAMD64_recommendedSteps_runApplication,\n\n\t// SpringBoot-LinuxAMD64-quickstart\n\tAPM_java_springBoot_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_java_springBoot_linuxAMD64_quickStart_runApplication,\n\n\t// SpringBoot-LinuxARM64-recommended\n\tAPM_java_springBoot_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_java_springBoot_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_java_springBoot_linuxARM64_recommendedSteps_runApplication,\n\n\t// SpringBoot-LinuxARM64-quickstart\n\tAPM_java_springBoot_linuxARM64_quickStart_instrumentApplication,\n\tAPM_java_springBoot_linuxARM64_quickStart_runApplication,\n\n\t// SpringBoot-MacOsAMD64-recommended\n\tAPM_java_springBoot_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_java_springBoot_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_java_springBoot_macOsAMD64_recommendedSteps_runApplication,\n\n\t// SpringBoot-MacOsAMD64-quickstart\n\tAPM_java_springBoot_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_java_springBoot_macOsAMD64_quickStart_runApplication,\n\n\t// SpringBoot-MacOsARM64-recommended\n\tAPM_java_springBoot_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_java_springBoot_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_java_springBoot_macOsARM64_recommendedSteps_runApplication,\n\n\t// SpringBoot-MacOsARM64-quickstart\n\tAPM_java_springBoot_macOsARM64_quickStart_instrumentApplication,\n\tAPM_java_springBoot_macOsARM64_quickStart_runApplication,\n\n\t//\t------------------------------------------------------------------------------------------------\n\n\t// Tomcat\n\n\t// Tomcat-Kubernetes\n\tAPM_java_tomcat_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_java_tomcat_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_java_tomcat_kubernetes_recommendedSteps_runApplication,\n\n\t// Tomcat-LinuxAMD64-recommended\n\tAPM_java_tomcat_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_java_tomcat_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_java_tomcat_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Tomcat-LinuxAMD64-quickstart\n\tAPM_java_tomcat_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_java_tomcat_linuxAMD64_quickStart_runApplication,\n\n\t// Tomcat-LinuxARM64-recommended\n\tAPM_java_tomcat_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_java_tomcat_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_java_tomcat_linuxARM64_recommendedSteps_runApplication,\n\n\t// Tomcat-LinuxARM64-quickstart\n\tAPM_java_tomcat_linuxARM64_quickStart_instrumentApplication,\n\tAPM_java_tomcat_linuxARM64_quickStart_runApplication,\n\n\t// Tomcat-MacOsAMD64-recommended\n\tAPM_java_tomcat_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_java_tomcat_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_java_tomcat_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Tomcat-MacOsAMD64-quickstart\n\tAPM_java_tomcat_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_java_tomcat_macOsAMD64_quickStart_runApplication,\n\n\t// Tomcat-MacOsARM64-recommended\n\tAPM_java_tomcat_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_java_tomcat_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_java_tomcat_macOsARM64_recommendedSteps_runApplication,\n\n\t// Tomcat-MacOsARM64-quickstart\n\tAPM_java_tomcat_macOsARM64_quickStart_instrumentApplication,\n\tAPM_java_tomcat_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\t// Jboss\n\n\t// Jboss-Kubernetes\n\tAPM_java_jboss_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_java_jboss_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_java_jboss_kubernetes_recommendedSteps_runApplication,\n\n\t// Jboss-LinuxAMD64-recommended\n\tAPM_java_jboss_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_java_jboss_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_java_jboss_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Jboss-LinuxAMD64-quickstart\n\tAPM_java_jboss_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_java_jboss_linuxAMD64_quickStart_runApplication,\n\n\t// Jboss-LinuxARM64-recommended\n\tAPM_java_jboss_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_java_jboss_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_java_jboss_linuxARM64_recommendedSteps_runApplication,\n\n\t// Jboss-LinuxARM64-quickstart\n\tAPM_java_jboss_linuxARM64_quickStart_instrumentApplication,\n\tAPM_java_jboss_linuxARM64_quickStart_runApplication,\n\n\t// Jboss-MacOsAMD64-recommended\n\tAPM_java_jboss_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_java_jboss_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_java_jboss_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Jboss-MacOsAMD64-quickstart\n\tAPM_java_jboss_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_java_jboss_macOsAMD64_quickStart_runApplication,\n\n\t// Jboss-MacOsARM64-recommended\n\tAPM_java_jboss_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_java_jboss_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_java_jboss_macOsARM64_recommendedSteps_runApplication,\n\n\t// Jboss-MacOsARM64-quickstart\n\tAPM_java_jboss_macOsARM64_quickStart_instrumentApplication,\n\tAPM_java_jboss_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t// Others\n\n\t// Other-Kubernetes\n\tAPM_java_other_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_java_other_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_java_other_kubernetes_recommendedSteps_runApplication,\n\n\t// Other-LinuxAMD64-recommended\n\tAPM_java_other_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_java_other_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_java_other_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Other-LinuxAMD64-quickstart\n\tAPM_java_other_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_java_other_linuxAMD64_quickStart_runApplication,\n\n\t// Other-LinuxARM64-recommended\n\tAPM_java_other_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_java_other_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_java_other_linuxARM64_recommendedSteps_runApplication,\n\n\t// Other-LinuxARM64-quickstart\n\tAPM_java_other_linuxARM64_quickStart_instrumentApplication,\n\tAPM_java_other_linuxARM64_quickStart_runApplication,\n\n\t// Other-MacOsAMD64-recommended\n\tAPM_java_other_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_java_other_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_java_other_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Other-MacOsAMD64-quickstart\n\tAPM_java_other_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_java_other_macOsAMD64_quickStart_runApplication,\n\n\t// Other-MacOsARM64-recommended\n\tAPM_java_other_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_java_other_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_java_other_macOsARM64_recommendedSteps_runApplication,\n\n\t// Other-MacOsARM64-quickstart\n\tAPM_java_other_macOsARM64_quickStart_instrumentApplication,\n\tAPM_java_other_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t/// //// Java Done\n\n\t/// //// Python Start\n\n\t// Django\n\n\t// Django-Kubernetes\n\tAPM_python_django_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_python_django_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_python_django_kubernetes_recommendedSteps_runApplication,\n\n\t// Django-LinuxAMD64-recommended\n\tAPM_python_django_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_django_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_django_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Django-LinuxAMD64-quickstart\n\tAPM_python_django_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_python_django_linuxAMD64_quickStart_runApplication,\n\n\t// Django-LinuxARM64-recommended\n\tAPM_python_django_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_django_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_django_linuxARM64_recommendedSteps_runApplication,\n\n\t// Django-LinuxARM64-quickstart\n\tAPM_python_django_linuxARM64_quickStart_instrumentApplication,\n\tAPM_python_django_linuxARM64_quickStart_runApplication,\n\n\t// Django-MacOsAMD64-recommended\n\tAPM_python_django_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_django_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_django_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Django-MacOsAMD64-quickstart\n\tAPM_python_django_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_python_django_macOsAMD64_quickStart_runApplication,\n\n\t// Django-MacOsARM64-recommended\n\tAPM_python_django_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_django_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_django_macOsARM64_recommendedSteps_runApplication,\n\n\t// Django-MacOsARM64-quickstart\n\tAPM_python_django_macOsARM64_quickStart_instrumentApplication,\n\tAPM_python_django_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t// Flask\n\n\t// Flask-Kubernetes\n\tAPM_python_flask_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_python_flask_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_python_flask_kubernetes_recommendedSteps_runApplication,\n\n\t// Flask-LinuxAMD64-recommended\n\tAPM_python_flask_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_flask_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_flask_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Flask-LinuxAMD64-quickstart\n\tAPM_python_flask_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_python_flask_linuxAMD64_quickStart_runApplication,\n\n\t// Flask-LinuxARM64-recommended\n\tAPM_python_flask_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_flask_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_flask_linuxARM64_recommendedSteps_runApplication,\n\n\t// Flask-LinuxARM64-quickstart\n\tAPM_python_flask_linuxARM64_quickStart_instrumentApplication,\n\tAPM_python_flask_linuxARM64_quickStart_runApplication,\n\n\t// Flask-MacOsAMD64-recommended\n\tAPM_python_flask_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_flask_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_flask_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Flask-MacOsAMD64-quickstart\n\tAPM_python_flask_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_python_flask_macOsAMD64_quickStart_runApplication,\n\n\t// Flask-MacOsARM64-recommended\n\tAPM_python_flask_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_flask_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_flask_macOsARM64_recommendedSteps_runApplication,\n\n\t// Flask-MacOsARM64-quickstart\n\tAPM_python_flask_macOsARM64_quickStart_instrumentApplication,\n\tAPM_python_flask_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t// FastAPI\n\n\t// FastAPI-Kubernetes\n\tAPM_python_fastAPI_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_python_fastAPI_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_python_fastAPI_kubernetes_recommendedSteps_runApplication,\n\n\t// FastAPI-LinuxAMD64-recommended\n\tAPM_python_fastAPI_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_fastAPI_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_fastAPI_linuxAMD64_recommendedSteps_runApplication,\n\n\t// FastAPI-LinuxAMD64-quickstart\n\tAPM_python_fastAPI_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_python_fastAPI_linuxAMD64_quickStart_runApplication,\n\n\t// FastAPI-LinuxARM64-recommended\n\tAPM_python_fastAPI_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_fastAPI_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_fastAPI_linuxARM64_recommendedSteps_runApplication,\n\n\t// FastAPI-LinuxARM64-quickstart\n\tAPM_python_fastAPI_linuxARM64_quickStart_instrumentApplication,\n\tAPM_python_fastAPI_linuxARM64_quickStart_runApplication,\n\n\t// FastAPI-MacOsAMD64-recommended\n\tAPM_python_fastAPI_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_fastAPI_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_fastAPI_macOsAMD64_recommendedSteps_runApplication,\n\n\t// FastAPI-MacOsAMD64-quickstart\n\tAPM_python_fastAPI_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_python_fastAPI_macOsAMD64_quickStart_runApplication,\n\n\t// FastAPI-MacOsARM64-recommended\n\tAPM_python_fastAPI_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_fastAPI_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_fastAPI_macOsARM64_recommendedSteps_runApplication,\n\n\t// FastAPI-MacOsARM64-quickstart\n\tAPM_python_fastAPI_macOsARM64_quickStart_instrumentApplication,\n\tAPM_python_fastAPI_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t// Falcon\n\n\t// Falcon-Kubernetes\n\tAPM_python_falcon_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_python_falcon_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_python_falcon_kubernetes_recommendedSteps_runApplication,\n\n\t// Falcon-LinuxAMD64-recommended\n\tAPM_python_falcon_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_falcon_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_falcon_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Falcon-LinuxAMD64-quickstart\n\tAPM_python_falcon_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_python_falcon_linuxAMD64_quickStart_runApplication,\n\n\t// Falcon-LinuxARM64-recommended\n\tAPM_python_falcon_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_falcon_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_falcon_linuxARM64_recommendedSteps_runApplication,\n\n\t// Falcon-LinuxARM64-quickstart\n\tAPM_python_falcon_linuxARM64_quickStart_instrumentApplication,\n\tAPM_python_falcon_linuxARM64_quickStart_runApplication,\n\n\t// Falcon-MacOsAMD64-recommended\n\tAPM_python_falcon_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_falcon_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_falcon_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Falcon-MacOsAMD64-quickstart\n\tAPM_python_falcon_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_python_falcon_macOsAMD64_quickStart_runApplication,\n\n\t// Falcon-MacOsARM64-recommended\n\tAPM_python_falcon_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_falcon_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_falcon_macOsARM64_recommendedSteps_runApplication,\n\n\t// Falcon-MacOsARM64-quickstart\n\tAPM_python_falcon_macOsARM64_quickStart_instrumentApplication,\n\tAPM_python_falcon_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t// Others\n\n\t// Others-Kubernetes\n\tAPM_python_other_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_python_other_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_python_other_kubernetes_recommendedSteps_runApplication,\n\n\t// Others-LinuxAMD64-recommended\n\tAPM_python_other_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_other_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_other_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Others-LinuxAMD64-quickstart\n\tAPM_python_other_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_python_other_linuxAMD64_quickStart_runApplication,\n\n\t// Others-LinuxARM64-recommended\n\tAPM_python_other_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_other_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_other_linuxARM64_recommendedSteps_runApplication,\n\n\t// Others-LinuxARM64-quickstart\n\tAPM_python_other_linuxARM64_quickStart_instrumentApplication,\n\tAPM_python_other_linuxARM64_quickStart_runApplication,\n\n\t// Others-MacOsAMD64-recommended\n\tAPM_python_other_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_python_other_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_python_other_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Others-MacOsAMD64-quickstart\n\tAPM_python_other_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_python_other_macOsAMD64_quickStart_runApplication,\n\n\t// Others-MacOsARM64-recommended\n\tAPM_python_other_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_python_other_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_python_other_macOsARM64_recommendedSteps_runApplication,\n\n\t// Others-MacOsARM64-quickstart\n\tAPM_python_other_macOsARM64_quickStart_instrumentApplication,\n\tAPM_python_other_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t/// //// Python Done\n\n\t/// //// JavaScript Start\n\n\t// Express\n\n\t// Express-Kubernetes\n\tAPM_javascript_express_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_express_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_javascript_express_kubernetes_recommendedSteps_runApplication,\n\n\t// Express-LinuxAMD64-recommended\n\tAPM_javascript_express_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_express_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_express_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Express-LinuxAMD64-quickstart\n\tAPM_javascript_express_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_express_linuxAMD64_quickStart_runApplication,\n\n\t// Express-LinuxARM64-recommended\n\tAPM_javascript_express_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_express_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_express_linuxARM64_recommendedSteps_runApplication,\n\n\t// Express-LinuxARM64-quickstart\n\tAPM_javascript_express_linuxARM64_quickStart_instrumentApplication,\n\tAPM_javascript_express_linuxARM64_quickStart_runApplication,\n\n\t// Express-MacOsAMD64-recommended\n\tAPM_javascript_express_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_express_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_express_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Express-MacOsAMD64-quickstart\n\tAPM_javascript_express_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_express_macOsAMD64_quickStart_runApplication,\n\n\t// Express-MacOsARM64-recommended\n\tAPM_javascript_express_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_express_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_express_macOsARM64_recommendedSteps_runApplication,\n\n\t// Express-MacOsARM64-quickstart\n\tAPM_javascript_express_macOsARM64_quickStart_instrumentApplication,\n\tAPM_javascript_express_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t// NestJS\n\n\t// NestJS-Kubernetes\n\tAPM_javascript_nestjs_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nestjs_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nestjs_kubernetes_recommendedSteps_runApplication,\n\n\t// NestJS-LinuxAMD64-recommended\n\tAPM_javascript_nestjs_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nestjs_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nestjs_linuxAMD64_recommendedSteps_runApplication,\n\n\t// NestJS-LinuxAMD64-quickstart\n\tAPM_javascript_nestjs_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_nestjs_linuxAMD64_quickStart_runApplication,\n\n\t// NestJS-LinuxARM64-recommended\n\tAPM_javascript_nestjs_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nestjs_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nestjs_linuxARM64_recommendedSteps_runApplication,\n\n\t// NestJS-LinuxARM64-quinestjs\n\tAPM_javascript_nestjs_linuxARM64_quickStart_instrumentApplication,\n\tAPM_javascript_nestjs_linuxARM64_quickStart_runApplication,\n\n\t// NestJS-MacOsAMD64-recommended\n\tAPM_javascript_nestjs_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nestjs_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nestjs_macOsAMD64_recommendedSteps_runApplication,\n\n\t// NestJS-MacOsAMD64-quickstart\n\tAPM_javascript_nestjs_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_nestjs_macOsAMD64_quickStart_runApplication,\n\n\t// NestJS-MacOsARM64-recommended\n\tAPM_javascript_nestjs_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nestjs_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nestjs_macOsARM64_recommendedSteps_runApplication,\n\n\t// NestJS-MacOsARM64-quickstart\n\tAPM_javascript_nestjs_macOsARM64_quickStart_instrumentApplication,\n\tAPM_javascript_nestjs_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t// NodeJS\n\n\t// NodeJS-Kubernetes\n\tAPM_javascript_nodejs_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nodejs_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nodejs_kubernetes_recommendedSteps_runApplication,\n\n\t// NodeJS-LinuxAMD64-recommended\n\tAPM_javascript_nodejs_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nodejs_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nodejs_linuxAMD64_recommendedSteps_runApplication,\n\n\t// NodeJS-LinuxAMD64-quickstart\n\tAPM_javascript_nodejs_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_nodejs_linuxAMD64_quickStart_runApplication,\n\n\t// NodeJS-LinuxARM64-recommended\n\tAPM_javascript_nodejs_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nodejs_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nodejs_linuxARM64_recommendedSteps_runApplication,\n\n\t// NodeJS-LinuxARM64-quinestjs\n\tAPM_javascript_nodejs_linuxARM64_quickStart_instrumentApplication,\n\tAPM_javascript_nodejs_linuxARM64_quickStart_runApplication,\n\n\t// NodeJS-MacOsAMD64-recommended\n\tAPM_javascript_nodejs_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nodejs_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nodejs_macOsAMD64_recommendedSteps_runApplication,\n\n\t// NodeJS-MacOsAMD64-quickstart\n\tAPM_javascript_nodejs_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_nodejs_macOsAMD64_quickStart_runApplication,\n\n\t// NodeJS-MacOsARM64-recommended\n\tAPM_javascript_nodejs_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nodejs_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nodejs_macOsARM64_recommendedSteps_runApplication,\n\n\t// NodeJS-MacOsARM64-quickstart\n\tAPM_javascript_nodejs_macOsARM64_quickStart_instrumentApplication,\n\tAPM_javascript_nodejs_macOsARM64_quickStart_runApplication,\n\n\t/// React JS\n\n\t// ReeactJS-Kubernetes\n\tAPM_javascript_reactjs_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_reactjs_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_javascript_reactjs_kubernetes_recommendedSteps_runApplication,\n\n\t// ReactJS-LinuxAMD64-quickstart\n\tAPM_javascript_reactjs_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_reactjs_linuxAMD64_quickStart_runApplication,\n\n\t// // ReactJS-LinuxAMD64-recommended\n\tAPM_javascript_reactjs_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_reactjs_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_reactjs_linuxAMD64_recommendedSteps_runApplication,\n\n\t// ReactJS-LinuxARM64-quickstart\n\tAPM_javascript_reactjs_linuxARM64_quickStart_instrumentApplication,\n\tAPM_javascript_reactjs_linuxARM64_quickStart_runApplication,\n\n\t// ReactJS-LinuxARM64-recommended\n\tAPM_javascript_reactjs_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_reactjs_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_reactjs_linuxARM64_recommendedSteps_runApplication,\n\n\t// ReactJS-MacOsAMD64-quickstart\n\tAPM_javascript_reactjs_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_reactjs_macOsAMD64_quickStart_runApplication,\n\n\t// ReactJS-MacOsAMD64-recommended\n\tAPM_javascript_reactjs_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_reactjs_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_reactjs_macOsAMD64_recommendedSteps_runApplication,\n\n\t// ReactJS-MacOsARM64-quickstart\n\tAPM_javascript_reactjs_macOsARM64_quickStart_instrumentApplication,\n\tAPM_javascript_reactjs_macOsARM64_quickStart_runApplication,\n\n\t// ReactJS-MacOsARM64-recommended\n\tAPM_javascript_reactjs_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_reactjs_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_reactjs_macOsARM64_recommendedSteps_runApplication,\n\n\t/// -------\n\n\t// Angular-Kubernetes\n\tAPM_javascript_angular_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_angular_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_javascript_angular_kubernetes_recommendedSteps_runApplication,\n\n\t// Angular-LinuxAMD64-recommended\n\tAPM_javascript_angular_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_angular_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_angular_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Angular-LinuxAMD64-quickstart\n\tAPM_javascript_angular_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_angular_linuxAMD64_quickStart_runApplication,\n\n\t// Angular-LinuxARM64-recommended\n\tAPM_javascript_angular_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_angular_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_angular_linuxARM64_recommendedSteps_runApplication,\n\n\t// Angular-LinuxARM64-quickstart\n\tAPM_javascript_angular_linuxARM64_quickStart_instrumentApplication,\n\tAPM_javascript_angular_linuxARM64_quickStart_runApplication,\n\n\t// Angular-MacOsAMD64-recommended\n\tAPM_javascript_angular_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_angular_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_angular_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Angular-MacOsAMD64-quickstart\n\tAPM_javascript_angular_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_angular_macOsAMD64_quickStart_runApplication,\n\n\t// Angular-MacOsARM64-recommended\n\tAPM_javascript_angular_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_angular_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_angular_macOsARM64_recommendedSteps_runApplication,\n\n\t// Angular-MacOsARM64-quickstart\n\tAPM_javascript_angular_macOsARM64_quickStart_instrumentApplication,\n\tAPM_javascript_angular_macOsARM64_quickStart_runApplication,\n\n\t///--------------------\n\n\t/// // JavaScript Others\n\n\tAPM_javascript_others_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_others_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_javascript_others_kubernetes_recommendedSteps_runApplication,\n\n\t// Others-JavaScript-LinuxAMD64-quickstart\n\tAPM_javascript_others_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_others_linuxAMD64_quickStart_runApplication,\n\n\t// // Others-JavaScript-LinuxAMD64-recommended\n\tAPM_javascript_others_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_others_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_others_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Others-JavaScript-LinuxARM64-quiOthers\n\tAPM_javascript_others_linuxARM64_quickStart_instrumentApplication,\n\tAPM_javascript_others_linuxARM64_quickStart_runApplication,\n\n\t// Others-JavaScript-LinuxARM64-recommended\n\tAPM_javascript_others_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_others_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_others_linuxARM64_recommendedSteps_runApplication,\n\n\t// Others-JavaScript-MacOsAMD64-quickstart\n\tAPM_javascript_others_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_javascript_others_macOsAMD64_quickStart_runApplication,\n\n\t// Others-JavaScript-MacOsAMD64-recommended\n\tAPM_javascript_others_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_others_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_others_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Others-JavaScript-MacOsARM64-quickstart\n\tAPM_javascript_others_macOsARM64_quickStart_instrumentApplication,\n\tAPM_javascript_others_macOsARM64_quickStart_runApplication,\n\n\t// Others-JavaScript-MacOsARM64-recommended\n\tAPM_javascript_others_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_others_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_javascript_others_macOsARM64_recommendedSteps_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t/// //// JavaScript Done\n\n\t/// //// Go Start\n\n\t// Go-Kubernetes\n\tAPM_go_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_go_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_go_kubernetes_recommendedSteps_runApplication,\n\n\t// Go-LinuxAMD64-recommended\n\tAPM_go_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_go_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_go_linuxAMD64_recommendedSteps_runApplication,\n\n\t// Go-LinuxAMD64-quickstart\n\tAPM_go_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_go_linuxAMD64_quickStart_runApplication,\n\n\t// Go-LinuxARM64-recommended\n\tAPM_go_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_go_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_go_linuxARM64_recommendedSteps_runApplication,\n\n\t// Go-LinuxARM64-quinestjs\n\tAPM_go_linuxARM64_quickStart_instrumentApplication,\n\tAPM_go_linuxARM64_quickStart_runApplication,\n\n\t// Go-MacOsAMD64-recommended\n\tAPM_go_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_go_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_go_macOsAMD64_recommendedSteps_runApplication,\n\n\t// Go-MacOsAMD64-quickstart\n\tAPM_go_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_go_macOsAMD64_quickStart_runApplication,\n\n\t// Go-MacOsARM64-recommended\n\tAPM_go_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_go_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_go_macOsARM64_recommendedSteps_runApplication,\n\n\t// Go-MacOsARM64-quickstart\n\tAPM_go_macOsARM64_quickStart_instrumentApplication,\n\tAPM_go_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t/// //// Go Done\n\n\t/// //// ROR Start\n\n\t// ROR-Kubernetes\n\tAPM_rails_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_rails_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_rails_kubernetes_recommendedSteps_runApplication,\n\n\t// ROR-LinuxAMD64-recommended\n\tAPM_rails_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_rails_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_rails_linuxAMD64_recommendedSteps_runApplication,\n\n\t// ROR-LinuxAMD64-quickstart\n\tAPM_rails_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_rails_linuxAMD64_quickStart_runApplication,\n\n\t// ROR-LinuxARM64-recommended\n\tAPM_rails_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_rails_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_rails_linuxARM64_recommendedSteps_runApplication,\n\n\t// ROR-LinuxARM64-quickstart\n\tAPM_rails_linuxARM64_quickStart_instrumentApplication,\n\tAPM_rails_linuxARM64_quickStart_runApplication,\n\n\t// ROR-MacOsAMD64-recommended\n\tAPM_rails_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_rails_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_rails_macOsAMD64_recommendedSteps_runApplication,\n\n\t// ROR-MacOsAMD64-quickstart\n\tAPM_rails_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_rails_macOsAMD64_quickStart_runApplication,\n\n\t// ROR-MacOsARM64-recommended\n\tAPM_rails_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_rails_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_rails_macOsARM64_recommendedSteps_runApplication,\n\n\t// ROR-MacOsARM64-quickstart\n\tAPM_rails_macOsARM64_quickStart_instrumentApplication,\n\tAPM_rails_macOsARM64_quickStart_runApplication,\n\n\t// ------------------------------------------------------------------------------------------------\n\n\t/// //// ROR Done\n\n\t/// //// .NET Start\n\n\t// dotnet-Kubernetes\n\tAPM_dotnet_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_dotnet_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_dotnet_kubernetes_recommendedSteps_runApplication,\n\n\t// dotnet-LinuxAMD64-quickstart\n\tAPM_dotnet_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_dotnet_linuxAMD64_quickStart_runApplication,\n\n\t// dotnet-LinuxAMD64-recommended\n\tAPM_dotnet_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_dotnet_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_dotnet_linuxAMD64_recommendedSteps_runApplication,\n\n\t// dotnet-LinuxARM64-quickstart\n\tAPM_dotnet_linuxARM64_quickStart_instrumentApplication,\n\tAPM_dotnet_linuxARM64_quickStart_runApplication,\n\n\t// dotnet-LinuxARM64-recommended\n\tAPM_dotnet_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_dotnet_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_dotnet_linuxARM64_recommendedSteps_runApplication,\n\n\t// dotnet-MacOsAMD64-quickstart\n\tAPM_dotnet_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_dotnet_macOsAMD64_quickStart_runApplication,\n\n\t// dotnet-MacOsAMD64-recommended\n\tAPM_dotnet_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_dotnet_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_dotnet_macOsAMD64_recommendedSteps_runApplication,\n\n\t// dotnet-MacOsARM64-quickstart\n\tAPM_dotnet_macOsARM64_quickStart_instrumentApplication,\n\tAPM_dotnet_macOsARM64_quickStart_runApplication,\n\n\t// dotnet-MacOsARM64-recommended\n\tAPM_dotnet_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_dotnet_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_dotnet_macOsARM64_recommendedSteps_runApplication,\n\n\t// Rust\n\tAPM_rust_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_rust_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_rust_kubernetes_recommendedSteps_runApplication,\n\n\tAPM_rust_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_rust_linuxAMD64_quickStart_runApplication,\n\n\tAPM_rust_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_rust_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_rust_linuxAMD64_recommendedSteps_runApplication,\n\n\tAPM_rust_linuxARM64_quickStart_instrumentApplication,\n\tAPM_rust_linuxARM64_quickStart_runApplication,\n\n\tAPM_rust_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_rust_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_rust_linuxARM64_recommendedSteps_runApplication,\n\n\tAPM_rust_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_rust_macOsAMD64_quickStart_runApplication,\n\n\tAPM_rust_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_rust_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_rust_macOsAMD64_recommendedSteps_runApplication,\n\n\tAPM_rust_macOsARM64_quickStart_instrumentApplication,\n\tAPM_rust_macOsARM64_quickStart_runApplication,\n\n\tAPM_rust_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_rust_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_rust_macOsARM64_recommendedSteps_runApplication,\n\n\t// Elixir\n\tAPM_elixir_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_elixir_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_elixir_kubernetes_recommendedSteps_runApplication,\n\n\tAPM_elixir_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_elixir_linuxAMD64_quickStart_runApplication,\n\n\tAPM_elixir_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_elixir_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_elixir_linuxAMD64_recommendedSteps_runApplication,\n\n\tAPM_elixir_linuxARM64_quickStart_instrumentApplication,\n\tAPM_elixir_linuxARM64_quickStart_runApplication,\n\n\tAPM_elixir_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_elixir_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_elixir_linuxARM64_recommendedSteps_runApplication,\n\n\tAPM_elixir_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_elixir_macOsAMD64_quickStart_runApplication,\n\n\tAPM_elixir_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_elixir_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_elixir_macOsAMD64_recommendedSteps_runApplication,\n\n\tAPM_elixir_macOsARM64_quickStart_instrumentApplication,\n\tAPM_elixir_macOsARM64_quickStart_runApplication,\n\n\tAPM_elixir_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_elixir_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_elixir_macOsARM64_recommendedSteps_runApplication,\n\n\t// Swift\n\tAPM_swift_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_swift_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_swift_kubernetes_recommendedSteps_runApplication,\n\n\tAPM_swift_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_swift_linuxAMD64_quickStart_runApplication,\n\n\tAPM_swift_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_swift_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_swift_linuxAMD64_recommendedSteps_runApplication,\n\n\tAPM_swift_linuxARM64_quickStart_instrumentApplication,\n\tAPM_swift_linuxARM64_quickStart_runApplication,\n\n\tAPM_swift_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_swift_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_swift_linuxARM64_recommendedSteps_runApplication,\n\n\tAPM_swift_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_swift_macOsAMD64_quickStart_runApplication,\n\n\tAPM_swift_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_swift_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_swift_macOsAMD64_recommendedSteps_runApplication,\n\n\tAPM_swift_macOsARM64_quickStart_instrumentApplication,\n\tAPM_swift_macOsARM64_quickStart_runApplication,\n\n\tAPM_swift_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_swift_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_swift_macOsARM64_recommendedSteps_runApplication,\n\n\tAPM_php_kubernetes_recommendedSteps_setupOtelCollector,\n\tAPM_php_kubernetes_recommendedSteps_instrumentApplication,\n\tAPM_php_kubernetes_recommendedSteps_runApplication,\n\n\tAPM_php_linuxAMD64_quickStart_instrumentApplication,\n\tAPM_php_linuxAMD64_quickStart_runApplication,\n\n\tAPM_php_linuxAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_php_linuxAMD64_recommendedSteps_instrumentApplication,\n\tAPM_php_linuxAMD64_recommendedSteps_runApplication,\n\n\tAPM_php_linuxARM64_quickStart_instrumentApplication,\n\tAPM_php_linuxARM64_quickStart_runApplication,\n\n\tAPM_php_linuxARM64_recommendedSteps_setupOtelCollector,\n\tAPM_php_linuxARM64_recommendedSteps_instrumentApplication,\n\tAPM_php_linuxARM64_recommendedSteps_runApplication,\n\n\tAPM_php_macOsAMD64_quickStart_instrumentApplication,\n\tAPM_php_macOsAMD64_quickStart_runApplication,\n\n\tAPM_php_macOsAMD64_recommendedSteps_setupOtelCollector,\n\tAPM_php_macOsAMD64_recommendedSteps_instrumentApplication,\n\tAPM_php_macOsAMD64_recommendedSteps_runApplication,\n\n\tAPM_php_macOsARM64_quickStart_instrumentApplication,\n\tAPM_php_macOsARM64_quickStart_runApplication,\n\n\tAPM_php_macOsARM64_recommendedSteps_setupOtelCollector,\n\tAPM_php_macOsARM64_recommendedSteps_instrumentApplication,\n\tAPM_php_macOsARM64_recommendedSteps_runApplication,\n\n\t/// ///// Docker Steps\n\n\tAPM_python_django_docker_quickStart_instrumentApplication,\n\tAPM_python_django_docker_quickStart_runApplication,\n\n\tAPM_python_django_docker_recommendedSteps_setupOtelCollector,\n\tAPM_python_django_docker_recommendedSteps_instrumentApplication,\n\tAPM_python_django_docker_recommendedSteps_runApplication,\n\n\tAPM_python_flask_docker_quickStart_instrumentApplication,\n\tAPM_python_flask_docker_quickStart_runApplication,\n\n\tAPM_python_flask_docker_recommendedSteps_setupOtelCollector,\n\tAPM_python_flask_docker_recommendedSteps_instrumentApplication,\n\tAPM_python_flask_docker_recommendedSteps_runApplication,\n\n\tAPM_python_fastAPI_docker_quickStart_instrumentApplication,\n\tAPM_python_fastAPI_docker_quickStart_runApplication,\n\n\tAPM_python_fastAPI_docker_recommendedSteps_setupOtelCollector,\n\tAPM_python_fastAPI_docker_recommendedSteps_instrumentApplication,\n\tAPM_python_fastAPI_docker_recommendedSteps_runApplication,\n\n\tAPM_python_falcon_docker_quickStart_instrumentApplication,\n\tAPM_python_falcon_docker_quickStart_runApplication,\n\n\tAPM_python_falcon_docker_recommendedSteps_setupOtelCollector,\n\tAPM_python_falcon_docker_recommendedSteps_instrumentApplication,\n\tAPM_python_falcon_docker_recommendedSteps_runApplication,\n\n\tAPM_python_other_docker_quickStart_instrumentApplication,\n\tAPM_python_other_docker_quickStart_runApplication,\n\n\tAPM_python_other_docker_recommendedSteps_setupOtelCollector,\n\tAPM_python_other_docker_recommendedSteps_instrumentApplication,\n\tAPM_python_other_docker_recommendedSteps_runApplication,\n\n\tAPM_javascript_nodejs_docker_quickStart_instrumentApplication,\n\tAPM_javascript_nodejs_docker_quickStart_runApplication,\n\n\tAPM_javascript_nodejs_docker_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nodejs_docker_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nodejs_docker_recommendedSteps_runApplication,\n\n\tAPM_javascript_nestjs_docker_quickStart_instrumentApplication,\n\tAPM_javascript_nestjs_docker_quickStart_runApplication,\n\n\tAPM_javascript_nestjs_docker_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nestjs_docker_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nestjs_docker_recommendedSteps_runApplication,\n\n\tAPM_javascript_express_docker_quickStart_instrumentApplication,\n\tAPM_javascript_express_docker_quickStart_runApplication,\n\n\tAPM_javascript_express_docker_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_express_docker_recommendedSteps_instrumentApplication,\n\tAPM_javascript_express_docker_recommendedSteps_runApplication,\n\n\tAPM_javascript_reactjs_docker_quickStart_instrumentApplication,\n\tAPM_javascript_reactjs_docker_quickStart_runApplication,\n\n\tAPM_javascript_reactjs_docker_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_reactjs_docker_recommendedSteps_instrumentApplication,\n\tAPM_javascript_reactjs_docker_recommendedSteps_runApplication,\n\n\tAPM_javascript_angular_docker_quickStart_instrumentApplication,\n\tAPM_javascript_angular_docker_quickStart_runApplication,\n\n\tAPM_javascript_angular_docker_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_angular_docker_recommendedSteps_instrumentApplication,\n\tAPM_javascript_angular_docker_recommendedSteps_runApplication,\n\n\tAPM_javascript_others_docker_quickStart_instrumentApplication,\n\tAPM_javascript_others_docker_quickStart_runApplication,\n\n\tAPM_javascript_others_docker_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_others_docker_recommendedSteps_instrumentApplication,\n\tAPM_javascript_others_docker_recommendedSteps_runApplication,\n\n\tAPM_java_jboss_docker_quickStart_instrumentApplication,\n\tAPM_java_jboss_docker_quickStart_runApplication,\n\n\tAPM_java_jboss_docker_recommendedSteps_setupOtelCollector,\n\tAPM_java_jboss_docker_recommendedSteps_instrumentApplication,\n\tAPM_java_jboss_docker_recommendedSteps_runApplication,\n\n\tAPM_java_springBoot_docker_quickStart_instrumentApplication,\n\tAPM_java_springBoot_docker_quickStart_runApplication,\n\n\tAPM_java_springBoot_docker_recommendedSteps_setupOtelCollector,\n\tAPM_java_springBoot_docker_recommendedSteps_instrumentApplication,\n\tAPM_java_springBoot_docker_recommendedSteps_runApplication,\n\n\tAPM_java_tomcat_docker_quickStart_instrumentApplication,\n\tAPM_java_tomcat_docker_quickStart_runApplication,\n\n\tAPM_java_tomcat_docker_recommendedSteps_setupOtelCollector,\n\tAPM_java_tomcat_docker_recommendedSteps_instrumentApplication,\n\tAPM_java_tomcat_docker_recommendedSteps_runApplication,\n\n\tAPM_java_other_docker_quickStart_instrumentApplication,\n\tAPM_java_other_docker_quickStart_runApplication,\n\n\tAPM_java_other_docker_recommendedSteps_setupOtelCollector,\n\tAPM_java_other_docker_recommendedSteps_instrumentApplication,\n\tAPM_java_other_docker_recommendedSteps_runApplication,\n\n\tAPM_go_docker_quickStart_instrumentApplication,\n\tAPM_go_docker_quickStart_runApplication,\n\n\tAPM_go_docker_recommendedSteps_setupOtelCollector,\n\tAPM_go_docker_recommendedSteps_instrumentApplication,\n\tAPM_go_docker_recommendedSteps_runApplication,\n\n\tAPM_rust_docker_quickStart_instrumentApplication,\n\tAPM_rust_docker_quickStart_runApplication,\n\n\tAPM_rust_docker_recommendedSteps_setupOtelCollector,\n\tAPM_rust_docker_recommendedSteps_instrumentApplication,\n\tAPM_rust_docker_recommendedSteps_runApplication,\n\n\tAPM_elixir_docker_quickStart_instrumentApplication,\n\tAPM_elixir_docker_quickStart_runApplication,\n\n\tAPM_elixir_docker_recommendedSteps_setupOtelCollector,\n\tAPM_elixir_docker_recommendedSteps_instrumentApplication,\n\tAPM_elixir_docker_recommendedSteps_runApplication,\n\n\tAPM_dotnet_docker_quickStart_instrumentApplication,\n\tAPM_dotnet_docker_quickStart_runApplication,\n\n\tAPM_dotnet_docker_recommendedSteps_setupOtelCollector,\n\tAPM_dotnet_docker_recommendedSteps_instrumentApplication,\n\tAPM_dotnet_docker_recommendedSteps_runApplication,\n\n\tAPM_rails_docker_quickStart_instrumentApplication,\n\tAPM_rails_docker_quickStart_runApplication,\n\n\tAPM_rails_docker_recommendedSteps_setupOtelCollector,\n\tAPM_rails_docker_recommendedSteps_instrumentApplication,\n\tAPM_rails_docker_recommendedSteps_runApplication,\n\n\tAPM_swift_docker_quickStart_instrumentApplication,\n\tAPM_swift_docker_quickStart_runApplication,\n\n\tAPM_swift_docker_recommendedSteps_setupOtelCollector,\n\tAPM_swift_docker_recommendedSteps_instrumentApplication,\n\tAPM_swift_docker_recommendedSteps_runApplication,\n\n\tAPM_php_docker_quickStart_instrumentApplication,\n\tAPM_php_docker_quickStart_runApplication,\n\n\tAPM_php_docker_recommendedSteps_setupOtelCollector,\n\tAPM_php_docker_recommendedSteps_instrumentApplication,\n\tAPM_php_docker_recommendedSteps_runApplication,\n\n\t/// ///// Windows Steps\n\n\tAPM_python_django_windows_quickStart_instrumentApplication,\n\tAPM_python_django_windows_quickStart_runApplication,\n\n\tAPM_python_django_windows_recommendedSteps_setupOtelCollector,\n\tAPM_python_django_windows_recommendedSteps_instrumentApplication,\n\tAPM_python_django_windows_recommendedSteps_runApplication,\n\n\tAPM_python_flask_windows_quickStart_instrumentApplication,\n\tAPM_python_flask_windows_quickStart_runApplication,\n\n\tAPM_python_flask_windows_recommendedSteps_setupOtelCollector,\n\tAPM_python_flask_windows_recommendedSteps_instrumentApplication,\n\tAPM_python_flask_windows_recommendedSteps_runApplication,\n\n\tAPM_python_fastAPI_windows_quickStart_instrumentApplication,\n\tAPM_python_fastAPI_windows_quickStart_runApplication,\n\n\tAPM_python_fastAPI_windows_recommendedSteps_setupOtelCollector,\n\tAPM_python_fastAPI_windows_recommendedSteps_instrumentApplication,\n\tAPM_python_fastAPI_windows_recommendedSteps_runApplication,\n\n\tAPM_python_falcon_windows_quickStart_instrumentApplication,\n\tAPM_python_falcon_windows_quickStart_runApplication,\n\n\tAPM_python_falcon_windows_recommendedSteps_setupOtelCollector,\n\tAPM_python_falcon_windows_recommendedSteps_instrumentApplication,\n\tAPM_python_falcon_windows_recommendedSteps_runApplication,\n\n\tAPM_python_other_windows_quickStart_instrumentApplication,\n\tAPM_python_other_windows_quickStart_runApplication,\n\n\tAPM_python_other_windows_recommendedSteps_setupOtelCollector,\n\tAPM_python_other_windows_recommendedSteps_instrumentApplication,\n\tAPM_python_other_windows_recommendedSteps_runApplication,\n\n\tAPM_javascript_nodejs_windows_quickStart_instrumentApplication,\n\tAPM_javascript_nodejs_windows_quickStart_runApplication,\n\n\tAPM_javascript_nodejs_windows_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nodejs_windows_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nodejs_windows_recommendedSteps_runApplication,\n\n\tAPM_javascript_nestjs_windows_quickStart_instrumentApplication,\n\tAPM_javascript_nestjs_windows_quickStart_runApplication,\n\n\tAPM_javascript_nestjs_windows_recommendedSteps_instrumentApplication,\n\tAPM_javascript_nestjs_windows_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_nestjs_windows_recommendedSteps_runApplication,\n\n\tAPM_javascript_express_windows_quickStart_instrumentApplication,\n\tAPM_javascript_express_windows_quickStart_runApplication,\n\n\tAPM_javascript_express_windows_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_express_windows_recommendedSteps_instrumentApplication,\n\tAPM_javascript_express_windows_recommendedSteps_runApplication,\n\n\tAPM_javascript_reactjs_windows_quickStart_instrumentApplication,\n\tAPM_javascript_reactjs_windows_quickStart_runApplication,\n\n\tAPM_javascript_reactjs_windows_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_reactjs_windows_recommendedSteps_instrumentApplication,\n\tAPM_javascript_reactjs_windows_recommendedSteps_runApplication,\n\n\tAPM_javascript_angular_windows_quickStart_instrumentApplication,\n\tAPM_javascript_angular_windows_quickStart_runApplication,\n\n\tAPM_javascript_angular_windows_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_angular_windows_recommendedSteps_instrumentApplication,\n\tAPM_javascript_angular_windows_recommendedSteps_runApplication,\n\n\tAPM_javascript_others_windows_quickStart_instrumentApplication,\n\tAPM_javascript_others_windows_quickStart_runApplication,\n\n\tAPM_javascript_others_windows_recommendedSteps_setupOtelCollector,\n\tAPM_javascript_others_windows_recommendedSteps_instrumentApplication,\n\tAPM_javascript_others_windows_recommendedSteps_runApplication,\n\n\tAPM_java_jboss_windows_quickStart_instrumentApplication,\n\tAPM_java_jboss_windows_quickStart_runApplication,\n\n\tAPM_java_jboss_windows_recommendedSteps_setupOtelCollector,\n\tAPM_java_jboss_windows_recommendedSteps_instrumentApplication,\n\tAPM_java_jboss_windows_recommendedSteps_runApplication,\n\n\tAPM_java_springBoot_windows_quickStart_instrumentApplication,\n\tAPM_java_springBoot_windows_quickStart_runApplication,\n\n\tAPM_java_springBoot_windows_recommendedSteps_setupOtelCollector,\n\tAPM_java_springBoot_windows_recommendedSteps_instrumentApplication,\n\tAPM_java_springBoot_windows_recommendedSteps_runApplication,\n\n\tAPM_java_tomcat_windows_quickStart_instrumentApplication,\n\tAPM_java_tomcat_windows_quickStart_runApplication,\n\n\tAPM_java_tomcat_windows_recommendedSteps_setupOtelCollector,\n\tAPM_java_tomcat_windows_recommendedSteps_instrumentApplication,\n\tAPM_java_tomcat_windows_recommendedSteps_runApplication,\n\n\tAPM_java_other_windows_quickStart_instrumentApplication,\n\tAPM_java_other_windows_quickStart_runApplication,\n\n\tAPM_java_other_windows_recommendedSteps_setupOtelCollector,\n\tAPM_java_other_windows_recommendedSteps_instrumentApplication,\n\tAPM_java_other_windows_recommendedSteps_runApplication,\n\n\tAPM_go_windows_quickStart_instrumentApplication,\n\tAPM_go_windows_quickStart_runApplication,\n\n\tAPM_go_windows_recommendedSteps_setupOtelCollector,\n\tAPM_go_windows_recommendedSteps_instrumentApplication,\n\tAPM_go_windows_recommendedSteps_runApplication,\n\n\tAPM_rust_windows_quickStart_instrumentApplication,\n\tAPM_rust_windows_quickStart_runApplication,\n\n\tAPM_rust_windows_recommendedSteps_setupOtelCollector,\n\tAPM_rust_windows_recommendedSteps_instrumentApplication,\n\tAPM_rust_windows_recommendedSteps_runApplication,\n\n\tAPM_elixir_windows_quickStart_instrumentApplication,\n\tAPM_elixir_windows_quickStart_runApplication,\n\n\tAPM_elixir_windows_recommendedSteps_setupOtelCollector,\n\tAPM_elixir_windows_recommendedSteps_instrumentApplication,\n\tAPM_elixir_windows_recommendedSteps_runApplication,\n\n\tAPM_dotnet_windows_quickStart_instrumentApplication,\n\tAPM_dotnet_windows_quickStart_runApplication,\n\n\tAPM_dotnet_windows_recommendedSteps_setupOtelCollector,\n\tAPM_dotnet_windows_recommendedSteps_instrumentApplication,\n\tAPM_dotnet_windows_recommendedSteps_runApplication,\n\n\tAPM_rails_windows_quickStart_instrumentApplication,\n\tAPM_rails_windows_quickStart_runApplication,\n\n\tAPM_rails_windows_recommendedSteps_setupOtelCollector,\n\tAPM_rails_windows_recommendedSteps_instrumentApplication,\n\tAPM_rails_windows_recommendedSteps_runApplication,\n\n\tAPM_swift_windows_quickStart_instrumentApplication,\n\tAPM_swift_windows_quickStart_runApplication,\n\n\tAPM_swift_windows_recommendedSteps_setupOtelCollector,\n\tAPM_swift_windows_recommendedSteps_instrumentApplication,\n\tAPM_swift_windows_recommendedSteps_runApplication,\n\n\tAPM_php_windows_quickStart_instrumentApplication,\n\tAPM_php_windows_quickStart_runApplication,\n\n\tAPM_php_windows_recommendedSteps_setupOtelCollector,\n\tAPM_php_windows_recommendedSteps_instrumentApplication,\n\tAPM_php_windows_recommendedSteps_runApplication,\n};\n","/* eslint-disable simple-import-sort/imports */\n\n// Application Logs Start\n\n// LINUX AMD 64\nimport AwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_setupOtelCollector from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-installOtelCollector.md';\nimport AwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_configureReceiver from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-configureReceiver.md';\nimport AwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_restartOtelCollector from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-runOtelCollector.md';\n\n// LINUX ARM 64\nimport AwsMonitoring_awsEc2ApplicationLogs_linuxARM64_setupOtelCollector from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-installOtelCollector.md';\nimport AwsMonitoring_awsEc2ApplicationLogs_linuxARM64_configureReceiver from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-configureReceiver.md';\nimport AwsMonitoring_awsEc2ApplicationLogs_linuxARM64_restartOtelCollector from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-runOtelCollector.md';\n\n// MacOS AMD 64\nimport AwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_setupOtelCollector from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-installOtelCollector.md';\nimport AwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_configureReceiver from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-configureReceiver.md';\nimport AwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_restartOtelCollector from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-runOtelCollector.md';\n\n// MacOS ARM 64\nimport AwsMonitoring_awsEc2ApplicationLogs_macOsARM64_setupOtelCollector from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-installOtelCollector.md';\nimport AwsMonitoring_awsEc2ApplicationLogs_macOsARM64_configureReceiver from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-configureReceiver.md';\nimport AwsMonitoring_awsEc2ApplicationLogs_macOsARM64_restartOtelCollector from '../Modules/AwsMonitoring/EC2ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-runOtelCollector.md';\n// Application Logs End\n\n// Hostmetrics Start\n// LINUX AMD 64\nimport AwsMonitoring_awsEc2InfrastructureMetrics_linuxAMD64_setupOtelCollector from '../Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/LinuxAMD64/hostmetrics-setupOtelCollector.md';\nimport AwsMonitoring_awsEc2InfrastructureMetrics_linuxAMD64_configureHostmetricsJson from '../Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/LinuxAMD64/hostmetrics-configureHostmetricsJson.md';\n\n// LINUX ARM 64\nimport AwsMonitoring_awsEc2InfrastructureMetrics_linuxARM64_setupOtelCollector from '../Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/LinuxARM64/hostmetrics-setupOtelCollector.md';\nimport AwsMonitoring_awsEc2InfrastructureMetrics_linuxARM64_configureHostmetricsJson from '../Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/LinuxARM64/hostmetrics-configureHostmetricsJson.md';\n\n// MacOS AMD 64\nimport AwsMonitoring_awsEc2InfrastructureMetrics_macOsAMD64_setupOtelCollector from '../Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/MacOsAMD64/hostmetrics-setupOtelCollector.md';\nimport AwsMonitoring_awsEc2InfrastructureMetrics_macOsAMD64_configureHostmetricsJson from '../Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/MacOsAMD64/hostmetrics-configureHostmetricsJson.md';\n\n// MacOS ARM 64\nimport AwsMonitoring_awsEc2InfrastructureMetrics_macOsARM64_setupOtelCollector from '../Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/MacOsARM64/hostmetrics-setupOtelCollector.md';\nimport AwsMonitoring_awsEc2InfrastructureMetrics_macOsARM64_configureHostmetricsJson from '../Modules/AwsMonitoring/EC2InfrastructureMetrics/md-docs/MacOsARM64/hostmetrics-configureHostmetricsJson.md';\n\n// Hostmetrics End\n// AwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_restartOtelCollector,\n\nimport AwsMonitoring_awsEcsEc2_setupDaemonService from '../Modules/AwsMonitoring/ECSEc2/md-docs/ecsEc2-setupDeamonService.md';\nimport AwsMonitoring_awsEcsEc2_createOtelConfig from '../Modules/AwsMonitoring/ECSEc2/md-docs/ecsEc2-createOtelConfig.md';\nimport AwsMonitoring_awsEcsEc2_createDaemonService from '../Modules/AwsMonitoring/ECSEc2/md-docs/ecsEc2-createDaemonService.md';\nimport AwsMonitoring_awsEcsEc2_ecsSendData from '../Modules/AwsMonitoring/ECSEc2/md-docs/ecsEc2-sendData.md';\n\nimport AwsMonitoring_awsEcsExternal_setupDaemonService from '../Modules/AwsMonitoring/ECSExternal/md-docs/ecsExternal-setupDeamonService.md';\nimport AwsMonitoring_awsEcsExternal_createOtelConfig from '../Modules/AwsMonitoring/ECSExternal/md-docs/ecsExternal-createOtelConfig.md';\nimport AwsMonitoring_awsEcsExternal_createDaemonService from '../Modules/AwsMonitoring/ECSExternal/md-docs/ecsExternal-createDaemonService.md';\nimport AwsMonitoring_awsEcsExternal_ecsSendData from '../Modules/AwsMonitoring/ECSExternal/md-docs/ecsExternal-sendData.md';\n\nimport AwsMonitoring_awsEcsFargate_createOtelConfig from '../Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-createOtelConfig.md';\nimport AwsMonitoring_awsEcsFargate_createSidecarCollectorContainer from '../Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-createSidecarCollectorContainer.md';\nimport AwsMonitoring_awsEcsFargate_deployTaskDefinition from '../Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-deployTaskDefinition.md';\nimport AwsMonitoring_awsEcsFargate_ecsSendData from '../Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-sendData.md';\nimport AwsMonitoring_awsEcsFargate_ecsSendLogsData from '../Modules/AwsMonitoring/ECSFargate/md-docs/ecsFargate-sendLogs.md';\n\n// AWS EKS\n\nimport AwsMonitoring_awsEks_setupOtelCollector from '../Modules/AwsMonitoring/EKS/eks-installOtelCollector.md';\nimport AwsMonitoring_awsEks_monitorDashboard from '../Modules/AwsMonitoring/EKS/eks-monitorUsingDashboard.md';\n\nexport const AwsMonitoringDocFilePaths = {\n\t/// /// AWS EC2 Application Logs\n\n\t// Linux AMD64\n\tAwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_setupOtelCollector,\n\tAwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_configureReceiver,\n\tAwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_restartOtelCollector,\n\t// LINUX ARM 64\n\tAwsMonitoring_awsEc2ApplicationLogs_linuxARM64_setupOtelCollector,\n\tAwsMonitoring_awsEc2ApplicationLogs_linuxARM64_configureReceiver,\n\tAwsMonitoring_awsEc2ApplicationLogs_linuxARM64_restartOtelCollector,\n\t// MacOS AMD 64\n\tAwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_setupOtelCollector,\n\tAwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_configureReceiver,\n\tAwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_restartOtelCollector,\n\t// MacOS ARM 64\n\tAwsMonitoring_awsEc2ApplicationLogs_macOsARM64_setupOtelCollector,\n\tAwsMonitoring_awsEc2ApplicationLogs_macOsARM64_configureReceiver,\n\tAwsMonitoring_awsEc2ApplicationLogs_macOsARM64_restartOtelCollector,\n\n\t/// /// AWS EC2 Infrastructure Metrics\n\n\t// Linux AMD64\n\tAwsMonitoring_awsEc2InfrastructureMetrics_linuxAMD64_setupOtelCollector,\n\tAwsMonitoring_awsEc2InfrastructureMetrics_linuxAMD64_configureHostmetricsJson,\n\n\t// Linux ARM64\n\tAwsMonitoring_awsEc2InfrastructureMetrics_linuxARM64_setupOtelCollector,\n\tAwsMonitoring_awsEc2InfrastructureMetrics_linuxARM64_configureHostmetricsJson,\n\n\t// MacOS AMD64\n\tAwsMonitoring_awsEc2InfrastructureMetrics_macOsAMD64_setupOtelCollector,\n\tAwsMonitoring_awsEc2InfrastructureMetrics_macOsAMD64_configureHostmetricsJson,\n\n\t// MacOS ARM64\n\tAwsMonitoring_awsEc2InfrastructureMetrics_macOsARM64_setupOtelCollector,\n\tAwsMonitoring_awsEc2InfrastructureMetrics_macOsARM64_configureHostmetricsJson,\n\n\t/// //// AWS ECS EC2\n\tAwsMonitoring_awsEcsEc2_setupDaemonService,\n\tAwsMonitoring_awsEcsEc2_createOtelConfig,\n\tAwsMonitoring_awsEcsEc2_createDaemonService,\n\tAwsMonitoring_awsEcsEc2_ecsSendData,\n\n\t/// //// AWS ECS External\n\tAwsMonitoring_awsEcsExternal_setupDaemonService,\n\tAwsMonitoring_awsEcsExternal_createOtelConfig,\n\tAwsMonitoring_awsEcsExternal_createDaemonService,\n\tAwsMonitoring_awsEcsExternal_ecsSendData,\n\n\t/// //// AWS ECS Fargate\n\tAwsMonitoring_awsEcsFargate_createOtelConfig,\n\tAwsMonitoring_awsEcsFargate_createSidecarCollectorContainer,\n\tAwsMonitoring_awsEcsFargate_deployTaskDefinition,\n\tAwsMonitoring_awsEcsFargate_ecsSendData,\n\tAwsMonitoring_awsEcsFargate_ecsSendLogsData,\n\n\t/// /// AWS EKS\n\tAwsMonitoring_awsEks_setupOtelCollector,\n\tAwsMonitoring_awsEks_monitorDashboard,\n};\n","import AzureMonitoring_azureAks_setupCentralCollector from '../Modules/AzureMonitoring/AKS/aks-installCentralCollector.md';\nimport AzureMonitoring_azureAks_sendLogs from '../Modules/AzureMonitoring/AKS/aks-logs.md';\nimport AzureMonitoring_azureAks_sendMetrics from '../Modules/AzureMonitoring/AKS/aks-metrics.md';\nimport AzureMonitoring_azureAks_setupAzureEventsHub from '../Modules/AzureMonitoring/AKS/aks-setupEventsHub.md';\nimport AzureMonitoring_azureAks_sendTraces from '../Modules/AzureMonitoring/AKS/aks-tracing.md';\n// Azure App Service\nimport AzureMonitoring_azureAppService_setupCentralCollector from '../Modules/AzureMonitoring/AppService/appService-installCentralCollector.md';\nimport AzureMonitoring_azureAppService_sendLogs from '../Modules/AzureMonitoring/AppService/appService-logs.md';\nimport AzureMonitoring_azureAppService_sendMetrics from '../Modules/AzureMonitoring/AppService/appService-metrics.md';\nimport AzureMonitoring_azureAppService_setupAzureEventsHub from '../Modules/AzureMonitoring/AppService/appService-setupEventsHub.md';\nimport AzureMonitoring_azureAppService_sendTraces from '../Modules/AzureMonitoring/AppService/appService-tracing.md';\n// Azure Blob Storage\nimport AzureMonitoring_azureBlobStorage_setupCentralCollector from '../Modules/AzureMonitoring/BlobStorage/blobStorage-installCentralCollector.md';\nimport AzureMonitoring_azureBlobStorage_sendLogs from '../Modules/AzureMonitoring/BlobStorage/blobStorage-logs.md';\nimport AzureMonitoring_azureBlobStorage_sendMetrics from '../Modules/AzureMonitoring/BlobStorage/blobStorage-metrics.md';\nimport AzureMonitoring_azureBlobStorage_setupAzureEventsHub from '../Modules/AzureMonitoring/BlobStorage/blobStorage-setupEventsHub.md';\n// Azure Container Apps\nimport AzureMonitoring_azureContainerApps_setupCentralCollector from '../Modules/AzureMonitoring/ContainerApps/containerApps-installCentralCollector.md';\nimport AzureMonitoring_azureContainerApps_sendLogs from '../Modules/AzureMonitoring/ContainerApps/containerApps-logs.md';\nimport AzureMonitoring_azureContainerApps_sendMetrics from '../Modules/AzureMonitoring/ContainerApps/containerApps-metrics.md';\nimport AzureMonitoring_azureContainerApps_setupAzureEventsHub from '../Modules/AzureMonitoring/ContainerApps/containerApps-setupEventsHub.md';\nimport AzureMonitoring_azureContainerApps_sendTraces from '../Modules/AzureMonitoring/ContainerApps/containerApps-tracing.md';\n// Azure Functions\nimport AzureMonitoring_azureFunctions_setupCentralCollector from '../Modules/AzureMonitoring/Functions/functions-installCentralCollector.md';\nimport AzureMonitoring_azureFunctions_sendLogs from '../Modules/AzureMonitoring/Functions/functions-logs.md';\nimport AzureMonitoring_azureFunctions_sendMetrics from '../Modules/AzureMonitoring/Functions/functions-metrics.md';\nimport AzureMonitoring_azureFunctions_setupAzureEventsHub from '../Modules/AzureMonitoring/Functions/functions-setupEventsHub.md';\nimport AzureMonitoring_azureFunctions_sendTraces from '../Modules/AzureMonitoring/Functions/functions-tracing.md';\n// Azure SQL Database Metrics\nimport AzureMonitoring_azureSQLDatabaseMetrics_setupCentralCollector from '../Modules/AzureMonitoring/SqlDatabaseMetrics/sqlDatabaseMetrics-installCentralCollector.md';\nimport AzureMonitoring_azureSQLDatabaseMetrics_sendMetrics from '../Modules/AzureMonitoring/SqlDatabaseMetrics/sqlDatabaseMetrics-metrics.md';\nimport AzureMonitoring_azureSQLDatabaseMetrics_setupAzureEventsHub from '../Modules/AzureMonitoring/SqlDatabaseMetrics/sqlDatabaseMetrics-setupEventsHub.md';\nimport AzureMonitoring_azureVm_sendHostmetricsLogs from '../Modules/AzureMonitoring/Vm/vm-hostmetrics-and-logs.md';\n// Azure VM\nimport AzureMonitoring_azureVm_setupCentralCollector from '../Modules/AzureMonitoring/Vm/vm-installCentralCollector.md';\nimport AzureMonitoring_azureVm_setupAzureEventsHub from '../Modules/AzureMonitoring/Vm/vm-setupEventsHub.md';\n\nexport const AzureMonitoringDocFilePaths = {\n\t// Azure  AKS\n\tAzureMonitoring_azureAks_setupCentralCollector,\n\tAzureMonitoring_azureAks_setupAzureEventsHub,\n\tAzureMonitoring_azureAks_sendTraces,\n\tAzureMonitoring_azureAks_sendLogs,\n\tAzureMonitoring_azureAks_sendMetrics,\n\n\t// Azure App Service\n\tAzureMonitoring_azureFunctions_setupCentralCollector,\n\tAzureMonitoring_azureFunctions_setupAzureEventsHub,\n\tAzureMonitoring_azureFunctions_sendTraces,\n\tAzureMonitoring_azureFunctions_sendLogs,\n\tAzureMonitoring_azureFunctions_sendMetrics,\n\n\t// Azure Functions\n\tAzureMonitoring_azureAppService_setupCentralCollector,\n\tAzureMonitoring_azureAppService_setupAzureEventsHub,\n\tAzureMonitoring_azureAppService_sendTraces,\n\tAzureMonitoring_azureAppService_sendLogs,\n\tAzureMonitoring_azureAppService_sendMetrics,\n\n\t// Azure Container Apps\n\tAzureMonitoring_azureContainerApps_setupCentralCollector,\n\tAzureMonitoring_azureContainerApps_setupAzureEventsHub,\n\tAzureMonitoring_azureContainerApps_sendTraces,\n\tAzureMonitoring_azureContainerApps_sendLogs,\n\tAzureMonitoring_azureContainerApps_sendMetrics,\n\n\t// Azure VM\n\tAzureMonitoring_azureVm_setupCentralCollector,\n\tAzureMonitoring_azureVm_setupAzureEventsHub,\n\tAzureMonitoring_azureVm_sendHostmetricsLogs,\n\n\t// Azure SQL Database Metrics\n\tAzureMonitoring_azureSQLDatabaseMetrics_setupCentralCollector,\n\tAzureMonitoring_azureSQLDatabaseMetrics_setupAzureEventsHub,\n\tAzureMonitoring_azureSQLDatabaseMetrics_sendMetrics,\n\n\t// Azure Blob Storage\n\tAzureMonitoring_azureBlobStorage_setupCentralCollector,\n\tAzureMonitoring_azureBlobStorage_setupAzureEventsHub,\n\tAzureMonitoring_azureBlobStorage_sendLogs,\n\tAzureMonitoring_azureBlobStorage_sendMetrics,\n};\n","/* eslint-disable simple-import-sort/imports */\n\n// Kubernetes Infra Metrics Start\nimport InfrastructureMonitoring_kubernetesInfraMetrics_setupOtelCollector from '../Modules/InfrastructureMonitoring/KubernetesInfraMetrics/md-docs/kubernetes-setupOtelCollector.md';\nimport InfrastructureMonitoring_kubernetesInfraMetrics_plotMetrics from '../Modules/InfrastructureMonitoring/KubernetesInfraMetrics/md-docs/kubernetes-plotMetrics.md';\n// Kubernetes Infra Metrics End\n\n// Hostmetrics Start\n// LINUX AMD 64\nimport InfrastructureMonitoring_hostMetrics_linuxAMD64_setupOtelCollector from '../Modules/InfrastructureMonitoring/Hostmetrics/md-docs/LinuxAMD64/hostmetrics-setupOtelCollector.md';\nimport InfrastructureMonitoring_hostMetrics_linuxAMD64_configureHostmetricsJson from '../Modules/InfrastructureMonitoring/Hostmetrics/md-docs/LinuxAMD64/hostmetrics-configureHostmetricsJson.md';\n\n// LINUX ARM 64\nimport InfrastructureMonitoring_hostMetrics_linuxARM64_setupOtelCollector from '../Modules/InfrastructureMonitoring/Hostmetrics/md-docs/LinuxARM64/hostmetrics-setupOtelCollector.md';\nimport InfrastructureMonitoring_hostMetrics_linuxARM64_configureHostmetricsJson from '../Modules/InfrastructureMonitoring/Hostmetrics/md-docs/LinuxARM64/hostmetrics-configureHostmetricsJson.md';\n\n// MacOS AMD 64\nimport InfrastructureMonitoring_hostMetrics_macOsAMD64_setupOtelCollector from '../Modules/InfrastructureMonitoring/Hostmetrics/md-docs/MacOsAMD64/hostmetrics-setupOtelCollector.md';\nimport InfrastructureMonitoring_hostMetrics_macOsAMD64_configureHostmetricsJson from '../Modules/InfrastructureMonitoring/Hostmetrics/md-docs/MacOsAMD64/hostmetrics-configureHostmetricsJson.md';\n\n// MacOS ARM 64\nimport InfrastructureMonitoring_hostMetrics_macOsARM64_setupOtelCollector from '../Modules/InfrastructureMonitoring/Hostmetrics/md-docs/MacOsARM64/hostmetrics-setupOtelCollector.md';\nimport InfrastructureMonitoring_hostMetrics_macOsARM64_configureHostmetricsJson from '../Modules/InfrastructureMonitoring/Hostmetrics/md-docs/MacOsARM64/hostmetrics-configureHostmetricsJson.md';\n\n// Hostmetrics End\n\n// Other Metrics Start\n// LINUX AMD 64\nimport InfrastructureMonitoring_otherMetrics_linuxAMD64_setupOtelCollector from '../Modules/InfrastructureMonitoring/OtherMetrics/md-docs/LinuxAMD64/otherMetrics-setupOtelCollector.md';\nimport InfrastructureMonitoring_otherMetrics_linuxAMD64_configureMetricsReceiver from '../Modules/InfrastructureMonitoring/OtherMetrics/md-docs/LinuxAMD64/otherMetrics-configureReceiver.md';\n\n// LINUX ARM 64\nimport InfrastructureMonitoring_otherMetrics_linuxARM64_setupOtelCollector from '../Modules/InfrastructureMonitoring/OtherMetrics/md-docs/LinuxARM64/otherMetrics-setupOtelCollector.md';\nimport InfrastructureMonitoring_otherMetrics_linuxARM64_configureMetricsReceiver from '../Modules/InfrastructureMonitoring/OtherMetrics/md-docs/LinuxARM64/otherMetrics-configureReceiver.md';\n\n// MacOS AMD 64\nimport InfrastructureMonitoring_otherMetrics_macOsAMD64_setupOtelCollector from '../Modules/InfrastructureMonitoring/OtherMetrics/md-docs/MacOsAMD64/otherMetrics-setupOtelCollector.md';\nimport InfrastructureMonitoring_otherMetrics_macOsAMD64_configureMetricsReceiver from '../Modules/InfrastructureMonitoring/OtherMetrics/md-docs/MacOsAMD64/otherMetrics-configureReceiver.md';\n\n// MacOS ARM 64\nimport InfrastructureMonitoring_otherMetrics_macOsARM64_setupOtelCollector from '../Modules/InfrastructureMonitoring/OtherMetrics/md-docs/MacOsARM64/otherMetrics-setupOtelCollector.md';\nimport InfrastructureMonitoring_otherMetrics_macOsARM64_configureMetricsReceiver from '../Modules/InfrastructureMonitoring/OtherMetrics/md-docs/MacOsARM64/otherMetrics-configureReceiver.md';\n\n// Other Metrics End\n\nexport const InfraMonitoringDocFilePaths = {\n\t// Kubernetes Infra Metrics Start\n\tInfrastructureMonitoring_kubernetesInfraMetrics_setupOtelCollector,\n\tInfrastructureMonitoring_kubernetesInfraMetrics_plotMetrics,\n\t// Kubernetes Infra Metrics End\n\n\t// Hostmetrics Start\n\t// LINUX AMD 64\n\n\tInfrastructureMonitoring_hostMetrics_linuxAMD64_setupOtelCollector,\n\tInfrastructureMonitoring_hostMetrics_linuxAMD64_configureHostmetricsJson,\n\n\t// LINUX ARM 64\n\tInfrastructureMonitoring_hostMetrics_linuxARM64_setupOtelCollector,\n\tInfrastructureMonitoring_hostMetrics_linuxARM64_configureHostmetricsJson,\n\n\t// MacOS AMD 64\n\tInfrastructureMonitoring_hostMetrics_macOsAMD64_setupOtelCollector,\n\tInfrastructureMonitoring_hostMetrics_macOsAMD64_configureHostmetricsJson,\n\n\t// MacOS ARM 64\n\tInfrastructureMonitoring_hostMetrics_macOsARM64_setupOtelCollector,\n\tInfrastructureMonitoring_hostMetrics_macOsARM64_configureHostmetricsJson,\n\t// Hostmetrics End\n\n\t// Other Metrics Start\n\t// LINUX AMD 64\n\n\tInfrastructureMonitoring_otherMetrics_linuxAMD64_setupOtelCollector,\n\tInfrastructureMonitoring_otherMetrics_linuxAMD64_configureMetricsReceiver,\n\n\t// LINUX ARM 64\n\tInfrastructureMonitoring_otherMetrics_linuxARM64_setupOtelCollector,\n\tInfrastructureMonitoring_otherMetrics_linuxARM64_configureMetricsReceiver,\n\n\t// MacOS AMD 64\n\tInfrastructureMonitoring_otherMetrics_macOsAMD64_setupOtelCollector,\n\tInfrastructureMonitoring_otherMetrics_macOsAMD64_configureMetricsReceiver,\n\n\t// MacOS ARM 64\n\tInfrastructureMonitoring_otherMetrics_macOsARM64_setupOtelCollector,\n\tInfrastructureMonitoring_otherMetrics_macOsARM64_configureMetricsReceiver,\n\n\t// Other Metrics End\n};\n","/* eslint-disable simple-import-sort/imports */\n\n// Docker Logs Start\nimport LogsManagement_docker_cloneRepository from '../Modules/LogsManagement/Docker/md-docs/docker-cloneRepository.md';\nimport LogsManagement_docker_startContainer from '../Modules/LogsManagement/Docker/md-docs/docker-startContainers.md';\n// Docker Logs End\n\n// Kubernetes Pod Logs Start\nimport LogsManagement_kubernetes_setupOtelCollector from '../Modules/LogsManagement/Kubernetes/md-docs/kubernetes-installOtelCollector.md';\n// Kubernetes Pod Logs End\n\n// Application Logs Start\n\n// LINUX AMD 64\nimport LogsManagement_application_logs_linuxAMD64_setupOtelCollector from '../Modules/LogsManagement/ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-installOtelCollector.md';\n\nimport LogsManagement_application_logs_linuxAMD64_configureReceiver from '../Modules/LogsManagement/ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-configureReceiver.md';\nimport LogsManagement_application_logs_linuxAMD64_restartOtelCollector from '../Modules/LogsManagement/ApplicationLogs/md-docs/LinuxAMD64/appplicationLogs-linuxamd64-runOtelCollector.md';\n\n// LINUX ARM 64\nimport LogsManagement_application_logs_linuxARM64_setupOtelCollector from '../Modules/LogsManagement/ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-installOtelCollector.md';\nimport LogsManagement_application_logs_linuxARM64_configureReceiver from '../Modules/LogsManagement/ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-configureReceiver.md';\nimport LogsManagement_application_logs_linuxARM64_restartOtelCollector from '../Modules/LogsManagement/ApplicationLogs/md-docs/LinuxARM64/appplicationLogs-linuxarm64-runOtelCollector.md';\n\n// MacOS AMD 64\nimport LogsManagement_application_logs_macOsAMD64_setupOtelCollector from '../Modules/LogsManagement/ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-installOtelCollector.md';\nimport LogsManagement_application_logs_macOsAMD64_configureReceiver from '../Modules/LogsManagement/ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-configureReceiver.md';\nimport LogsManagement_application_logs_macOsAMD64_restartOtelCollector from '../Modules/LogsManagement/ApplicationLogs/md-docs/MacOsAMD64/appplicationLogs-macosamd64-runOtelCollector.md';\n\n// MacOS ARM 64\nimport LogsManagement_application_logs_macOsARM64_setupOtelCollector from '../Modules/LogsManagement/ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-installOtelCollector.md';\nimport LogsManagement_application_logs_macOsARM64_configureReceiver from '../Modules/LogsManagement/ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-configureReceiver.md';\nimport LogsManagement_application_logs_macOsARM64_restartOtelCollector from '../Modules/LogsManagement/ApplicationLogs/md-docs/MacOsARM64/appplicationLogs-macosarm64-runOtelCollector.md';\n// Application Logs End\n\n// Syslogs\n\n// //Syslogs-LinuxAMD64\nimport LogsManagement_syslogs_linuxAMD64_setupOtelCollector from '../Modules/LogsManagement/SysLogs/md-docs/LinuxAMD64/syslogs-linuxamd64-installOtelCollector.md';\nimport LogsManagement_syslogs_linuxAMD64_configureReceiver from '../Modules/LogsManagement/SysLogs/md-docs/LinuxAMD64/syslogs-linuxamd64-configureReceiver.md';\nimport LogsManagement_syslogs_linuxAMD64_checkServiceStatus from '../Modules/LogsManagement/SysLogs/md-docs/LinuxAMD64/syslogs-linuxamd64-checkServiceStatus.md';\n\n// //Syslogs-LinuxARM64\nimport LogsManagement_syslogs_linuxARM64_setupOtelCollector from '../Modules/LogsManagement/SysLogs/md-docs/LinuxARM64/syslogs-linuxarm64-installOtelCollector.md';\nimport LogsManagement_syslogs_linuxARM64_configureReceiver from '../Modules/LogsManagement/SysLogs/md-docs/LinuxARM64/syslogs-linuxarm64-configureReceiver.md';\nimport LogsManagement_syslogs_linuxARM64_checkServiceStatus from '../Modules/LogsManagement/SysLogs/md-docs/LinuxARM64/syslogs-linuxarm64-checkServiceStatus.md';\n\n// //Syslogs-MacOsAMD64\nimport LogsManagement_syslogs_macOsAMD64_setupOtelCollector from '../Modules/LogsManagement/SysLogs/md-docs/MacOsAMD64/syslogs-macosamd64-installOtelCollector.md';\nimport LogsManagement_syslogs_macOsAMD64_configureReceiver from '../Modules/LogsManagement/SysLogs/md-docs/MacOsAMD64/syslogs-macosamd64-configureReceiver.md';\nimport LogsManagement_syslogs_macOsAMD64_checkServiceStatus from '../Modules/LogsManagement/SysLogs/md-docs/MacOsAMD64/syslogs-macosamd64-checkServiceStatus.md';\n\n// //Syslogs-MacOsARM64\nimport LogsManagement_syslogs_macOsARM64_setupOtelCollector from '../Modules/LogsManagement/SysLogs/md-docs/MacOsARM64/syslogs-macosarm64-installOtelCollector.md';\nimport LogsManagement_syslogs_macOsARM64_configureReceiver from '../Modules/LogsManagement/SysLogs/md-docs/MacOsARM64/syslogs-macosarm64-configureReceiver.md';\nimport LogsManagement_syslogs_macOsARM64_checkServiceStatus from '../Modules/LogsManagement/SysLogs/md-docs/MacOsARM64/syslogs-macosarm64-checkServiceStatus.md';\n\n// FluentD\n\n// //fluentbit-LinuxAMD64\nimport LogsManagement_fluentBit_linuxAMD64_setupOtelCollector from '../Modules/LogsManagement/FluentBit/md-docs/LinuxAMD64/fluentbit-linuxamd64-installOtelCollector.md';\nimport LogsManagement_fluentBit_linuxAMD64_configureReceiver from '../Modules/LogsManagement/FluentBit/md-docs/LinuxAMD64/fluentbit-linuxamd64-configureReceiver.md';\nimport LogsManagement_fluentBit_linuxAMD64_restartOtelCollector from '../Modules/LogsManagement/FluentBit/md-docs/LinuxAMD64/fluentbit-linuxamd64-restartOtelCollector.md';\n\n// //fluentbit-LinuxARM64\nimport LogsManagement_fluentBit_linuxARM64_setupOtelCollector from '../Modules/LogsManagement/FluentBit/md-docs/LinuxARM64/fluentbit-linuxarm64-installOtelCollector.md';\nimport LogsManagement_fluentBit_linuxARM64_configureReceiver from '../Modules/LogsManagement/FluentBit/md-docs/LinuxARM64/fluentbit-linuxarm64-configureReceiver.md';\nimport LogsManagement_fluentBit_linuxARM64_restartOtelCollector from '../Modules/LogsManagement/FluentBit/md-docs/LinuxARM64/fluentbit-linuxarm64-restartOtelCollector.md';\n\n// //fluentbit-MacOsAMD64\nimport LogsManagement_fluentBit_macOsAMD64_setupOtelCollector from '../Modules/LogsManagement/FluentBit/md-docs/MacOsAMD64/fluentbit-macosamd64-installOtelCollector.md';\nimport LogsManagement_fluentBit_macOsAMD64_configureReceiver from '../Modules/LogsManagement/FluentBit/md-docs/MacOsAMD64/fluentbit-macosamd64-configureReceiver.md';\nimport LogsManagement_fluentBit_macOsAMD64_restartOtelCollector from '../Modules/LogsManagement/FluentBit/md-docs/MacOsAMD64/fluentbit-macosamd64-restartOtelCollector.md';\n\n// //fluentbit-MacOsARM64\nimport LogsManagement_fluentBit_macOsARM64_setupOtelCollector from '../Modules/LogsManagement/FluentBit/md-docs/MacOsARM64/fluentbit-macosarm64-installOtelCollector.md';\nimport LogsManagement_fluentBit_macOsARM64_configureReceiver from '../Modules/LogsManagement/FluentBit/md-docs/MacOsARM64/fluentbit-macosarm64-configureReceiver.md';\nimport LogsManagement_fluentBit_macOsARM64_restartOtelCollector from '../Modules/LogsManagement/FluentBit/md-docs/MacOsARM64/fluentBit-macosarm64-restartOtelCollector.md';\n\n// FluentD\n\n// //fluentD-LinuxAMD64\nimport LogsManagement_fluentD_linuxAMD64_setupOtelCollector from '../Modules/LogsManagement/FluentD/md-docs/LinuxAMD64/fluentd-linuxamd64-installOtelCollector.md';\nimport LogsManagement_fluentD_linuxAMD64_configureReceiver from '../Modules/LogsManagement/FluentD/md-docs/LinuxAMD64/fluentd-linuxamd64-configureReceiver.md';\nimport LogsManagement_fluentD_linuxAMD64_restartOtelCollector from '../Modules/LogsManagement/FluentD/md-docs/LinuxAMD64/fluentd-linuxamd64-restartOtelCollector.md';\n\n// //fluentd-LinuxARM64\nimport LogsManagement_fluentD_linuxARM64_setupOtelCollector from '../Modules/LogsManagement/FluentD/md-docs/LinuxARM64/fluentd-linuxarm64-installOtelCollector.md';\nimport LogsManagement_fluentD_linuxARM64_configureReceiver from '../Modules/LogsManagement/FluentD/md-docs/LinuxARM64/fluentd-linuxarm64-configureReceiver.md';\nimport LogsManagement_fluentD_linuxARM64_restartOtelCollector from '../Modules/LogsManagement/FluentD/md-docs/LinuxARM64/fluentd-linuxarm64-restartOtelCollector.md';\n\n// //fluentd-MacOsAMD64\nimport LogsManagement_fluentD_macOsAMD64_setupOtelCollector from '../Modules/LogsManagement/FluentD/md-docs/MacOsAMD64/fluentd-macosamd64-installOtelCollector.md';\nimport LogsManagement_fluentD_macOsAMD64_configureReceiver from '../Modules/LogsManagement/FluentD/md-docs/MacOsAMD64/fluentd-macosamd64-configureReceiver.md';\nimport LogsManagement_fluentD_macOsAMD64_restartOtelCollector from '../Modules/LogsManagement/FluentD/md-docs/MacOsAMD64/fluentd-macosamd64-restartOtelCollector.md';\n\n// //fluentd-MacOsARM64\nimport LogsManagement_fluentD_macOsARM64_setupOtelCollector from '../Modules/LogsManagement/FluentD/md-docs/MacOsARM64/fluentd-macosarm64-installOtelCollector.md';\nimport LogsManagement_fluentD_macOsARM64_configureReceiver from '../Modules/LogsManagement/FluentD/md-docs/MacOsARM64/fluentd-macosarm64-configureReceiver.md';\nimport LogsManagement_fluentD_macOsARM64_restartOtelCollector from '../Modules/LogsManagement/FluentD/md-docs/MacOsARM64/fluentd-macosarm64-restartOtelCollector.md';\n\n// Logstash\n\n// //fluentD-LinuxAMD64\nimport LogsManagement_logStash_linuxAMD64_setupOtelCollector from '../Modules/LogsManagement/Logstash/md-docs/LinuxAMD64/logstash-linuxamd64-installOtelCollector.md';\nimport LogsManagement_logStash_linuxAMD64_configureReceiver from '../Modules/LogsManagement/Logstash/md-docs/LinuxAMD64/logstash-linuxamd64-configureReceiver.md';\nimport LogsManagement_logStash_linuxAMD64_restartOtelCollector from '../Modules/LogsManagement/Logstash/md-docs/LinuxAMD64/logstash-linuxamd64-restartOtelCollector.md';\n\n// //logstash-LinuxARM64\nimport LogsManagement_logStash_linuxARM64_setupOtelCollector from '../Modules/LogsManagement/Logstash/md-docs/LinuxARM64/logstash-linuxarm64-installOtelCollector.md';\nimport LogsManagement_logStash_linuxARM64_configureReceiver from '../Modules/LogsManagement/Logstash/md-docs/LinuxARM64/logstash-linuxarm64-configureReceiver.md';\nimport LogsManagement_logStash_linuxARM64_restartOtelCollector from '../Modules/LogsManagement/Logstash/md-docs/LinuxARM64/logstash-linuxarm64-restartOtelCollector.md';\n\n// //logstash-MacOsAMD64\nimport LogsManagement_logStash_macOsAMD64_setupOtelCollector from '../Modules/LogsManagement/Logstash/md-docs/MacOsAMD64/logstash-macosamd64-installOtelCollector.md';\nimport LogsManagement_logStash_macOsAMD64_configureReceiver from '../Modules/LogsManagement/Logstash/md-docs/MacOsAMD64/logstash-macosamd64-configureReceiver.md';\nimport LogsManagement_logStash_macOsAMD64_restartOtelCollector from '../Modules/LogsManagement/Logstash/md-docs/MacOsAMD64/logstash-macosamd64-restartOtelCollector.md';\n\n// //logstash-MacOsARM64\nimport LogsManagement_logStash_macOsARM64_setupOtelCollector from '../Modules/LogsManagement/Logstash/md-docs/MacOsARM64/logstash-macosarm64-installOtelCollector.md';\nimport LogsManagement_logStash_macOsARM64_configureReceiver from '../Modules/LogsManagement/Logstash/md-docs/MacOsARM64/logstash-macosarm64-configureReceiver.md';\nimport LogsManagement_logStash_macOsARM64_restartOtelCollector from '../Modules/LogsManagement/Logstash/md-docs/MacOsARM64/logstash-macosarm64-restartOtelCollector.md';\n\n// Heroku\n\nimport LogsManagement_heroku_addHttpDrain from '../Modules/LogsManagement/Heroku/md-docs/heroku-addHttpDrain.md';\n\n// Vercel\n\nimport LogsManagement_vercel_setupLogDrains from '../Modules/LogsManagement/Vercel/md-docs/vercel-setupLogDrains.md';\n\n// HTTP\n\nimport LogsManagement_http_createHttpPayload from '../Modules/LogsManagement/Http/md-docs/httpJsonPayload.md';\n\n// Cloudwatch\n\nimport LogsManagement_cloudwatch_linuxAMD64_setupOtelCollector from '../Modules/LogsManagement/Cloudwatch/md-docs/LinuxAMD64/cloudwatch-linuxamd64-installOtelCollector.md';\nimport LogsManagement_cloudwatch_linuxAMD64_configureAws from '../Modules/LogsManagement/Cloudwatch/md-docs/LinuxAMD64/cloudwatch-linuxamd64-configureAws.md';\nimport LogsManagement_cloudwatch_linuxAMD64_configureReceiver from '../Modules/LogsManagement/Cloudwatch/md-docs/LinuxAMD64/cloudwatch-linuxamd64-configureReceiver.md';\nimport LogsManagement_cloudwatch_linuxAMD64_sendLogsCloudwatch from '../Modules/LogsManagement/Cloudwatch/md-docs/LinuxAMD64/cloudwatch-linuxamd64-sendLogs.md';\n\nimport LogsManagement_cloudwatch_linuxARM64_setupOtelCollector from '../Modules/LogsManagement/Cloudwatch/md-docs/LinuxARM64/cloudwatch-linuxarm64-installOtelCollector.md';\nimport LogsManagement_cloudwatch_linuxARM64_configureAws from '../Modules/LogsManagement/Cloudwatch/md-docs/LinuxARM64/cloudwatch-linuxarm64-configureAws.md';\nimport LogsManagement_cloudwatch_linuxARM64_configureReceiver from '../Modules/LogsManagement/Cloudwatch/md-docs/LinuxARM64/cloudwatch-linuxarm64-configureReceiver.md';\nimport LogsManagement_cloudwatch_linuxARM64_sendLogsCloudwatch from '../Modules/LogsManagement/Cloudwatch/md-docs/LinuxARM64/cloudwatch-linuxarm64-sendLogs.md';\n\nimport LogsManagement_cloudwatch_macOsAMD64_setupOtelCollector from '../Modules/LogsManagement/Cloudwatch/md-docs/MacOsAMD64/cloudwatch-macosamd64-installOtelCollector.md';\nimport LogsManagement_cloudwatch_macOsAMD64_configureAws from '../Modules/LogsManagement/Cloudwatch/md-docs/MacOsAMD64/cloudwatch-macosamd64-configureAws.md';\nimport LogsManagement_cloudwatch_macOsAMD64_configureReceiver from '../Modules/LogsManagement/Cloudwatch/md-docs/MacOsAMD64/cloudwatch-macosamd64-configureReceiver.md';\nimport LogsManagement_cloudwatch_macOsAMD64_sendLogsCloudwatch from '../Modules/LogsManagement/Cloudwatch/md-docs/MacOsAMD64/cloudwatch-macosamd64-sendLogs.md';\n\nimport LogsManagement_cloudwatch_macOsARM64_setupOtelCollector from '../Modules/LogsManagement/Cloudwatch/md-docs/MacOsARM64/cloudwatch-macosarm64-installOtelCollector.md';\nimport LogsManagement_cloudwatch_macOsARM64_configureAws from '../Modules/LogsManagement/Cloudwatch/md-docs/MacOsARM64/cloudwatch-macosarm64-configureAws.md';\nimport LogsManagement_cloudwatch_macOsARM64_configureReceiver from '../Modules/LogsManagement/Cloudwatch/md-docs/MacOsARM64/cloudwatch-macosarm64-configureReceiver.md';\nimport LogsManagement_cloudwatch_macOsARM64_sendLogsCloudwatch from '../Modules/LogsManagement/Cloudwatch/md-docs/MacOsARM64/cloudwatch-macosarm64-sendLogs.md';\n\nexport const LogsManagementDocFilePaths = {\n\t// Kubernetes Pod Logs\n\tLogsManagement_kubernetes_setupOtelCollector,\n\n\t// Docker Logs\n\tLogsManagement_docker_cloneRepository,\n\tLogsManagement_docker_startContainer,\n\n\t// Syslogs\n\n\t// //Syslogs-LinuxAMD64\n\tLogsManagement_syslogs_linuxAMD64_setupOtelCollector,\n\tLogsManagement_syslogs_linuxAMD64_configureReceiver,\n\tLogsManagement_syslogs_linuxAMD64_checkServiceStatus,\n\n\t// //Syslogs-LinuxARM64\n\tLogsManagement_syslogs_linuxARM64_setupOtelCollector,\n\tLogsManagement_syslogs_linuxARM64_configureReceiver,\n\tLogsManagement_syslogs_linuxARM64_checkServiceStatus,\n\n\t// //Syslogs-MacOsAMD64\n\tLogsManagement_syslogs_macOsAMD64_setupOtelCollector,\n\tLogsManagement_syslogs_macOsAMD64_configureReceiver,\n\tLogsManagement_syslogs_macOsAMD64_checkServiceStatus,\n\n\t// //Syslogs-MacOsARM64\n\tLogsManagement_syslogs_macOsARM64_setupOtelCollector,\n\tLogsManagement_syslogs_macOsARM64_configureReceiver,\n\tLogsManagement_syslogs_macOsARM64_checkServiceStatus,\n\n\t// Application-Logs\n\tLogsManagement_application_logs_linuxAMD64_setupOtelCollector,\n\tLogsManagement_application_logs_linuxAMD64_configureReceiver,\n\tLogsManagement_application_logs_linuxAMD64_restartOtelCollector,\n\n\t// //Application-Logs-LinuxARM64\n\tLogsManagement_application_logs_linuxARM64_setupOtelCollector,\n\tLogsManagement_application_logs_linuxARM64_configureReceiver,\n\tLogsManagement_application_logs_linuxARM64_restartOtelCollector,\n\n\t// //Application-Logs-MacOsAMD64\n\tLogsManagement_application_logs_macOsAMD64_setupOtelCollector,\n\tLogsManagement_application_logs_macOsAMD64_configureReceiver,\n\tLogsManagement_application_logs_macOsAMD64_restartOtelCollector,\n\n\t// //Application-Logs-MacOsARM64\n\tLogsManagement_application_logs_macOsARM64_setupOtelCollector,\n\tLogsManagement_application_logs_macOsARM64_configureReceiver,\n\tLogsManagement_application_logs_macOsARM64_restartOtelCollector,\n\n\t// FluentBit\n\n\t// //FluentBit-LinuxAMD64\n\tLogsManagement_fluentBit_linuxAMD64_setupOtelCollector,\n\tLogsManagement_fluentBit_linuxAMD64_configureReceiver,\n\tLogsManagement_fluentBit_linuxAMD64_restartOtelCollector,\n\n\t// //FluentBit-LinuxARM64\n\tLogsManagement_fluentBit_linuxARM64_setupOtelCollector,\n\tLogsManagement_fluentBit_linuxARM64_configureReceiver,\n\tLogsManagement_fluentBit_linuxARM64_restartOtelCollector,\n\n\t// //FluentBit-MacOsAMD64\n\tLogsManagement_fluentBit_macOsAMD64_setupOtelCollector,\n\tLogsManagement_fluentBit_macOsAMD64_configureReceiver,\n\tLogsManagement_fluentBit_macOsAMD64_restartOtelCollector,\n\n\t// //FluentBit-MacOsARM64\n\tLogsManagement_fluentBit_macOsARM64_setupOtelCollector,\n\tLogsManagement_fluentBit_macOsARM64_configureReceiver,\n\tLogsManagement_fluentBit_macOsARM64_restartOtelCollector,\n\n\t// FluentD\n\n\t// //FluentD-LinuxAMD64\n\tLogsManagement_fluentD_linuxAMD64_setupOtelCollector,\n\tLogsManagement_fluentD_linuxAMD64_configureReceiver,\n\tLogsManagement_fluentD_linuxAMD64_restartOtelCollector,\n\n\t// //FluentD-LinuxARM64\n\tLogsManagement_fluentD_linuxARM64_setupOtelCollector,\n\tLogsManagement_fluentD_linuxARM64_configureReceiver,\n\tLogsManagement_fluentD_linuxARM64_restartOtelCollector,\n\n\t// //FluentD-MacOsAMD64\n\tLogsManagement_fluentD_macOsAMD64_setupOtelCollector,\n\tLogsManagement_fluentD_macOsAMD64_configureReceiver,\n\tLogsManagement_fluentD_macOsAMD64_restartOtelCollector,\n\n\t// //FluentD-MacOsARM64\n\tLogsManagement_fluentD_macOsARM64_setupOtelCollector,\n\tLogsManagement_fluentD_macOsARM64_configureReceiver,\n\tLogsManagement_fluentD_macOsARM64_restartOtelCollector,\n\n\t// LogStash\n\t// //LogStash-LinuxAMD64\n\tLogsManagement_logStash_linuxAMD64_setupOtelCollector,\n\tLogsManagement_logStash_linuxAMD64_configureReceiver,\n\tLogsManagement_logStash_linuxAMD64_restartOtelCollector,\n\n\t// //LogStash-LinuxARM64\n\tLogsManagement_logStash_linuxARM64_setupOtelCollector,\n\tLogsManagement_logStash_linuxARM64_configureReceiver,\n\tLogsManagement_logStash_linuxARM64_restartOtelCollector,\n\n\t// //LogStash-MacOsAMD64\n\tLogsManagement_logStash_macOsAMD64_setupOtelCollector,\n\tLogsManagement_logStash_macOsAMD64_configureReceiver,\n\tLogsManagement_logStash_macOsAMD64_restartOtelCollector,\n\n\t// //LogStash-MacOsARM64\n\tLogsManagement_logStash_macOsARM64_setupOtelCollector,\n\tLogsManagement_logStash_macOsARM64_configureReceiver,\n\tLogsManagement_logStash_macOsARM64_restartOtelCollector,\n\n\t// Heroku\n\tLogsManagement_heroku_addHttpDrain,\n\t// ------------------------------------------------------------------------------------------------\n\n\t// Vercel\n\tLogsManagement_vercel_setupLogDrains,\n\n\t// HTTP\n\tLogsManagement_http_createHttpPayload,\n\n\t// Cloudwatch\n\n\tLogsManagement_cloudwatch_linuxAMD64_setupOtelCollector,\n\tLogsManagement_cloudwatch_linuxAMD64_configureAws,\n\tLogsManagement_cloudwatch_linuxAMD64_configureReceiver,\n\tLogsManagement_cloudwatch_linuxAMD64_sendLogsCloudwatch,\n\n\tLogsManagement_cloudwatch_linuxARM64_setupOtelCollector,\n\tLogsManagement_cloudwatch_linuxARM64_configureAws,\n\tLogsManagement_cloudwatch_linuxARM64_configureReceiver,\n\tLogsManagement_cloudwatch_linuxARM64_sendLogsCloudwatch,\n\n\tLogsManagement_cloudwatch_macOsAMD64_setupOtelCollector,\n\tLogsManagement_cloudwatch_macOsAMD64_configureAws,\n\tLogsManagement_cloudwatch_macOsAMD64_configureReceiver,\n\tLogsManagement_cloudwatch_macOsAMD64_sendLogsCloudwatch,\n\n\tLogsManagement_cloudwatch_macOsARM64_setupOtelCollector,\n\tLogsManagement_cloudwatch_macOsARM64_configureAws,\n\tLogsManagement_cloudwatch_macOsARM64_configureReceiver,\n\tLogsManagement_cloudwatch_macOsARM64_sendLogsCloudwatch,\n};\n","import { SelectedModuleStepProps } from '../OnboardingContainer';\nimport ConnectionStatus from '../Steps/ConnectionStatus/ConnectionStatus';\nimport DataSource from '../Steps/DataSource/DataSource';\nimport EnvironmentDetails from '../Steps/EnvironmentDetails/EnvironmentDetails';\nimport LogsConnectionStatus from '../Steps/LogsConnectionStatus/LogsConnectionStatus';\nimport MarkdownStep from '../Steps/MarkdownStep/MarkdownStep';\nimport SelectMethod from '../Steps/SelectMethod/SelectMethod';\n\nexport const stepsMap = {\n\tdataSource: 'dataSource',\n\tenvironmentDetails: 'environmentDetails',\n\tselectMethod: 'selectMethod',\n\tsetupOtelCollector: 'setupOtelCollector',\n\tinstrumentApplication: 'instrumentApplication',\n\tcloneRepository: 'cloneRepository',\n\tstartContainer: 'startContainer',\n\trunApplication: 'runApplication',\n\ttestConnection: 'testConnection',\n\tconfigureReceiver: 'configureReceiver',\n\tcheckServiceStatus: 'checkServiceStatus',\n\trestartOtelCollector: 'restartOtelCollector',\n\tplotMetrics: 'plotMetrics',\n\tconfigureHostmetricsJson: 'configureHostmetricsJson',\n\tconfigureMetricsReceiver: 'configureMetricsReceiver',\n\taddHttpDrain: 'addHttpDrain',\n\tsetupLogDrains: `setupLogDrains`,\n\tcreateHttpPayload: `createHttpPayload`,\n\tconfigureAws: `configureAws`,\n\tsendLogsCloudwatch: `sendLogsCloudwatch`,\n\tsetupDaemonService: `setupDaemonService`,\n\tcreateOtelConfig: `createOtelConfig`,\n\tcreateDaemonService: `createDaemonService`,\n\tecsSendData: `ecsSendData`,\n\tcreateSidecarCollectorContainer: `createSidecarCollectorContainer`,\n\tdeployTaskDefinition: `deployTaskDefinition`,\n\tecsSendLogsData: `ecsSendLogsData`,\n\tmonitorDashboard: `monitorDashboard`,\n\tsetupCentralCollector: `setupCentralCollector`,\n\tsetupAzureEventsHub: `setupAzureEventsHub`,\n\tsendTraces: `sendTraces`,\n\tsendLogs: `sendLogs`,\n\tsendMetrics: `sendMetrics`,\n\tsendHostmetricsLogs: `sendHostmetricsLogs`,\n};\n\nexport const DataSourceStep: SelectedModuleStepProps = {\n\tid: stepsMap.dataSource,\n\ttitle: 'Data Source',\n\tcomponent: <DataSource />,\n};\n\nexport const EnvDetailsStep: SelectedModuleStepProps = {\n\tid: stepsMap.environmentDetails,\n\ttitle: 'Environment Details',\n\tcomponent: <EnvironmentDetails />,\n};\n\nexport const SelectMethodStep: SelectedModuleStepProps = {\n\tid: stepsMap.selectMethod,\n\ttitle: 'Select Method',\n\tcomponent: <SelectMethod />,\n};\n\nexport const SetupOtelCollectorStep: SelectedModuleStepProps = {\n\tid: stepsMap.setupOtelCollector,\n\ttitle: 'Setup Otel Collector',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const InstallOpenTelemetryStep: SelectedModuleStepProps = {\n\tid: stepsMap.instrumentApplication,\n\ttitle: 'Instrument Application',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const CloneRepo: SelectedModuleStepProps = {\n\tid: stepsMap.cloneRepository,\n\ttitle: 'Clone Repository',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const StartContainer: SelectedModuleStepProps = {\n\tid: stepsMap.startContainer,\n\ttitle: 'Start Container',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const RunApplicationStep: SelectedModuleStepProps = {\n\tid: stepsMap.runApplication,\n\ttitle: 'Run Application',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const TestConnectionStep: SelectedModuleStepProps = {\n\tid: stepsMap.testConnection,\n\ttitle: 'Test Connection',\n\tcomponent: <ConnectionStatus />,\n};\n\nexport const LogsTestConnectionStep: SelectedModuleStepProps = {\n\tid: stepsMap.testConnection,\n\ttitle: 'Test Connection',\n\tcomponent: <LogsConnectionStatus />,\n};\n\nexport const ConfigureReceiver: SelectedModuleStepProps = {\n\tid: stepsMap.configureReceiver,\n\ttitle: 'Configure Receiver',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const CheckServiceStatus: SelectedModuleStepProps = {\n\tid: stepsMap.checkServiceStatus,\n\ttitle: 'Check Service Status',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const RestartOtelCollector: SelectedModuleStepProps = {\n\tid: stepsMap.restartOtelCollector,\n\ttitle: 'Restart Otel Collector',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const PlotMetrics: SelectedModuleStepProps = {\n\tid: stepsMap.plotMetrics,\n\ttitle: 'Plot Metrics',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const ConfigureHostmetricsJSON: SelectedModuleStepProps = {\n\tid: stepsMap.configureHostmetricsJson,\n\ttitle: 'Configure Hostmetrics JSON',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const ConfigureMetricsReceiver: SelectedModuleStepProps = {\n\tid: stepsMap.configureMetricsReceiver,\n\ttitle: 'Configure Metrics Receiver',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const AddHttpDrain: SelectedModuleStepProps = {\n\tid: stepsMap.addHttpDrain,\n\ttitle: 'Add HTTP Drain',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const SetupLogDrains: SelectedModuleStepProps = {\n\tid: stepsMap.setupLogDrains,\n\ttitle: 'Setup Log Drains',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const CreateHttpPayload: SelectedModuleStepProps = {\n\tid: stepsMap.createHttpPayload,\n\ttitle: 'Create Json Payload',\n\tcomponent: <MarkdownStep />,\n};\n\nexport const ConfigureAws: SelectedModuleStepProps = {\n\tid: stepsMap.configureAws,\n\ttitle: 'Configure AWS',\n\tcomponent: <MarkdownStep />,\n};\nexport const SendLogsCloudwatch: SelectedModuleStepProps = {\n\tid: stepsMap.sendLogsCloudwatch,\n\ttitle: 'Send Logs',\n\tcomponent: <MarkdownStep />,\n};\nexport const SetupDaemonService: SelectedModuleStepProps = {\n\tid: stepsMap.setupDaemonService,\n\ttitle: 'Setup Daemon Service',\n\tcomponent: <MarkdownStep />,\n};\nexport const CreateOtelConfig: SelectedModuleStepProps = {\n\tid: stepsMap.createOtelConfig,\n\ttitle: 'Create OTel Config',\n\tcomponent: <MarkdownStep />,\n};\nexport const CreateDaemonService: SelectedModuleStepProps = {\n\tid: stepsMap.createDaemonService,\n\ttitle: 'Create Daemon Service',\n\tcomponent: <MarkdownStep />,\n};\nexport const EcsSendData: SelectedModuleStepProps = {\n\tid: stepsMap.ecsSendData,\n\ttitle: 'Send Traces Data',\n\tcomponent: <MarkdownStep />,\n};\nexport const CreateSidecarCollectorContainer: SelectedModuleStepProps = {\n\tid: stepsMap.createSidecarCollectorContainer,\n\ttitle: 'Create Sidecar Collector',\n\tcomponent: <MarkdownStep />,\n};\nexport const DeployTaskDefinition: SelectedModuleStepProps = {\n\tid: stepsMap.deployTaskDefinition,\n\ttitle: 'Deploy Task Definition',\n\tcomponent: <MarkdownStep />,\n};\nexport const EcsSendLogsData: SelectedModuleStepProps = {\n\tid: stepsMap.ecsSendLogsData,\n\ttitle: 'Send Logs Data',\n\tcomponent: <MarkdownStep />,\n};\nexport const MonitorDashboard: SelectedModuleStepProps = {\n\tid: stepsMap.monitorDashboard,\n\ttitle: 'Monitor using Dashboard ',\n\tcomponent: <MarkdownStep />,\n};\nexport const SetupCentralCollectorStep: SelectedModuleStepProps = {\n\tid: stepsMap.setupCentralCollector,\n\ttitle: 'Setup Central Collector ',\n\tcomponent: <MarkdownStep />,\n};\nexport const SetupAzureEventsHub: SelectedModuleStepProps = {\n\tid: stepsMap.setupAzureEventsHub,\n\ttitle: 'Setup EventsHub',\n\tcomponent: <MarkdownStep />,\n};\nexport const SendTraces: SelectedModuleStepProps = {\n\tid: stepsMap.sendTraces,\n\ttitle: 'Send Traces',\n\tcomponent: <MarkdownStep />,\n};\nexport const SendLogs: SelectedModuleStepProps = {\n\tid: stepsMap.sendLogs,\n\ttitle: 'Send Logs',\n\tcomponent: <MarkdownStep />,\n};\nexport const SendMetrics: SelectedModuleStepProps = {\n\tid: stepsMap.sendMetrics,\n\ttitle: 'Send Metrics',\n\tcomponent: <MarkdownStep />,\n};\nexport const SendHostmetricsLogs: SelectedModuleStepProps = {\n\tid: stepsMap.sendHostmetricsLogs,\n\ttitle: 'HostMetrics and Logging',\n\tcomponent: <MarkdownStep />,\n};\n","import { createContext, ReactNode, useContext, useState } from 'react';\n\nimport { ModuleProps, useCases } from '../OnboardingContainer';\nimport { DataSourceType } from '../Steps/DataSource/DataSource';\nimport { defaultApplicationDataSource } from '../utils/dataSourceUtils';\n\nexport const OnboardingMethods = {\n\tQUICK_START: 'quickStart',\n\tRECOMMENDED_STEPS: 'recommendedSteps',\n};\n\ninterface OnboardingContextData {\n\tactiveStep: any;\n\tingestionData: any;\n\tserviceName: string;\n\tselectedEnvironment: string;\n\tselectedFramework: string | null;\n\tselectedModule: ModuleProps | null;\n\tselectedMethod: any;\n\tselectedDataSource: DataSourceType | null;\n\terrorDetails: string | null;\n\tupdateSelectedModule: (module: ModuleProps) => void;\n\tupdateSelectedDataSource: (module: DataSourceType | null) => void;\n\tupdateServiceName: (newValue: string) => void;\n\tupdateSelectedEnvironment: (environment: any) => void;\n\tupdateSelectedFramework: (framework: any) => void;\n\tupdateSelectedMethod: (method: any) => void;\n\tupdateActiveStep: (step: any) => void;\n\tupdateErrorDetails: (errorDetails: any) => void;\n\tupdateIngestionData: (ingestionData: any) => void;\n\tresetProgress: () => void;\n}\n\nconst OnboardingContext = createContext<OnboardingContextData | undefined>(\n\tundefined,\n);\n\ninterface OnboardingContextProviderProps {\n\tchildren: ReactNode;\n}\n\nfunction OnboardingContextProvider({\n\tchildren,\n}: OnboardingContextProviderProps): any {\n\tconst [serviceName, setServiceName] = useState<string>('');\n\tconst [ingestionData, setIngestionData] = useState<string>('');\n\tconst [activeStep, setActiveStep] = useState<any>(null);\n\tconst [selectedModule, setSelectedModule] = useState<ModuleProps | null>(\n\t\tuseCases.APM,\n\t);\n\n\tconst [errorDetails, setErrorDetails] = useState(null);\n\tconst [selectedEnvironment, setSelectedEnvironment] = useState<string>('');\n\tconst [selectedFramework, setSelectedFramework] = useState<string | null>(\n\t\tnull,\n\t);\n\n\tconst [selectedMethod, setSelectedMethod] = useState(\n\t\tOnboardingMethods.QUICK_START,\n\t);\n\n\tconst [\n\t\tselectedDataSource,\n\t\tsetSelectedDataSource,\n\t] = useState<DataSourceType | null>(defaultApplicationDataSource);\n\n\tconst updateServiceName = (newValue: string): void => {\n\t\tsetServiceName(newValue);\n\t};\n\n\tconst updateSelectedModule = (module: ModuleProps): void => {\n\t\tsetSelectedModule(module);\n\t};\n\n\tconst updateSelectedDataSource = (dataSource: DataSourceType | null): void => {\n\t\tsetSelectedDataSource(dataSource);\n\t};\n\n\tconst updateSelectedEnvironment = (environment: any): void => {\n\t\tsetSelectedEnvironment(environment);\n\t};\n\n\tconst updateSelectedFramework = (framework: any): void => {\n\t\tsetSelectedFramework(framework);\n\t};\n\n\tconst updateSelectedMethod = (method: any): void => {\n\t\tsetSelectedMethod(method);\n\t};\n\n\tconst updateErrorDetails = (errorDetails: any): void => {\n\t\tsetErrorDetails(errorDetails);\n\t};\n\n\tconst updateActiveStep = (step: any): void => {\n\t\tsetActiveStep(step);\n\t};\n\n\tconst updateIngestionData = (ingestionData: any): void => {\n\t\tsetIngestionData(ingestionData);\n\t};\n\n\tconst resetProgress = (): void => {\n\t\tupdateServiceName('');\n\t\tsetSelectedModule(useCases.APM);\n\t\tsetSelectedDataSource(defaultApplicationDataSource);\n\t\tsetSelectedEnvironment('');\n\t\tsetSelectedFramework('');\n\t\tsetSelectedMethod(OnboardingMethods.QUICK_START);\n\t\tupdateActiveStep(null);\n\t};\n\n\t// eslint-disable-next-line react/jsx-no-constructed-context-values\n\tconst contextValue: OnboardingContextData = {\n\t\tactiveStep,\n\t\tserviceName,\n\t\tselectedModule,\n\t\tselectedDataSource,\n\t\tselectedFramework,\n\t\tselectedEnvironment,\n\t\tselectedMethod,\n\t\terrorDetails,\n\t\tingestionData,\n\t\tupdateServiceName,\n\t\tupdateSelectedModule,\n\t\tupdateSelectedFramework,\n\t\tupdateSelectedDataSource,\n\t\tupdateSelectedEnvironment,\n\t\tupdateSelectedMethod,\n\t\tresetProgress,\n\t\tupdateActiveStep,\n\t\tupdateErrorDetails,\n\t\tupdateIngestionData,\n\t};\n\n\treturn (\n\t\t<OnboardingContext.Provider value={contextValue}>\n\t\t\t{children}\n\t\t</OnboardingContext.Provider>\n\t);\n}\n\nconst useOnboardingContext = (): OnboardingContextData => {\n\tconst context = useContext(OnboardingContext);\n\tif (!context) {\n\t\tthrow new Error(\n\t\t\t'useOnboardingContext must be used within a OnboardingContextProvider',\n\t\t);\n\t}\n\treturn context;\n};\n\nexport { OnboardingContextProvider, useOnboardingContext };\n","import OnboardingContainer from './OnboardingContainer';\n\nexport default OnboardingContainer;\n","import ROUTES from 'constants/routes';\n\nimport { ModuleProps } from '../OnboardingContainer';\nimport { DataSourceType } from '../Steps/DataSource/DataSource';\n\nexport enum ModulesMap {\n\tAPM = 'APM',\n\tLogsManagement = 'LogsManagement',\n\tInfrastructureMonitoring = 'InfrastructureMonitoring',\n\tAwsMonitoring = 'AwsMonitoring',\n\tAzureMonitoring = 'AzureMonitoring',\n}\n\nexport const frameworksMap = {\n\tAPM: {\n\t\tjava: [\n\t\t\t{\n\t\t\t\tvalue: 'springBoot',\n\t\t\t\tlabel: 'Spring Boot',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'tomcat',\n\t\t\t\tlabel: 'Tomcat',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'jboss',\n\t\t\t\tlabel: 'JBoss',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'other',\n\t\t\t\tlabel: 'Others',\n\t\t\t},\n\t\t],\n\t\tjavascript: [\n\t\t\t{\n\t\t\t\tvalue: 'express',\n\t\t\t\tlabel: 'Express',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'nestjs',\n\t\t\t\tlabel: 'Nest JS',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'nodejs',\n\t\t\t\tlabel: 'Nodejs',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'reactjs',\n\t\t\t\tlabel: 'React JS',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'angular',\n\t\t\t\tlabel: 'Angular',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'others',\n\t\t\t\tlabel: 'Other Web Instrumentation',\n\t\t\t},\n\t\t],\n\t\tpython: [\n\t\t\t{\n\t\t\t\tvalue: 'django',\n\t\t\t\tlabel: 'Django',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'fastAPI',\n\t\t\t\tlabel: 'Fast API',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'flask',\n\t\t\t\tlabel: 'Flask',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'falcon',\n\t\t\t\tlabel: 'Falcon',\n\t\t\t},\n\t\t\t{\n\t\t\t\tvalue: 'other',\n\t\t\t\tlabel: 'Others',\n\t\t\t},\n\t\t],\n\t},\n\tLogsManagement: {},\n\tInfrastructureMonitoring: {},\n\tAwsMonitoring: {},\n\tAzureMonitoring: {},\n};\n\nexport const defaultApplicationDataSource = {\n\tname: 'java',\n\tid: 'java',\n\timgURL: `Logos/java.png`,\n};\n\nconst supportedLanguages = [\n\t{\n\t\tname: 'java',\n\t\tid: 'java',\n\t\timgURL: `/Logos/java.png`,\n\t},\n\t{\n\t\tname: 'python',\n\t\tid: 'python',\n\t\timgURL: `/Logos/python.png`,\n\t},\n\t{\n\t\tname: 'go',\n\t\tid: 'go',\n\t\timgURL: `/Logos/go.png`,\n\t},\n\t{\n\t\tname: 'javascript',\n\t\tid: 'javascript',\n\t\timgURL: `/Logos/javascript.png`,\n\t},\n\t{\n\t\tname: 'rails',\n\t\tid: 'rails',\n\t\timgURL: `/Logos/rails.png`,\n\t},\n\t{\n\t\tname: '.NET',\n\t\tid: 'dotnet',\n\t\timgURL: `/Logos/dotnet.png`,\n\t},\n\t{\n\t\tname: 'rust',\n\t\tid: 'rust',\n\t\timgURL: `/Logos/rust.png`,\n\t},\n\t{\n\t\tname: 'elixir',\n\t\tid: 'elixir',\n\t\timgURL: `/Logos/elixir.png`,\n\t},\n\t{\n\t\tname: 'swift',\n\t\tid: 'swift',\n\t\timgURL: `/Logos/swift.png`,\n\t},\n\t{\n\t\tname: 'php',\n\t\tid: 'php',\n\t\timgURL: `/Logos/php.png`,\n\t},\n];\n\nexport const defaultLogsType = {\n\tname: 'Kubernetes Pod Logs',\n\tid: 'kubernetes',\n\timgURL: `/Logos/kubernetes.svg`,\n};\n\nconst supportedLogsTypes = [\n\t{\n\t\tname: 'Kubernetes Pod Logs',\n\t\tid: 'kubernetes',\n\t\timgURL: `/Logos/kubernetes.svg`,\n\t},\n\t{\n\t\tname: 'Docker Container Logs',\n\t\tid: 'docker',\n\t\timgURL: `/Logos/docker.svg`,\n\t},\n\t{\n\t\tname: 'SysLogs',\n\t\tid: 'syslogs',\n\t\timgURL: `/Logos/syslogs.svg`,\n\t},\n\t{\n\t\tname: 'Application Logs',\n\t\tid: 'application_logs',\n\t\timgURL: `/Logos/software-window.svg`,\n\t},\n\t{\n\t\tname: 'FluentBit',\n\t\tid: 'fluentBit',\n\t\timgURL: `/Logos/fluent-bit.png`,\n\t},\n\t{\n\t\tname: 'FluentD',\n\t\tid: 'fluentD',\n\t\timgURL: `/Logos/fluentd.png`,\n\t},\n\t{\n\t\tname: 'LogStash',\n\t\tid: 'logStash',\n\t\timgURL: `/Logos/logstash.svg`,\n\t},\n\t{\n\t\tname: 'Heroku',\n\t\tid: 'heroku',\n\t\timgURL: `/Logos/heroku.png`,\n\t},\n\t{\n\t\tname: 'Vercel',\n\t\tid: 'vercel',\n\t\timgURL: `/Logos/vercel.png`,\n\t},\n\t{\n\t\tname: 'HTTP',\n\t\tid: 'http',\n\t\timgURL: `/Logos/http.png`,\n\t},\n\t{\n\t\tname: 'Cloudwatch',\n\t\tid: 'cloudwatch',\n\t\timgURL: `/Logos/cloudwatch.png`,\n\t},\n];\n\nexport const defaultInfraMetricsType = {\n\tname: 'Kubernetes Infra Metrics',\n\tid: 'kubernetesInfraMetrics',\n\timgURL: `/Logos/kubernetes.svg`,\n};\n\nconst supportedInfraMetrics = [\n\t{\n\t\tname: 'Kubernetes Infra Metrics',\n\t\tid: 'kubernetesInfraMetrics',\n\t\timgURL: `/Logos/kubernetes.svg`,\n\t},\n\t{\n\t\tname: 'HostMetrics',\n\t\tid: 'hostMetrics',\n\t\timgURL: `/Logos/software-window.svg`,\n\t},\n\t{\n\t\tname: 'Other Metrics',\n\t\tid: 'otherMetrics',\n\t\timgURL: `/Logos/cmd-terminal.svg`,\n\t},\n];\n\nexport const defaultAwsServices = {\n\tname: 'EC2 - App/Server Logs',\n\tid: 'awsEc2ApplicationLogs',\n\timgURL: `/Logos/ec2.svg`,\n};\n\nconst supportedAwsServices = [\n\t{\n\t\tname: 'EC2 - App/Server Logs',\n\t\tid: 'awsEc2ApplicationLogs',\n\t\timgURL: `/Logos/ec2.svg`,\n\t},\n\t{\n\t\tname: 'EC2 - Infra Metrics',\n\t\tid: 'awsEc2InfrastructureMetrics',\n\t\timgURL: `/Logos/ec2.svg`,\n\t},\n\t{\n\t\tname: 'ECS - EC2',\n\t\tid: 'awsEcsEc2',\n\t\timgURL: `/Logos/ecs.svg`,\n\t},\n\t{\n\t\tname: 'ECS - Fargate',\n\t\tid: 'awsEcsFargate',\n\t\timgURL: `/Logos/ecs.svg`,\n\t},\n\t{\n\t\tname: 'ECS - External',\n\t\tid: 'awsEcsExternal',\n\t\timgURL: `/Logos/ecs.svg`,\n\t},\n\t{\n\t\tname: 'EKS',\n\t\tid: 'awsEks',\n\t\timgURL: `/Logos/eks.svg`,\n\t},\n];\n\nexport const defaultAzureServices = {\n\tname: 'VM',\n\tid: 'azureVm',\n\timgURL: `/Logos/azure-vm.svg`,\n};\n\nconst supportedAzureServices = [\n\t{\n\t\tname: 'VM',\n\t\tid: 'azureVm',\n\t\timgURL: `/Logos/azure-vm.svg`,\n\t},\n\t{\n\t\tname: 'App Service',\n\t\tid: 'azureAppService',\n\t\timgURL: `/Logos/azure-app-service.svg`,\n\t},\n\t{\n\t\tname: 'AKS',\n\t\tid: 'azureAks',\n\t\timgURL: `/Logos/azure-aks.svg`,\n\t},\n\t{\n\t\tname: 'Azure Functions',\n\t\tid: 'azureFunctions',\n\t\timgURL: `/Logos/azure-functions.svg`,\n\t},\n\t{\n\t\tname: 'Azure Container Apps',\n\t\tid: 'azureContainerApps',\n\t\timgURL: `/Logos/azure-container-apps.svg`,\n\t},\n\t{\n\t\tname: 'SQL Database Metrics',\n\t\tid: 'azureSQLDatabaseMetrics',\n\t\timgURL: `/Logos/azure-sql-database-metrics.svg`,\n\t},\n\t{\n\t\tname: 'Azure Blob Storage',\n\t\tid: 'azureBlobStorage',\n\t\timgURL: `/Logos/azure-blob-storage.svg`,\n\t},\n];\n\nexport const getDataSources = (module: ModuleProps): DataSourceType[] => {\n\tif (module.id === ModulesMap.APM) {\n\t\treturn supportedLanguages;\n\t}\n\n\tif (module.id === ModulesMap.InfrastructureMonitoring) {\n\t\treturn supportedInfraMetrics;\n\t}\n\n\tif (module.id === ModulesMap.LogsManagement) {\n\t\treturn supportedLogsTypes;\n\t}\n\n\tif (module.id === ModulesMap.AwsMonitoring) {\n\t\treturn supportedAwsServices;\n\t}\n\n\treturn supportedAzureServices;\n};\n\nexport const getSupportedFrameworks = ({\n\tmodule,\n\tdataSource,\n}: {\n\tmodule: ModuleProps;\n\tdataSource: DataSourceType;\n}): [] => {\n\tconst { id: moduleID } = module;\n\tconst { name: dataSourceName } = dataSource;\n\n\tif (\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'go') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'rails') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === '.NET') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'rust') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'elixir') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'swift') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'php')\n\t) {\n\t\treturn [];\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t// @ts-ignore\n\treturn frameworksMap[moduleID][dataSourceName];\n};\n\nexport const hasFrameworks = ({\n\tmodule,\n\tdataSource,\n}: {\n\tmodule: ModuleProps;\n\tdataSource: any;\n}): boolean => {\n\tconst { id: moduleID } = module;\n\tconst { name: dataSourceName } = dataSource;\n\n\t// eslint-disable-next-line sonarjs/prefer-single-boolean-return\n\tif (\n\t\tmoduleID === ModulesMap.LogsManagement ||\n\t\tmoduleID === ModulesMap.InfrastructureMonitoring ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'go') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'rails') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === '.NET') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'rust') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'elixir') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'swift') ||\n\t\t(moduleID === ModulesMap.APM && dataSourceName === 'php')\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nexport const moduleRouteMap = {\n\t[ModulesMap.APM]: ROUTES.GET_STARTED_APPLICATION_MONITORING,\n\t[ModulesMap.LogsManagement]: ROUTES.GET_STARTED_LOGS_MANAGEMENT,\n\t[ModulesMap.InfrastructureMonitoring]:\n\t\tROUTES.GET_STARTED_INFRASTRUCTURE_MONITORING,\n\t[ModulesMap.AwsMonitoring]: ROUTES.GET_STARTED_AWS_MONITORING,\n\t[ModulesMap.AzureMonitoring]: ROUTES.GET_STARTED_AZURE_MONITORING,\n};\n\nexport const messagingQueueKakfaSupportedDataSources = ['java'];\n","import {\n\tAddHttpDrain,\n\tCheckServiceStatus,\n\tCloneRepo,\n\tConfigureAws,\n\tConfigureHostmetricsJSON,\n\tConfigureMetricsReceiver,\n\tConfigureReceiver,\n\tCreateDaemonService,\n\tCreateHttpPayload,\n\tCreateOtelConfig,\n\tCreateSidecarCollectorContainer,\n\tDataSourceStep,\n\tDeployTaskDefinition,\n\tEcsSendData,\n\tEcsSendLogsData,\n\tEnvDetailsStep,\n\tInstallOpenTelemetryStep,\n\tLogsTestConnectionStep,\n\tMonitorDashboard,\n\tPlotMetrics,\n\tRestartOtelCollector,\n\tRunApplicationStep,\n\tSelectMethodStep,\n\tSendHostmetricsLogs,\n\tSendLogs,\n\tSendLogsCloudwatch,\n\tSendMetrics,\n\tSendTraces,\n\tSetupAzureEventsHub,\n\tSetupCentralCollectorStep,\n\tSetupDaemonService,\n\tSetupLogDrains,\n\tSetupOtelCollectorStep,\n\tStartContainer,\n\tTestConnectionStep,\n} from '../constants/stepsConfig';\nimport { ModuleProps, SelectedModuleStepProps } from '../OnboardingContainer';\nimport { DataSourceType } from '../Steps/DataSource/DataSource';\n\ninterface GetStepsProps {\n\tselectedModule?: ModuleProps;\n\tselectedDataSource: DataSourceType | null;\n}\n\nexport const APM_STEPS: SelectedModuleStepProps[] = [\n\tDataSourceStep,\n\tEnvDetailsStep,\n\tSelectMethodStep,\n\tSetupOtelCollectorStep,\n\tInstallOpenTelemetryStep,\n\tRunApplicationStep,\n\tTestConnectionStep,\n];\n\nexport const LOGS_MANAGEMENT_STEPS: SelectedModuleStepProps[] = [\n\tDataSourceStep,\n];\n\nexport const INFRASTRUCTURE_MONITORING_STEPS: SelectedModuleStepProps[] = [\n\tDataSourceStep,\n];\n\nexport const AWS_MONITORING_STEPS: SelectedModuleStepProps[] = [DataSourceStep];\n\nexport const AZURE_MONITORING_STEPS: SelectedModuleStepProps[] = [\n\tDataSourceStep,\n];\n\nexport const getSteps = ({\n\tselectedDataSource,\n}: GetStepsProps): SelectedModuleStepProps[] => {\n\tconst { id: selectedDataSourceID = '' } = selectedDataSource as DataSourceType;\n\n\tswitch (selectedDataSourceID) {\n\t\tcase 'kubernetes':\n\t\t\treturn [DataSourceStep, SetupOtelCollectorStep, LogsTestConnectionStep];\n\n\t\tcase 'docker':\n\t\t\treturn [DataSourceStep, CloneRepo, StartContainer, LogsTestConnectionStep];\n\n\t\tcase 'syslogs':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tEnvDetailsStep,\n\t\t\t\tSetupOtelCollectorStep,\n\t\t\t\tConfigureReceiver,\n\t\t\t\tCheckServiceStatus,\n\t\t\t];\n\n\t\tcase 'application_logs':\n\t\tcase 'fluentD':\n\t\tcase 'fluentBit':\n\t\tcase 'logStash':\n\t\tcase 'awsEc2ApplicationLogs':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tEnvDetailsStep,\n\t\t\t\tSetupOtelCollectorStep,\n\t\t\t\tConfigureReceiver,\n\t\t\t\tRestartOtelCollector,\n\t\t\t];\n\t\tcase 'heroku':\n\t\t\treturn [DataSourceStep, AddHttpDrain];\n\t\tcase 'vercel':\n\t\t\treturn [DataSourceStep, SetupLogDrains];\n\t\tcase 'http':\n\t\t\treturn [DataSourceStep, CreateHttpPayload];\n\t\tcase 'cloudwatch':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tEnvDetailsStep,\n\t\t\t\tSetupOtelCollectorStep,\n\t\t\t\tConfigureAws,\n\t\t\t\tConfigureReceiver,\n\t\t\t\tSendLogsCloudwatch,\n\t\t\t];\n\n\t\tcase 'kubernetesInfraMetrics':\n\t\t\treturn [DataSourceStep, SetupOtelCollectorStep, PlotMetrics];\n\t\tcase 'hostMetrics':\n\t\tcase 'awsEc2InfrastructureMetrics':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tEnvDetailsStep,\n\t\t\t\tSetupOtelCollectorStep,\n\t\t\t\tConfigureHostmetricsJSON,\n\t\t\t];\n\t\tcase 'otherMetrics':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tEnvDetailsStep,\n\t\t\t\tSetupOtelCollectorStep,\n\t\t\t\tConfigureMetricsReceiver,\n\t\t\t];\n\t\tcase 'awsEcsExternal':\n\t\tcase 'awsEcsEc2':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tSetupDaemonService,\n\t\t\t\tCreateOtelConfig,\n\t\t\t\tCreateDaemonService,\n\t\t\t\tEcsSendData,\n\t\t\t];\n\n\t\tcase 'awsEcsFargate':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tCreateOtelConfig,\n\t\t\t\tCreateSidecarCollectorContainer,\n\t\t\t\tDeployTaskDefinition,\n\t\t\t\tEcsSendData,\n\t\t\t\tEcsSendLogsData,\n\t\t\t];\n\t\tcase 'awsEks':\n\t\t\treturn [DataSourceStep, SetupOtelCollectorStep, MonitorDashboard];\n\t\tcase 'azureVm':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tSetupAzureEventsHub,\n\t\t\t\tSetupCentralCollectorStep,\n\t\t\t\tSendHostmetricsLogs,\n\t\t\t];\n\t\t// eslint-disable-next-line sonarjs/no-duplicated-branches\n\t\tcase 'azureAks':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tSetupAzureEventsHub,\n\t\t\t\tSetupCentralCollectorStep,\n\t\t\t\tSendTraces,\n\t\t\t\tSendLogs,\n\t\t\t\tSendMetrics,\n\t\t\t];\n\t\t// eslint-disable-next-line sonarjs/no-duplicated-branches\n\t\tcase 'azureAppService':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tSetupAzureEventsHub,\n\t\t\t\tSetupCentralCollectorStep,\n\t\t\t\tSendTraces,\n\t\t\t\tSendLogs,\n\t\t\t\tSendMetrics,\n\t\t\t];\n\t\t// eslint-disable-next-line sonarjs/no-duplicated-branches\n\t\tcase 'azureFunctions':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tSetupAzureEventsHub,\n\t\t\t\tSetupCentralCollectorStep,\n\t\t\t\tSendTraces,\n\t\t\t\tSendLogs,\n\t\t\t\tSendMetrics,\n\t\t\t];\n\t\t// eslint-disable-next-line sonarjs/no-duplicated-branches\n\t\tcase 'azureContainerApps':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tSetupAzureEventsHub,\n\t\t\t\tSetupCentralCollectorStep,\n\t\t\t\tSendTraces,\n\t\t\t\tSendLogs,\n\t\t\t\tSendMetrics,\n\t\t\t];\n\t\t// eslint-disable-next-line sonarjs/no-duplicated-branches\n\t\tcase 'azureBlobStorage':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tSetupAzureEventsHub,\n\t\t\t\tSetupCentralCollectorStep,\n\t\t\t\tSendLogs,\n\t\t\t\tSendMetrics,\n\t\t\t];\n\t\t// eslint-disable-next-line sonarjs/no-duplicated-branches\n\t\tcase 'azureSQLDatabaseMetrics':\n\t\t\treturn [\n\t\t\t\tDataSourceStep,\n\t\t\t\tSetupAzureEventsHub,\n\t\t\t\tSetupCentralCollectorStep,\n\t\t\t\tSendMetrics,\n\t\t\t];\n\n\t\tdefault:\n\t\t\treturn [DataSourceStep];\n\t}\n};\n","import getService from 'api/metrics/getService';\nimport { AxiosError } from 'axios';\nimport { Time } from 'container/TopNav/DateTimeSelection/config';\nimport {\n\tCustomTimeType,\n\tTime as TimeV2,\n} from 'container/TopNav/DateTimeSelectionV2/config';\nimport {\n\tQueryKey,\n\tuseQuery,\n\tUseQueryOptions,\n\tUseQueryResult,\n} from 'react-query';\nimport { PayloadProps } from 'types/api/metrics/getService';\nimport { Tags } from 'types/reducer/trace';\n\nexport const useQueryService = ({\n\tminTime,\n\tmaxTime,\n\tselectedTime,\n\tselectedTags,\n\toptions,\n}: UseQueryServiceProps): UseQueryResult<PayloadProps, AxiosError> =>\n\tuseQuery<PayloadProps, AxiosError>({\n\t\tqueryFn: () => getService({ end: maxTime, selectedTags, start: minTime }),\n\t\tqueryKey: [minTime, maxTime, selectedTime, selectedTags],\n\t\t...options,\n\t});\n\ninterface UseQueryServiceProps {\n\tminTime: number;\n\tmaxTime: number;\n\tselectedTime: Time | TimeV2 | CustomTimeType;\n\tselectedTags: Tags[];\n\toptions?: UseQueryOptions<PayloadProps, AxiosError, PayloadProps, QueryKey>;\n}\n","import './OnboardingPage.styles.scss';\n\nimport OnboardingContainer from 'container/OnboardingContainer';\nimport { OnboardingContextProvider } from 'container/OnboardingContainer/context/OnboardingContext';\n\nfunction OnboardingPage(): JSX.Element {\n\treturn (\n\t\t<OnboardingContextProvider>\n\t\t\t<div className=\"onboardingPageContainer\">\n\t\t\t\t<OnboardingContainer />\n\t\t\t</div>\n\t\t</OnboardingContextProvider>\n\t);\n}\n\nexport default OnboardingPage;\n","import OnboardingPage from './OnboardingPage';\n\nexport default OnboardingPage;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".code-snippet-container{position:relative;background-color:#111a2c;border-color:#111a2c}.code-copy-btn{position:absolute;top:8px;right:8px;display:flex;justify-content:flex-end;align-items:center}.code-copy-btn button{cursor:pointer;background-color:rgba(29,29,29,.7);color:#fff;border:none;padding:8px;border-radius:3px;transition:all .1s}.code-copy-btn button:hover{background-color:#1d1d1d}.code-copy-btn.copied button{background-color:#52c41a}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/components/MarkdownRenderer/CodeCopyBtn/CodeCopyBtn.scss\"],\"names\":[],\"mappings\":\"AAAA,wBACC,iBAAA,CAEA,wBAAA,CACA,oBAAA,CAGD,eACC,iBAAA,CACA,OAAA,CACA,SAAA,CACA,YAAA,CACA,wBAAA,CACA,kBAAA,CAEA,sBACC,cAAA,CAEA,kCAAA,CACA,UAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CACA,kBAAA,CAEA,4BACC,wBAAA,CAKD,6BACC,wBAAA\",\"sourcesContent\":[\".code-snippet-container {\\n\\tposition: relative;\\n\\t// background-color: rgb(43, 43, 43);\\n\\tbackground-color: #111a2c;\\n\\tborder-color: #111a2c;\\n}\\n\\n.code-copy-btn {\\n\\tposition: absolute;\\n\\ttop: 8px;\\n\\tright: 8px;\\n\\tdisplay: flex;\\n\\tjustify-content: flex-end;\\n\\talign-items: center;\\n\\n\\tbutton {\\n\\t\\tcursor: pointer;\\n\\n\\t\\tbackground-color: rgba($color: #1d1d1d, $alpha: 0.7);\\n\\t\\tcolor: white;\\n\\t\\tborder: none;\\n\\t\\tpadding: 8px;\\n\\t\\tborder-radius: 3px;\\n\\t\\ttransition: all 0.1s;\\n\\n\\t\\t&:hover {\\n\\t\\t\\tbackground-color: rgba($color: #1d1d1d, $alpha: 1);\\n\\t\\t}\\n\\t}\\n\\n\\t&.copied {\\n\\t\\tbutton {\\n\\t\\t\\tbackground-color: rgba($color: #52c41a, $alpha: 1);\\n\\t\\t}\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".full-screen-header-container{display:flex;justify-content:center;align-items:center;padding:24px 0}.full-screen-header-container .brand-logo{display:flex;justify-content:center;align-items:center;gap:16px;cursor:pointer}.full-screen-header-container .brand-logo img{height:32px;width:32px}.full-screen-header-container .brand-logo .brand-logo-name{font-family:\\\"Work Sans\\\",sans-serif;font-size:24px;font-style:normal;font-weight:500;line-height:18px;color:#fff}.lightMode .brand-logo .brand-logo-name{color:#000}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/container/FullScreenHeader/FullScreenHeader.styles.scss\"],\"names\":[],\"mappings\":\"AAAA,8BACC,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,cAAA,CAEA,0CACC,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,QAAA,CACA,cAAA,CAEA,8CACC,WAAA,CACA,UAAA,CAGD,2DACC,kCAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CACA,gBAAA,CAEA,UAAA,CAOD,wCACC,UAAA\",\"sourcesContent\":[\".full-screen-header-container {\\n\\tdisplay: flex;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tpadding: 24px 0;\\n\\n\\t.brand-logo {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: center;\\n\\t\\talign-items: center;\\n\\t\\tgap: 16px;\\n\\t\\tcursor: pointer;\\n\\n\\t\\timg {\\n\\t\\t\\theight: 32px;\\n\\t\\t\\twidth: 32px;\\n\\t\\t}\\n\\n\\t\\t.brand-logo-name {\\n\\t\\t\\tfont-family: 'Work Sans', sans-serif;\\n\\t\\t\\tfont-size: 24px;\\n\\t\\t\\tfont-style: normal;\\n\\t\\t\\tfont-weight: 500;\\n\\t\\t\\tline-height: 18px;\\n\\n\\t\\t\\tcolor: #fff;\\n\\t\\t}\\n\\t}\\n}\\n\\n.lightMode {\\n\\t.brand-logo {\\n\\t\\t.brand-logo-name {\\n\\t\\t\\tcolor: black;\\n\\t\\t}\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".container{width:100%;margin:0 auto}.moduleSelectContainer{width:100%}.onboardingContainer{display:flex;flex-direction:column;gap:16px;text-align:center;justify-content:center;align-items:center;height:100%;width:100%;color:#e5e7eb}.onboardingHeader{text-align:center;margin-top:24px}.onboardingHeader h1{font-size:24px;font-weight:500;margin:0}.modulesContainer{display:block;padding:24px}.moduleContainerRowStyles{display:flex;flex-direction:row;justify-content:center;gap:36px;margin:36px;flex-wrap:wrap}.moduleStyles{padding:0;box-sizing:border-box;cursor:pointer;width:300px;transition:.3s;background-color:#000}.moduleStyles .ant-card-body{padding:0px}.moduleStyles:hover{transform:scale(1.05)}.moduleTitleStyle{font-size:16px;font-weight:500;padding:16px;margin:0px !important;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:center;border-bottom:1px solid #303030;background-color:var(--bg-ink-400)}.moduleStyles.selected{border:1px solid rgba(232,112,64,.6) !important}.moduleStyles.selected .moduleTitleStyle{border-bottom:1px solid rgba(232,112,64,.6) !important}.moduleDesc{padding:24px;margin:0px !important;min-height:100px}.modules-container{display:flex}.continue-to-next-step{display:flex;justify-content:center;margin:48px 0}.stepsContainer{position:relative;height:100%;padding:24px}.actionButtonsContainer{display:flex;align-items:center;gap:8px;box-sizing:border-box;align-items:center}.ant-steps-item-description{font-size:12px !important;max-width:100% !important}.supported-environments-container{display:flex;flex-wrap:wrap;gap:24px}.supported-environments-container .environment{cursor:pointer}.detailed-docs-link{display:flex;margin:8px 0;font-size:12px}.detailed-docs-link a{padding-left:4px}.request-entity-container{display:flex;flex-direction:row;justify-content:space-between;align-items:center;border-radius:4px;border:.5px solid rgba(78,116,248,.2);background:rgba(69,104,220,.1);padding:12px;margin:24px 0}.invite-member-wrapper{display:flex;justify-content:center;align-items:center;margin:32px 0;flex-direction:column;gap:12px}.invite-member-wrapper .invite-member{display:flex;width:480px;height:64px;padding:16px;justify-content:space-between;align-items:center;flex-shrink:0;border-radius:4px;border:1px solid var(--bg-slate-500);background:var(--bg-ink-400)}.invite-member-wrapper .invite-member .ant-typography{color:var(--bg-vanilla-400);font-family:Inter;font-size:14px;font-style:normal;font-weight:500;line-height:20px}.invite-member-wrapper .invite-member>button{display:flex;align-items:center;border-radius:2px}.onboarding-page{display:flex;flex-direction:column;height:100%;align-items:center;justify-content:space-between}.skip-to-console{color:var(--bg-vanilla-400);font-family:Inter;font-size:14px;font-style:normal;font-weight:500;line-height:20px;position:absolute;top:40px;right:40px;cursor:pointer}.skip-to-console:hover{color:var(--bg-vanilla-200)}.lightMode .invite-member-wrapper .invite-member{border:1px solid var(--bg-vanilla-200);background:var(--bg-vanilla-100)}.lightMode .invite-member-wrapper .invite-member .ant-typography{color:var(--bg-slate-200)}.lightMode .skip-to-console{color:var(--bg-slate-200)}.lightMode .skip-to-console:hover{color:var(--bg-slate-200)}.lightMode .container .onboardingHeader{color:var(--bg-slate-200)}.lightMode .moduleStyles{background-color:var(--bg-vanilla-100)}.lightMode .moduleTitleStyle{border-bottom:1px solid var(--bg-vanilla-300);background-color:var(--bg-vanilla-100)}.lightMode .moduleDesc{background-color:var(--bg-vanilla-100)}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/container/OnboardingContainer/Onboarding.styles.scss\"],\"names\":[],\"mappings\":\"AAAA,WACC,UAAA,CACA,aAAA,CAGD,uBACC,UAAA,CAGD,qBACC,YAAA,CACA,qBAAA,CACA,QAAA,CACA,iBAAA,CACA,sBAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,aAAA,CAGD,kBACC,iBAAA,CACA,eAAA,CAGD,qBACC,cAAA,CACA,eAAA,CACA,QAAA,CAGD,kBACC,aAAA,CACA,YAAA,CAGD,0BACC,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,QAAA,CACA,WAAA,CACA,cAAA,CAGD,cACC,SAAA,CACA,qBAAA,CACA,cAAA,CACA,WAAA,CACA,cAAA,CAEA,qBAAA,CAEA,6BACC,WAAA,CAGD,oBACC,qBAAA,CAIF,kBACC,cAAA,CACA,eAAA,CACA,YAAA,CACA,qBAAA,CAEA,kBAAA,CACA,eAAA,CACA,sBAAA,CACA,iBAAA,CAEA,+BAAA,CACA,kCAAA,CAGD,uBACC,+CAAA,CAEA,yCACC,sDAAA,CAIF,YACC,YAAA,CACA,qBAAA,CACA,gBAAA,CAGD,mBACC,YAAA,CAGD,uBACC,YAAA,CACA,sBAAA,CACA,aAAA,CAGD,gBACC,iBAAA,CACA,WAAA,CACA,YAAA,CAGD,wBACC,YAAA,CACA,kBAAA,CACA,OAAA,CACA,qBAAA,CACA,kBAAA,CAGD,4BACC,yBAAA,CACA,yBAAA,CAGD,kCACC,YAAA,CACA,cAAA,CACA,QAAA,CAEA,+CACC,cAAA,CAIF,oBACC,YAAA,CACA,YAAA,CACA,cAAA,CAEA,sBACC,gBAAA,CAIF,0BACC,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,kBAAA,CAEA,iBAAA,CACA,qCAAA,CACA,8BAAA,CACA,YAAA,CACA,aAAA,CAGD,uBACC,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,aAAA,CACA,qBAAA,CACA,QAAA,CAEA,sCACC,YAAA,CACA,WAAA,CACA,WAAA,CACA,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,aAAA,CACA,iBAAA,CACA,oCAAA,CACA,4BAAA,CAEA,sDACC,2BAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CACA,gBAAA,CAGD,6CACC,YAAA,CACA,kBAAA,CACA,iBAAA,CAKH,iBACC,YAAA,CACA,qBAAA,CACA,WAAA,CACA,kBAAA,CACA,6BAAA,CAGD,iBACC,2BAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CACA,gBAAA,CACA,iBAAA,CACA,QAAA,CACA,UAAA,CACA,cAAA,CAEA,uBACC,2BAAA,CAMA,iDACC,sCAAA,CACA,gCAAA,CAEA,iEACC,yBAAA,CAKH,4BACC,yBAAA,CAEA,kCACC,yBAAA,CAOD,wCACC,yBAAA,CAIF,yBACC,sCAAA,CAGD,6BACC,6CAAA,CACA,sCAAA,CAGD,uBACC,sCAAA\",\"sourcesContent\":[\".container {\\n\\twidth: 100%;\\n\\tmargin: 0 auto;\\n}\\n\\n.moduleSelectContainer {\\n\\twidth: 100%;\\n}\\n\\n.onboardingContainer {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tgap: 16px;\\n\\ttext-align: center;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\theight: 100%;\\n\\twidth: 100%;\\n\\tcolor: #e5e7eb;\\n}\\n\\n.onboardingHeader {\\n\\ttext-align: center;\\n\\tmargin-top: 24px;\\n}\\n\\n.onboardingHeader h1 {\\n\\tfont-size: 24px;\\n\\tfont-weight: 500;\\n\\tmargin: 0;\\n}\\n\\n.modulesContainer {\\n\\tdisplay: block;\\n\\tpadding: 24px;\\n}\\n\\n.moduleContainerRowStyles {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tjustify-content: center;\\n\\tgap: 36px;\\n\\tmargin: 36px;\\n\\tflex-wrap: wrap;\\n}\\n\\n.moduleStyles {\\n\\tpadding: 0;\\n\\tbox-sizing: border-box;\\n\\tcursor: pointer;\\n\\twidth: 300px;\\n\\ttransition: 0.3s;\\n\\n\\tbackground-color: #000;\\n\\n\\t.ant-card-body {\\n\\t\\tpadding: 0px;\\n\\t}\\n\\n\\t&:hover {\\n\\t\\ttransform: scale(1.05);\\n\\t}\\n}\\n\\n.moduleTitleStyle {\\n\\tfont-size: 16px;\\n\\tfont-weight: 500;\\n\\tpadding: 16px;\\n\\tmargin: 0px !important;\\n\\n\\twhite-space: nowrap;\\n\\toverflow: hidden;\\n\\ttext-overflow: ellipsis;\\n\\ttext-align: center;\\n\\n\\tborder-bottom: 1px solid #303030;\\n\\tbackground-color: var(--bg-ink-400);\\n}\\n\\n.moduleStyles.selected {\\n\\tborder: 1px solid rgb(232, 112, 64, 0.6) !important;\\n\\n\\t.moduleTitleStyle {\\n\\t\\tborder-bottom: 1px solid rgb(232, 112, 64, 0.6) !important;\\n\\t}\\n}\\n\\n.moduleDesc {\\n\\tpadding: 24px;\\n\\tmargin: 0px !important;\\n\\tmin-height: 100px;\\n}\\n\\n.modules-container {\\n\\tdisplay: flex;\\n}\\n\\n.continue-to-next-step {\\n\\tdisplay: flex;\\n\\tjustify-content: center;\\n\\tmargin: 48px 0;\\n}\\n\\n.stepsContainer {\\n\\tposition: relative;\\n\\theight: 100%;\\n\\tpadding: 24px;\\n}\\n\\n.actionButtonsContainer {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tgap: 8px;\\n\\tbox-sizing: border-box;\\n\\talign-items: center;\\n}\\n\\n.ant-steps-item-description {\\n\\tfont-size: 12px !important;\\n\\tmax-width: 100% !important;\\n}\\n\\n.supported-environments-container {\\n\\tdisplay: flex;\\n\\tflex-wrap: wrap;\\n\\tgap: 24px;\\n\\n\\t.environment {\\n\\t\\tcursor: pointer;\\n\\t}\\n}\\n\\n.detailed-docs-link {\\n\\tdisplay: flex;\\n\\tmargin: 8px 0;\\n\\tfont-size: 12px;\\n\\n\\ta {\\n\\t\\tpadding-left: 4px;\\n\\t}\\n}\\n\\n.request-entity-container {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\tjustify-content: space-between;\\n\\talign-items: center;\\n\\n\\tborder-radius: 4px;\\n\\tborder: 0.5px solid rgba(78, 116, 248, 0.2);\\n\\tbackground: rgba(69, 104, 220, 0.1);\\n\\tpadding: 12px;\\n\\tmargin: 24px 0;\\n}\\n\\n.invite-member-wrapper {\\n\\tdisplay: flex;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tmargin: 32px 0;\\n\\tflex-direction: column;\\n\\tgap: 12px;\\n\\n\\t.invite-member {\\n\\t\\tdisplay: flex;\\n\\t\\twidth: 480px;\\n\\t\\theight: 64px;\\n\\t\\tpadding: 16px;\\n\\t\\tjustify-content: space-between;\\n\\t\\talign-items: center;\\n\\t\\tflex-shrink: 0;\\n\\t\\tborder-radius: 4px;\\n\\t\\tborder: 1px solid var(--bg-slate-500);\\n\\t\\tbackground: var(--bg-ink-400);\\n\\n\\t\\t.ant-typography {\\n\\t\\t\\tcolor: var(--bg-vanilla-400);\\n\\t\\t\\tfont-family: Inter;\\n\\t\\t\\tfont-size: 14px;\\n\\t\\t\\tfont-style: normal;\\n\\t\\t\\tfont-weight: 500;\\n\\t\\t\\tline-height: 20px;\\n\\t\\t}\\n\\n\\t\\t> button {\\n\\t\\t\\tdisplay: flex;\\n\\t\\t\\talign-items: center;\\n\\t\\t\\tborder-radius: 2px;\\n\\t\\t}\\n\\t}\\n}\\n\\n.onboarding-page {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\theight: 100%;\\n\\talign-items: center;\\n\\tjustify-content: space-between;\\n}\\n\\n.skip-to-console {\\n\\tcolor: var(--bg-vanilla-400);\\n\\tfont-family: Inter;\\n\\tfont-size: 14px;\\n\\tfont-style: normal;\\n\\tfont-weight: 500;\\n\\tline-height: 20px;\\n\\tposition: absolute;\\n\\ttop: 40px;\\n\\tright: 40px;\\n\\tcursor: pointer;\\n\\n\\t&:hover {\\n\\t\\tcolor: var(--bg-vanilla-200);\\n\\t}\\n}\\n\\n.lightMode {\\n\\t.invite-member-wrapper {\\n\\t\\t.invite-member {\\n\\t\\t\\tborder: 1px solid var(--bg-vanilla-200);\\n\\t\\t\\tbackground: var(--bg-vanilla-100);\\n\\n\\t\\t\\t.ant-typography {\\n\\t\\t\\t\\tcolor: var(--bg-slate-200);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t.skip-to-console {\\n\\t\\tcolor: var(--bg-slate-200);\\n\\n\\t\\t&:hover {\\n\\t\\t\\tcolor: var(--bg-slate-200);\\n\\t\\t}\\n\\t}\\n}\\n\\n.lightMode {\\n\\t.container {\\n\\t\\t.onboardingHeader {\\n\\t\\t\\tcolor: var(--bg-slate-200);\\n\\t\\t}\\n\\t}\\n\\n\\t.moduleStyles {\\n\\t\\tbackground-color: var(--bg-vanilla-100);\\n\\t}\\n\\n\\t.moduleTitleStyle {\\n\\t\\tborder-bottom: 1px solid var(--bg-vanilla-300);\\n\\t\\tbackground-color: var(--bg-vanilla-100);\\n\\t}\\n\\n\\t.moduleDesc {\\n\\t\\tbackground-color: var(--bg-vanilla-100);\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".connection-status-container{height:calc(100vh - 420px)}.connection-status-container .full-docs-link{margin-bottom:36px}.connection-status-container .full-docs-link .header{display:flex;align-items:center;gap:16px;margin:16px 0}.connection-status-container .full-docs-link .header img{height:40px}.connection-status-container .full-docs-link .header h1{font-size:18px;display:flex;align-items:center;color:#e5e7eb;gap:16px;margin:0px}.connection-status-container .status-container{display:flex;justify-content:space-between;gap:24px}.connection-status-container .status-container .title{text-transform:capitalize}.connection-status-container .service-info,.connection-status-container .language-info,.connection-status-container .status-info,.connection-status-container .details-info{display:flex;gap:8px;flex-direction:column}.connection-status-container .language-info .language{text-transform:capitalize}.connection-status-container .service-info{flex:2}.connection-status-container .language-info{flex:2}.connection-status-container .status-info{flex:1}.connection-status-container .details-info{flex:3}.connection-status-container .status{display:flex;gap:8px}.connection-status-container .status svg{width:16px;height:16px}.lightMode .connection-status-container .header .title{color:#1d1d1d}.lightMode .connection-status-container .header .title h1{color:#1d1d1d}.lightMode .connection-status-container .status-container{color:#1d1d1d}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/container/OnboardingContainer/Steps/ConnectionStatus/ConnectionStatus.styles.scss\"],\"names\":[],\"mappings\":\"AAAA,6BACC,0BAAA,CAEA,6CACC,kBAAA,CAEA,qDACC,YAAA,CACA,kBAAA,CACA,QAAA,CACA,aAAA,CAEA,yDACC,WAAA,CAGD,wDACC,cAAA,CACA,YAAA,CACA,kBAAA,CACA,aAAA,CACA,QAAA,CACA,UAAA,CAKH,+CACC,YAAA,CACA,6BAAA,CACA,QAAA,CAEA,sDACC,yBAAA,CAIF,4KAIC,YAAA,CACA,OAAA,CACA,qBAAA,CAIA,sDACC,yBAAA,CAIF,2CACC,MAAA,CAGD,4CACC,MAAA,CAGD,0CACC,MAAA,CAGD,2CACC,MAAA,CAGD,qCACC,YAAA,CACA,OAAA,CAEA,yCACC,UAAA,CACA,WAAA,CASD,uDACC,aALkB,CAOlB,0DACC,aARiB,CAYnB,0DACC,aAbkB\",\"sourcesContent\":[\".connection-status-container {\\n\\theight: calc(100vh - 420px);\\n\\n\\t.full-docs-link {\\n\\t\\tmargin-bottom: 36px;\\n\\n\\t\\t.header {\\n\\t\\t\\tdisplay: flex;\\n\\t\\t\\talign-items: center;\\n\\t\\t\\tgap: 16px;\\n\\t\\t\\tmargin: 16px 0;\\n\\n\\t\\t\\timg {\\n\\t\\t\\t\\theight: 40px;\\n\\t\\t\\t}\\n\\n\\t\\t\\th1 {\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t\\tdisplay: flex;\\n\\t\\t\\t\\talign-items: center;\\n\\t\\t\\t\\tcolor: #e5e7eb;\\n\\t\\t\\t\\tgap: 16px;\\n\\t\\t\\t\\tmargin: 0px;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t.status-container {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\tgap: 24px;\\n\\n\\t\\t.title {\\n\\t\\t\\ttext-transform: capitalize;\\n\\t\\t}\\n\\t}\\n\\n\\t.service-info,\\n\\t.language-info,\\n\\t.status-info,\\n\\t.details-info {\\n\\t\\tdisplay: flex;\\n\\t\\tgap: 8px;\\n\\t\\tflex-direction: column;\\n\\t}\\n\\n\\t.language-info {\\n\\t\\t.language {\\n\\t\\t\\ttext-transform: capitalize;\\n\\t\\t}\\n\\t}\\n\\n\\t.service-info {\\n\\t\\tflex: 2;\\n\\t}\\n\\n\\t.language-info {\\n\\t\\tflex: 2;\\n\\t}\\n\\n\\t.status-info {\\n\\t\\tflex: 1;\\n\\t}\\n\\n\\t.details-info {\\n\\t\\tflex: 3;\\n\\t}\\n\\n\\t.status {\\n\\t\\tdisplay: flex;\\n\\t\\tgap: 8px;\\n\\n\\t\\tsvg {\\n\\t\\t\\twidth: 16px;\\n\\t\\t\\theight: 16px;\\n\\t\\t}\\n\\t}\\n}\\n\\n$lightModeFontColor: rgb(29, 29, 29);\\n\\n.lightMode {\\n\\t.connection-status-container {\\n\\t\\t.header .title {\\n\\t\\t\\tcolor: $lightModeFontColor;\\n\\n\\t\\t\\th1 {\\n\\t\\t\\t\\tcolor: $lightModeFontColor;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t.status-container {\\n\\t\\t\\tcolor: $lightModeFontColor;\\n\\t\\t}\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"div[class*=-setup-instructions-container] .header{display:flex;align-items:center;margin:16px 0}div[class*=-setup-instructions-container] .header img{height:40px}div[class*=-setup-instructions-container] .header h1{font-size:18px;display:flex;align-items:center;color:#e5e7eb;gap:16px;margin:12px}.form-container{display:flex;flex-direction:column;align-items:flex-start;width:100%;gap:16px;margin-top:24px}.source-name{width:80%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-align:center;font-size:12px}.service-name-container{width:100%}.intgeration-page-container{background-color:var(--bg-ink-400);border-color:var(--bg-slate-500)}.intgeration-page-container-text{color:var(--bg-vanilla-400)}.navigate-integrations-page-btn{display:flex;align-items:center;color:var(--bg-vanilla-100);background-color:var(--bg-slate-300);box-shadow:none;border:none}.dataSourceName{color:var(--bg-vanilla-100);font-weight:600;cursor:pointer;display:flex;align-items:center;gap:8px}.lightMode .dataSourceName{color:var(--bg-slate-500)}.supported-languages-container .disabled{cursor:not-allowed;opacity:.5}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/container/OnboardingContainer/Steps/DataSource/DataSource.styles.scss\"],\"names\":[],\"mappings\":\"AACC,kDACC,YAAA,CACA,kBAAA,CAEA,aAAA,CAEA,sDACC,WAAA,CAGD,qDACC,cAAA,CACA,YAAA,CACA,kBAAA,CACA,aAAA,CACA,QAAA,CACA,WAAA,CAKH,gBACC,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,UAAA,CACA,QAAA,CACA,eAAA,CAGD,aACC,SAAA,CACA,kBAAA,CACA,eAAA,CACA,sBAAA,CACA,iBAAA,CACA,cAAA,CAGD,wBACC,UAAA,CAGD,4BACC,kCAAA,CACA,gCAAA,CAGD,iCACC,2BAAA,CAGD,gCACC,YAAA,CACA,kBAAA,CACA,2BAAA,CACA,oCAAA,CACA,eAAA,CACA,WAAA,CAGD,gBACC,2BAAA,CACA,eAAA,CACA,cAAA,CAEA,YAAA,CACA,kBAAA,CACA,OAAA,CAIA,2BACC,yBAAA,CAKD,yCACC,kBAAA,CACA,UAAA\",\"sourcesContent\":[\"div[class*='-setup-instructions-container'] {\\n\\t.header {\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\n\\t\\tmargin: 16px 0;\\n\\n\\t\\timg {\\n\\t\\t\\theight: 40px;\\n\\t\\t}\\n\\n\\t\\th1 {\\n\\t\\t\\tfont-size: 18px;\\n\\t\\t\\tdisplay: flex;\\n\\t\\t\\talign-items: center;\\n\\t\\t\\tcolor: #e5e7eb;\\n\\t\\t\\tgap: 16px;\\n\\t\\t\\tmargin: 12px;\\n\\t\\t}\\n\\t}\\n}\\n\\n.form-container {\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\talign-items: flex-start;\\n\\twidth: 100%;\\n\\tgap: 16px;\\n\\tmargin-top: 24px;\\n}\\n\\n.source-name {\\n\\twidth: 80%;\\n\\twhite-space: nowrap;\\n\\toverflow: hidden;\\n\\ttext-overflow: ellipsis;\\n\\ttext-align: center;\\n\\tfont-size: 12px;\\n}\\n\\n.service-name-container {\\n\\twidth: 100%;\\n}\\n\\n.intgeration-page-container {\\n\\tbackground-color: var(--bg-ink-400);\\n\\tborder-color: var(--bg-slate-500);\\n}\\n\\n.intgeration-page-container-text {\\n\\tcolor: var(--bg-vanilla-400);\\n}\\n\\n.navigate-integrations-page-btn {\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tcolor: var(--bg-vanilla-100);\\n\\tbackground-color: var(--bg-slate-300);\\n\\tbox-shadow: none;\\n\\tborder: none;\\n}\\n\\n.dataSourceName {\\n\\tcolor: var(--bg-vanilla-100);\\n\\tfont-weight: 600;\\n\\tcursor: pointer;\\n\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tgap: 8px;\\n}\\n\\n.lightMode {\\n\\t.dataSourceName {\\n\\t\\tcolor: var(--bg-slate-500);\\n\\t}\\n}\\n\\n.supported-languages-container {\\n\\t.disabled {\\n\\t\\tcursor: not-allowed;\\n\\t\\topacity: 0.5;\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".connection-status-container .full-docs-link{margin-bottom:36px}.connection-status-container .full-docs-link .header{display:flex;align-items:center;gap:16px;margin:16px 0}.connection-status-container .full-docs-link .header img{height:40px}.connection-status-container .full-docs-link .header h1{font-size:18px;display:flex;align-items:center;color:#e5e7eb;gap:16px;margin:0px}.connection-status-container .status-container{display:flex;justify-content:space-between;gap:24px}.connection-status-container .status-container .title{text-transform:capitalize}.connection-status-container .service-info,.connection-status-container .language-info,.connection-status-container .status-info,.connection-status-container .details-info{display:flex;gap:8px;flex-direction:column}.connection-status-container .language-info .language{text-transform:capitalize}.connection-status-container .service-info{flex:2}.connection-status-container .language-info{flex:2}.connection-status-container .status-info{flex:1}.connection-status-container .details-info{flex:3}.connection-status-container .status{display:flex;gap:8px}.connection-status-container .status svg{width:16px;height:16px}.lightMode .connection-status-container .header .title{color:#1d1d1d}.lightMode .connection-status-container .header .title h1{color:#1d1d1d}.lightMode .connection-status-container .status-container{color:#1d1d1d}.text-capitalize{text-transform:capitalize}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/container/OnboardingContainer/Steps/LogsConnectionStatus/LogsConnectionStatus.styles.scss\"],\"names\":[],\"mappings\":\"AACC,6CACC,kBAAA,CAEA,qDACC,YAAA,CACA,kBAAA,CACA,QAAA,CACA,aAAA,CAEA,yDACC,WAAA,CAGD,wDACC,cAAA,CACA,YAAA,CACA,kBAAA,CACA,aAAA,CACA,QAAA,CACA,UAAA,CAKH,+CACC,YAAA,CACA,6BAAA,CACA,QAAA,CAEA,sDACC,yBAAA,CAIF,4KAIC,YAAA,CACA,OAAA,CACA,qBAAA,CAIA,sDACC,yBAAA,CAIF,2CACC,MAAA,CAGD,4CACC,MAAA,CAGD,0CACC,MAAA,CAGD,2CACC,MAAA,CAGD,qCACC,YAAA,CACA,OAAA,CAEA,yCACC,UAAA,CACA,WAAA,CASD,uDACC,aALkB,CAOlB,0DACC,aARiB,CAYnB,0DACC,aAbkB,CAkBrB,iBACC,yBAAA\",\"sourcesContent\":[\".connection-status-container {\\n\\t.full-docs-link {\\n\\t\\tmargin-bottom: 36px;\\n\\n\\t\\t.header {\\n\\t\\t\\tdisplay: flex;\\n\\t\\t\\talign-items: center;\\n\\t\\t\\tgap: 16px;\\n\\t\\t\\tmargin: 16px 0;\\n\\n\\t\\t\\timg {\\n\\t\\t\\t\\theight: 40px;\\n\\t\\t\\t}\\n\\n\\t\\t\\th1 {\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t\\tdisplay: flex;\\n\\t\\t\\t\\talign-items: center;\\n\\t\\t\\t\\tcolor: #e5e7eb;\\n\\t\\t\\t\\tgap: 16px;\\n\\t\\t\\t\\tmargin: 0px;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t.status-container {\\n\\t\\tdisplay: flex;\\n\\t\\tjustify-content: space-between;\\n\\t\\tgap: 24px;\\n\\n\\t\\t.title {\\n\\t\\t\\ttext-transform: capitalize;\\n\\t\\t}\\n\\t}\\n\\n\\t.service-info,\\n\\t.language-info,\\n\\t.status-info,\\n\\t.details-info {\\n\\t\\tdisplay: flex;\\n\\t\\tgap: 8px;\\n\\t\\tflex-direction: column;\\n\\t}\\n\\n\\t.language-info {\\n\\t\\t.language {\\n\\t\\t\\ttext-transform: capitalize;\\n\\t\\t}\\n\\t}\\n\\n\\t.service-info {\\n\\t\\tflex: 2;\\n\\t}\\n\\n\\t.language-info {\\n\\t\\tflex: 2;\\n\\t}\\n\\n\\t.status-info {\\n\\t\\tflex: 1;\\n\\t}\\n\\n\\t.details-info {\\n\\t\\tflex: 3;\\n\\t}\\n\\n\\t.status {\\n\\t\\tdisplay: flex;\\n\\t\\tgap: 8px;\\n\\n\\t\\tsvg {\\n\\t\\t\\twidth: 16px;\\n\\t\\t\\theight: 16px;\\n\\t\\t}\\n\\t}\\n}\\n\\n$lightModeFontColor: rgb(29, 29, 29);\\n\\n.lightMode {\\n\\t.connection-status-container {\\n\\t\\t.header .title {\\n\\t\\t\\tcolor: $lightModeFontColor;\\n\\n\\t\\t\\th1 {\\n\\t\\t\\t\\tcolor: $lightModeFontColor;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t.status-container {\\n\\t\\t\\tcolor: $lightModeFontColor;\\n\\t\\t}\\n\\t}\\n}\\n\\n.text-capitalize {\\n\\ttext-transform: capitalize;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".onboarding-module-steps{display:flex;flex-direction:row;height:100%}.onboarding-module-steps .step-data{height:90%;overflow:auto;padding:16px 0}.onboarding-module-steps .step-data .step-content .step-name{margin:16px 0}.onboarding-module-steps .step-data .step-content .data-source-title,.onboarding-module-steps .step-data .step-content .environment-title,.onboarding-module-steps .step-data .step-content .select-method-title{display:block;margin-bottom:8px}.onboarding-module-steps .step-data .step-content .data-source-title .required-symbol,.onboarding-module-steps .step-data .step-content .environment-title .required-symbol,.onboarding-module-steps .step-data .step-content .select-method-title .required-symbol{display:inline-block;margin-inline-end:0px;color:#dc4446;font-size:14px;font-family:SimSun,sans-serif;line-height:1}.onboarding-module-steps .step-actions{height:10%}.steps-container{width:20%;height:100%;display:flex;flex-direction:column;justify-content:space-between}.steps-container .steps-container-header{display:flex;align-items:center;padding:16px 0;margin-bottom:24px}.steps-container .steps-container-header .brand-logo{display:flex;justify-content:center;align-items:center;gap:16px;cursor:pointer}.steps-container .steps-container-header .brand-logo img{height:24px;width:24px}.steps-container .steps-container-header .brand-logo .brand-logo-name{font-family:\\\"Work Sans\\\",sans-serif;font-size:18px;font-style:normal;font-weight:500;line-height:18px;color:#fff}.steps-container .invite-user-btn{display:flex;width:170px;height:32px;padding:6px;justify-content:center;align-items:center;border-radius:2px;margin-bottom:31px;border:1px solid var(--bg-slate-400);background:var(--bg-ink-300);box-shadow:none}.steps-container .invite-user-btn .ant-typography{color:var(--bg-vanilla-400);font-family:Inter;font-size:12px;font-style:normal;font-weight:500;line-height:10px;letter-spacing:.12px}.selected-step-content{width:80%;height:100%}.selected-step-pills{display:flex;margin-bottom:24px}.selected-step-pills .entity{display:flex;flex-direction:column;margin-right:48px;text-align:center}.selected-step-pills .entity .entity-name{margin-bottom:12px}.selected-step-pills .entity .entity-value{padding:6px;min-height:30px;border-radius:3px;min-width:120px;color:#1668dc;background-color:#111a2c;border-color:#111a2c}.supported-languages-container{display:flex;flex-wrap:wrap;gap:24px}.environment,.supported-language{display:flex;justify-content:center;align-items:center;flex-direction:column;gap:12px;min-width:200px;height:100px;border:none;border-radius:3px;text-transform:capitalize;text-align:center;cursor:pointer}.environment.selected,.supported-language.selected{color:#1668dc;background-color:#111a2c;border-color:#111a2c}.environment:hover,.supported-language:hover{color:#1668dc;background-color:#111a2c;border-color:#111a2c}.environment .environment-name .ant-typography,.supported-language .environment-name .ant-typography{font-size:12px !important}.supported-langauge-img{height:40px;width:40px}.selected-langauage-setup-instructions{padding:24px 0}.lightMode .entity-value{background-color:#e6f4ff !important;border-color:#e6f4ff !important}.lightMode .environment.selected,.lightMode .supported-language.selected{color:#1668dc;background-color:#e6f4ff !important;border-color:#e6f4ff !important}.lightMode .environment:hover,.lightMode .supported-language:hover{color:#1668dc;background-color:#e6f4ff !important;border-color:#e6f4ff !important}.lightMode .markdown-container{color:rgba(0,0,0,.88)}.error-container{margin:8px 0}.lightMode .steps-container{width:20%;height:100%}.lightMode .steps-container .steps-container-header .brand-logo .brand-logo-name{color:#000}.lightMode .steps-container .invite-user-btn{border:1px solid var(--bg-vanilla-300);background:var(--bg-vanilla-100)}.lightMode .steps-container .invite-user-btn .ant-typography{color:var(--bg-slate-200)}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/container/OnboardingContainer/common/ModuleStepsContainer/ModuleStepsContainer.styles.scss\"],\"names\":[],\"mappings\":\"AAAA,yBACC,YAAA,CACA,kBAAA,CACA,WAAA,CAEA,oCACC,UAAA,CACA,aAAA,CACA,cAAA,CAGC,6DACC,aAAA,CAGD,iNAGC,aAAA,CACA,iBAAA,CAEA,oQACC,oBAAA,CACA,qBAAA,CACA,aAAA,CACA,cAAA,CACA,6BAAA,CACA,aAAA,CAMJ,uCACC,UAAA,CAIF,iBACC,SAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,6BAAA,CAEA,yCACC,YAAA,CACA,kBAAA,CACA,cAAA,CACA,kBAAA,CAEA,qDACC,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,QAAA,CACA,cAAA,CAEA,yDACC,WAAA,CACA,UAAA,CAGD,sEACC,kCAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CACA,gBAAA,CAEA,UAAA,CAKH,kCACC,YAAA,CACA,WAAA,CACA,WAAA,CACA,WAAA,CACA,sBAAA,CACA,kBAAA,CACA,iBAAA,CACA,kBAAA,CACA,oCAAA,CACA,4BAAA,CACA,eAAA,CAEA,kDACC,2BAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CACA,gBAAA,CACA,oBAAA,CAKH,uBACC,SAAA,CACA,WAAA,CAGD,qBACC,YAAA,CACA,kBAAA,CAEA,6BACC,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,iBAAA,CAEA,0CACC,kBAAA,CAGD,2CACC,WAAA,CACA,eAAA,CACA,iBAAA,CACA,eAAA,CAEA,aAAA,CACA,wBAAA,CACA,oBAAA,CAKH,+BACC,YAAA,CACA,cAAA,CACA,QAAA,CAGD,iCAEC,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,qBAAA,CACA,QAAA,CAEA,eAAA,CACA,YAAA,CACA,WAAA,CACA,iBAAA,CACA,yBAAA,CACA,iBAAA,CAEA,cAAA,CAEA,mDACC,aAAA,CACA,wBAAA,CACA,oBAAA,CAGD,6CACC,aAAA,CACA,wBAAA,CACA,oBAAA,CAIA,qGACC,yBAAA,CAKH,wBACC,WAAA,CACA,UAAA,CAGD,uCACC,cAAA,CAIA,yBACC,mCAAA,CACA,+BAAA,CAKA,yEACC,aAAA,CACA,mCAAA,CACA,+BAAA,CAGD,mEACC,aAAA,CACA,mCAAA,CACA,+BAAA,CAIF,+BACC,qBAAA,CAIF,iBACC,YAAA,CAIA,4BACC,SAAA,CACA,WAAA,CAIE,iFACC,UAAA,CAKH,6CACC,sCAAA,CACA,gCAAA,CAEA,6DACC,yBAAA\",\"sourcesContent\":[\".onboarding-module-steps {\\n\\tdisplay: flex;\\n\\tflex-direction: row;\\n\\theight: 100%;\\n\\n\\t.step-data {\\n\\t\\theight: 90%;\\n\\t\\toverflow: auto;\\n\\t\\tpadding: 16px 0;\\n\\n\\t\\t.step-content {\\n\\t\\t\\t.step-name {\\n\\t\\t\\t\\tmargin: 16px 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.data-source-title,\\n\\t\\t\\t.environment-title,\\n\\t\\t\\t.select-method-title {\\n\\t\\t\\t\\tdisplay: block;\\n\\t\\t\\t\\tmargin-bottom: 8px;\\n\\n\\t\\t\\t\\t.required-symbol {\\n\\t\\t\\t\\t\\tdisplay: inline-block;\\n\\t\\t\\t\\t\\tmargin-inline-end: 0px;\\n\\t\\t\\t\\t\\tcolor: #dc4446;\\n\\t\\t\\t\\t\\tfont-size: 14px;\\n\\t\\t\\t\\t\\tfont-family: SimSun, sans-serif;\\n\\t\\t\\t\\t\\tline-height: 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t.step-actions {\\n\\t\\theight: 10%;\\n\\t}\\n}\\n\\n.steps-container {\\n\\twidth: 20%;\\n\\theight: 100%;\\n\\tdisplay: flex;\\n\\tflex-direction: column;\\n\\tjustify-content: space-between;\\n\\n\\t.steps-container-header {\\n\\t\\tdisplay: flex;\\n\\t\\talign-items: center;\\n\\t\\tpadding: 16px 0;\\n\\t\\tmargin-bottom: 24px;\\n\\n\\t\\t.brand-logo {\\n\\t\\t\\tdisplay: flex;\\n\\t\\t\\tjustify-content: center;\\n\\t\\t\\talign-items: center;\\n\\t\\t\\tgap: 16px;\\n\\t\\t\\tcursor: pointer;\\n\\n\\t\\t\\timg {\\n\\t\\t\\t\\theight: 24px;\\n\\t\\t\\t\\twidth: 24px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.brand-logo-name {\\n\\t\\t\\t\\tfont-family: 'Work Sans', sans-serif;\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t\\tfont-style: normal;\\n\\t\\t\\t\\tfont-weight: 500;\\n\\t\\t\\t\\tline-height: 18px;\\n\\n\\t\\t\\t\\tcolor: #fff;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t.invite-user-btn {\\n\\t\\tdisplay: flex;\\n\\t\\twidth: 170px;\\n\\t\\theight: 32px;\\n\\t\\tpadding: 6px;\\n\\t\\tjustify-content: center;\\n\\t\\talign-items: center;\\n\\t\\tborder-radius: 2px;\\n\\t\\tmargin-bottom: 31px;\\n\\t\\tborder: 1px solid var(--bg-slate-400);\\n\\t\\tbackground: var(--bg-ink-300);\\n\\t\\tbox-shadow: none;\\n\\n\\t\\t.ant-typography {\\n\\t\\t\\tcolor: var(--bg-vanilla-400);\\n\\t\\t\\tfont-family: Inter;\\n\\t\\t\\tfont-size: 12px;\\n\\t\\t\\tfont-style: normal;\\n\\t\\t\\tfont-weight: 500;\\n\\t\\t\\tline-height: 10px;\\n\\t\\t\\tletter-spacing: 0.12px;\\n\\t\\t}\\n\\t}\\n}\\n\\n.selected-step-content {\\n\\twidth: 80%;\\n\\theight: 100%;\\n}\\n\\n.selected-step-pills {\\n\\tdisplay: flex;\\n\\tmargin-bottom: 24px;\\n\\n\\t.entity {\\n\\t\\tdisplay: flex;\\n\\t\\tflex-direction: column;\\n\\t\\tmargin-right: 48px;\\n\\t\\ttext-align: center;\\n\\n\\t\\t.entity-name {\\n\\t\\t\\tmargin-bottom: 12px;\\n\\t\\t}\\n\\n\\t\\t.entity-value {\\n\\t\\t\\tpadding: 6px;\\n\\t\\t\\tmin-height: 30px;\\n\\t\\t\\tborder-radius: 3px;\\n\\t\\t\\tmin-width: 120px;\\n\\t\\t\\t// text-transform: capitalize;\\n\\t\\t\\tcolor: #1668dc;\\n\\t\\t\\tbackground-color: #111a2c;\\n\\t\\t\\tborder-color: #111a2c;\\n\\t\\t}\\n\\t}\\n}\\n\\n.supported-languages-container {\\n\\tdisplay: flex;\\n\\tflex-wrap: wrap;\\n\\tgap: 24px;\\n}\\n\\n.environment,\\n.supported-language {\\n\\tdisplay: flex;\\n\\tjustify-content: center;\\n\\talign-items: center;\\n\\tflex-direction: column;\\n\\tgap: 12px;\\n\\n\\tmin-width: 200px;\\n\\theight: 100px;\\n\\tborder: none;\\n\\tborder-radius: 3px;\\n\\ttext-transform: capitalize;\\n\\ttext-align: center;\\n\\n\\tcursor: pointer;\\n\\n\\t&.selected {\\n\\t\\tcolor: #1668dc;\\n\\t\\tbackground-color: #111a2c;\\n\\t\\tborder-color: #111a2c;\\n\\t}\\n\\n\\t&:hover {\\n\\t\\tcolor: #1668dc;\\n\\t\\tbackground-color: #111a2c;\\n\\t\\tborder-color: #111a2c;\\n\\t}\\n\\n\\t.environment-name {\\n\\t\\t.ant-typography {\\n\\t\\t\\tfont-size: 12px !important;\\n\\t\\t}\\n\\t}\\n}\\n\\n.supported-langauge-img {\\n\\theight: 40px;\\n\\twidth: 40px;\\n}\\n\\n.selected-langauage-setup-instructions {\\n\\tpadding: 24px 0;\\n}\\n\\n.lightMode {\\n\\t.entity-value {\\n\\t\\tbackground-color: #e6f4ff !important;\\n\\t\\tborder-color: #e6f4ff !important;\\n\\t}\\n\\n\\t.environment,\\n\\t.supported-language {\\n\\t\\t&.selected {\\n\\t\\t\\tcolor: #1668dc;\\n\\t\\t\\tbackground-color: #e6f4ff !important;\\n\\t\\t\\tborder-color: #e6f4ff !important;\\n\\t\\t}\\n\\n\\t\\t&:hover {\\n\\t\\t\\tcolor: #1668dc;\\n\\t\\t\\tbackground-color: #e6f4ff !important;\\n\\t\\t\\tborder-color: #e6f4ff !important;\\n\\t\\t}\\n\\t}\\n\\n\\t.markdown-container {\\n\\t\\tcolor: rgba(0, 0, 0, 0.88);\\n\\t}\\n}\\n\\n.error-container {\\n\\tmargin: 8px 0;\\n}\\n\\n.lightMode {\\n\\t.steps-container {\\n\\t\\twidth: 20%;\\n\\t\\theight: 100%;\\n\\n\\t\\t.steps-container-header {\\n\\t\\t\\t.brand-logo {\\n\\t\\t\\t\\t.brand-logo-name {\\n\\t\\t\\t\\t\\tcolor: black;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t.invite-user-btn {\\n\\t\\t\\tborder: 1px solid var(--bg-vanilla-300);\\n\\t\\t\\tbackground: var(--bg-vanilla-100);\\n\\n\\t\\t\\t.ant-typography {\\n\\t\\t\\t\\tcolor: var(--bg-slate-200);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".onboardingPageContainer{display:flex;height:100%;width:100%;color:#fff}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/pages/OnboardingPage/OnboardingPage.styles.scss\"],\"names\":[],\"mappings\":\"AAAA,yBACC,YAAA,CACA,WAAA,CAEA,UAAA,CACA,UAAA\",\"sourcesContent\":[\".onboardingPageContainer {\\n\\tdisplay: flex;\\n\\theight: 100%;\\n\\t// min-height: calc(100vh - 50px);\\n\\twidth: 100%;\\n\\tcolor: #fff;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","/**\n * @license lucide-react v0.498.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"rect\", { width: \"7\", height: \"7\", x: \"14\", y: \"3\", rx: \"1\", key: \"6d4xhi\" }],\n  [\n    \"path\",\n    {\n      d: \"M10 21V8a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H3\",\n      key: \"1fpvtg\"\n    }\n  ]\n];\nconst Blocks = createLucideIcon(\"blocks\", __iconNode);\n\nexport { __iconNode, Blocks as default };\n//# sourceMappingURL=blocks.js.map\n","/**\n * @license lucide-react v0.498.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\", key: \"1u773s\" }],\n  [\"path\", { d: \"M12 17h.01\", key: \"p32p05\" }]\n];\nconst CircleHelp = createLucideIcon(\"circle-help\", __iconNode);\n\nexport { __iconNode, CircleHelp as default };\n//# sourceMappingURL=circle-help.js.map\n","/**\n * @license lucide-react v0.498.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"rect\", { width: \"20\", height: \"8\", x: \"2\", y: \"2\", rx: \"2\", ry: \"2\", key: \"ngkwjq\" }],\n  [\"rect\", { width: \"20\", height: \"8\", x: \"2\", y: \"14\", rx: \"2\", ry: \"2\", key: \"iecqi9\" }],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"6\", y2: \"6\", key: \"16zg32\" }],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"18\", y2: \"18\", key: \"nzw8ys\" }]\n];\nconst Server = createLucideIcon(\"server\", __iconNode);\n\nexport { __iconNode, Server as default };\n//# sourceMappingURL=server.js.map\n","export default \"\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n                        //sigNoz Cloud Endpoint \\n            otlpOptions.Endpoint = new Uri(\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n                        \\n                        //SigNoz Cloud account Ingestion key\\n            string headerKey = \\\"signoz-ingestion-key\\\";\\n            string headerValue = \\\"{{SIGNOZ_INGESTION_KEY}}\\\";\\n\\n            string formattedHeader = $\\\"{headerKey}={headerValue}\\\";\\n            otlpOptions.Headers = formattedHeader;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\n&nbsp;\\n\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\\n\\n\\n### Step 3: Dockerize your application\\n\\nSince the environment variables like SIGNOZ_INGESTION_KEY, Ingestion Endpoint and Service name are set in the `program.cs` file, you don't need to add any additional steps in your Dockerfile.\\n\\nAn **example** of a Dockerfile could look like this:\\n\\n```bash\\n\\n# Use the Microsoft official .NET SDK image to build the application\\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env\\nWORKDIR /app\\n\\n# Copy the CSPROJ file and restore any dependencies (via NUGET)\\nCOPY *.csproj ./\\nRUN dotnet restore\\n\\n# Copy the rest of the project files and build the application\\nCOPY . ./\\nRUN dotnet publish -c Release -o out\\n\\n# Generate the runtime image\\nFROM mcr.microsoft.com/dotnet/aspnet:8.0\\nWORKDIR /app\\nCOPY --from=build-env /app/out .\\n\\n# Expose port 5145 for the application\\nEXPOSE 5145\\n\\n# Set the ASPNETCORE_URLS environment variable to listen on port 5145\\nENV ASPNETCORE_URLS=http://+:5145\\n\\nENTRYPOINT [\\\"dotnet\\\", \\\"YOUR-APPLICATION.dll\\\"]\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your .NET Application\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nInstall the following dependencies in your application.\\n\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n            otlpOptions.Endpoint = new Uri(\\\"http://localhost:4317\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\\n\\n\\n&nbsp;\\n\\n### Step 3: Dockerize your application\\n\\nSince the crucial environment variables like SIGNOZ_INGESTION_KEY, Ingestion Endpoint and Service name are set in the `program.cs` file, you don't need to add any additional steps in your Dockerfile.\\n\\nAn **example** of a Dockerfile could look like this:\\n\\n```bash\\n\\n# Use the Microsoft official .NET SDK image to build the application\\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build-env\\nWORKDIR /app\\n\\n# Copy the CSPROJ file and restore any dependencies (via NUGET)\\nCOPY *.csproj ./\\nRUN dotnet restore\\n\\n# Copy the rest of the project files and build the application\\nCOPY . ./\\nRUN dotnet publish -c Release -o out\\n\\n# Generate the runtime image\\nFROM mcr.microsoft.com/dotnet/aspnet:8.0\\nWORKDIR /app\\nCOPY --from=build-env /app/out .\\n\\n# Expose port 5145 for the application\\nEXPOSE 5145\\n\\n# Set the ASPNETCORE_URLS environment variable to listen on port 5145\\nENV ASPNETCORE_URLS=http://+:5145\\n\\nENTRYPOINT [\\\"dotnet\\\", \\\"YOUR-APPLICATION.dll\\\"]\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your .NET Application\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nInstall the following dependencies in your application.\\n\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n            otlpOptions.Endpoint = new Uri(\\\"http://localhost:4317\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\\n\\n\\n\\n\";","export default \"&nbsp;\\n\\nTo run your .NET application, use the below command :\\n\\n```bash\\ndotnet build\\ndotnet run\\n```\\n\\nOnce you run your .NET application, interact with your application to generate some load and see your application in the SigNoz UI.\";","export default \"\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n                        //sigNoz Cloud Endpoint \\n            otlpOptions.Endpoint = new Uri(\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n                        \\n                        //SigNoz Cloud account Ingestion key\\n            string headerKey = \\\"signoz-ingestion-key\\\";\\n            string headerValue = \\\"{{SIGNOZ_INGESTION_KEY}}\\\";\\n\\n            string formattedHeader = $\\\"{headerKey}={headerValue}\\\";\\n            otlpOptions.Headers = formattedHeader;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\n&nbsp;\\n\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\";","export default \"&nbsp;\\nTo run your .NET application, use the below command :\\n\\n```bash\\ndotnet build\\ndotnet run\\n```\\n\\nOnce you run your .NET application, interact with your application to generate some load and see your application in the SigNoz UI.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in `otelcol-contrib` folder with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your .NET Application\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nInstall the following dependencies in your application.\\n\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n            otlpOptions.Endpoint = new Uri(\\\"http://localhost:4317\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\\n\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your .NET application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your .NET application\\n```bash\\ndotnet build\\ndotnet run\\n```\";","export default \"\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n                        //sigNoz Cloud Endpoint \\n            otlpOptions.Endpoint = new Uri(\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n                        \\n                        //SigNoz Cloud account Ingestion key\\n            string headerKey = \\\"signoz-ingestion-key\\\";\\n            string headerValue = \\\"{{SIGNOZ_INGESTION_KEY}}\\\";\\n\\n            string formattedHeader = $\\\"{headerKey}={headerValue}\\\";\\n            otlpOptions.Headers = formattedHeader;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\";","export default \"&nbsp;\\nTo run your .NET application, use the below command :\\n\\n```bash\\ndotnet build\\ndotnet run\\n```\\n\\nOnce you run your .NET application, interact with your application to generate some load and see your application in the SigNoz UI.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in `otelcol-contrib` folder with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your .NET Application\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nInstall the following dependencies in your application.\\n\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n            otlpOptions.Endpoint = new Uri(\\\"http://localhost:4317\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\\n\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your .NET application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your .NET application\\n```bash\\ndotnet build\\ndotnet run\\n```\";","export default \"\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n                        //sigNoz Cloud Endpoint \\n            otlpOptions.Endpoint = new Uri(\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n                        \\n                        //SigNoz Cloud account Ingestion key\\n            string headerKey = \\\"signoz-ingestion-key\\\";\\n            string headerValue = \\\"{{SIGNOZ_INGESTION_KEY}}\\\";\\n\\n            string formattedHeader = $\\\"{headerKey}={headerValue}\\\";\\n            otlpOptions.Headers = formattedHeader;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\";","export default \"&nbsp;\\nTo run your .NET application, use the below command :\\n\\n```bash\\ndotnet build\\ndotnet run\\n```\\n\\nOnce you run your .NET application, interact with your application to generate some load and see your application in the SigNoz UI.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in folder `otelcol-contrib` with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your .NET Application\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nInstall the following dependencies in your application.\\n\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n            otlpOptions.Endpoint = new Uri(\\\"http://localhost:4317\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\\n\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your .NET application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your .NET application\\n```bash\\ndotnet build\\ndotnet run\\n```\";","export default \"\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n                        //sigNoz Cloud Endpoint \\n            otlpOptions.Endpoint = new Uri(\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n                        \\n                        //SigNoz Cloud account Ingestion key\\n            string headerKey = \\\"signoz-ingestion-key\\\";\\n            string headerValue = \\\"{{SIGNOZ_INGESTION_KEY}}\\\";\\n\\n            string formattedHeader = $\\\"{headerKey}={headerValue}\\\";\\n            otlpOptions.Headers = formattedHeader;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\";","export default \"&nbsp;\\nTo run your .NET application, use the below command :\\n\\n```bash\\ndotnet build\\ndotnet run\\n```\\n\\nOnce you run your .NET application, interact with your application to generate some load and see your application in the SigNoz UI.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in folder `otelcol-contrib` with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your .NET Application\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nInstall the following dependencies in your application.\\n\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n`serviceName` - It is the name of your service.\\n\\n`otlpOptions.Endpoint` - It is the endpoint for your OTel Collector agent.\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n            otlpOptions.Endpoint = new Uri(\\\"http://localhost:4317\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\\n\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your .NET application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your .NET application\\n```bash\\ndotnet build\\ndotnet run\\n```\";","export default \"**Step 1: Installing the OpenTelemetry dependency packages:**\\n\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n**Step 2: Adding OpenTelemetry as a service and configuring exporter options in `Program.cs`:**\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service.\\n\\nHere’s a sample `Program.cs` file with the configured variables.\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n\\t\\tresource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n\\t\\t\\t\\t\\t\\t//SigNoz Cloud Endpoint \\n            otlpOptions.Endpoint = new Uri(\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t//SigNoz Cloud account Ingestion key\\n            string headerKey = \\\"signoz-ingestion-key\\\";\\n            string headerValue = \\\"{{SIGNOZ_INGESTION_KEY}}\\\";\\n\\n            string formattedHeader = $\\\"{headerKey}={headerValue}\\\";\\n            otlpOptions.Headers = formattedHeader;\\n        }));\\n\\nvar app = builder.Build();\\n\\n// The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n\\n\\n**Step 3. Running the .NET application:**\\n\\n```bash\\ndotnet build\\ndotnet run\\n```\\n\\n**Step 4: Generating some load data and checking your application in SigNoz UI**\\n\\nOnce your application is running, generate some traffic by interacting with it.\\n\\nIn the SigNoz account, open the `Services` tab. Hit the `Refresh` button on the top right corner, and your application should appear in the list of `Applications`. Ensure that you're checking data for the `time range filter` applied in the top right corner. You might have to wait for a few seconds before the data appears on SigNoz UI.\";","export default \"&nbsp;\\nTo run your .NET application, use the below command :\\n\\n```bash\\ndotnet build\\ndotnet run\\n```\\n\\nOnce you run your .NET application, interact with your application to generate some load and see your application in the SigNoz UI.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your .NET Application\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nInstall the following dependencies in your application.\\n\\n```bash\\ndotnet add package OpenTelemetry\\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol \\ndotnet add package OpenTelemetry.Extensions.Hosting\\ndotnet add package OpenTelemetry.Instrumentation.Runtime\\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore \\ndotnet add package OpenTelemetry.AutoInstrumentation\\n```\\n\\n&nbsp;\\n\\n### Step 2:  Adding OpenTelemetry as a service and configuring exporter options\\n\\nIn your `Program.cs` file, add OpenTelemetry as a service. Here, we are configuring these variables:\\n\\n&nbsp;\\n\\nHere’s a sample `Program.cs` file with the configured variables:\\n\\n```bash\\nusing System.Diagnostics;\\nusing OpenTelemetry.Exporter;\\nusing OpenTelemetry.Resources;\\nusing OpenTelemetry.Trace;\\n\\nvar builder = WebApplication.CreateBuilder(args);\\n\\n// Configure OpenTelemetry with tracing and auto-start.\\nbuilder.Services.AddOpenTelemetry()\\n    .ConfigureResource(resource => \\n        resource.AddService(serviceName: \\\"{{MYAPP}}\\\"))\\n    .WithTracing(tracing => tracing\\n        .AddAspNetCoreInstrumentation()\\n        .AddOtlpExporter(otlpOptions =>\\n        {\\n            otlpOptions.Endpoint = new Uri(\\\"http://localhost:4317\\\");\\n\\n            otlpOptions.Protocol = OtlpExportProtocol.Grpc;\\n        }));\\n\\nvar app = builder.Build();\\n\\n//The index route (\\\"/\\\") is set up to write out the OpenTelemetry trace information on the response:\\napp.MapGet(\\\"/\\\", () => $\\\"Hello World! OpenTelemetry Trace: {Activity.Current?.Id}\\\");\\n\\napp.Run();\\n```\\n&nbsp;\\n\\nThe OpenTelemetry.Exporter.Options get or set the target to which the exporter is going to send traces. Here, we’re configuring it to send traces to the OTel Collector agent. The target must be a valid Uri with the scheme (http or https) and host and may contain a port and a path.\\n\\nThis is done by configuring an OpenTelemetry [TracerProvider](https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace/customizing-the-sdk#readme) using extension methods and setting it to auto-start when the host is started.\\n\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your .NET application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your .NET application\\n```bash\\ndotnet build\\ndotnet run\\n```\";","export default \"&nbsp;\\n\\nFollow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n  otel_batch_processor: %{\\n    exporter: {\\n      :opentelemetry_exporter,\\n      %{\\n        endpoints: [\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"],\\n        headers: [\\n          {\\\"signoz-ingestion-key\\\", {{SIGNOZ_ACCESS_TOKEN}} }\\n        ]\\n      }\\n    }\\n  }\\n```\\n\\n&nbsp;\\n\\n### Step 3: Dockerize your application\\n\\nSince the environment variables like SIGNOZ_INGESTION_KEY, Ingestion Endpoint and Service name are set in the above steps, you don't need to add any additional steps in your Dockerfile.\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n    otel_batch_processor: %{\\n      exporter: \\n      {:opentelemetry_exporter, \\n      %{endpoints: [\\\"http://localhost:4318\\\"]}\\n      }\\n  }\\n```\\n&nbsp;\\n\\n### Step 3: Dockerize your application\\n\\nSince the environment variables like SIGNOZ_INGESTION_KEY, Ingestion Endpoint and Service name are set in the above steps, you don't need to add any additional steps in your Dockerfile.\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n    otel_batch_processor: %{\\n      exporter: \\n      {:opentelemetry_exporter, \\n      %{endpoints: [\\\"http://localhost:4318\\\"]}\\n      }\\n  }\\n```\\n\\n\";","export default \"### Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\";","export default \"&nbsp;\\n\\nFollow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n  otel_batch_processor: %{\\n    exporter: {\\n      :opentelemetry_exporter,\\n      %{\\n        endpoints: [\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"],\\n        headers: [\\n          {\\\"signoz-ingestion-key\\\", {{SIGNOZ_ACCESS_TOKEN}} }\\n        ]\\n      }\\n    }\\n  }\\n```\\n\\n\";","export default \"### Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n    otel_batch_processor: %{\\n      exporter: \\n      {:opentelemetry_exporter, \\n      %{endpoints: [\\\"http://localhost:4318\\\"]}\\n      }\\n  }\\n```\\n\\n\";","export default \"&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Elixir application\\n\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\\n```\";","export default \"&nbsp;\\n\\nFollow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n  otel_batch_processor: %{\\n    exporter: {\\n      :opentelemetry_exporter,\\n      %{\\n        endpoints: [\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"],\\n        headers: [\\n          {\\\"signoz-ingestion-key\\\", {{SIGNOZ_ACCESS_TOKEN}} }\\n        ]\\n      }\\n    }\\n  }\\n```\\n\\n\";","export default \"### Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n    otel_batch_processor: %{\\n      exporter: \\n      {:opentelemetry_exporter, \\n      %{endpoints: [\\\"http://localhost:4318\\\"]}\\n      }\\n  }\\n```\\n\\n\";","export default \"&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\\n```\";","export default \"&nbsp;\\n\\nFollow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n  otel_batch_processor: %{\\n    exporter: {\\n      :opentelemetry_exporter,\\n      %{\\n        endpoints: [\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"],\\n        headers: [\\n          {\\\"signoz-ingestion-key\\\", {{SIGNOZ_ACCESS_TOKEN}} }\\n        ]\\n      }\\n    }\\n  }\\n```\\n\\n\";","export default \"### Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n    otel_batch_processor: %{\\n      exporter: \\n      {:opentelemetry_exporter, \\n      %{endpoints: [\\\"http://localhost:4318\\\"]}\\n      }\\n  }\\n```\\n\\n\";","export default \"&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\\n```\";","export default \"&nbsp;\\n\\nFollow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n  otel_batch_processor: %{\\n    exporter: {\\n      :opentelemetry_exporter,\\n      %{\\n        endpoints: [\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"],\\n        headers: [\\n          {\\\"signoz-ingestion-key\\\", {{SIGNOZ_ACCESS_TOKEN}} }\\n        ]\\n      }\\n    }\\n  }\\n```\\n\\n\";","export default \"### Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n    otel_batch_processor: %{\\n      exporter: \\n      {:opentelemetry_exporter, \\n      %{endpoints: [\\\"http://localhost:4318\\\"]}\\n      }\\n  }\\n```\\n\\n\";","export default \"&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\\n```\";","export default \"&nbsp;\\n\\nFollow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n  otel_batch_processor: %{\\n    exporter: {\\n      :opentelemetry_exporter,\\n      %{\\n        endpoints: [\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"],\\n        headers: [\\n          {\\\"signoz-ingestion-key\\\", {{SIGNOZ_ACCESS_TOKEN}} }\\n        ]\\n      }\\n    }\\n  }\\n```\\n\\n\";","export default \"### Running your Elixir application\\nOnce you are done instrumenting your Elixir (Phoenix + Ecto) application with OpenTelemetry, you should install the dependencies needed to run your application and run it as you normally would.\\n\\n&nbsp;\\n\\nTo see some examples for instrumented applications, you can checkout [this link](https://signoz.io/docs/instrumentation/elixir/#sample-examples)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n\\n&nbsp;\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n\\n&nbsp;\\n\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n\\n&nbsp;\\n\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Elixir (Phoenix + Ecto) Application\\n\\n### Step 1: Add dependencies\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file \\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n&nbsp;\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers \\n\\n```bash\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:{{MYAPP}}, :repo])\\n```\\n&nbsp;\\n\\nAs an example, this is how you can setup the handlers in your application.ex file for an application called demo :\\n\\n```bash\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n&nbsp;\\n\\n### Step 2: Configure Application\\nYou need to configure your application to send telemetry data by adding the following config to your `runtime.exs` file:\\n\\n```bash\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n    otel_batch_processor: %{\\n      exporter: \\n      {:opentelemetry_exporter, \\n      %{endpoints: [\\\"http://localhost:4318\\\"]}\\n      }\\n  }\\n```\\n\\n\";","export default \"\\nOTel Collector binary helps to collect logs, hostmetrics, resource and infra attributes. It is recommended to install Otel Collector binary to collect and send traces to SigNoz cloud. You can correlate signals and have rich contextual data through this way.\\n\\nYou can find instructions to install OTel Collector binary [here](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) in your VM. Once you are done setting up your OTel Collector binary, you can follow the below steps for instrumenting your Elixir (Phoenix + Ecto) application.\\n\\n**Step 1. Add dependencies**\\n\\nInstall dependencies related to OpenTelemetry by adding them to `mix.exs` file\\n\\n```bash\\n    {:opentelemetry_exporter, \\\"~> 1.6\\\"},\\n    {:opentelemetry_api, \\\"~> 1.2\\\"},\\n    {:opentelemetry, \\\"~> 1.3\\\"},\\n    {:opentelemetry_semantic_conventions, \\\"~> 0.2\\\"},\\n    {:opentelemetry_cowboy, \\\"~> 0.2.1\\\"},\\n    {:opentelemetry_phoenix, \\\"~> 1.1\\\"},\\n    {:opentelemetry_ecto, \\\"~> 1.1\\\"}\\n```\\n\\nIn your application start, usually the `application.ex` file, setup the telemetry handlers\\n\\n```elixir\\n    :opentelemetry_cowboy.setup()\\n    OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n    OpentelemetryEcto.setup([:YOUR_APP_NAME, :repo])\\n```\\n\\nAs an example, this is how you can setup the handlers in your `application.ex` file for an application called `demo` :\\n\\n```elixir\\n# application.ex\\n@impl true\\ndef start(_type, _args) do\\n  :opentelemetry_cowboy.setup()\\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\\n  OpentelemetryEcto.setup([:demo, :repo])\\n\\nend\\n```\\n\\n**Step 2. Configure Application**\\n\\nYou need to configure your application to send telemtry data by adding the follwing config to your `runtime.exs` file:\\n\\n```elixir\\nconfig :opentelemetry, :resource, service: %{name: \\\"{{MYAPP}}\\\"}\\n\\nconfig :opentelemetry, :processors,\\n    otel_batch_processor: %{\\n      exporter: \\n      {:opentelemetry_exporter, \\n      %{endpoints: [\\\"http://localhost:4318\\\"]}\\n      }\\n  }\\n```\";","export default \"### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n&nbsp;\\n\\n### Step 6: Dockerize your application\\n\\nSet the environment variables in your Dockerfile.\\n\\n```bash\\n...\\n# Set environment variables\\nENV SERVICE_NAME={{MYAPP}} \\\\\\n    INSECURE_MODE=false \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key=b{{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=ingest.{{REGION}}.signoz.cloud:443\\n...\\n```\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Go Application\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n&nbsp;\\n\\n### Step 6: Dockerize your application\\n\\nSet the environment variables in your Dockerfile.\\n\\n```bash\\n...\\n# Set environment variables\\nENV SERVICE_NAME={{MYAPP}} \\\\\\n    INSECURE_MODE=true \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317\\n...\\n```\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Go Application\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n     \\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nTo run your Go Gin application, use the below command :\\n\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=true OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317 go run main.go\\n```\";","export default \"### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\nTo run your Go Gin application, use the below command :\\n\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=false OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} OTEL_EXPORTER_OTLP_ENDPOINT=ingest.{{REGION}}.signoz.cloud:443 go run main.go\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in `otelcol-contrib` folder with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Go Application\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your Go Gin application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Set environment variables and run your Go Gin application\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=true OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317 go run main.go\\n```\";","export default \"### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\nTo run your Go Gin application, use the below command :\\n\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=false OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} OTEL_EXPORTER_OTLP_ENDPOINT=ingest.{{REGION}}.signoz.cloud:443 go run main.go\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in `otelcol-contrib` folder with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Go Application\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your Go Gin application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Set environment variables and run your Go Gin application\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=true OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317 go run main.go\\n```\";","export default \"### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\nTo run your Go Gin application, use the below command :\\n\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=false OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} OTEL_EXPORTER_OTLP_ENDPOINT=ingest.{{REGION}}.signoz.cloud:443 go run main.go\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in folder `otelcol-contrib` with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Go Application\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your Go Gin application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Set environment variables and run your Go Gin application\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=true OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317 go run main.go\\n```\";","export default \"### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\nTo run your Go Gin application, use the below command :\\n\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=false OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} OTEL_EXPORTER_OTLP_ENDPOINT=ingest.{{REGION}}.signoz.cloud:443 go run main.go\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in folder `otelcol-contrib` with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Go Application\\n&nbsp;\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry Dependencies\\nDependencies related to OpenTelemetry exporter and SDK have to be installed first.\\n\\nRun the below commands after navigating to the application source folder:\\n```bash\\ngo get go.opentelemetry.io/otel \\\\\\n  go.opentelemetry.io/otel/trace \\\\\\n  go.opentelemetry.io/otel/sdk \\\\\\n  go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n  go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n```\\n\\n**Note:** We are assuming you are using gin request router. If you are using other request routers, check out the [corresponding package](https://signoz.io/docs/instrumentation/golang/#request-routers).\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Declare environment variables for configuring OpenTelemetry\\nDeclare the following global variables in **`main.go`** which we will use to configure OpenTelemetry:\\n```bash\\n var (\\n     serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n     collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n     insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n )\\n```\\n&nbsp;\\n\\n### Step 3: Instrument your Go application \\nTo configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your **`main.go`** file.\\n\\n```bash\\n     \\n import (\\n     .....\\n\\n     \\\"google.golang.org/grpc/credentials\\\"\\n     \\\"github.com/gin-gonic/gin\\\"\\n     \\\"go.opentelemetry.io/otel\\\"\\n     \\\"go.opentelemetry.io/otel/attribute\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n     \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n     \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n     sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n )\\n\\n func initTracer() func(context.Context) error {\\n\\n     var secureOption otlptracegrpc.Option\\n\\n     if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n         secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n     } else {\\n         secureOption = otlptracegrpc.WithInsecure()\\n     }\\n\\n     exporter, err := otlptrace.New(\\n         context.Background(),\\n         otlptracegrpc.NewClient(\\n             secureOption,\\n             otlptracegrpc.WithEndpoint(collectorURL),\\n         ),\\n     )\\n\\n     if err != nil {\\n         log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n     }\\n     resources, err := resource.New(\\n         context.Background(),\\n         resource.WithAttributes(\\n             attribute.String(\\\"service.name\\\", serviceName),\\n             attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n         ),\\n     )\\n     if err != nil {\\n         log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n     }\\n\\n     otel.SetTracerProvider(\\n         sdktrace.NewTracerProvider(\\n             sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n             sdktrace.WithBatcher(exporter),\\n             sdktrace.WithResource(resources),\\n         ),\\n     )\\n     return exporter.Shutdown\\n }\\n```\\n&nbsp;\\n\\n### Step 4: Initialise the tracer in **`main.go`**\\nModify the main function to initialise the tracer in **`main.go`**. Initiate the tracer at the very beginning of our main function.\\n```bash\\nfunc main() {\\n    cleanup := initTracer()\\n    defer cleanup(context.Background())\\n\\n    ......\\n}\\n```\\n&nbsp;\\n\\n### Step 5: Add the OpenTelemetry Gin middleware\\nConfigure Gin to use the middleware by adding the following lines in **`main.go`**\\n```bash\\nimport (\\n    ....\\n  \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n)\\n\\nfunc main() {\\n    ......\\n    r := gin.Default()\\n    r.Use(otelgin.Middleware(serviceName))\\n    ......\\n}\\n```\\n\\n\\n\";","export default \"&nbsp;\\nOnce you are done intrumenting your Go Gin application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Set environment variables and run your Go Gin application\\n```bash\\nSERVICE_NAME={{MYAPP}} INSECURE_MODE=true OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317 go run main.go\\n```\";","export default \"\\n1. **Install Dependencies**<br></br>\\n   Dependencies related to OpenTelemetry exporter and SDK have to be installed first. Note that we are assuming you are using `gin` request router. If you are using other request routers, check out the [corresponding package](#request-routers).\\n   \\n   Run the below commands after navigating to the application source folder:\\n   &nbsp;\\n    \\n    ```bash\\n    go get go.opentelemetry.io/otel \\\\\\n      go.opentelemetry.io/otel/trace \\\\\\n      go.opentelemetry.io/otel/sdk \\\\\\n      go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n      go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n      go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n    ```\\n    &nbsp;\\n    \\n2. **Declare environment variables for configuring OpenTelemetry**<br></br>\\n   Declare the following global variables in `main.go` which we will use to configure OpenTelemetry:\\n   \\n   ```bash\\n    var (\\n        serviceName  = \\\"{{MYAPP}}\\\")\\n        collectorURL = \\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"\\n        headers=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n        insecure = os.Getenv(\\\"INSECURE_MODE\\\")\\n    )\\n    ```\\n    &nbsp;\\n    \\n3. **Instrument your Go application with OpenTelemetry**<br></br>\\n   To configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your `main.go` file.\\n   \\n    ```bash\\n        \\n    import (\\n        .....\\n\\n        \\\"google.golang.org/grpc/credentials\\\"\\n        \\\"github.com/gin-gonic/gin\\\"\\n        \\\"go.opentelemetry.io/otel\\\"\\n        \\\"go.opentelemetry.io/otel/attribute\\\"\\n        \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n        \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n        \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n        sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n    )\\n\\n    func initTracer() func(context.Context) error {\\n\\n        var secureOption otlptracegrpc.Option\\n\\n        if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n            secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n        } else {\\n            secureOption = otlptracegrpc.WithInsecure()\\n        }\\n\\n        exporter, err := otlptrace.New(\\n            context.Background(),\\n            otlptracegrpc.NewClient(\\n                secureOption,\\n                otlptracegrpc.WithEndpoint(collectorURL),\\n                otlptracegrpc.WithHeaders(headers),\\n            ),\\n        )\\n\\n        if err != nil {\\n            log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n        }\\n        resources, err := resource.New(\\n            context.Background(),\\n            resource.WithAttributes(\\n                attribute.String(\\\"{{MYAPP}}\\\", serviceName),\\n                attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n            ),\\n        )\\n        if err != nil {\\n            log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n        }\\n\\n        otel.SetTracerProvider(\\n            sdktrace.NewTracerProvider(\\n                sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n                sdktrace.WithBatcher(exporter),\\n                sdktrace.WithResource(resources),\\n            ),\\n        )\\n        return exporter.Shutdown\\n    }\\n    ```\\n    &nbsp;\\n\\n4. **Initialize the tracer in main.go**<br></br>\\n   Modify the main function to initialise the tracer in `main.go`. Initiate the tracer at the very beginning of our main function.\\n    \\n    ```go\\n    func main() {\\n        cleanup := initTracer()\\n        defer cleanup(context.Background())\\n    \\n        ......\\n    }\\n    ```\\n    &nbsp;\\n    \\n5. **Add the OpenTelemetry Gin middleware**<br></br>\\n   Configure Gin to use the middleware by adding the following lines in `main.go`.\\n    \\n    ```go\\n    import (\\n        ....\\n      \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n    )\\n    \\n    func main() {\\n        ......\\n        r := gin.Default()\\n        r.Use(otelgin.Middleware(serviceName))\\n        ......\\n    }\\n    ```\";","export default \"**Set environment variables and run your Go Gin application**<br></br>\\n   The run command must have some environment variables to send data to SigNoz cloud. The run commands:\\n   \\n   &nbsp;\\n    \\n    ```bash\\n    setx INSECURE_MODE=false\\n    ```\\n    &nbsp;\\n\\n    ```bash\\n    go run main.go\\n    ```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"\\n1. **Install Dependencies**<br></br>\\n   Dependencies related to OpenTelemetry exporter and SDK have to be installed first. Note that we are assuming you are using `gin` request router. If you are using other request routers, check out the [corresponding package](#request-routers).\\n   \\n   Run the below commands after navigating to the application source folder:\\n    \\n    ```bash\\n    go get go.opentelemetry.io/otel \\\\\\n      go.opentelemetry.io/otel/trace \\\\\\n      go.opentelemetry.io/otel/sdk \\\\\\n      go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin \\\\\\n      go.opentelemetry.io/otel/exporters/otlp/otlptrace \\\\\\n      go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\n    ```\\n    &nbsp;\\n    \\n2. **Declare environment variables for configuring OpenTelemetry**<br></br>\\n   Declare the following global variables in `main.go` which we will use to configure OpenTelemetry:\\n   \\n   ```go\\n    var (\\n        serviceName  = os.Getenv(\\\"SERVICE_NAME\\\")\\n        collectorURL = os.Getenv(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\")\\n        insecure     = os.Getenv(\\\"INSECURE_MODE\\\")\\n    )\\n    ```\\n    &nbsp;\\n    \\n3. **Instrument your Go application with OpenTelemetry**<br></br>\\n   To configure your application to send data we will need a function to initialize OpenTelemetry. Add the following snippet of code in your `main.go` file.\\n    \\n   ```go\\n        \\n    import (\\n        .....\\n\\n        \\\"google.golang.org/grpc/credentials\\\"\\n        \\\"github.com/gin-gonic/gin\\\"\\n        \\\"go.opentelemetry.io/otel\\\"\\n        \\\"go.opentelemetry.io/otel/attribute\\\"\\n        \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace\\\"\\n        \\\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\\\"\\n\\n        \\\"go.opentelemetry.io/otel/sdk/resource\\\"\\n        sdktrace \\\"go.opentelemetry.io/otel/sdk/trace\\\"\\n    )\\n\\n    func initTracer() func(context.Context) error {\\n\\n        var secureOption otlptracegrpc.Option\\n\\n        if strings.ToLower(insecure) == \\\"false\\\" || insecure == \\\"0\\\" || strings.ToLower(insecure) == \\\"f\\\" {\\n            secureOption = otlptracegrpc.WithTLSCredentials(credentials.NewClientTLSFromCert(nil, \\\"\\\"))\\n        } else {\\n            secureOption = otlptracegrpc.WithInsecure()\\n        }\\n\\n        exporter, err := otlptrace.New(\\n            context.Background(),\\n            otlptracegrpc.NewClient(\\n                secureOption,\\n                otlptracegrpc.WithEndpoint(collectorURL),\\n            ),\\n        )\\n\\n        if err != nil {\\n            log.Fatalf(\\\"Failed to create exporter: %v\\\", err)\\n        }\\n        resources, err := resource.New(\\n            context.Background(),\\n            resource.WithAttributes(\\n                attribute.String(\\\"service.name\\\", serviceName),\\n                attribute.String(\\\"library.language\\\", \\\"go\\\"),\\n            ),\\n        )\\n        if err != nil {\\n            log.Fatalf(\\\"Could not set resources: %v\\\", err)\\n        }\\n\\n        otel.SetTracerProvider(\\n            sdktrace.NewTracerProvider(\\n                sdktrace.WithSampler(sdktrace.AlwaysSample()),\\n                sdktrace.WithBatcher(exporter),\\n                sdktrace.WithResource(resources),\\n            ),\\n        )\\n        return exporter.Shutdown\\n    }\\n    ```\\n\\n    &nbsp;\\n    \\n4. **Initialize the tracer in main.go**<br></br>\\n   Modify the main function to initialise the tracer in `main.go`. Initiate the tracer at the very beginning of our main function.\\n    \\n    ```go\\n    func main() {\\n        cleanup := initTracer()\\n        defer cleanup(context.Background())\\n    \\n        ......\\n    }\\n    ```\\n    &nbsp;\\n    \\n5. **Add the OpenTelemetry Gin middleware**<br></br>\\n   Configure Gin to use the middleware by adding the following lines in `main.go`.\\n    \\n    ```go\\n    import (\\n        ....\\n      \\\"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\\\"\\n    )\\n    \\n    func main() {\\n        ......\\n        r := gin.Default()\\n        r.Use(otelgin.Middleware(serviceName))\\n        ......\\n    }\\n    ```\\n    \";","export default \"**Set environment variables and run your Go Gin application**<br></br>\\n   The run command must have some environment variables to send data to SigNoz. Then run the following commands:\\n   &nbsp;\\n    \\n    ```bash\\n    setx SERVICE_NAME={{MYAPP}}\\n    setx INSECURE_MODE=true\\n    setx OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4317\\n    ```\\n\\n&nbsp;\\n&nbsp;\\n\\n    ```bash\\n    go run main.go\\n    ```\";","export default \"#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Dockerize your application\\n\\nUpdate your Dockerfile to include\\n\\n```bash\\n...\\n# Set working directory. Assuming `/opt/jboss-eap-7.1` to be your working directory.\\nWORKDIR /opt/jboss-eap-7.1\\n\\n# Download otel java binary agent\\nRUN wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar -O opentelemetry-javaagent.jar\\n\\n# Open and update the configuration file\\nRUN sed -i 's/\\\\(JAVA_OPTS=\\\".*\\\\)/\\\\1 -javaagent:\\\\/opt\\\\/jboss-eap-7.1\\\\/opentelemetry-javaagent.jar \\\\\\n-Dotel.exporter.otlp.endpoint=https:\\\\/\\\\/ingest.{{REGION}}.signoz.cloud:443 \\\\\\n-Dotel.exporter.otlp.headers=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\n-Dotel.resource.attributes=\\\"service.name={{MYAPP}}\\\"/' /opt/jboss-eap-7.1/bin/standalone.conf\\n...\\n```\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Dockerize your application\\n\\nUpdate your Dockerfile to include\\n\\n```bash\\n...\\n# Set working directory. Assuming `/opt/jboss-eap-7.1` to be your working directory.\\nWORKDIR /opt/jboss-eap-7.1\\n\\n# Download otel java binary agent\\nRUN wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar -O opentelemetry-javaagent.jar\\n\\n# Open and update the configuration file\\nRUN sed -i 's/\\\\(JAVA_OPTS=\\\".*\\\\)/\\\\1 -javaagent:\\\\/opt\\\\/jboss-eap-7.1\\\\/opentelemetry-javaagent.jar/' bin/standalone.conf\\n...\\n```\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"### Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Update `JAVA_OPTS` environment variable\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n&nbsp;\\n\\n**Note:**\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"### Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Update `JAVA_OPTS` environment variable\\nUpdate `JAVA_OPTS` environment variable with configurations required to send data to SigNoz cloud in your configuration file.\\n\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\n-Dotel.exporter.otlp.endpoint=https://ingest.{{REGION}}.signoz.cloud:443\\n-Dotel.exporter.otlp.headers=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n-Dotel.resource.attributes=\\\"service.name={{MYAPP}}\\\"\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\n#### (Optional step) Write the output/logs of standalone.sh script to a file nohup.out as a background thread\\n```bash\\n/opt/jboss-eap-7.1/bin/standalone.sh > /opt/jboss-eap-7.1/bin/nohup.out &\\n\\n```\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"Once you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Step 3: Update `JAVA_OPTS` environment variable\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"### Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Update `JAVA_OPTS` environment variable\\nUpdate `JAVA_OPTS` environment variable with configurations required to send data to SigNoz cloud in your configuration file.\\n\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\n-Dotel.exporter.otlp.endpoint=https://ingest.{{REGION}}.signoz.cloud:443\\n-Dotel.exporter.otlp.headers=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n-Dotel.resource.attributes=\\\"service.name={{MYAPP}}\\\"\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\n#### (Optional step) Write the output/logs of standalone.sh script to a file nohup.out as a background thread\\n```bash\\n/opt/jboss-eap-7.1/bin/standalone.sh > /opt/jboss-eap-7.1/bin/nohup.out &\\n\\n```\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"Once you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Step 3: Update `JAVA_OPTS` environment variable\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"### Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Update `JAVA_OPTS` environment variable\\nUpdate `JAVA_OPTS` environment variable with configurations required to send data to SigNoz cloud in your configuration file.\\n\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\n-Dotel.exporter.otlp.endpoint=https://ingest.{{REGION}}.signoz.cloud:443\\n-Dotel.exporter.otlp.headers=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n-Dotel.resource.attributes=\\\"service.name={{MYAPP}}\\\"\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\n#### (Optional step) Write the output/logs of standalone.sh script to a file nohup.out as a background thread\\n```bash\\n/opt/jboss-eap-7.1/bin/standalone.sh > /opt/jboss-eap-7.1/bin/nohup.out &\\n\\n```\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"Once you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Step 3: Update `JAVA_OPTS` environment variable\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"### Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Update `JAVA_OPTS` environment variable\\nUpdate `JAVA_OPTS` environment variable with configurations required to send data to SigNoz cloud in your configuration file.\\n\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\n-Dotel.exporter.otlp.endpoint=https://ingest.{{REGION}}.signoz.cloud:443\\n-Dotel.exporter.otlp.headers=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n-Dotel.resource.attributes=\\\"service.name={{MYAPP}}\\\"\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\n#### (Optional step) Write the output/logs of standalone.sh script to a file nohup.out as a background thread\\n```bash\\n/opt/jboss-eap-7.1/bin/standalone.sh > /opt/jboss-eap-7.1/bin/nohup.out &\\n\\n```\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"Once you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Open `standalone.conf` Configuration File\\n```bash\\nvim /opt/jboss-eap-7.1/bin/standalone.conf\\n```\\n&nbsp;\\n\\n### Step 3: Update `JAVA_OPTS` environment variable\\n```bash\\nJAVA_OPTS=\\\"-javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/jboss/#troubleshooting-your-installation) for assistance.\";","export default \" \\n**Step 1.** Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n&nbsp;\\n\\n**Step 2.** Edit your configuration file,i.e `standalone.conf` for JBoss with nano or notepad.\\n&nbsp;\\n&nbsp;\\n    \\n**Step 3.** Update `JAVA_OPTS` environment variable\\n\\nUpdate `JAVA_OPTS` environment variable with configurations required to send data to SigNoz cloud in your configuration file.\\n\\n```bash\\nset JAVA_OPTS=-javaagent:C:\\\\path\\\\to\\\\opentelemetry-javaagent.jar\\nset JAVA_OPTS=%JAVA_OPTS% -Dotel.exporter.otlp.endpoint=https://ingest.{{REGION}}.signoz.cloud:443\\nset JAVA_OPTS=%JAVA_OPTS% -Dotel.exporter.otlp.headers=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\nset JAVA_OPTS=%JAVA_OPTS% -Dotel.resource.attributes=\\\"service.name={{MYAPP}}\\\"\\n```\\n&nbsp;\\n&nbsp;\\nYou need to replace the following things based on your environment:<br></br>\\n\\n- `path` - Update it to the path of your downloaded Java JAR agent instead of `C:\\\\path\\\\to\\\\opentelemetry-javaagent.jar`<br></br>\\n\";","export default \" Write the output/logs of standalone.sh script to a file nohup.out as a background thread\\n  \\n```bash\\n/opt/jboss-eap-7.1/bin/standalone.sh > /opt/jboss-eap-7.1/bin/nohup.out &\\n```\\n&nbsp;\\nIn case you encounter an issue where all applications do not get listed in the services section then please refer to the [troubleshooting section](#troubleshooting-your-installation).\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\nOpen the configuration file, generally at `jboss-eap-7.1/bin/standalone.conf` .\";","export default \"Update `JAVA_OPTS` environment variable\\n\\nUpdate `JAVA_OPTS` environment variable with configurations required to send data to SigNoz cloud in your configuration file.\\n\\n```bash\\nJAVA_OPTS=\\\"-javaagent:C:/path/to/opentelemetry-javaagent.jar\\\"\\n```\\n&nbsp;\\n\\nwhere,\\n- `path` - Update it to the path of your downloaded Java JAR agent.<br></br>\\n\\nIn case you encounter an issue where all applications do not get listed in the services section then please refer to the [troubleshooting section](#troubleshooting-your-installation).\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Dockerize your application\\n\\nAdd the following to your Dockerfile\\n\\n```bash\\n...\\n# Download otel java binary agent using \\nRUN wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar -O opentelemetry-javaagent.jar\\n\\n# Set environment variables and run your Spring Boot application\\nENV OTEL_RESOURCE_ATTRIBUTES=\\\"service.name={{MYAPP}}\\\" \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"\\n\\n# Copy the Spring Boot application JAR file into the container\\nCOPY <my-app>.jar /app\\n\\n# Command to run the Spring Boot application\\nCMD [\\\"java\\\", \\\"-javaagent:/app/opentelemetry-javaagent.jar\\\", \\\"-jar\\\", \\\"/app/<my-app>.jar\\\"]\\n...\\n```\\n\\n\\n\";","export default \"\\nOnce you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/java/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Dockerize your application\\n\\nAdd the following to your Dockerfile\\n\\n```bash\\n...\\n# Download otel java binary agent using \\nRUN wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar -O opentelemetry-javaagent.jar\\n\\n# Copy the Spring Boot application JAR file into the container\\nCOPY <my-app>.jar /app\\n\\n# Command to run the Spring Boot application\\nCMD [\\\"java\\\", \\\"-javaagent:/app/opentelemetry-javaagent.jar\\\", \\\"-jar\\\", \\\"/app/<my-app>.jar\\\"]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/java/#troubleshooting-your-installation) for assistance.\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\n**Note:**\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/java/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\\n\";","export default \"\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/java/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\\n\";","export default \"\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/java/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\\n\";","export default \"\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/java/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\\n\";","export default \"\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/java/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n### Step 2: Run your application\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n\";","export default \"\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n \\n**Step 1.** Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\";","export default \"Run your application\\n&nbsp;\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\n```\\n\\n&nbsp;\\n&nbsp;\\n\\n```bash\\njava -javaagent:$PWD/opentelemetry-javaagent.jar -jar {{MYAPP}}.jar\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n&nbsp;\\n\\n Download OTel java binary agent\\n\\n &nbsp;\\n &nbsp;\\n \\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\";","export default \"## Run your application\\n\\n&nbsp;\\n\\n```bash\\njava -javaagent:/opentelemetry-javaagent.jar -jar {{MYAPP}}.jar\\n```\";","export default \"\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Dockerize your application\\n\\nAdd the following to your Dockerfile\\n\\n```bash\\n...\\n# Download otel java binary agent using \\nRUN wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar -O opentelemetry-javaagent.jar\\n\\n# Set environment variables and run your Spring Boot application\\nENV OTEL_RESOURCE_ATTRIBUTES=\\\"service.name={{MYAPP}}\\\" \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\"\\n\\n# Copy the Spring Boot application JAR file into the container\\nCOPY <my-app>.jar /app\\n\\n# Command to run the Spring Boot application\\nCMD [\\\"java\\\", \\\"-javaagent:/app/opentelemetry-javaagent.jar\\\", \\\"-jar\\\", \\\"/app/<my-app>.jar\\\"]\\n...\\n```\\n\";","export default \"\\nOnce you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Dockerize your application\\n\\nAdd the following to your Dockerfile\\n\\n```bash\\n...\\n# Download otel java binary agent using \\nRUN wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar -O opentelemetry-javaagent.jar\\n\\n# Copy the Spring Boot application JAR file into the container\\nCOPY <my-app>.jar /app\\n\\n# Command to run the Spring Boot application\\nCMD [\\\"java\\\", \\\"-javaagent:/app/opentelemetry-javaagent.jar\\\", \\\"-jar\\\", \\\"/app/<my-app>.jar\\\"]\\n...\\n```\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Java application, you can run it using the below commands\\n\\n**Note:**\\n- Ensure you have Java and Maven installed. Compile your Java consumer applications: Ensure your consumer apps are compiled and ready to run.\\n\\n**Run Consumer App with Java Agent:**\\n\\n```bash\\njava -javaagent:/path/to/opentelemetry-javaagent.jar \\\\\\n     -Dotel.service.name=consumer-svc \\\\\\n     -Dotel.traces.exporter=otlp \\\\\\n     -Dotel.metrics.exporter=otlp \\\\\\n     -Dotel.logs.exporter=otlp \\\\\\n     -Dotel.instrumentation.kafka.producer-propagation.enabled=true \\\\\\n     -Dotel.instrumentation.kafka.experimental-span-attributes=true \\\\\\n     -Dotel.instrumentation.kafka.metric-reporter.enabled=true \\\\\\n     -jar /path/to/your/consumer.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\n**Note:**\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Java application, you can run it using the below commands\\n\\n**Note:**\\n- Ensure you have Java and Maven installed. Compile your Java producer applications: Ensure your producer apps are compiled and ready to run.\\n\\n**Run Producer App with Java Agent:**\\n\\n```bash\\njava -javaagent:/path/to/opentelemetry-javaagent.jar \\\\\\n     -Dotel.service.name=producer-svc \\\\\\n     -Dotel.traces.exporter=otlp \\\\\\n     -Dotel.metrics.exporter=otlp \\\\\\n     -Dotel.logs.exporter=otlp \\\\\\n     -jar /path/to/your/producer.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\n**Note:**\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n\\n\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\n**Note:**\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\\n\";","export default \"\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\\n\";","export default \"\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\\n\";","export default \"\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\\n\";","export default \"\\nOnce you are done intrumenting your Java application, you can run it using the below command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\njava -javaagent:<path>/opentelemetry-javaagent.jar -jar <my-app>.jar\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n<my-app> - Jar file of your application\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/springboot/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n \\n**Step 1.** Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\";","export default \"Run your application\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\n```\\n\\n&nbsp;\\n&nbsp;\\n\\n```bash\\njava -javaagent:/opentelemetry-javaagent.jar -jar\\n```\\n\\n&nbsp;\\n&nbsp;\\n\\n```bash\\n<my-app>.jar\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n\\n&nbsp;\\n&nbsp;\\n\\n Download OTel java binary agent<br></br>\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\";","export default \"Run your application<br></br>\\n\\n```bash\\njava -javaagent:/opentelemetry-javaagent.jar -jar <myapp>.jar\\n```\\n\\n&nbsp;\\n\\n\\n- `<myapp>` is the name of your application jar file\\n- In case you download `opentelemetry-javaagent.jar` file in different directory than that of the project, replace `$PWD` with the path of the otel jar file.\\n\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Create setenv.sh file\\n\\nCreate a `setenv.sh` file in the same directory as your Dockerfile\\n\\n```bash\\n#!/bin/sh\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/usr/local/tomcat/opentelemetry-javaagent.jar\\\"\\nexport OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443\\nexport OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\n```\\n\\n&nbsp;\\n\\n### Dockerize your application\\n\\nUpdate your Dockerfile with the below commands\\n```bash\\n...\\n# Set working directory. Here /usr/local/tomcat is assumed to be the working directory\\nWORKDIR /usr/local/tomcat\\n\\n# Download otel java binary agent\\nRUN wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar -O opentelemetry-javaagent.jar\\n\\n# Copy setenv.sh into Tomcat bin directory of the working directory to enable the instrumentation agent\\nCOPY setenv.sh /usr/local/tomcat/bin/\\n...\\n```\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.79.0/otelcol-contrib_0.79.0_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_0.79.0_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\nCreate a `setenv.sh` file in the same directory as your Dockerfile\\n\\n```bash\\n#!/bin/sh\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/usr/local/tomcat/opentelemetry-javaagent.jar\\\"\\n```\\n\\n&nbsp;\\n\\n### Dockerize your application\\n\\nUpdate your Dockerfile with the below commands\\n```bash\\n...\\n# Set working directory. Here /usr/local/tomcat is assumed to be the working directory\\nWORKDIR /usr/local/tomcat\\n\\n# Download otel java binary agent\\nRUN wget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar -O opentelemetry-javaagent.jar\\n\\n# Copy setenv.sh into Tomcat bin directory of the working directory to enable the instrumentation agent\\nCOPY setenv.sh /usr/local/tomcat/bin/\\n...\\n```\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"## Enable the instrumentation agent and run your application\\n&nbsp;\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n&nbsp;\\n\\nThis should set the environment variable and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n&nbsp;\\n\\n**Note:**\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"## Enable the instrumentation agent and run your application\\n&nbsp;\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n&nbsp;\\n\\nThis should set these environment variables and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\nexport OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443\\nexport OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Enable the instrumentation agent and run your application\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n\\nThis should set the environment variable and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"## Enable the instrumentation agent and run your application\\n&nbsp;\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n&nbsp;\\n\\nThis should set these environment variables and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\nexport OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443\\nexport OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Enable the instrumentation agent and run your application\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n\\nThis should set the environment variable and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\\n\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"## Enable the instrumentation agent and run your application\\n&nbsp;\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n&nbsp;\\n\\nThis should set these environment variables and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\nexport OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443\\nexport OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Enable the instrumentation agent and run your application\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n\\nThis should set the environment variable and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\\n\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"## Enable the instrumentation agent and run your application\\n&nbsp;\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n&nbsp;\\n\\nThis should set these environment variables and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\nexport OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443\\nexport OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n### Download otel java binary agent\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Java application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Enable the instrumentation agent and run your application\\n\\nIf you run your .war package by putting in webapps folder, just add setenv.sh in your Tomcat bin folder.\\n\\nThis should set the environment variable and start sending telemetry data to SigNoz Cloud.\\n\\n```bash\\nexport CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/<path>/opentelemetry-javaagent.jar\\\"\\n```\\n&nbsp;\\n\\n<path> - update it to the path where you downloaded the Java JAR agent in previous step\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/tomcat/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\n**Step 1.** Download otel java binary agent\\n\\n&nbsp;\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\";","export default \"## Enable the instrumentation agent and run your application\\n\\nIf you run your `.war` package by putting in `webapps` folder, just add `setenv.bat` in your Tomcat `bin` folder.\\n\\nThis should set these environment variables and start sending telemetry data to SigNoz Cloud.\\n\\n&nbsp;\\n\\n```bash\\nset CATALINA_OPTS=%CATALINA_OPTS% -javaagent:C:\\\\path\\\\to\\\\opentelemetry-javaagent.jar\\nset OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\nset OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443\\nset OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.79.0/otelcol-contrib_0.79.0_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_0.79.0_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Java Application\\n\\n#### Requirements\\n- Java 8 or higher\\n&nbsp;\\n\\nDownload OTel java binary agent\\n\\n&nbsp;\\n&nbsp;\\n\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\\n```\\n\";","export default \"Enable the instrumentation agent and run your application<br></br>\\n\\nIf you run your `.war` package by putting in `webapps` folder, just add `setenv.isBreakStatement` in your Tomcat `bin` folder.\\n\\nThis should set these environment variables and start sending telemetry data to SigNoz Cloud.\\n\\n&nbsp;\\n\\n```bash\\nset CATALINA_OPTS=\\\"$CATALINA_OPTS -javaagent:/path/to/opentelemetry-javaagent.jar\\\"\\n```\\n\\n&nbsp;\\n\\n- path/to - Update it to the path of your downloaded Java JAR agent.\\n\";","export default \"\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n      headers: {\\n        'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}',\\n      },\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\nUpdate your Dockerfile as:\\n\\n```dockerfile\\n...\\n# Run the app with the required OpenTelemetry configuration. app.js is your application main file.\\nCMD [\\\"ng\\\", \\\"serve\\\"]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nWhile creating the `config.yaml` during the installation fo the OTel Collector Binary, you need to enable CORS under the receivers section so that you don't get CORS error while sending your Traces to SigNoz Cloud. See the code snippet below to understand how you can enable CORS in your config file:\\n\\n```yaml\\n\\n      http:\\n+        cors:\\n+          allowed_origins:\\n+            - <Frontend-application-URL>  # URL of your Frontend application. Example -> http://localhost:4200, https://netflix.com etc.\\n\\n```\\n\\n`<Frontend-application-URL>` - URL where your frontend application is running. For Example, `http://localhost:4200` or `https://netflix.com` etc.\\n\\n**NOTE:** Make sure to restart your collector after making the config changes\\n\\n\\nOnce you are done setting up the OTel collector binary and enabling CORS, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Angular Application\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'http://localhost:4318/v1/traces',\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\\n\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\n\\nUpdate your Dockerfile as:\\n\\n```dockerfile\\n...\\n# Run the app with the required OpenTelemetry configuration. app.js is your application main file.\\nCMD [\\\"ng\\\", \\\"serve\\\"]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Angular Application\\n\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'http://localhost:4318/v1/traces',\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Angular application, you can run it using the below command\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\\n\\n\\n\";","export default \"&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n      headers: {\\n        'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}',\\n      },\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below command\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n        cors:\\n          allowed_origins:\\n            - <Frontend-application-URL>  # URL of your Frontend application. Example -> http://localhost:4200, https://netflix.com etc.\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n&nbsp;\\n\\n`<Frontend-application-URL>` - URL where your frontend application is running. For Example,` http://localhost:4200` or `https://netflix.com` etc.\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Angular Application.\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{MYAPP}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'http://localhost:4318/v1/traces',\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\\n\";","export default \"&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n      headers: {\\n        'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}',\\n      },\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below command\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n        cors:\\n          allowed_origins:\\n            - <Frontend-application-URL>  # URL of your Frontend application. Example -> http://localhost:4200, https://netflix.com etc.\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n&nbsp;\\n\\n`<Frontend-application-URL>` - URL where your frontend application is running. For Example,` http://localhost:4200` or `https://netflix.com` etc.\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Angular Application.\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{MYAPP}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'http://localhost:4318/v1/traces',\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\";","export default \"&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n      headers: {\\n        'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}',\\n      },\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below command\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n        cors:\\n          allowed_origins:\\n            - <Frontend-application-URL>  # URL of your Frontend application. Example -> http://localhost:4200, https://netflix.com etc.\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n&nbsp;\\n\\n`<Frontend-application-URL>` - URL where your frontend application is running. For Example,` http://localhost:4200` or `https://netflix.com` etc.\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Angular Application.\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{MYAPP}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'http://localhost:4318/v1/traces',\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\";","export default \"&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n      headers: {\\n        'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}',\\n      },\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below command\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n        cors:\\n          allowed_origins:\\n            - <Frontend-application-URL>  # URL of your Frontend application. Example -> http://localhost:4200, https://netflix.com etc.\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n&nbsp;\\n\\n`<Frontend-application-URL>` - URL where your frontend application is running. For Example,` http://localhost:4200` or `https://netflix.com` etc.\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Angular Application.\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n### Step 2: Create instrument.ts file\\n\\n```ts\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{MYAPP}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'http://localhost:4318/v1/traces',\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the below import to your `main.ts` file.\\n\\n```ts\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\";","export default \"&nbsp;\\n\\n**Step 1.** Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n**Step 2.** Create `instrument.ts` file<br></br>\\nYou need to configure the endpoint for SigNoz cloud in this file.\\n\\n```bash\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n      headers: {\\n        'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}',\\n      },\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n\\n```\\n\\n&nbsp;\\n&nbsp;\\n\\nOpenTelemetry Node SDK currently does not detect the headers from `.env` files as of today. That’s why we need to include the variables in the `instrument.ts` file itself.\\n\\n\\n**Step 3.** Add the below import to your `main.ts` file.\\n\\n```bash\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below command\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\";","export default \"**Step 1.** Install OpenTelemetry Collector binary\\n\\nOTel Collector binary helps to collect logs, hostmetrics, resource and infra attributes. It is recommended to install Otel Collector binary to collect and send traces to SigNoz cloud. You can correlate signals and have rich contextual data through this way.\\n\\nYou can find instructions to install OTel Collector binary [here](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) in your VM. \\n\\nWhile creating the `config.yaml` during the installation fo the OTel Collector Binary, you need to enable CORS under the receivers section of the config file. This is needed so that you don't get \\nCORS error which can hinder sending your Traces to SigNoz Cloud. See the code snippet below to understand how you can enable CORS in your config file:\\n\\n```bash\\n      http:\\n+        cors:\\n+          allowed_origins:\\n+            - <Frontend-application-URL>  # URL of your Frontend application. Example -> http://localhost:4200, https://netflix.com etc.\\n```\\n\\n&nbsp;\\n\\n`<Frontend-application-URL>` - URL where your frontend application is running. For Example, http://localhost:4200 or https://netflix.com etc.\\n\\n**NOTE:** Make sure to restart your collector after making the config changes\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your Angular Application.\\n\\n&nbsp;\\n\\n**Step 1.** Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/sdk-trace-web@^1.21.0                                                                   \\nnpm install --save @opentelemetry/instrumentation@^0.48.0\\nnpm install --save @opentelemetry/auto-instrumentations-web@^0.36.0\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.48.0\\nnpm install --save @opentelemetry/resources@^1.21.0\\nnpm install --save @opentelemetry/propagator-b3@^1.21.0\\nnpm install --save @opentelemetry/semantic-conventions@^1.21.0\\n```\\n&nbsp;\\n\\n**Step 2.** Create `instrument.ts` file<br></br>\\n\\n```bash\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport {\\n  WebTracerProvider,\\n  ConsoleSpanExporter,\\n  SimpleSpanProcessor,\\n  BatchSpanProcessor,\\n} from '@opentelemetry/sdk-trace-web';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\nconst resource = Resource.default().merge(\\n  new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '<service_name>',\\n    [SemanticResourceAttributes.SERVICE_VERSION]: '0.1.0',\\n  })\\n);\\n\\nconst provider = new WebTracerProvider({ resource });\\n\\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\\n\\nprovider.addSpanProcessor(\\n  new BatchSpanProcessor(\\n    new OTLPTraceExporter({\\n      url: 'http://localhost:4318/v1/traces',\\n    })\\n  )\\n);\\n\\nprovider.register({\\n  propagator: new B3Propagator(),\\n});\\n\\nregisterInstrumentations({\\n  instrumentations: [\\n    getWebAutoInstrumentations({\\n      '@opentelemetry/instrumentation-document-load': {},\\n      '@opentelemetry/instrumentation-user-interaction': {},\\n      '@opentelemetry/instrumentation-fetch': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n      '@opentelemetry/instrumentation-xml-http-request': {\\n        propagateTraceHeaderCorsUrls: /.+/,\\n      },\\n    }),\\n  ],\\n});\\n```\\n\\n&nbsp;\\n&nbsp;\\n\\n- `<service_name>` : Name of your service.\\n\\n**Step 3.** Add the below import to your `main.ts` file.\\n\\n```bash\\nimport './app/instrument';\\n```\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Angular application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n&nbsp;\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nng serve\\n```\\n\\n&nbsp;\\n\";","export default \"\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Dockerize your application\\n\\nSet the SigNoz ingestion key Environment variable and update your run command to include the `-r` flag and `./tracing.js` file in Dockerfile as:\\n\\n```bash\\n...\\n# Use an environment variable for the Signoz Ingestion Key\\nENV OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n\\n# Run the app with the required OpenTelemetry configuration. app.js is your application main file.\\nCMD [\\\"node\\\", \\\"-r\\\", \\\"./tracing.js\\\", \\\"app.js\\\"]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Dockerize your application\\n\\nSet the SigNoz ingestion key Environment variable and update your run command to include the `-r` flag and `./tracing.js` file in Dockerfile as:\\n\\n```bash\\n...\\n# Run the app with the required OpenTelemetry configuration. app.js is your application main file.\\nCMD [\\\"node\\\", \\\"-r\\\", \\\"./tracing.js\\\", \\\"app.js\\\"]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions ^4.0.0\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" node -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" node -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" node -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" node -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/express/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"Set `OTEL_EXPORTER_OTLP_ENDPOINT` as env variable using powershell:\\n\\n&nbsp;\\n\\n```bash\\n$env:OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443/v1/traces\\\"\\n```\\n\\n**Run the application** <br></br>\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\";","export default \"**Step 1.** Install OpenTelemetry Collector binary\\n\\nOTel Collector binary helps to collect logs, hostmetrics, resource and infra attributes. It is recommended to install Otel Collector binary to collect and send traces to SigNoz cloud. You can correlate signals and have rich contextual data through this way.\\n\\nYou can find instructions to install OTel Collector binary [here](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) in your VM. \\n\\nWhile creating the `config.yaml` during the installation fo the OTel Collector Binary, you need to enable CORS under the receivers section of the config file. This is needed so that you don't get \\nCORS error which can hinder sending your Traces to SigNoz Cloud. See the code snippet below to understand how you can enable CORS in your config file:\\n\\n&nbsp;\\n\\n```yml\\n      http:\\n+        cors:\\n+          allowed_origins:\\n+            - <Frontend-application-URL>  # URL of your Frontend application. Example -> http://localhost:4200, https://netflix.com etc.\\n```\\n`<Frontend-application-URL>` - URL where your frontend application is running. For Example, http://localhost:4200 or https://netflix.com etc.\\n\\n**NOTE:** Make sure to restart your collector after making the config changes\";","export default \"After setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions ^4.0.0\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\";","export default \"**Run the application** <br></br>\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\";","export default \"#### Requirements\\n- Supported Versions >= `4.0.0`\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```javascript\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\\n\\n&nbsp;\\n\\n### Step 5: Dockerize your application\\n\\nSet the SigNoz ingestion key Environment variable and expose port 3001 in Dockerfile as:\\n\\n```bash\\n...\\n# Use an environment variable for the Signoz Ingestion Key\\nENV OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n\\n# In step 4 above, you are configuring your NestJS application to listen on port 3001\\nEXPOSE 3001\\n\\n# Run the app with the required OpenTelemetry configuration.\\nCMD [ \\\"nest\\\", \\\"start\\\" ]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions >= `4.0.0`\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'http://localhost:4318/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\\n\\n&nbsp;\\n\\n### Step 5: Dockerize your application\\n\\nExpose port 3001 in Dockerfile as:\\n\\n```bash\\n...\\n\\n# In step 4 above, you are configuring your NestJS application to listen on port 3001\\nEXPOSE 3001\\n\\n# Run the app with the required OpenTelemetry configuration.\\nCMD [ \\\"nest\\\", \\\"start\\\" ]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions >= `4.0.0`\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'http://localhost:4318/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"After your instrumentation is done, start your application\\n\\n```bash\\n  nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Supported Versions >= `4.0.0`\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"After your instrumentation is done, start your application\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions >= `4.0.0`\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'http://localhost:4318/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\n  nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Supported Versions >= `4.0.0`\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"After your instrumentation is done, start your application\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions >= `4.0.0`\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'http://localhost:4318/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\n  nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Supported Versions >= `4.0.0`\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"After your instrumentation is done, start your application\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions >= `4.0.0`\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'http://localhost:4318/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\n  nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Supported Versions >= `4.0.0`\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"After your instrumentation is done, start your application\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions >= `4.0.0`\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'http://localhost:4318/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\n  nest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"**Step 1.** Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0                                                                       \\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n\\n**Step 2.** Create `tracer.ts` file<br></br>\\nYou need to configure the endpoint for SigNoz cloud in this file.\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  //highlight-start\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n  headers: { 'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}' },\\n  //highlight-end\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n\\n&nbsp;\\n\\n**Step 3.** On `main.ts` file or file where your app starts import tracer using below command.\\n      \\n```bash\\nconst tracer = require('./tracer')\\n```\\n\\n&nbsp;\\n\\n**Step 4.** Start the tracer<br></br>\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows: \\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    // highlight-start\\n    await tracer.start();\\n    //highlight-end\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"After your instrumentation is done, start your application\\n\\n```bash\\nnest start\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/nestjs/#troubleshooting-your-installation) for assistance.\";","export default \"OTel Collector binary helps to collect logs, hostmetrics, resource and infra attributes. It is recommended to install Otel Collector binary to collect and send traces to SigNoz cloud. You can correlate signals and have rich contextual data through this way.\\n\\nYou can find instructions to install OTel Collector binary [here](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) in your VM. Once you are done setting up your OTel Collector binary, you can follow the below steps for instrumenting your Javascript application.\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions >= `4.0.0`\\n&nbsp;\\n\\n**Step 1.** Install OpenTelemetry packages\\n\\n```js\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n\\n&nbsp;\\n\\n**Step 2.** Create `tracer.ts` file<br></br>\\n\\n```ts\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  //highlight-start\\n  url: 'http://localhost:4318/v1/traces',\\n  //highlight-end\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '<service_name>',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n\\n&nbsp;\\n&nbsp;\\n\\n- `<service_name>` : Name of your service.\\n\\n**Step 3.** On `main.ts` file or file where your app starts import tracer using below command. \\n<Admonition type=\\\"info\\\">\\nThe below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n</Admonition>\\n    \\n```jsx\\nconst tracer = require('./tracer')\\n```\\n    \\n\\n**Step 4.** Start the tracer<br></br>\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows: \\n\\n```jsx\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    // highlight-start\\n    await tracer.start();\\n    //highlight-end\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### Step 2: Run the application\\n```bash\\n  nest start\\n```\";","export default \"\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n### Step 3: Dockerize your application\\n\\nSet the SigNoz ingestion key Environment variable and update your run command to include the `-r` flag and `./tracing.js` file in Dockerfile as:\\n\\n```bash\\n...\\n# Use an environment variable for the Signoz Ingestion Key\\nENV OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n\\n# Run the app with the required OpenTelemetry configuration. app.js is your application main file.\\nCMD [\\\"node\\\", \\\"-r\\\", \\\"./tracing.js\\\", \\\"app.js\\\"]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n### Step 3: Dockerize your application\\n\\nSet the SigNoz ingestion key Environment variable and update your run command to include the `-r` flag and `./tracing.js` file in Dockerfile as:\\n\\n```bash\\n...\\n# Run the app with the required OpenTelemetry configuration. app.js is your application main file.\\nCMD [\\\"node\\\", \\\"-r\\\", \\\"./tracing.js\\\", \\\"app.js\\\"]\\n...\\n```\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- NodeJS Version 14 or newer\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" node -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" node -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" node -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- Supported Versions >= `4.0.0`\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n'use strict';\\n\\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\nimport { Resource } from '@opentelemetry/resources';\\nimport * as opentelemetry from '@opentelemetry/sdk-node';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\n\\n// Configure the SDK to export telemetry data to the console\\n// Enable all auto-instrumentations from the meta package\\nconst exporterOptions = {\\n  url: 'http://localhost:4318/v1/traces',\\n};\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n  }),\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start();\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk\\n    .shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n\\nexport default sdk;\\n```\\n&nbsp;\\n\\n### Step 3: Import tracer in the `main.js file`\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `main.ts`)\\n```bash\\nconst tracer = require('./tracer')\\n```\\n&nbsp;\\n\\n### Step 4: Start the tracer\\nIn the `async function boostrap` section of the application code, initialize the tracer as follows:\\n\\n```bash\\nconst tracer = require('./tracer')\\n\\nimport { NestFactory } from '@nestjs/core';\\nimport { AppModule } from './app.module';\\n  // All of your application code and any imports that should leverage\\n  // OpenTelemetry automatic instrumentation must go here.\\n\\nasync function bootstrap() {\\n    await tracer.start();\\n    const app = await NestFactory.create(AppModule);\\n    await app.listen(3001);\\n  }\\n  bootstrap();\\n```\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" node -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it using the below command\\n\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nnode -r ./tracing.js app.js\\n```\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\n// do not set headers in exporterOptions, the OTel spec recommends setting headers through ENV variables\\n// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md#specifying-headers-via-environment-variables\\n\\nconst exporterOptions = {\\n  url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces'\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n### Step 3: Dockerize your application\\n\\nSet the SigNoz ingestion key Environment variable and update your run command to include the `-r` flag and `./tracing.js` file in Dockerfile as:\\n\\n```bash\\n...\\n# Use an environment variable for the Signoz Ingestion Key\\nENV OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\"\\n\\n# Run the app with the required OpenTelemetry configuration. app.js is your application main file.\\nCMD [\\\"node\\\", \\\"-r\\\", \\\"./tracing.js\\\", \\\"app.js\\\"]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your JavaScript Application\\n\\n#### Requirements\\n- NodeJS Version 14 or newer\\n\\n&nbsp;\\n\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/api@^1.6.0\\nnpm install --save @opentelemetry/sdk-node@^0.45.0\\nnpm install --save @opentelemetry/auto-instrumentations-node@^0.39.4\\nnpm install --save @opentelemetry/exporter-trace-otlp-http@^0.45.0\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```bash\\n// tracing.js\\n'use strict'\\nconst process = require('process');\\nconst opentelemetry = require('@opentelemetry/sdk-node');\\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-http');\\nconst { Resource } = require('@opentelemetry/resources');\\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\\n\\nconst exporterOptions = {\\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT || 'http://localhost:4318/v1/traces',\\n}\\n\\nconst traceExporter = new OTLPTraceExporter(exporterOptions);\\nconst sdk = new opentelemetry.NodeSDK({\\n  traceExporter,\\n  instrumentations: [getNodeAutoInstrumentations()],\\n  resource: new Resource({\\n    [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}'\\n  })\\n});\\n\\n// initialize the SDK and register with the OpenTelemetry API\\n// this enables the API to record telemetry\\nsdk.start()\\n\\n// gracefully shut down the SDK on process exit\\nprocess.on('SIGTERM', () => {\\n  sdk.shutdown()\\n    .then(() => console.log('Tracing terminated'))\\n    .catch((error) => console.log('Error terminating tracing', error))\\n    .finally(() => process.exit(0));\\n});\\n```\\n\\n### Step 3: Dockerize your application\\n\\nSet the SigNoz ingestion key Environment variable and update your run command to include the `-r` flag and `./tracing.js` file in Dockerfile as:\\n\\n```bash\\n...\\n# Run the app with the required OpenTelemetry configuration. app.js is your application main file.\\nCMD [\\\"node\\\", \\\"-r\\\", \\\"./tracing.js\\\", \\\"app.js\\\"]\\n...\\n```\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/javascript/#troubleshooting-your-installation) for assistance.\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n\\n&nbsp;\\n\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n&nbsp;\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n\\n// ...rest of the app's entry point code\\n```\\n\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\n\\n```bash\\n...\\n\\n# Run the app with the required OpenTelemetry configuration.\\nCMD [ \\\"npm\\\", \\\"start\\\" ]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult this [documentation](https://signoz.io/docs/instrumentation/reactjs/) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n// ...rest of the app's entry point code\\n```\\n\\n### Step 4: Dockerize your application\\n\\n```bash\\n...\\n\\n# Run the app with the required OpenTelemetry configuration.\\nCMD [ \\\"npm\\\", \\\"start\\\" ]\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\n\\nIf you encounter any difficulties, please consult this [documentation](https://signoz.io/docs/instrumentation/reactjs/) for assistance.\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'https://ingest.{{REGION}}.signoz.cloud:443/v1/traces',\\n    headers: {\\n        \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n    },\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n\\n&nbsp;\\n\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"Once you are done intrumenting your JavaScript application, you can run it as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"\\n### Step 1: Install OpenTelemetry packages\\n\\n```bash\\nnpm install --save @opentelemetry/context-zone\\nnpm install --save @opentelemetry/instrumentation\\nnpm install --save @opentelemetry/auto-instrumentations-web\\nnpm install --save @opentelemetry/sdk-trace-base\\nnpm install --save @opentelemetry/sdk-trace-web\\nnpm install --save @opentelemetry/resources\\nnpm install --save @opentelemetry/semantic-conventions\\nnpm install --save @opentelemetry/exporter-trace-otlp-http\\n```\\n&nbsp;\\n\\n### Step 2: Create tracing.js file\\n\\n```javascript\\n// tracing.js\\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\\nimport { Resource } from '@opentelemetry/resources';\\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\\n\\nconst provider = new WebTracerProvider({\\n    resource: new Resource({\\n        [SemanticResourceAttributes.SERVICE_NAME]: '{{MYAPP}}',\\n    }),\\n});\\nconst exporter = new OTLPTraceExporter({\\n    url: 'http://localhost:4318/v1/traces',\\n});\\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\\n\\nprovider.register({\\n    // Changing default contextManager to use ZoneContextManager - supports asynchronous operations so that traces are not broken\\n    contextManager: new ZoneContextManager(),\\n});\\n\\n// Registering instrumentations\\nregisterInstrumentations({\\n    instrumentations: [\\n        getWebAutoInstrumentations({\\n                        \\n            '@opentelemetry/instrumentation-xml-http-request': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n            '@opentelemetry/instrumentation-fetch': {\\n                propagateTraceHeaderCorsUrls: [\\n                    /.+/g, //Regex to match your backend urls.\\n                ],\\n            },\\n        }),\\n    ],\\n});\\n```\\n\\n&nbsp;\\n\\n### Step 3: Import tracer in main file\\n\\n**Important Note**: The below import should be the first line in the main file of your application (Ex -> `index.js`)\\n```bash\\nimport './tracing.js'\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your JavaScript application, you can run it using the below commands\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\nRun your JavaScript application as you normally would.\\n\\nFor example:\\n\\nIf you're using `npm`\\n```bash\\nnpm start\\n```\\n&nbsp;\\n\\nIf you're using `yarn`\\n```bash\\nyarn start\\n``` \\n\\n&nbsp;\\n\\nTo view more detailed documentation, checkout this [link](https://signoz.io/docs/instrumentation/javascript/)\";","export default \"&nbsp;\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\n\\nUpdate your dockerfile to include the environment variables:\\n\\n```bash\\n...\\n# Set environment variables\\nENV OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME={{MYAPP}} \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your PHP Application\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\n\\nUpdate your dockerfile to include the environment variables:\\n\\n```bash\\n...\\n# Set environment variables\\nENV OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME={{MYAPP}} \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=<COLLECTOR-ENDPOINT> \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext\\n...\\n```\\n\\n- <COLLECTOR_ENDPOINT> - Endpoint at which the collector is running. Ex. -> `http://localhost:4317`\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your PHP Application\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\\n\\n\";","export default \"### Set environment variables and run app\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME={MYAPP} \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=<COLLECTOR_ENDPOINT> \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <COLLECTOR_ENDPOINT> - Endpoint at which the collector is running. Ex. -> `http://localhost:4317`\\n- <your-run-command> - Run command for your PHP application\";","export default \"&nbsp;\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\";","export default \"### Running your PHP application\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME={{MYAPP}} \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <your-run-command> - Run command for your PHP application\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your PHP Application\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your PHP application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your PHP application\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME=<SERVICE_NAME> \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=<COLLECTOR_ENDPOINT> \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <COLLECTOR_ENDPOINT> - Endpoint at which the collector is running. Ex. -> `http://localhost:4317`\\n- <your-run-command> - Run command for your PHP application\";","export default \"&nbsp;\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\";","export default \"### Running your PHP application\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME={{MYAPP}} \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <your-run-command> - Run command for your PHP application\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your PHP Application\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Rust application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your PHP application\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME=<SERVICE_NAME> \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=<COLLECTOR_ENDPOINT> \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <COLLECTOR_ENDPOINT> - Endpoint at which the collector is running. Ex. -> `http://localhost:4317`\\n- <your-run-command> - Run command for your PHP application\";","export default \"&nbsp;\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\";","export default \"### Running your PHP application\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME={{MYAPP}} \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <your-run-command> - Run command for your PHP application\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your PHP Application\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Rust application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your PHP application\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME=<SERVICE_NAME> \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=<COLLECTOR_ENDPOINT> \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <COLLECTOR_ENDPOINT> - Endpoint at which the collector is running. Ex. -> `http://localhost:4317`\\n- <your-run-command> - Run command for your PHP application\";","export default \"&nbsp;\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\";","export default \"### Running your PHP application\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME={{MYAPP}} \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <your-run-command> - Run command for your PHP application\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your PHP Application\\n\\n### Step 1: Setup Development Environment\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Linux**:\\n```bash\\nsudo apt-get install gcc make autoconf\\n```\\n\\n**MacOs(Homebrew)**:\\n```bash\\nbrew install gcc make autoconf\\n```\\n\\n&nbsp;\\n\\n### Step 2: Build the extension\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to php.ini file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nRunning the above command will **output**:\\n\\n```bash\\nopentelemetry\\n```\\n\\n&nbsp;\\n\\n### Step 3: Add the dependencies\\n\\nAdd dependencies required to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\ncomposer require \\\\\\n  open-telemetry/sdk \\\\\\n  open-telemetry/exporter-otlp \\\\\\n  php-http/guzzle7-adapter \\\\\\n  open-telemetry/transport-grpc\\n```\\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Rust application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your PHP application\\n\\nWe will pass environment variables at the runtime: \\n\\n```bash\\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\\\\n    OTEL_SERVICE_NAME=<SERVICE_NAME> \\\\\\n    OTEL_TRACES_EXPORTER=otlp \\\\\\n    OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=<COLLECTOR_ENDPOINT> \\\\\\n    OTEL_PROPAGATORS=baggage,tracecontext \\\\\\n    <your-run-command>\\n```\\n\\n- <COLLECTOR_ENDPOINT> - Endpoint at which the collector is running. Ex. -> `http://localhost:4317`\\n- <your-run-command> - Run command for your PHP application\";","export default \"&nbsp;\\n\\n**Step 1: Setup Development Environment**\\n\\nInitialize the application using\\n\\n```bash\\ncomposer init --no-interaction --stability beta --require slim/slim:\\\"^4\\\" --require slim/psr7:\\\"^1\\\"\\n```\\n\\nAfter successful run of prior command a file named `composer.json` will be generated if it does not exist. Next run the following command, make sure the version of `php` you are using is `7.4` or else you might encounter some issues running the following command.\\n\\n```bash\\ncomposer update\\n```\\n\\n&nbsp;\\n\\n**Step 2: Build the extension**\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n&nbsp;\\n\\nIf gRPC is already downloaded and installed, skip the following step.\\n\\n```bash\\npecl install grpc \\n```\\n&nbsp;\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to `php.ini` file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n&nbsp;\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n&nbsp;\\n\\nThis should output:\\n\\n```bash\\nopentelemetry\\n```\\n&nbsp;\\n\\n**Step 3: Add the dependencies**\\n\\nAdd dependencies required for OpenTelemetry SDK for PHP to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\n```\\n&nbsp;\\n\\n```\\ncomposer require open-telemetry/sdk open-telemetry/exporter-otlp php-http/guzzle7-adapter open-telemetry/transport-grpc guzzlehttp/guzzle\\n```\\n&nbsp;\\n\\nYou can install the additional dependencies provided by OpenTelemetry for different PHP frameworks from [here](https://packagist.org/explore/?query=open-telemetry).\\n&nbsp;\\n\\n**Step 4: Modify php code**\\n\\n```bash\\n<?php\\n\\nuse OpenTelemetry\\\\API\\\\Common\\\\Instrumentation\\\\Globals;\\nuse OpenTelemetry\\\\API\\\\Trace\\\\Propagation\\\\TraceContextPropagator;\\nuse OpenTelemetry\\\\Contrib\\\\Otlp\\\\SpanExporter;\\nuse OpenTelemetry\\\\SDK\\\\Common\\\\Attribute\\\\Attributes;\\nuse OpenTelemetry\\\\SDK\\\\Common\\\\Export\\\\Stream\\\\StreamTransportFactory;\\nuse OpenTelemetry\\\\SDK\\\\Resource\\\\ResourceInfo;\\nuse OpenTelemetry\\\\SDK\\\\Resource\\\\ResourceInfoFactory;\\nuse OpenTelemetry\\\\SDK\\\\Sdk;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\Sampler\\\\AlwaysOnSampler;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\Sampler\\\\ParentBased;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\SpanProcessor\\\\SimpleSpanProcessor;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\SpanProcessor\\\\BatchSpanProcessorBuilder;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\TracerProvider;\\nuse OpenTelemetry\\\\SemConv\\\\ResourceAttributes;\\nuse OpenTelemetry\\\\Contrib\\\\Grpc\\\\GrpcTransportFactory;\\nuse OpenTelemetry\\\\Contrib\\\\Otlp\\\\OtlpUtil;\\nuse OpenTelemetry\\\\API\\\\Common\\\\Signal\\\\Signals;\\n\\nfunction initOpenTelemetry()\\n{ \\n $resource = ResourceInfoFactory::emptyResource()->merge(ResourceInfo::create(Attributes::create([\\n ResourceAttributes::SERVICE_NAME => '{{MYAPP}}'\\n ])));\\n\\n\\n $headers = [\\n 'signoz-ingestion-key' => \\\"{{SIGNOZ_INGESTION_KEY}}\\\",\\n ];\\n $transport = (new GrpcTransportFactory())->create('https://ingest.{{REGION}}.signoz.cloud:443/v1/traces\\\"' . OtlpUtil::method(Signals::TRACE), 'application/x-protobuf', $headers);\\n $spanExporter = new SpanExporter($transport);\\n\\n\\n $tracerProvider = TracerProvider::builder()\\n ->addSpanProcessor(\\n (new BatchSpanProcessorBuilder($spanExporter))->build()\\n )\\n ->setResource($resource)\\n ->setSampler(new ParentBased(new AlwaysOnSampler()))\\n ->build();\\n\\n Sdk::builder()\\n ->setTracerProvider($tracerProvider)\\n ->setPropagator(TraceContextPropagator::getInstance())\\n ->setAutoShutdown(true)\\n ->buildAndRegisterGlobal();\\n\\n}\\n?>\\n```\\n\";","export default \"**Set environment variables and run app**\\n\\nRun application using your run command or the following generalized command (depending on framework you are using):\\n\\n```bash\\n    php -S localhost:8080 app.php\\n```\\n\";","export default \"OTel Collector binary helps to collect logs, hostmetrics, resource and infra attributes. It is recommended to install Otel Collector binary to collect and send traces to SigNoz cloud. You can correlate signals and have rich contextual data through this way.\\n\\nYou can find instructions to install OTel Collector binary [here](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) in your VM. Once you are done setting up your OTel Collector binary, you can follow the below steps for instrumenting your PHP application.\";","export default \"**Step 2: Setup Development Environment**\\n\\nTo configure our PHP application to send data, you need to use OpenTelemetry PHP extension. Since the extension is built from the source, you need to have the build tools, which can be installed using the following command:\\n\\n**Step 3: Build the extension**\\n\\nWith our environment set up we can install the extension using [PECL](https://pecl.php.net/):\\n\\n```bash\\npecl install opentelemetry\\n```\\n\\nIf gRPC is already downloaded and installed, skip the following step.\\n\\n```bash\\npecl install grpc \\n```\\n\\nAfter successfully installing the OpenTelemetry extension, add the extension to `php.ini` file of your project:\\n\\n```bash\\n[opentelemetry]\\nextension=opentelemetry.so\\n```\\n\\nVerify that the extension is enabled by running:\\n\\n```bash\\nphp -m | grep opentelemetry\\n```\\n\\nThis should output:\\n\\n```bash\\nopentelemetry\\n```\\n\\n**Step 4: Add the dependencies**\\n\\nAdd dependencies required for OpenTelemetry SDK for PHP to perform automatic instrumentation using this command :\\n\\n```bash\\ncomposer config allow-plugins.php-http/discovery false\\n```\\n\\n&nbsp;\\n\\n```bash\\ncomposer require  open-telemetry/sdk  open-telemetry/exporter-otlp php-http/guzzle7-adapter open-telemetry/transport-grpc guzzlehttp/guzzle\\n```\\n\\n&nbsp;\\n\\nYou can install the additional dependencies provided by OpenTelemetry for different PHP frameworks from [here](https://packagist.org/explore/?query=open-telemetry).\\n\\n\\n**Step 5: Modify php code**\\n\\n```bash\\n<?php\\n\\nuse OpenTelemetry\\\\API\\\\Common\\\\Instrumentation\\\\Globals;\\nuse OpenTelemetry\\\\API\\\\Trace\\\\Propagation\\\\TraceContextPropagator;\\nuse OpenTelemetry\\\\Contrib\\\\Otlp\\\\SpanExporter;\\nuse OpenTelemetry\\\\SDK\\\\Common\\\\Attribute\\\\Attributes;\\nuse OpenTelemetry\\\\SDK\\\\Common\\\\Export\\\\Stream\\\\StreamTransportFactory;\\nuse OpenTelemetry\\\\SDK\\\\Resource\\\\ResourceInfo;\\nuse OpenTelemetry\\\\SDK\\\\Resource\\\\ResourceInfoFactory;\\nuse OpenTelemetry\\\\SDK\\\\Sdk;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\Sampler\\\\AlwaysOnSampler;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\Sampler\\\\ParentBased;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\SpanProcessor\\\\SimpleSpanProcessor;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\SpanProcessor\\\\BatchSpanProcessorBuilder;\\nuse OpenTelemetry\\\\SDK\\\\Trace\\\\TracerProvider;\\nuse OpenTelemetry\\\\SemConv\\\\ResourceAttributes;\\nuse OpenTelemetry\\\\Contrib\\\\Grpc\\\\GrpcTransportFactory;\\nuse OpenTelemetry\\\\Contrib\\\\Otlp\\\\OtlpUtil;\\nuse OpenTelemetry\\\\API\\\\Common\\\\Signal\\\\Signals;\\n\\nfunction initOpenTelemetry()\\n{ \\n $resource = ResourceInfoFactory::emptyResource()->merge(ResourceInfo::create(Attributes::create([\\n ResourceAttributes::SERVICE_NAME => '<SERVICE_NAME>'\\n ])));\\n\\n\\n $headers = [];\\n $transport = (new GrpcTransportFactory())->create('<COLLECTOR_ENDPOINT>' . OtlpUtil::method(Signals::TRACE), 'application/x-protobuf', $headers);\\n $spanExporter = new SpanExporter($transport);\\n\\n\\n $tracerProvider = TracerProvider::builder()\\n ->addSpanProcessor(\\n (new BatchSpanProcessorBuilder($spanExporter))->build()\\n )\\n ->setResource($resource)\\n ->setSampler(new ParentBased(new AlwaysOnSampler()))\\n ->build();\\n\\n Sdk::builder()\\n ->setTracerProvider($tracerProvider)\\n ->setPropagator(TraceContextPropagator::getInstance())\\n ->setAutoShutdown(true)\\n ->buildAndRegisterGlobal();\\n\\n}\\n?>\\n```\\n\";","export default \"\\n**Step 6: Set environment variables and run app**\\n\\nRun application using your run command or the following generalized command (depending on framework you are using):\\n\\n```bash\\n    php -S localhost:8080 app.php\\n```\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{REGION}.signoz.cloud:443\\nENV OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` or `python manage.py runserver --noreload`\\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to Dockerize your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your Dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` or `python manage.py runserver --noreload`\\n\\n\\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\n&nbsp;\\n\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your_run_command>\\n```\\n&nbsp;\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n- for Django, you must define `DJANGO_SETTINGS_MODULE` correctly. If your project is called `mysite`, something like following should work:\\n```bash\\nexport DJANGO_SETTINGS_MODULE=mysite.settings\\n```\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your run command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/django/#troubleshooting-your-installation) for assistance.\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{REGION}.signoz.cloud:443\\nENV OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` \\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to Dockerize your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your Dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` \\n\\n\\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be `python3 app.py` or `gunicorn src.app -b 0.0.0.0:8001`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using these commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be `python3 app.py` or `gunicorn src.app -b 0.0.0.0:8001`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using these commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be `python3 app.py` or `gunicorn src.app -b 0.0.0.0:8001`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using these commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be `python3 app.py` or `gunicorn src.app -b 0.0.0.0:8001`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using these commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your_run_command>\\n```\\n&nbsp;\\n\\n`<your_run_command>` can be `python3 app.py` or `gunicorn src.app -b 0.0.0.0:8001`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using these commands\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your_run_command>\\n```\\n&nbsp;\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/falcon/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{REGION}.signoz.cloud:443\\nENV OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` or `python manage.py runserver --noreload`\\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to Dockerize your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your Dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` or `python manage.py runserver --noreload`\\n\\n\\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `uvicorn main:app --host localhost --port 5002`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `uvicorn main:app --host localhost --port 5002`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `uvicorn main:app --host localhost --port 5002`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `uvicorn main:app --host localhost --port 5002`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\n&nbsp;\\n\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your_run_command>\\n```\\n&nbsp;\\n\\n`<your_run_command>` can be something like `python3 app.py` or `uvicorn main:app --host localhost --port 5002`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.43b0\\npip install opentelemetry-exporter-otlp==1.22.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `python manage.py runserver --noreload`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/fastapi/#troubleshooting-your-installation) for assistance.\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n#(Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{REGION}.signoz.cloud:443\\nENV OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` or `flask run`\\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to Dockerize your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your Dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` or `flask run`\\n\\n\\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\n&nbsp;\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your_run_command>\\n```\\n&nbsp;\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\n&nbsp;\\n\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n&nbsp;\\n\\n**Note:**\\n- Please make sure that you have installed all the dependencies of your application before running the command in **Step 3**. The command will not install instrumentation for the dependencies which are not installed.\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/flask/#troubleshooting-your-installation) for assistance.\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{REGION}.signoz.cloud:443\\nENV OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` \\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n&nbsp;\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-installation) for assistance.\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to Dockerize your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n\\n### Step 1 : Add OpenTelemetry dependencies\\n\\nIn your `requirements.txt` file, add these two OpenTelemetry dependencies:\\n\\n\\n```bash\\nopentelemetry-distro==0.43b0\\nopentelemetry-exporter-otlp==1.22.0\\n\\n```\\n\\n&nbsp;\\n\\n### Step 2 : Dockerize your application\\n\\nUpdate your Dockerfile along with OpenTelemetry instructions as shown below:\\n\\n```bash\\n...\\n\\n# Install any needed packages specified in requirements.txt\\n# And install OpenTelemetry packages\\nRUN pip install --no-cache-dir -r requirements.txt \\n\\nRUN opentelemetry-bootstrap --action=install\\n\\n# (Optional) Make port 5000 available to the world outside this container (You can choose your own port for this)\\nEXPOSE 5000\\n\\n# Set environment variables for OpenTelemetry\\nENV OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\\nENV OTEL_EXPORTER_OTLP_PROTOCOL=grpc\\n\\n# Run app.py with OpenTelemetry instrumentation when the container launches\\nCMD [\\\"opentelemetry-instrument\\\", \\\"<your_run_command>\\\"]\\n...\\n```\\n\\n- <your_run_command> can be `python3 app.py` \\n\\n\\n\\n\\n\\n\\n\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\nThe Docker run command starts a container in detached mode (-d) and maps port 5000 of the host to port 5000 of the container.\\n\\n```bash\\ndocker run -d -p 5000:5000 <your-image-name>\\n```\\n\\n**Note**\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-installation) for assistance.\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n- In case you're dockerising your application, make sure to dockerise it along with OpenTelemetry instrumentation done in previous step.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\\\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nOTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://localhost:4317\\\" \\\\\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc opentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Python Application\\n\\n#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\n&nbsp;\\n\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"Once you are done intrumenting your python application, you can run it using this command\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your_run_command>\\n```\\n\\n&nbsp;\\n\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n\\n&nbsp;\\n\\n**Note**\\n- Don’t run app in reloader/hot-reload mode as it breaks instrumentation. For example, you can disable the auto reload with --noreload.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"#### Requirements\\n- Python 3.8 or newer\\n\\n&nbsp;\\n\\n### Step 1 : Create a virtual environment\\n\\n```bash\\npython3 -m venv .venv\\nsource .venv/bin/activate\\n```\\nThis will create and activate a virtual environment named `.venv`\\n\\n&nbsp;\\n\\n### Step 2 : Install the OpenTelemetry dependencies\\n\\n```bash\\npip install opentelemetry-distro==0.38b0\\npip install opentelemetry-exporter-otlp==1.17.0\\n```\\n&nbsp;\\n\\n### Step 3 : Add automatic instrumentation\\n\\n```bash\\nopentelemetry-bootstrap --action=install\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your python application, you can run it using the below steps\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n&nbsp;\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Run your application\\n\\n```bash\\nsetx OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} \\nsetx OTEL_EXPORTER_OTLP_ENDPOINT=\\\"https://ingest.{{REGION}}.signoz.cloud:443\\\" \\nsetx OTEL_EXPORTER_OTLP_HEADERS=\\\"signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\\" \\nsetx OTEL_EXPORTER_OTLP_PROTOCOL=grpc \\n\\nopentelemetry-instrument <your run command>\\n```\\n`<your_run_command>` can be something like `python3 app.py` or `flask run`\\n&nbsp;\\n\\n**Note**\\n- Use port **`4317`** for gRPC exporter and port **`4318`** for HTTP exporter\\n- If your OpenTelemetry Collector agent is in different VM, replace `http://localhost:4317` in above run command with `<IP Address of the VM>:4317`\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please consult the [troubleshooting section](https://signoz.io/docs/instrumentation/python/#troubleshooting-your-signoz-installation) for assistance.\\n\\n\";","export default \"&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\\n\\n&nbsp;\\n\\n### Step 3: Dockerize your application\\n\\nUpdate your dockerfile to include the environment variables:\\n\\n```bash\\n...\\n# Set environment variables\\nENV OTEL_EXPORTER=otlp \\\\\\n    OTEL_SERVICE_NAME={{MYAPP}} \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\n    OTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}}\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Ruby On Rails Application\\n\\n&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\\n\\n&nbsp;\\n\\n### Step 3: Dockerize your application\\n\\nUpdate your dockerfile to include the environment variables:\\n\\n```bash\\n...\\n# Set environment variables\\nENV OTEL_EXPORTER=otlp \\\\\\n    OTEL_SERVICE_NAME={{MYAPP}} \\\\\\n    OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Ruby On Rails Application\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"### Running your Ruby application\\n\\nRun the application using the below command:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318 \\\\\\nrails server\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"### Running your Ruby application\\n\\nRun the application using the below:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\nrails server\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Ruby On Rails Application\\n\\n&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Ruby on Rails application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Ruby application\\n\\nRun the application using the below:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318 \\\\\\nrails server\\n```\\n&nbsp;\\n\\n**Note:**\\n- In case you have OtelCollector Agent in different VM, replace localhost:4318 with <IP Address of the VM>:4318.\";","export default \"&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"### Running your Ruby application\\n\\nRun the application using the below:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\nrails server\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Ruby On Rails Application\\n\\n&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Ruby on Rails application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Ruby application\\n\\nRun the application using the below:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318 \\\\\\nrails server\\n```\\n&nbsp;\\n\\n**Note:**\\n- In case you have OtelCollector Agent in different VM, replace localhost:4318 with <IP Address of the VM>:4318.\";","export default \"&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"### Running your Ruby application\\n\\nRun the application using the below:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\nrails server\\n```\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Ruby On Rails Application\\n\\n&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Ruby on Rails application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Ruby application\\n\\nRun the application using the below:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318 \\\\\\nrails server\\n```\\n&nbsp;\\n\\n**Note:**\\n- In case you have OtelCollector Agent in different VM, replace localhost:4318 with <IP Address of the VM>:4318.\";","export default \"&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"### Running your Ruby application\\n\\nRun the application using the below:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443 \\\\\\nOTEL_EXPORTER_OTLP_HEADERS=signoz-ingestion-key={{SIGNOZ_INGESTION_KEY}} \\\\\\nrails server\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Ruby On Rails Application\\n\\n&nbsp;\\n\\n### Step 1: Install dependencies\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n&nbsp;\\n\\nInclude the required packages into your gemfile\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n&nbsp;\\n\\nRun the bundle install command:\\n```bash\\nbundle install\\n```\\n&nbsp;\\n\\n### Step 2: Initialize the OpenTelemetry SDK\\nInitialize the otel sdk by adding below lines to `config/environment.rb` of your Ruby on Rails application\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire_relative 'application'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.use_all\\nend\\n\\nRails.application.initialize!\\n```\";","export default \"&nbsp;\\n\\nOnce you are done intrumenting your Ruby on Rails application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Ruby application\\n\\nRun the application using the below:\\n\\n```bash\\nOTEL_EXPORTER=otlp \\\\\\nOTEL_SERVICE_NAME={{MYAPP}} \\\\\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318 \\\\\\nrails server\\n```\\n&nbsp;\\n\\n**Note:**\\n- In case you have OtelCollector Agent in different VM, replace localhost:4318 with <IP Address of the VM>:4318.\";","export default \"### Send traces directly to SigNoz Cloud\\n\\n**Step 1. Install dependencies**\\n\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem.\\n\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n\\n&nbsp;\\n\\nInclude the required packages into your gemfile.\\n\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n\\n&nbsp;\\n\\nRun the bundle install command:\\n\\n```bash\\nbundle install\\n```\\n\\n&nbsp;\\n\\n**Step 2. Initialize the OpenTelemetry SDK**\\n\\nInitialize the otel sdk by adding below lines to `config/initializers/opentelemetry.rb` of your Ruby on Rails application.\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire 'opentelemetry/exporter/otlp'\\nrequire 'opentelemetry/instrumentation/all'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.add_span_processor(\\n    OpenTelemetry::SDK::Trace::Export::BatchSpanProcessor.new(\\n      OpenTelemetry::Exporter::OTLP::Exporter.new(\\n        endpoint: '<SIGNOZ_URL>',\\n        headers: { 'signoz-ingestion-key' => '{{SIGNOZ_INGESTION_KEY}}' } \\n      )\\n    )\\n  )\\n  c.resource = OpenTelemetry::SDK::Resources::Resource.create({\\n    OpenTelemetry::SemanticConventions::Resource::HOST_NAME => '<your-host-name>',\\n  })\\n  c.service_name = '{{MYAPP}}'    # The name of the application.\\n  c.use_all()    # The libraries supported by automatic OpenTelemetry observation. \\nend\\n```\";","export default \"## Running your Ruby application**\\n\\nRun the application using the below:\\n\\n&nbsp;\\n\\n```bash\\nrails server\\n```\\n\";","export default \"OTel Collector binary helps to collect logs, hostmetrics, resource and infra attributes. It is recommended to install Otel Collector binary to collect and send traces to SigNoz cloud. You can correlate signals and have rich contextual data through this way.\\n\\nYou can find instructions to install OTel Collector binary [here](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) in your VM. Once you are done setting up your OTel Collector binary, you can follow the below steps for instrumenting your Ruby on Rails application.\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Ruby On Rails Application\\n\\n&nbsp;\\n\\n**Step 1. Install dependencies**\\n\\nInstall dependencies related to OpenTelemetry SDK and exporter using gem.\\n\\n```bash\\ngem install opentelemetry-sdk\\ngem install opentelemetry-exporter-otlp\\ngem install opentelemetry-instrumentation-all\\n```\\n\\n&nbsp;\\n\\nInclude the required packages into your gemfile.\\n\\n```bash\\ngem 'opentelemetry-sdk'\\ngem 'opentelemetry-exporter-otlp'\\ngem 'opentelemetry-instrumentation-all'\\n```\\n\\n&nbsp;\\n\\nRun the bundle install command:\\n\\n```bash\\nbundle install\\n```\\n\\n&nbsp;\\n\\n**Step 2. Initialize the OpenTelemetry SDK**\\n\\nInitialize the otel sdk by adding below lines to `config/initializers/opentelemetry.rb` of your Ruby on Rails application.\\n\\n```bash\\nrequire 'opentelemetry/sdk'\\nrequire 'opentelemetry/exporter/otlp'\\nrequire 'opentelemetry/instrumentation/all'\\n\\nOpenTelemetry::SDK.configure do |c|\\n  c.add_span_processor(\\n    OpenTelemetry::SDK::Trace::Export::BatchSpanProcessor.new(\\n      OpenTelemetry::Exporter::OTLP::Exporter.new(\\n        endpoint: 'http://localhost:4318'\\n      )\\n    )\\n  )\\n  c.resource = OpenTelemetry::SDK::Resources::Resource.create({\\n    OpenTelemetry::SemanticConventions::Resource::HOST_NAME => '<your-host-name>',\\n  })\\n  c.service_name = '{{MYAPP}}'    # The name of the application.\\n  c.use_all()    # The libraries supported by automatic OpenTelemetry observation. \\nend\\n```\\n\";","export default \"## Running your Ruby application**\\n\\nRun the application using the below:\\n\\n```bash\\nrails server\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\ndotenv = \\\"0.15.0\\\"\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse dotenv::dotenv;\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer and create env file\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    let signoz_access_token = std::env::var(\\\"SIGNOZ_ACCESS_TOKEN\\\").expect(\\\"SIGNOZ_ACCESS_TOKEN not set\\\");\\n    let mut metadata = MetadataMap::new();\\n    metadata.insert(\\n        \\\"signoz-ingestion-key\\\",\\n        MetadataValue::from_str(&signoz_access_token).unwrap(),\\n    );\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(\\n            opentelemetry_otlp::new_exporter()\\n                .tonic()\\n                .with_metadata(metadata)\\n                .with_endpoint(std::env::var(\\\"SIGNOZ_ENDPOINT\\\").expect(\\\"SIGNOZ_ENDPOINT not set\\\")),\\n        )\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::new(vec![\\n                KeyValue::new(\\n                    opentelemetry_semantic_conventions::resource::SERVICE_NAME,\\n                    std::env::var(\\\"APP_NAME\\\").expect(\\\"APP_NAME not set\\\"),\\n                ),\\n            ])),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n\\nAfter adding the above function in your `main.rs` file, create an `.env` file in root of your app. The structure could look like this :\\n\\n```bash\\nproject_root/\\n|-- Cargo.toml\\n|-- src/\\n|   |-- main.rs\\n|-- .env\\n```\\n\\nIn your environment file, paste the below variables which will be used in the next steps.\\n\\n```rust\\nPORT=3000 // If it is a web app pass port or else you can ignore this variable\\nAPP_NAME={{MYAPP}}\\nSIGNOZ_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443/v1/traces\\nSIGNOZ_ACCESS_TOKEN={{SIGNOZ_INGESTION_KEY}}\\n```\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\ndotenv().ok();\\nlet _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\". \\n\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\n\\nUpdate your Dockerfile to include the `.env` file created above\\n\\n```bash\\n...\\n# Copy your .env file\\nCOPY .env .\\n...\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Rust Application\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(opentelemetry_otlp::new_exporter().tonic().with_env())\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::default()),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n### Step 3: Add OpenTelemetry instrumentation\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\n    let _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\".\\n\\n\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\n\\nUpdate your Dockerfile with the Environment variables as follows:\\n\\n```bash\\n\\n...\\n# Set necessary environment variables\\nENV OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 \\\\\\n    OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}}\\n...\\n\\n```\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Rust Application\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(opentelemetry_otlp::new_exporter().tonic().with_env())\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::default()),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n### Step 3: Add OpenTelemetry instrumentation\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\n    let _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\". \\n\";","export default \"### Running your Rust application\\n\\nRun the application using the below command:\\n\\n```bash\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 OTEL_RESOURCE_ATTRIBUTES=service.name={{MYAPP}} cargo run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\ndotenv = \\\"0.15.0\\\"\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse dotenv::dotenv;\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer and create env file\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    let signoz_access_token = std::env::var(\\\"SIGNOZ_ACCESS_TOKEN\\\").expect(\\\"SIGNOZ_ACCESS_TOKEN not set\\\");\\n    let mut metadata = MetadataMap::new();\\n    metadata.insert(\\n        \\\"signoz-ingestion-key\\\",\\n        MetadataValue::from_str(&signoz_access_token).unwrap(),\\n    );\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(\\n            opentelemetry_otlp::new_exporter()\\n                .tonic()\\n                .with_metadata(metadata)\\n                .with_endpoint(std::env::var(\\\"SIGNOZ_ENDPOINT\\\").expect(\\\"SIGNOZ_ENDPOINT not set\\\")),\\n        )\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::new(vec![\\n                KeyValue::new(\\n                    opentelemetry_semantic_conventions::resource::SERVICE_NAME,\\n                    std::env::var(\\\"APP_NAME\\\").expect(\\\"APP_NAME not set\\\"),\\n                ),\\n            ])),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n\\nAfter adding the above function in your `main.rs` file, create an `.env` file in root of your app. The structure could look like this :\\n\\n```bash\\nproject_root/\\n|-- Cargo.toml\\n|-- src/\\n|   |-- main.rs\\n|-- .env\\n```\\n\\nIn your environment file, paste the below variables which will be used in the next steps.\\n\\n```rust\\nPORT=3000 // If it is a web app pass port or else you can ignore this variable\\nAPP_NAME={{MYAPP}}\\nSIGNOZ_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443/v1/traces\\nSIGNOZ_ACCESS_TOKEN={{SIGNOZ_INGESTION_KEY}}\\n```\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\ndotenv().ok();\\nlet _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\". \\n\";","export default \"### Running your Rust application\\n\\nSince your variables are set in the `.env` file, you can run your Rust application using the below command:\\n\\n```bash\\ncargo run\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Rust Application\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(opentelemetry_otlp::new_exporter().tonic().with_env())\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::default()),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n### Step 3: Add OpenTelemetry instrumentation\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\n    let _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\".\\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Rust application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Rust application\\n\\nRun the application using the below command:\\n\\n```bash\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 OTEL_RESOURCE_ATTRIBUTES=service.name=s{{MYAPP}} cargo run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\ndotenv = \\\"0.15.0\\\"\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse dotenv::dotenv;\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer and create env file\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    let signoz_access_token = std::env::var(\\\"SIGNOZ_ACCESS_TOKEN\\\").expect(\\\"SIGNOZ_ACCESS_TOKEN not set\\\");\\n    let mut metadata = MetadataMap::new();\\n    metadata.insert(\\n        \\\"signoz-ingestion-key\\\",\\n        MetadataValue::from_str(&signoz_access_token).unwrap(),\\n    );\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(\\n            opentelemetry_otlp::new_exporter()\\n                .tonic()\\n                .with_metadata(metadata)\\n                .with_endpoint(std::env::var(\\\"SIGNOZ_ENDPOINT\\\").expect(\\\"SIGNOZ_ENDPOINT not set\\\")),\\n        )\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::new(vec![\\n                KeyValue::new(\\n                    opentelemetry_semantic_conventions::resource::SERVICE_NAME,\\n                    std::env::var(\\\"APP_NAME\\\").expect(\\\"APP_NAME not set\\\"),\\n                ),\\n            ])),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n\\nAfter adding the above function in your `main.rs` file, create an `.env` file in root of your app. The structure could look like this :\\n\\n```bash\\nproject_root/\\n|-- Cargo.toml\\n|-- src/\\n|   |-- main.rs\\n|-- .env\\n```\\n\\nIn your environnement file, paste the below variables which will be used in the next steps.\\n\\n```rust\\nPORT=3000 // If it is a web app pass port or else you can ignore this variable\\nAPP_NAME={{MYAPP}}\\nSIGNOZ_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443/v1/traces\\nSIGNOZ_ACCESS_TOKEN={{SIGNOZ_INGESTION_KEY}}\\n```\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\ndotenv().ok();\\nlet _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\".\\n\";","export default \"### Running your Rust application\\n\\nSince your variables are set in the `.env` file, you can run your Rust application using the below command:\\n\\n```bash\\ncargo run\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Rust Application\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(opentelemetry_otlp::new_exporter().tonic().with_env())\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::default()),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n### Step 3: Add OpenTelemetry instrumentation\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\n    let _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\".\\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Rust application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Rust application\\n\\nRun the application using the below command:\\n\\n```bash\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 OTEL_RESOURCE_ATTRIBUTES=service.name=s{{MYAPP}} cargo run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\ndotenv = \\\"0.15.0\\\"\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse dotenv::dotenv;\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer and create env file\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    let signoz_access_token = std::env::var(\\\"SIGNOZ_ACCESS_TOKEN\\\").expect(\\\"SIGNOZ_ACCESS_TOKEN not set\\\");\\n    let mut metadata = MetadataMap::new();\\n    metadata.insert(\\n        \\\"signoz-ingestion-key\\\",\\n        MetadataValue::from_str(&signoz_access_token).unwrap(),\\n    );\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(\\n            opentelemetry_otlp::new_exporter()\\n                .tonic()\\n                .with_metadata(metadata)\\n                .with_endpoint(std::env::var(\\\"SIGNOZ_ENDPOINT\\\").expect(\\\"SIGNOZ_ENDPOINT not set\\\")),\\n        )\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::new(vec![\\n                KeyValue::new(\\n                    opentelemetry_semantic_conventions::resource::SERVICE_NAME,\\n                    std::env::var(\\\"APP_NAME\\\").expect(\\\"APP_NAME not set\\\"),\\n                ),\\n            ])),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n\\nAfter adding the above function in your `main.rs` file, create an `.env` file in root of your app. The structure could look like this :\\n\\n```bash\\nproject_root/\\n|-- Cargo.toml\\n|-- src/\\n|   |-- main.rs\\n|-- .env\\n```\\n\\nIn your environment file, paste the below variables which will be used in the next steps.\\n\\n```rust\\nPORT=3000 // If it is a web app pass port or else you can ignore this variable\\nAPP_NAME={{MYAPP}}\\nSIGNOZ_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443/v1/traces\\nSIGNOZ_ACCESS_TOKEN={{SIGNOZ_INGESTION_KEY}}\\n```\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\ndotenv().ok();\\nlet _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\". \\n\";","export default \"### Running your Rust application\\n\\nSince your variables are set in the `.env` file, you can run your Rust application using the below command:\\n\\n```bash\\ncargo run\\n```\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Rust Application\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(opentelemetry_otlp::new_exporter().tonic().with_env())\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::default()),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n### Step 3: Add OpenTelemetry instrumentation\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\n    let _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\". \\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Rust application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Rust application\\n\\nRun the application using the below command:\\n\\n```bash\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 OTEL_RESOURCE_ATTRIBUTES=service.name=s{{MYAPP}} cargo run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\ndotenv = \\\"0.15.0\\\"\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse dotenv::dotenv;\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer and create env file\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    let signoz_access_token = std::env::var(\\\"SIGNOZ_ACCESS_TOKEN\\\").expect(\\\"SIGNOZ_ACCESS_TOKEN not set\\\");\\n    let mut metadata = MetadataMap::new();\\n    metadata.insert(\\n        \\\"signoz-ingestion-key\\\",\\n        MetadataValue::from_str(&signoz_access_token).unwrap(),\\n    );\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(\\n            opentelemetry_otlp::new_exporter()\\n                .tonic()\\n                .with_metadata(metadata)\\n                .with_endpoint(std::env::var(\\\"SIGNOZ_ENDPOINT\\\").expect(\\\"SIGNOZ_ENDPOINT not set\\\")),\\n        )\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::new(vec![\\n                KeyValue::new(\\n                    opentelemetry_semantic_conventions::resource::SERVICE_NAME,\\n                    std::env::var(\\\"APP_NAME\\\").expect(\\\"APP_NAME not set\\\"),\\n                ),\\n            ])),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n\\nAfter adding the above function in your `main.rs` file, create an `.env` file in root of your app. The structure could look like this :\\n\\n```bash\\nproject_root/\\n|-- Cargo.toml\\n|-- src/\\n|   |-- main.rs\\n|-- .env\\n```\\n\\nIn your environment file, paste the below variables which will be used in the next steps.\\n\\n```rust\\nPORT=3000 // If it is a web app pass port or else you can ignore this variable\\nAPP_NAME={{MYAPP}}\\nSIGNOZ_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443/v1/traces\\nSIGNOZ_ACCESS_TOKEN={{SIGNOZ_INGESTION_KEY}}\\n```\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\ndotenv().ok();\\nlet _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\". \\n\";","export default \"### Running your Rust application\\n\\nSince your variables are set in the `.env` file, you can run your Rust application using the below command:\\n\\n```bash\\ncargo run\\n```\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Rust Application\\n\\n### Step 1: Add dependencies\\nAdd these crates just below the `[dependencies]` section of your `cargo.toml` file\\n\\n```rust\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\n```\\n&nbsp;\\n\\nUse the above crates in entry point of your Rust application, which is generally your `main.rs` file \\n\\n```rust\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nAdd `init_tracer` function to your `main.rs` file. It initializes an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud.\\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(opentelemetry_otlp::new_exporter().tonic().with_env())\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::default()),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n### Step 3: Add OpenTelemetry instrumentation\\n\\nCall the `init_tracer` function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n\\n```rust\\n    let _ = init_tracer();\\n```\\n\\nModify your `main()` function from\\n\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\nto\\n\\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nAdd the below code block within a function or a section of your code where you're setting up and using the tracer for distributed tracing. After adding the below code block you can send traces to SigNoz Cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"working!\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\nThe above code block will create a span named operation which sets an attribute and an event to it saying \\\"SigNoz is working!\\\". \\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Rust application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Rust application\\n\\nRun the application using the below command:\\n\\n```bash\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317 OTEL_RESOURCE_ATTRIBUTES=service.name=s{{MYAPP}} cargo run\\n```\";","export default \"**Step 1 : Instrument your application with OpenTelemetry**\\n\\nTo configure our Rust application to send data we need to initialize OpenTelemetry, Otel has already created some crates which you need to add into your `Cargo.toml` file, just below `[dependencies]` section.\\n\\n```bash\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\n```\\n\\n&nbsp;\\n\\nafter adding these in `Cargo.toml` , you need to use these in entry point of your Rust application , which is `main.rs` file in majority of applications. \\n\\n&nbsp;\\n\\n```bash\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n\\n&nbsp;\\n\\n**Step 2: Initialize the tracer and create env file**\\n\\nAdd this function in main.rs file, `init_tracer` is initializing an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud. \\n\\n```bash\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    let signoz_access_token = std::env::var(\\\"SIGNOZ_ACCESS_TOKEN\\\").expect(\\\"SIGNOZ_ACCESS_TOKEN not set\\\");\\n    let mut metadata = MetadataMap::new();\\n    metadata.insert(\\n        \\\"signoz-ingestion-key\\\",\\n        MetadataValue::from_str(&signoz_access_token).unwrap(),\\n    );\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(\\n            opentelemetry_otlp::new_exporter()\\n                .tonic()\\n                .with_metadata(metadata)\\n                .with_endpoint(std::env::var(\\\"SIGNOZ_ENDPOINT\\\").expect(\\\"SIGNOZ_ENDPOINT not set\\\")),\\n        )\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::new(vec![\\n                KeyValue::new(\\n                    opentelemetry_semantic_conventions::resource::SERVICE_NAME,\\n                    std::env::var(\\\"APP_NAME\\\").expect(\\\"APP_NAME not set\\\"),\\n                ),\\n            ])),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n\\n&nbsp;\\n\\nAfter adding this function, you need to create a `.env` file in root of project , the structure should look like this.\\n\\n\\n```bash\\nproject_root/\\n|-- Cargo.toml\\n|-- src/\\n|   |-- main.rs\\n|-- .env\\n```\\n\\n&nbsp;\\n\\nPaste these in `.env` file \\n\\n&nbsp;\\n\\n\\n```bash \\nPORT=3000\\nAPP_NAME={{MYAPP}}\\nSIGNOZ_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443/v1/traces\\nSIGNOZ_ACCESS_TOKEN={{SIGNOZ_INGESTION_KEY}}\\n```\\n\\n&nbsp;\\n\\n\\n**Step 3: Add the OpenTelemetry instrumentation for your Rust app**\\n\\nOpen your Cargo.toml file and paste these below `[dependencies]`\\n\\n```bash\\ndotenv = \\\"0.15.0\\\"\\n```\\n\\n&nbsp;\\n\\n\\nImport these at top, so you can use variables from `.env` file\\n\\n```bash\\nuse dotenv::dotenv;\\n```\\n\\n&nbsp;\\n\\n\\nAfter importing , just call these functions inside `main()` function by pasting this at starting of `main()` function\\n\\n```bash \\ndotenv().ok();\\nlet _ = init_tracer();\\n```\\n\\n&nbsp;\\n\\n\\nalso change\\n```bash\\nfn main(){\\n    //rest of the code\\n}\\n```\\n\\n&nbsp;\\n\\n\\nto \\n\\n\\n```bash\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n&nbsp;\\n\\n\\nNow comes the most interesting part, Sending data to SigNoz to get sense of your traces. After adding the below block you can send data to SigNoz cloud\\n\\n```bash\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"Awesome\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\";","export default \"\\n**Step 4: Set environment variables and run app**\\n\\nGo to your `.env` file and update the value of required variables i.e\\n\\n```bash\\nAPP_NAME={{MYAPP}}\\nSIGNOZ_ENDPOINT=https://ingest.{{REGION}}.signoz.cloud:443\\nSIGNOZ_ACCESS_TOKEN={{SIGNOZ_INGESTION_KEY}}\\n```\\n\\nNow run `cargo run` in terminal to start the application!\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\nYou can find instructions to install OTel Collector binary [here](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) in your Windows Machine. Once you are done setting up your OTel Collector binary, you can follow the below steps for instrumenting your Rust application.\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Rust Application\\n\\n&nbsp;\\n\\n**Step 1 : Instrument your application with OpenTelemetry**\\n\\nTo configure our Rust application to send traces we need to initialize OpenTelemetry, Otel has already created some crates which you need to add into your `Cargo.toml` file, just below `[dependencies]` section.\\n\\n```\\nopentelemetry = { version = \\\"0.18.0\\\", features = [\\\"rt-tokio\\\", \\\"metrics\\\", \\\"trace\\\"] }\\nopentelemetry-otlp = { version = \\\"0.11.0\\\", features = [\\\"trace\\\", \\\"metrics\\\"] }\\nopentelemetry-semantic-conventions = { version = \\\"0.10.0\\\" }\\nopentelemetry-proto = { version = \\\"0.1.0\\\"}\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\ntonic = { version = \\\"0.8.2\\\", features = [\\\"tls-roots\\\"] }\\n```\\nafter adding these in `Cargo.toml` , you need to use these in entry point of your Rust application , which is `main.rs` file in majority of applications. \\n\\n```rust\\nuse opentelemetry::global::shutdown_tracer_provider;\\nuse opentelemetry::sdk::Resource;\\nuse opentelemetry::trace::TraceError;\\nuse opentelemetry::{\\n    global, sdk::trace as sdktrace,\\n    trace::{TraceContextExt, Tracer},\\n    Context, Key, KeyValue,\\n};\\nuse opentelemetry_otlp::WithExportConfig;\\nuse tonic::metadata::{MetadataMap, MetadataValue};\\n```\\n\\n**Step 2: Initialize the tracer and create env file**\\n\\nAdd this function in main.rs file, `init_tracer` is initializing an OpenTelemetry tracer with the OpenTelemetry OTLP exporter which is sending data to SigNoz Cloud. \\n\\nThis tracer initializes the connection with the OTel collector from the system variables passed while starting the app. \\n\\n```rust\\nfn init_tracer() -> Result<sdktrace::Tracer, TraceError> {\\n    opentelemetry_otlp::new_pipeline()\\n        .tracing()\\n        .with_exporter(\\n            opentelemetry_otlp::new_exporter()\\n                .tonic()\\n                .with_endpoint(std::env::var(\\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\").expect(\\\"OTEL_EXPORTER_OTLP_ENDPOINT not set\\\")),\\n        )\\n        .with_trace_config(\\n            sdktrace::config().with_resource(Resource::new(vec![\\n                KeyValue::new(\\n                    opentelemetry_semantic_conventions::resource::SERVICE_NAME,\\n                    std::env::var(\\\"APP_NAME\\\").expect(\\\"APP_NAME not set\\\"),\\n                ),\\n            ])),\\n        )\\n        .install_batch(opentelemetry::runtime::Tokio)\\n}\\n```\\n\\n**Step 3: Add the OpenTelemetry instrumentation for your Rust app**\\n\\nYou need call init_tracer function inside `main()` at starting so that as soon as your rust application starts, tracer will be available globally.\\n```rust \\nlet _ = init_tracer();\\n```\\n\\nalso change\\n```rust\\nfn main(){\\n    //rest of the code\\n}\\n```\\nto \\n```rust\\n#[tokio::main]\\nasync fn main() {\\n    //rest of the code\\n}\\n```\\n\\nNow comes the most interesting part, Sending data to SigNoz to get sense of your traces. After adding the below block you can send traces to SigNoz cloud\\n\\n```rust\\n  let tracer = global::tracer(\\\"global_tracer\\\");\\n    let _cx = Context::new();\\n  \\n    tracer.in_span(\\\"operation\\\", |cx| {\\n        let span = cx.span();\\n        span.set_attribute(Key::new(\\\"KEY\\\").string(\\\"value\\\"));\\n\\n        span.add_event(\\n            format!(\\\"Operations\\\"),\\n            vec![\\n                Key::new(\\\"SigNoz is\\\").string(\\\"Awesome\\\"),\\n            ],\\n        );\\n    });\\n    shutdown_tracer_provider()\\n```\\n\\n**Step 4: Set environment variables and run app**\\n\\nCreate a `.env` file in root of project , the structure should look like this.\\n```\\nproject_root/\\n|-- Cargo.toml\\n|-- src/\\n|   |-- main.rs\\n|-- .env\\n```\\n\\nPaste these in `.env` file \\n```bash\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\\nOTEL_RESOURCE_ATTRIBUTES={{MYAPP}}\\n```\\n\";","export default \"Now run \\n\\n```bash\\ncargo run\\n```\\n\\n\\nin terminal to start the application!\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10), headers: [(\\\"signoz-ingestion-key\\\", {{SIGNOZ_INGESTION_KEY}})])\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: \\\"https://ingest.{{REGION}}.signoz.cloud:443\\\", port: 443)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \\n\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\n\\nSince the environment variables like SIGNOZ_INGESTION_KEY, Ingestion URL and Service name are set in the `main.swift` file, you don't need to add any additional steps in your Dockerfile.\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n\\n&nbsp;\\n\\nAs a first step, you should install the OTel collector Binary according to the instructions provided on [this link](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/).\\n\\n&nbsp;\\n\\nOnce you are done setting up the OTel collector binary, you can follow the next steps.\\n\\n&nbsp;\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Swift Application\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10))\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: <OtelCollector_URL>, port: 4317)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n- <OtelCollector_URL> - The endpoint where Otel Collector is running. For ex -> \\\"localhost\\\"\\n\\n\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \\n\\n&nbsp;\\n\\n### Step 4: Dockerize your application\\n\\nSince the environment variables like SIGNOZ_INGESTION_KEY, Ingestion URL and Service name are set in the `main.swift` file, you don't need to add any additional steps in your Dockerfile.\";","export default \"Once you update your Dockerfile, you can build and run it using the commands below.\\n\\n&nbsp;\\n\\n### Step 1: Build your dockerfile\\n\\nBuild your docker image\\n\\n```bash\\ndocker build -t <your-image-name> .\\n```\\n\\n- `<your-image-name>` is the name of your Docker Image\\n\\n&nbsp;\\n\\n### Step 2: Run your docker image\\n\\n```bash\\ndocker run <your-image-name>\\n```\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Swift Application\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file : \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10))\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: <OTEL_EXPORTER_OTLP_ENDPOINT>, port: 4317)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n- <OTEL_EXPORTER_OTLP_ENDPOINT> - The default value for this is `http://localhost:4317`\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair.\\n\";","export default \"### Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10), headers: [(\\\"signoz-ingestion-key\\\", {{SIGNOZ_INGESTION_KEY}})])\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: \\\"https://ingest.{{REGION}}.signoz.cloud:443\\\", port: 443)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \\n\";","export default \"### Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Swift Application\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10))\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: <OtelCollector_URL>, port: 4317)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n- <OtelCollector_URL> - The endpoint where Otel Collector is running. For ex -> \\\"localhost\\\"\\n\\n\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Swift application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10), headers: [(\\\"signoz-ingestion-key\\\", {{SIGNOZ_INGESTION_KEY}})])\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: \\\"https://ingest.{{REGION}}.signoz.cloud:443\\\", port: 443)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. To read more about spans, you can follow [this link](https://opentelemetry.io/docs/concepts/signals/traces/#spans)\\n\";","export default \"### Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Swift Application\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10))\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: <OtelCollector_URL>, port: 4317)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n- <OtelCollector_URL> - The endpoint where Otel Collector is running. For ex -> \\\"localhost\\\"\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Swift application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10), headers: [(\\\"signoz-ingestion-key\\\", {{SIGNOZ_INGESTION_KEY}})])\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: \\\"https://ingest.{{REGION}}.signoz.cloud:443\\\", port: 443)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \";","export default \"### Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Swift Application\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10))\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: <OtelCollector_URL>, port: 4317)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n- <OtelCollector_URL> - The endpoint where Otel Collector is running. For ex -> \\\"localhost\\\"\\n\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Swift application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10), headers: [(\\\"signoz-ingestion-key\\\", {{SIGNOZ_INGESTION_KEY}})])\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: \\\"https://ingest.{{REGION}}.signoz.cloud:443\\\", port: 443)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \";","export default \"### Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10))\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: <OtelCollector_URL>, port: 4317)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n- <OtelCollector_URL> - The endpoint where Otel Collector is running. For ex -> \\\"localhost\\\"\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Swift application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\";","export default \"&nbsp;\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10), headers: [(\\\"signoz-ingestion-key\\\", {{SIGNOZ_INGESTION_KEY}})])\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: \\\"https://ingest.{{REGION}}.signoz.cloud:443\\\", port: 443)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \\n\";","export default \"### Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\\n\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\";","export default \"&nbsp;\\n\\nAfter setting up the Otel collector agent, follow the steps below to instrument your Swift Application\\n\\n### Step 1: Add dependencies\\n\\nTo configure your Swift application to send data you need to initialize OpenTelemetry. Add these dependency in `Package.swift` file of your project or if you are using XCode then you need to add this [dependency](https://github.com/open-telemetry/opentelemetry-swift) and then import these below dependencies in the main file.\\n\\n```swift\\nimport Foundation\\nimport GRPC\\nimport NIO\\nimport NIOSSL\\nimport OpenTelemetryApi\\nimport OpenTelemetryProtocolExporterCommon\\nimport OpenTelemetryProtocolExporterGrpc\\nimport OpenTelemetrySdk\\nimport ResourceExtension\\nimport SignPostIntegration\\nimport StdoutExporter\\nimport ZipkinExporter\\n```\\n\\n&nbsp;\\n\\n### Step 2: Initialize tracer\\nInitialize the tracer using the code block below in the `main.swift` file inside the main function or you can create another function for initializing the tracer and call it in some other block of code. \\n\\n```swift\\nvar resources = DefaultResources().get()\\n\\nlet instrumentationScopeName = \\\"{{MYAPP}}\\\"\\nlet instrumentationScopeVersion = \\\"semver:0.1.0\\\"\\n\\nlet otlpConfiguration: OtlpConfiguration = OtlpConfiguration(timeout: TimeInterval(10))\\n\\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1)).connect(host: <OtelCollector_URL>, port: 4317)\\n\\nlet otlpTraceExporter = OtlpTraceExporter(channel: grpcChannel,\\n                                      config: otlpConfiguration)\\nlet stdoutExporter = StdoutExporter()\\n\\nlet spanExporter = MultiSpanExporter(spanExporters: [otlpTraceExporter, stdoutExporter])\\n\\nlet spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\\nOpenTelemetry.registerTracerProvider(tracerProvider:\\n    TracerProviderBuilder()\\n        .add(spanProcessor: spanProcessor)\\n        .build()\\n)\\n```\\n- <OtelCollector_URL> - The endpoint where Otel Collector is running. For ex -> \\\"localhost\\\"\\n\\n\\n\\n\\n### Step 3: Add OpenTelemetry instrumentation\\n\\n```swift\\nfunc doWork() {\\n    let childSpan = tracer.spanBuilder(spanName: \\\"doWork\\\").setSpanKind(spanKind: .client).startSpan()\\n    childSpan.setAttribute(key: sampleKey, value: sampleValue)\\n    Thread.sleep(forTimeInterval: Double.random(in: 0 ..< 10) / 100)\\n    childSpan.end()\\n}\\n```\\n\\n&nbsp;\\n\\nIf you call this `doWork` function, it will add a trace with span name \\\"doWork\\\" and attributes with key-value pair. You can modify this function according to your needs. \\n\";","export default \"&nbsp;\\n\\nOnce you are done instrumenting your Swift application, you can run it using the below commands\\n\\n&nbsp;\\n\\n### Step 1: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory that you created in the install Otel Collector step\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n#### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n#### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n&nbsp;\\n\\n### Step 2: Running your Swift application\\n\\nRun the application using the below command:\\n\\n```bash\\nswift run\\n```\";","export default \"### Step 1: Add filelog receiver to `config.yaml` file of otel collector\\n\\nAdd the filelog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  ...\\n  filelog/app:\\n    include: [ /tmp/app.log ]\\n    start_at: end\\n...\\n```\\nReplace `/tmp/app.log` with the path to your log file.\\n\\nNote: change the `start_at` value to `beginning` if you want to read the log file from the beginning. It may be useful if you want to send old logs to SigNoz. The log records older than the standard log retention period (default 15 days) will be discarded.\\n\\nFor more configurations that are available for filelog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver).\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Include filelog receiver in the Pipeline\\nWe will modify our pipeline inside `config.yaml` to include the receiver we have created above.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, filelog/app]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\";","export default \"### Prerequisite\\n- A Linux based EC2 Instance\\n\\n&nbsp;\\n\\n### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contirb` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add filelog receiver to `config.yaml` file of otel collector\\n\\nAdd the filelog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  ...\\n  filelog/app:\\n    include: [ /tmp/app.log ]\\n    start_at: end\\n...\\n```\\nReplace `/tmp/app.log` with the path to your log file.\\n\\nNote: change the `start_at` value to `beginning` if you want to read the log file from the beginning. It may be useful if you want to send old logs to SigNoz. The log records older than the standard log retention period (default 15 days) will be discarded.\\n\\nFor more configurations that are available for filelog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver).\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Include filelog receiver in the Pipeline\\nWe will modify our pipeline inside `config.yaml` to include the receiver we have created above.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, filelog/app]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\";","export default \"### Prerequisite\\n- A Linux based EC2 Instance\\n\\n&nbsp;\\n\\n### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contirb` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add filelog receiver to `config.yaml` file of otel collector\\n\\nAdd the filelog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  ...\\n  filelog/app:\\n    include: [ /tmp/app.log ]\\n    start_at: end\\n...\\n```\\nReplace `/tmp/app.log` with the path to your log file.\\n\\nNote: change the `start_at` value to `beginning` if you want to read the log file from the beginning. It may be useful if you want to send old logs to SigNoz. The log records older than the standard log retention period (default 15 days) will be discarded.\\n\\nFor more configurations that are available for filelog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver).\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Include filelog receiver in the Pipeline\\nWe will modify our pipeline inside `config.yaml` to include the receiver we have created above.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, filelog/app]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\";","export default \"### Prerequisite\\n- A Linux based EC2 Instance\\n\\n&nbsp;\\n\\n### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contirb` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add filelog receiver to `config.yaml` file of otel collector\\n\\nAdd the filelog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  ...\\n  filelog/app:\\n    include: [ /tmp/app.log ]\\n    start_at: end\\n...\\n```\\nReplace `/tmp/app.log` with the path to your log file.\\n\\nNote: change the `start_at` value to `beginning` if you want to read the log file from the beginning. It may be useful if you want to send old logs to SigNoz. The log records older than the standard log retention period (default 15 days) will be discarded.\\n\\nFor more configurations that are available for filelog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver).\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Include filelog receiver in the Pipeline\\nWe will modify our pipeline inside `config.yaml` to include the receiver we have created above.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, filelog/app]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\";","export default \"### Prerequisite\\n- A Linux based EC2 Instance\\n\\n&nbsp;\\n\\n### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contirb` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Download/Copy this hostmetrics JSON file\\n\\nDownload/Copy the `hostmetrics.json` from [here](https://github.com/SigNoz/dashboards/blob/main/hostmetrics/hostmetrics.json)\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Import hostmetrics JSON file to SigNoz Cloud\\n\\nOnce you click on the **`Done`** button at the bottom right corner, you'll be taken to the SigNoz UI.\\n\\nIn SigNoZ UI, go to dashboards section and click New Dashboard button and select the import JSON option and upload/paste the `hostmetrics-with-variables.json` file data that you downloaded/copied in last step.\\n\\n\\nTo know more detailed instructions, checkout the link [here](https://signoz.io/docs/userguide/hostmetrics/)\";","export default \"### Prerequisite \\n- A running EC2 instance\\n\\n&nbsp;\\n\\n### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Step 1: Download/Copy this hostmetrics JSON file\\n\\nDownload/Copy the `hostmetrics.json` from [here](https://github.com/SigNoz/dashboards/blob/main/hostmetrics/hostmetrics.json)\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Import hostmetrics JSON file to SigNoz Cloud\\n\\nOnce you click on the **`Done`** button at the bottom right corner, you'll be taken to the SigNoz UI.\\n\\nIn SigNoZ UI, go to dashboards section and click New Dashboard button and select the import JSON option and upload/paste the `hostmetrics-with-variables.json` file data that you downloaded/copied in last step.\\n\\n\\nTo know more detailed instructions, checkout the link [here](https://signoz.io/docs/userguide/hostmetrics/)\";","export default \"### Prerequisite \\n- A running EC2 instance\\n\\n&nbsp;\\n\\n### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Step 1: Download/Copy this hostmetrics JSON file\\n\\nDownload/Copy the `hostmetrics.json` from [here](https://github.com/SigNoz/dashboards/blob/main/hostmetrics/hostmetrics.json)\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Import hostmetrics JSON file to SigNoz Cloud\\n\\nOnce you click on the **`Done`** button at the bottom right corner, you'll be taken to the SigNoz UI.\\n\\nIn SigNoZ UI, go to dashboards section and click New Dashboard button and select the import JSON option and upload/paste the `hostmetrics-with-variables.json` file data that you downloaded/copied in last step.\\n\\n\\nTo know more detailed instructions, checkout the link [here](https://signoz.io/docs/userguide/hostmetrics/)\";","export default \"### Prerequisite \\n- A running EC2 instance\\n\\n&nbsp;\\n\\n### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Step 1: Download/Copy this hostmetrics JSON file\\n\\nDownload/Copy the `hostmetrics.json` from [here](https://github.com/SigNoz/dashboards/blob/main/hostmetrics/hostmetrics.json)\\n\\n&nbsp;\\n&nbsp;\\n\\n### Step 2: Import hostmetrics JSON file to SigNoz Cloud\\n\\nOnce you click on the **`Done`** button at the bottom right corner, you'll be taken to the SigNoz UI.\\n\\nIn SigNoZ UI, go to dashboards section and click New Dashboard button and select the import JSON option and upload/paste the `hostmetrics-with-variables.json` file data that you downloaded/copied in last step.\\n\\n\\nTo know more detailed instructions, checkout the link [here](https://signoz.io/docs/userguide/hostmetrics/)\";","export default \"### Prerequisite \\n- A running EC2 instance\\n\\n&nbsp;\\n\\n### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"## Create Daemon Service\\n\\nUsing the template we downloaded and the SigNoz OpenTelemetry Collector configuration we created, we will create the Daemon Service. This can be done following these steps:\\n\\n### Step 1: Set the environment variable\\n\\nSet the environment variable by running the below command uisng your AWS CLI:\\n\\n```bash\\nexport CLUSTER_NAME=<YOUR-ECS-CLUSTER-NAME>\\nexport REGION=<YOUR-ECS-REGION>\\nexport COMMAND=--config=env:SIGNOZ_CONFIG_CONTENT\\nexport SIGNOZ_CONFIG_PATH=/ecs/signoz/otelcol-daemon.yaml\\n```\\n\\n`<YOUR-ECS-CLUSTER-NAME>` - Name of your ECS cluster. For example, **my-test-cluster** \\n\\n`<YOUR-ECS-REGION>` - Region in which your ECS cluster is running. For example, **us-east-1**\\n\\n&nbsp;\\n\\n### Step 2: Create stack for Daemon Service\\n\\nWith the environment variables set, you can proceed to create the Daemon service using `cloudformation create-stack` by running the below command using your AWS CLI:\\n\\n```bash\\naws cloudformation create-stack --stack-name AOCECS-daemon-${CLUSTER_NAME}-${REGION} \\\\\\n    --template-body file://daemon-template.yaml \\\\\\n    --parameters ParameterKey=ClusterName,ParameterValue=${CLUSTER_NAME} \\\\\\n    ParameterKey=CreateIAMRoles,ParameterValue=True \\\\\\n        ParameterKey=command,ParameterValue=${COMMAND} \\\\\\n        ParameterKey=SigNozConfigPath,ParameterValue=${SIGNOZ_CONFIG_PATH} \\\\\\n    --capabilities CAPABILITY_NAMED_IAM \\\\\\n    --region ${REGION}\\n```\\n\\n&nbsp;\\n\\n### Step 3: Verify Daemon Service\\n\\nTo verify that the daemon service is running, you can run the following command, which should output the task ARN of the Daemon service as the output.\\n\\n```bash\\naws ecs list-tasks --cluster ${CLUSTER_NAME} --region ${REGION}\\n\\n```\\n&nbsp;\\n\\n### Step 4: Verify Data in SigNoz\\n\\nTo verify that the data is being sent to SigNoz Cloud, you can go to the dashboard section of SigNoz and import one of the following dashboards below:\\n\\n- [instancemetrics.json](https://raw.githubusercontent.com/SigNoz/dashboards/chore/ecs-dashboards/ecs-infra-metrics/instance-metrics.json)\\n- [hostmetrics.json](https://raw.githubusercontent.com/SigNoz/dashboards/main/hostmetrics/hostmetrics.json)\\n\\n&nbsp;\\n\\n### Optional Step: Clean Up\\n\\nIn a cloud environment where resources are billed based on usage, cleaning up resources is crucial. This step involves removing the daemon service and any associated resources that were created during the setup process to collect and forward metrics and logs from your ECS infrastructure to SigNoz. To clean up the daemon service, you can run the following command:\\n\\n```bash\\naws cloudformation delete-stack --stack-name AOCECS-daemon-${CLUSTER_NAME}-${REGION} --region ${REGION}\\n```\\n\\n&nbsp;\\n\\nOnce you follow these steps, you should be able to see your logs and metrics data coming in SigNoz Cloud. To see data for your traces, click on Continue to next step below.\";","export default \"## Create SigNoz OTel Collector Configuration file \\n\\nTo setup the SigNoz OTel Collector config, follow these two steps:\\n\\n### Step 1: \\nNavigate to the AWS Parameter store and create a new parameter named **/ecs/signoz/otelcol-daemon.yaml**\\n\\n### Step 2:\\nDownload the otelcol-daemon YAML configuration file:\\n```bash\\nwget https://github.com/SigNoz/benchmark/raw/main/ecs/otelcol-daemon.yaml\\n```\\n&nbsp;\\n\\nUpdate `{region}` and `SIGNOZ_INGESTION_KEY` values in your YAML configuration file with your SigNoz cloud values mentioned below:\\n\\n{region} : `{{REGION}}`\\n\\nSIGNOZ_INGESTION_KEY : `{{SIGNOZ_INGESTION_KEY}}`\\n\\n&nbsp;\\n\\nOnce you update these values, copy the updated content of the `otelcol-daemon.yaml` file and paste it in the value field of the **/ecs/signoz/otelcol-daemon.yaml** parameter that you created in Step 1.\\n\\n&nbsp;\\n\\n**NOTE:**\\n- After successful set up, feel free to remove `logging` exporter if it gets too noisy. To do so, simply remove the logging exporter from the **exporters** list in the following pipelines: `traces`, `metrics`, and `logs` from the `otelcol-daemon.yaml` file.\";","export default \"**NOTE** : If you don't want to send traces data of your application, you can skip this step.\\n\\n&nbsp;\\n\\n## Send Traces Data\\n\\nTo send traces data from applications deployed in ECS to SigNoz Cloud using Daemon Service we created in the previous section, follow these steps:\\n\\n### Step 1: Instrument your application\\nTo add OpenTelemetry instrumentation to your application, check out the Application Monitoring section in onboarding you can follow the docs [here](https://signoz.io/docs/instrumentation/).\\n\\n&nbsp;\\n\\n### Step 2: Add Entrypoint to your Application Container\\n\\nAdd an entrypoint to the application container to set the `OTEL_EXPORTER_OTLP_ENDPOINT` environment variable to the endpoint of the daemon service. \\n\\nObtain the endpoint or IP address of the instance on which the task is running. This can be done by querying the metadata service of the instance. For **EC2**, the metadata service is available at **169.254.169.254**.\\n\\nThe `entryPoint` will look like:\\n\\n```yaml\\n{\\n      ...,\\n      \\\"entryPoint\\\": [\\n        \\\"sh\\\",\\n        \\\"-c\\\",\\n        \\\"export OTEL_EXPORTER_OTLP_ENDPOINT=\\\\\\\"http://$(curl http://169.254.169.254/latest/meta-data/local-ipv4):4317\\\\\\\"; <Application Startup Commands>\\\"\\n      ],\\n            \\\"command\\\": [],\\n            ...\\n}\\n```\\n\\nReplace `<Application Startup Commands>` with the commands to start your application.\\n\\n&nbsp;\\n\\n\\n### Step 3: Add Service Name of your Application\\n\\nTo add the service name of your application, you need to set the `OTEL_RESOURCE_ATTRIBUTES` environment variable of the application container to `service.name=<your-service-name>`.\\n\\nIn your task definition, add the following lines: \\n\\n```bash\\n\\n...\\n    ContainerDefinitions:\\n        - Name: <your-container-name>\\n          ...\\n          Environment:\\n            - Name: OTEL_RESOURCE_ATTRIBUTES\\n              Value: service.name=<your-service-name>\\n          ...\\n...\\n```\\n\\nIf you are using JSON for task definition, then add the following lines:\\n\\n```bash\\n...\\n    \\\"containerDefinitions\\\": [\\n        {\\n            \\\"name\\\": \\\"<your-container-name>\\\",\\n            ...\\n            \\\"environment\\\": [\\n                {\\n                    \\\"name\\\": \\\"OTEL_RESOURCE_ATTRIBUTES\\\",\\n                    \\\"value\\\": \\\"service.name=<your-service-name>\\\"\\n                }\\n            ],\\n            ...\\n        }\\n    ],\\n...\\n\\n```\\n\\n&nbsp;\\n\\n### Step 4: Rebuild and Deploy Application Container\\n\\nOnce you follow the above steps, you need to rebuild the application container and deploy it to ECS cluster.\\n\\n&nbsp;\\n\\n### Step 5: Verify Data in SigNoz\\n\\nGenerate some traffic to your application and go to your SigNoz cloud **Services** page to see your application name in the service list.\\n\";","export default \"\\nThese steps will help you to collect **metrics, logs and traces** from your ECS infrastructure. \\n\\n## Setup Daemon Service\\n\\n&nbsp;\\n\\n### Daemon Service Template\\n\\nThis step guides in downloading a template which will be used to create a new service within your Amazon ECS (Elastic Container Service) cluster. The purpose of this service is to deploy a container that functions as a daemon. This service will run a container that will send data such as ECS infrastructure metrics and logs from docker containers and send it to SigNoz.\\n\\nWe will use CloudFormation template which includes parameters and configurations that define how the daemon service should be set up. For example, it specifies the container image to use for the daemon, the necessary environment variables, and network settings. \\n\\n&nbsp;\\n\\nDownload the `daemon-template.yaml` using the command below: \\n\\n```bash\\nwget https://github.com/SigNoz/benchmark/raw/main/ecs/ec2/daemon-template.yaml\\n```\\n\\n\";","export default \"## Create Daemon Service\\n\\nUsing the template we downloaded and the SigNoz OpenTelemetry Collector configuration we created, we will create the Daemon Service. This can be done following these steps:\\n\\n### Step 1: Set the environment variable\\n\\nSet the environment variable by running the below command uisng your AWS CLI:\\n\\n```bash\\nexport CLUSTER_NAME=<YOUR-ECS-CLUSTER-NAME>\\nexport REGION=<YOUR-ECS-REGION>\\nexport COMMAND=--config=env:SIGNOZ_CONFIG_CONTENT\\nexport SIGNOZ_CONFIG_PATH=/ecs/signoz/otelcol-daemon.yaml\\n```\\n\\n`<YOUR-ECS-CLUSTER-NAME>` - Name of your ECS cluster. For example, **my-test-cluster** \\n\\n`<YOUR-ECS-REGION>` - Region in which your ECS cluster is running. For example, **us-east-1**\\n\\n&nbsp;\\n\\n### Step 2: Create stack for Daemon Service\\n\\nWith the environment variables set, you can proceed to create the Daemon service using `cloudformation create-stack` by running the below command using your AWS CLI:\\n\\n```bash\\naws cloudformation create-stack --stack-name AOCECS-daemon-${CLUSTER_NAME}-${REGION} \\\\\\n    --template-body file://daemon-template.yaml \\\\\\n    --parameters ParameterKey=ClusterName,ParameterValue=${CLUSTER_NAME} \\\\\\n    ParameterKey=CreateIAMRoles,ParameterValue=True \\\\\\n        ParameterKey=command,ParameterValue=${COMMAND} \\\\\\n        ParameterKey=SigNozConfigPath,ParameterValue=${SIGNOZ_CONFIG_PATH} \\\\\\n    --capabilities CAPABILITY_NAMED_IAM \\\\\\n    --region ${REGION}\\n```\\n\\n&nbsp;\\n\\n### Step 3: Verify Daemon Service\\n\\nTo verify that the daemon service is running, you can run the following command, which should output the task ARN of the Daemon service as the output.\\n\\n```bash\\naws ecs list-tasks --cluster ${CLUSTER_NAME} --region ${REGION}\\n\\n```\\n&nbsp;\\n\\n### Step 4: Verify Data in SigNoz\\n\\nTo verify that the data is being sent to SigNoz Cloud, you can go to the dashboard section of SigNoz and import one of the following dashboards below:\\n\\n- [instancemetrics.json](https://raw.githubusercontent.com/SigNoz/dashboards/chore/ecs-dashboards/ecs-infra-metrics/instance-metrics.json)\\n- [hostmetrics.json](https://raw.githubusercontent.com/SigNoz/dashboards/main/hostmetrics/hostmetrics.json)\\n\\n&nbsp;\\n\\n### Optional Step: Clean Up\\n\\nIn a cloud environment where resources are billed based on usage, cleaning up resources is crucial. This step involves removing the daemon service and any associated resources that were created during the setup process to collect and forward metrics and logs from your ECS infrastructure to SigNoz. To clean up the daemon service, you can run the following command:\\n\\n```bash\\naws cloudformation delete-stack --stack-name AOCECS-daemon-${CLUSTER_NAME}-${REGION} --region ${REGION}\\n```\\n\\n&nbsp;\\n\\nOnce you follow these steps, you should be able to see your logs and metrics data coming in SigNoz Cloud. To see data for your traces, click on Continue to next step below.\";","export default \"## Create SigNoz OTel Collector Configuration file \\n\\nTo setup the SigNoz OTel Collector config, follow these two steps:\\n\\n### Step 1: \\nNavigate to the AWS Parameter store and create a new parameter named **/ecs/signoz/otelcol-daemon.yaml**\\n\\n### Step 2:\\nDownload the otelcol-daemon YAML configuration file:\\n```bash\\nwget https://github.com/SigNoz/benchmark/raw/main/ecs/otelcol-daemon.yaml\\n```\\n&nbsp;\\n\\nUpdate `{region}` and `SIGNOZ_INGESTION_KEY` values in your YAML configuration file with your SigNoz cloud values mentioned below:\\n\\n{region} : `{{REGION}}`\\n\\nSIGNOZ_INGESTION_KEY : `{{SIGNOZ_INGESTION_KEY}}`\\n\\n&nbsp;\\n\\nOnce you update these values, copy the updated content of the `otelcol-sidecar.yaml` file and paste it in the value field of the **/ecs/signoz/otelcol-daemon.yaml** parameter that you created in Step 1.\\n\\n&nbsp;\\n\\n**NOTE:**\\n- After successful set up, feel free to remove `logging` exporter if it gets too noisy. To do so, simply remove the logging exporter from the **exporters** list in the following pipelines: `traces`, `metrics`, and `logs` from the `otelcol-daemon.yaml` file.\";","export default \"**NOTE** : If you don't want to send traces data of your application, you can skip this step.\\n\\n&nbsp;\\n\\n## Send Traces Data\\n\\nTo send traces data from applications deployed in ECS to SigNoz Cloud using Daemon Service we created in the previous section, follow these steps:\\n\\n### Step 1: Instrument your application\\nTo add OpenTelemetry instrumentation to your application, check out the Application Monitoring section in onboarding you can follow the docs [here](https://signoz.io/docs/instrumentation/).\\n\\n&nbsp;\\n\\n### Step 2: Add Entrypoint to your Application Container\\n\\nAdd an entrypoint to the application container to set the `OTEL_EXPORTER_OTLP_ENDPOINT` environment variable to the endpoint of the daemon service. \\n\\nObtain the endpoint or IP address of the instance on which the task is running. This can be done using the default network mode, i.e., **Bridge**\\n\\nThe `entryPoint` will look like:\\n\\n```yaml\\n{\\n      ...,\\n      \\\"entryPoint\\\": [\\n        \\\"sh\\\",\\n        \\\"-c\\\",\\n        \\\"export OTEL_EXPORTER_OTLP_ENDPOINT=\\\\\\\"http://$(curl http://169.254.169.254/latest/meta-data/local-ipv4):4317\\\\\\\"; <Application Startup Commands>\\\"\\n      ],\\n            \\\"command\\\": [],\\n            ...\\n}\\n```\\n\\n&nbsp;\\n\\nIn case you are using custom docker networking, you would have to use `ExtraHosts` in your task definition:\\n\\n```yaml\\n{\\n    ...\\n    \\\"extraHosts\\\": [\\n      {\\n        \\\"hostname\\\": \\\"signoz-collector\\\",\\n        \\\"ipAddress\\\": \\\"host-gateway\\\"\\n      }\\n      ...\\n    ]\\n}\\n```\\n\\nReplace `<Application Startup Commands>` with the commands to start your application.\\n\\n&nbsp;\\n\\n\\n### Step 3: Add Service Name of your Application\\n\\nTo add the service name of your application, you need to set the `OTEL_RESOURCE_ATTRIBUTES` environment variable of the application container to `service.name=<your-service-name>`.\\n\\nIn your task definition, add the following lines: \\n\\n```bash\\n...\\n    ContainerDefinitions:\\n        - Name: <your-container-name>\\n          ...\\n          Environment:\\n            - Name: OTEL_RESOURCE_ATTRIBUTES\\n              Value: service.name=<your-service-name>\\n          ...\\n...\\n```\\n\\nIf you are using JSON for task definition, then add the following lines:\\n\\n```bash\\n...\\n    \\\"containerDefinitions\\\": [\\n        {\\n            \\\"name\\\": \\\"<your-container-name>\\\",\\n            ...\\n            \\\"environment\\\": [\\n                {\\n                    \\\"name\\\": \\\"OTEL_RESOURCE_ATTRIBUTES\\\",\\n                    \\\"value\\\": \\\"service.name=<your-service-name>\\\"\\n                }\\n            ],\\n            ...\\n        }\\n    ],\\n...\\n\\n```\\n\\n&nbsp;\\n\\n### Step 4: Rebuild and Deploy Application Container\\n\\nOnce you follow the above steps, you need to rebuild the application container and deploy it to ECS cluster.\\n\\n&nbsp;\\n\\n### Step 5: Step 5: Verify Data in SigNoz\\n\\nGenerate some traffic to your application and go to your SigNoz cloud services page to see your application name in the service list.\\n\";","export default \"\\nThese steps will help you to collect **metrics, logs and traces** from your ECS infrastructure. \\n\\n## Setup Daemon Service\\n\\n&nbsp;\\n\\n### Daemon Service Template\\n\\nThis step guides in downloading a template which will be used to create a new service within your Amazon ECS (Elastic Container Service) cluster. The purpose of this service is to deploy a container that functions as a daemon. This service will run a container that will send data such as ECS infrastructure metrics and logs from docker containers and send it to SigNoz.\\n\\nWe will use CloudFormation template which includes parameters and configurations that define how the daemon service should be set up. For example, it specifies the container image to use for the daemon, the necessary environment variables, and network settings. \\n\\n&nbsp;\\n\\nDownload the `daemon-template.yaml` using the command below: \\n\\n```bash\\nwget https://github.com/SigNoz/benchmark/raw/main/ecs/external/daemon-template.yaml\\n```\\n\\n\";","export default \"These steps will help you to collect **metrics, logs and traces** from your ECS infrastructure. \\n\\n## Create SigNoz OTel Collector Configuration file \\n\\nTo setup the SigNoz OTel Collector config, follow these two steps:\\n\\n### Step 1: \\nNavigate to the AWS Parameter store and create a new parameter named **/ecs/signoz/otelcol-sidecar.yaml**\\n\\n### Step 2:\\nDownload the otelcol-sidecar YAML configuration file:\\n```bash\\nwget https://github.com/SigNoz/benchmark/raw/main/ecs/otelcol-sidecar.yaml\\n```\\n&nbsp;\\n\\nUpdate `{region}` and `SIGNOZ_INGESTION_KEY` values in your YAML configuration file with your SigNoz cloud values mentioned below:\\n\\n{region} : `{{REGION}}`\\n\\nSIGNOZ_INGESTION_KEY : `{{SIGNOZ_INGESTION_KEY}}`\\n\\n&nbsp;\\n\\nOnce you update these values, copy the updated content of the `otelcol-sidecar.yaml` file and paste it in the value field of the **/ecs/signoz/otelcol-sidecar.yaml** parameter that you created in Step 1.\\n\\n&nbsp;\\n\\n**NOTE:**\\n- After successful set up, feel free to remove `logging` exporter if it gets too noisy. To do so, simply remove the logging exporter from the **exporters** list in the following pipelines: `traces`, `metrics`, `metrics/aws` and `logs` from the `otelcol-sidecar.yaml` file.\";","export default \"## Create Sidecar Collector Container\\n\\nThis step involves integrating the SigNoz collector into your ECS task definitions as a sidecar container. The sidecar collector container will run alongside your application container(s) within the same ECS task and will collect ECS container metrics and send them to SigNoz Cloud. Follow these steps to create the Sidecar collector container:\\n\\n### Step 1: Update task definition of your application\\n\\nIn your ECS task definition, include a new container definition specifically for the sidecar container. This container will operate alongside your main application container(s) within the same task definition. The JSON configuration for that will look like this:\\n\\n```json\\n{\\n    ...\\n    \\\"containerDefinitions\\\": [\\n        ...,\\n        {\\n            \\\"name\\\": \\\"signoz-collector\\\",\\n            \\\"image\\\": \\\"signoz/signoz-otel-collector:0.88.13\\\",\\n            \\\"user\\\": \\\"root\\\",\\n            \\\"command\\\": [\\n                \\\"--config=env:SIGNOZ_CONFIG_CONTENT\\\"\\n            ],\\n            \\\"secrets\\\": [\\n                {\\n                \\\"name\\\": \\\"SIGNOZ_CONFIG_CONTENT\\\",\\n                \\\"valueFrom\\\": \\\"/ecs/signoz/otelcol-sidecar.yaml\\\"\\n                }\\n            ],\\n            \\\"memory\\\": 1024,\\n            \\\"cpu\\\": 512,\\n            \\\"essential\\\": true,\\n            \\\"portMappings\\\": [\\n                {\\n                    \\\"protocol\\\": \\\"tcp\\\",\\n                    \\\"containerPort\\\": 4317\\n                },\\n                {\\n                    \\\"protocol\\\": \\\"tcp\\\",\\n                    \\\"containerPort\\\": 4318\\n                },\\n                {\\n                    \\\"containerPort\\\": 8006,\\n                    \\\"protocol\\\": \\\"tcp\\\"\\n                }\\n            ],\\n            \\\"healthCheck\\\": {\\n                \\\"command\\\": [\\n                    \\\"CMD-SHELL\\\",\\n                    \\\"wget -qO- http://localhost:13133/ || exit 1\\\"\\n                ],\\n                \\\"interval\\\": 5,\\n                \\\"timeout\\\": 6,\\n                \\\"retries\\\": 5,\\n                \\\"startPeriod\\\": 1\\n            },\\n            \\\"logConfiguration\\\": {\\n                \\\"logDriver\\\": \\\"awslogs\\\",\\n                \\\"options\\\": {\\n                \\\"awslogs-group\\\": \\\"/ecs/signoz-otel-EC2-sidcar\\\",\\n                \\\"awslogs-region\\\": \\\"<aws-region>\\\",\\n                \\\"awslogs-stream-prefix\\\": \\\"ecs\\\",\\n                \\\"awslogs-create-group\\\": \\\"True\\\"\\n                }\\n            }\\n        }\\n    ]\\n...\\n}\\n```\\n\\nReplace `<aws-region>` with the Region for your ECS cluster. For example, **us-east-1**\\n\\n&nbsp;\\n\\n### Step 2: Update ECS Task Execution Role\\n\\nTo update the Task Execution role, follow these steps:\\n\\n1. **Identify the Role:** Identify the IAM role used by your ECS tasks for execution. It's often named something like **ecsTaskExecutionRole**.\\n\\n2. **Edit the Role:** Navigate to the IAM console in the AWS Management Console, find the role by name, and open its details page.\\n\\n3. **Attach Policy or add inline Policy:**\\n\\nThere are two ways to grant access to the Parameter store:\\n\\n- **Attach AWS Managed Policies:** If the role doesn't already have the following policy, attach it:\\n\\n    - `AmazonSSMReadOnlyAccess`\\n\\n- **Add Inline Policy:** Alternatively, for more granular control, you can create an inline policy that specifically grants access to only the necessary resources in the Parameter Store. The JSON for the inline policy will be:\\n\\n```json\\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Action\\\": [\\n                \\\"ssm:GetParameter\\\"\\n            ],\\n            \\\"Resource\\\": [\\n                \\\"arn:aws:ssm:<aws-region>:<aws-account-id>:parameter/ecs/signoz/otelcol-sidecar.yaml\\\"\\n            ],\\n            \\\"Effect\\\": \\\"Allow\\\"\\n        }\\n    ]\\n}\\n```\\n\\n&nbsp;\\n\\n### Step 3: Update ECS Task Role\\n\\nTo update the ECS Task Role, follow these steps:\\n\\n1. **Identify the Role:** Determine the IAM role your ECS tasks are currently using to interact with AWS services. This role is specified in the ECS task definition under the \\\"taskRoleArn\\\" field.\\n\\n2. **Edit the Role:** Go to the IAM section of the AWS Management Console, locate the role by its name, and open its configuration.\\n\\n3. **Attach Policies or Add Inline Policy:**\\n\\nThere are two ways to grant access to the Parameter store:\\n\\n- Attach AWS Managed Policies: If the role doesn't already have the following policies, attach it:\\n\\n    - AmazonSSMReadOnlyAccess\\n\\n- **Add Inline Policy for Granular Access:** For tighter security, you might opt to create an inline policy that specifies exactly which resources the tasks can access and what actions they can perform on those resources. This is particularly important for accessing specific resources like the Parameter Store parameters used by the SigNoz sidecar. The JSON for the inline policy will be:\\n\\n```json\\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Action\\\": [\\n                \\\"ssm:GetParameter\\\"\\n            ],\\n            \\\"Resource\\\": [\\n                \\\"arn:aws:ssm:<aws-region>:<aws-account-id>:parameter/ecs/signoz/otelcol-sidecar.yaml\\\"\\n            ],\\n            \\\"Effect\\\": \\\"Allow\\\"\\n        }\\n    ]\\n}\\n```\\n\";","export default \"## Deploy the task definition\\n\\nIf your application runs as an ECS service, you update the service to use the new revision of your task definition. This tells ECS to start new tasks based on this updated definition and gracefully replace the old tasks with the new ones, ensuring minimal disruption to your application.\\n\\n**NOTE:** Once the task is running, you should be able to see SigNoz sidecar container logs in CloudWatch Logs because we have set the logDriver parameter to be `awslogs` in our task definition.\\n\\n\\n## Verify data in SigNoz\\n\\nTo verify that your sidecar container is running, go to the Dashboard section of SigNoz Cloud and import the dashboard **ECS - Container Metrics** Dashboard from [here](https://raw.githubusercontent.com/SigNoz/dashboards/main/ecs-infra-metrics/container-metrics.json).\";","export default \"**NOTE** : If you don't want to send traces data of your application, you can skip this step.\\n\\n&nbsp;\\n\\n## Send Traces Data\\n\\nTo send traces data from applications deployed in ECS to SigNoz Cloud using sidecar container we created in the previous steps, follow these steps:\\n\\n### Step 1: Instrument your application\\nTo add OpenTelemetry instrumentation to your application, check out the Application Monitoring section in onboarding you can follow the docs [here](https://signoz.io/docs/instrumentation/).\\n\\n&nbsp;\\n\\n### Step 2: Configure OTLP Endpoint\\n\\nIn your application task definition, you need to set the OTLP endpoint to the endpoint of the sidecar container. This can be done by setting the environment variable `OTEL_EXPORTER_OTLP_ENDPOINT` to the endpoint of the sidecar container.\\n\\nDepending on the Network Mode, the ECS task definition will change:\\n\\nFor **Bridge** network mode, ECS task definition will be:\\n\\n```json\\n{\\n    ...\\n    \\\"containerDefinitions\\\": [\\n        {\\n            \\\"name\\\": \\\"<your-container-name>\\\",\\n            \\\"environment\\\": [\\n                {\\n                    \\\"name\\\": \\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\",\\n                    \\\"value\\\": \\\"http://signoz-collector:4317\\\"\\n                },\\n                {\\n                    \\\"name\\\": \\\"OTEL_RESOURCE_ATTRIBUTES\\\",\\n                    \\\"value\\\": \\\"service.name=<your-service-name>\\\"\\n                }\\n            ],\\n            \\\"links\\\": [\\n                \\\"signoz-collector\\\"\\n            ],\\n            ...\\n        }\\n    ]\\n}\\n```\\n&nbsp;\\n\\nFor **AWS VCP** network mode, ECS task definition will be:\\n\\n```json\\n{\\n    ...\\n    \\\"containerDefinitions\\\": [\\n        {\\n            \\\"name\\\": \\\"<your-container-name>\\\",\\n            \\\"environment\\\": [\\n                {\\n                    \\\"name\\\": \\\"OTEL_EXPORTER_OTLP_ENDPOINT\\\",\\n                    \\\"value\\\": \\\"http://localhost:4317\\\"\\n                },\\n                {\\n                    \\\"name\\\": \\\"OTEL_RESOURCE_ATTRIBUTES\\\",\\n                    \\\"value\\\": \\\"service.name=<your-service-name>\\\"\\n                }\\n            ],\\n            ...\\n        }\\n    ]\\n}\\n```\\n\\nReplace `<your-container-name>` with the name of your container.\\n\\n&nbsp;\\n\\n### Step 3: Rebuild and Deploy Application Container\\n\\nAfter instrumenting your application and configuring the OTLP endpoint, you'll need to rebuild your application container with these changes and deploy it to ECS cluster using the same task definition that we used in the previous section.\\n\\n&nbsp;\\n\\n### Step 4: Verify Data in SigNoz\\n\\nGenerate some traffic to your application and go to your SigNoz cloud **Services** page to see your application name in the service list.\\n\";","export default \"**NOTE** : If you don't want to send logs data of your applications deployed on ECS, you can skip this step.\\n\\n## Send Logs Data\\n\\nTo send logs data from applications deployed in ECS to SigNoz Cloud using sidecar container we created in the previous steps, follow these steps:\\n\\n### Step 1: Configure Log Router\\n\\nAdd a new container definition in your ECS task definition for the Fluent Bit log router:\\n\\n```json\\n{\\n    ...\\n    {\\n        \\\"name\\\": \\\"signoz-log-router\\\",\\n        \\\"image\\\": \\\"906394416424.dkr.ecr.us-west-2.amazonaws.com/aws-for-fluent-bit:stable\\\",\\n        \\\"cpu\\\": 250,\\n        \\\"memory\\\": 512,\\n        \\\"essential\\\": true,\\n        \\\"dependsOn\\\": [\\n            {\\n                \\\"containerName\\\": \\\"signoz-collector\\\",\\n                \\\"condition\\\": \\\"HEALTHY\\\"\\n            }\\n        ],\\n        \\\"logConfiguration\\\": {\\n            \\\"logDriver\\\": \\\"awslogs\\\",\\n            \\\"options\\\": {\\n                \\\"awslogs-create-group\\\": \\\"True\\\",\\n                \\\"awslogs-group\\\": \\\"/ecs/ecs-signoz-log-router\\\",\\n                \\\"awslogs-region\\\": \\\"us-east-1\\\",\\n                \\\"awslogs-stream-prefix\\\": \\\"ecs\\\"\\n            }\\n        },\\n        \\\"firelensConfiguration\\\": {\\n            \\\"type\\\": \\\"fluentbit\\\",\\n            \\\"options\\\": {\\n                \\\"enable-ecs-log-metadata\\\": \\\"true\\\"\\n            }\\n        }\\n    }\\n}\\n```\\n\\n**NOTE:** When collecting logs from multiple applications, it is recommended to use `<application-name>-log-router` pattern instead of `signoz-log-router` for container name and `awslogs-group`. It helps to separate log router of different application.\\n\\n&nbsp;\\n\\n### Step 2: Send logs to Sidecar Container\\n\\nIn your application task definition, you need to use `awsfirelens` log driver to send logs to the sidecar otel-collector container via Fluent Bit log router.\\n\\nDepending on the Network Mode, update the ECS task definition:\\n\\nFor **Bridge** network mode:\\n\\n```json\\n{\\n    ...\\n    \\\"containerDefinitions\\\": [\\n        {\\n            \\\"name\\\": \\\"<your-container-name>\\\",\\n            \\\"dependsOn\\\": [\\n                {\\n                    \\\"containerName\\\": \\\"signoz-log-router\\\",\\n                    \\\"condition\\\": \\\"START\\\"\\n                }\\n            ],\\n            \\\"logConfiguration\\\": {\\n                \\\"logDriver\\\": \\\"awsfirelens\\\",\\n                \\\"options\\\": {\\n                    \\\"Name\\\": \\\"forward\\\",\\n                    \\\"Match\\\": \\\"*\\\",\\n                    \\\"Host\\\": \\\"signoz-collector\\\",\\n                    \\\"Port\\\": \\\"8006\\\",\\n                    \\\"tls\\\": \\\"off\\\",\\n                    \\\"tls.verify\\\": \\\"off\\\"\\n                }\\n            },\\n            \\\"links\\\": [\\n                \\\"signoz-collector\\\"\\n            ],\\n            ...\\n        }\\n    ]\\n}\\n```\\n\\n&nbsp;\\n\\nFor **AWS VCP** network mode:\\n\\n```json\\n{\\n    ...\\n    \\\"containerDefinitions\\\": [\\n        {\\n            \\\"name\\\": \\\"<your-container-name>\\\",\\n            \\\"dependsOn\\\": [\\n                {\\n                    \\\"containerName\\\": \\\"signoz-log-router\\\",\\n                    \\\"condition\\\": \\\"START\\\"\\n                }\\n            ],\\n            \\\"logConfiguration\\\": {\\n                \\\"logDriver\\\": \\\"awsfirelens\\\",\\n                \\\"options\\\": {\\n                    \\\"Name\\\": \\\"forward\\\",\\n                    \\\"Match\\\": \\\"*\\\",\\n                    \\\"Host\\\": \\\"localhost\\\",\\n                    \\\"Port\\\": \\\"8006\\\",\\n                    \\\"tls\\\": \\\"off\\\",\\n                    \\\"tls.verify\\\": \\\"off\\\"\\n                }\\n            }\\n            ...\\n        }\\n    ]\\n}\\n```\\n\\n### Step 3: Rebuild and Deploy Application Container\\n\\nRebuild your application container and deploy it to ECS cluster using the same task definition that we updated in the previous section.\\n\\n&nbsp;\\n\\n### Step 4: Verify Data in SigNoz\\n\\nGenerate some logs from your application and go to your SigNoz cloud **Logs** page to see your application logs.\\n\\n\\n\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: aws\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{region}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: <SIGNOZ_INGESTION_KEY>\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n  resourceDetection:\\n    detectors:\\n      - eks\\n      - system\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"## Monitor using Dashboards\\n\\nTo visualize the Kubernetes Metrics, you can use following pre-built Dashboards:\\n\\n- [K8s Infra Metrics](https://github.com/SigNoz/dashboards/tree/main/k8s-infra-metrics)\\n\\nYou should copy the JSON data in these files and create a New Dashboard in the Dashboard Tab of SigNoz.\\n\\n&nbsp;\\n\\nBy following the previous step, you should also be able to see Kubernetes Pod logs in the logs Section of SigNoz.\\n\\n&nbsp;\\n\\nTo send traces for your application deployed on your Kubernetes cluster, checkout the Application monitoring section of onboarding.\\n\";","export default \"## Setup\\n\\n### Installing with OpenTelemetry Helm Charts\\n\\nPrior to installation, you must ensure your Kubernetes cluster is ready and that you have the necessary permissions to deploy applications. Follow these steps to use Helm for setting up the Collector:\\n\\n&nbsp;\\n\\n1. **Add the OpenTelemetry Helm repository:**\\n\\n```bash\\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\\n```\\n\\n&nbsp;\\n\\n2. **Prepare the `otel-collector-values.yaml` Configuration**\\n\\n&nbsp;\\n\\n#### Azure Event Hub Receiver Configuration\\n\\n  Replace the placeholders `<Primary Connection String>` with the primary connection string for your Event Hub, it should look something like this:\\n\\n  ```yaml\\n  connection: Endpoint=sb://namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=superSecret1234=;EntityPath=hubName\\n  ```\\n  The Event Hub setup have a step to create a SAS policy for the event hub and copy the connection string.\\n\\n&nbsp;\\n\\n#### Azure Monitor Receiver Configuration\\n\\n  You will need to set up a [service principal](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal) with Read permissions to receive data from Azure Monitor.\\n\\n  1. Follow the steps in the [Create a service principal Azure Doc](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#register-an-application-with-microsoft-entra-id-and-create-a-service-principal) documentation to create a service principal. \\n  You can name it `signoz-central-collector-app` the redirect URI can be empty.\\n  2. To add read permissions to Azure Monitor, Follow the [Assign Role](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#assign-a-role-to-the-application) documentation. The read acess can be given to the full subscription.\\n  3. There are multiple ways to authenticate the service principal, we will use the client secret option, follow [Creating a client secret](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#option-3-create-a-new-client-secret) and don't forget to copy the client secret. The secret is used in the configuration file as `client_secret`.\\n\\n  4. To find `client_id` and `tenant_id`, go to the [Azure Portal](https://portal.azure.com/) and search for the `Application` you created. You would see the `Application (client) ID` and `Directory (tenant) ID` in the Overview section.\\n\\n  5. To find `subscription_id`, follow steps in [Find Your Subscription](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription) and populate them in the configuration file.\\n  \\n  6. Ensure you replace the placeholders `<region>` and `<ingestion-key>` with the appropriate values for your signoz cloud instance.\\n\\n\\n\\nBelow is an example targeting the SigNoz backend with Azure Monitor receivers configured:\\n\\n```yaml\\nservice:\\n  pipelines:\\n    metrics/am:\\n      receivers: [azuremonitor]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, azureeventhub]\\n      processors: [batch]\\n      exporters: [otlp]\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  azureeventhub:\\n    connection: Endpoint=sb://namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=superSecret1234=;EntityPath=hubName\\n    format: \\\"azure\\\"\\n    apply_semantic_conventions: true\\n  azuremonitor:\\n    subscription_id: \\\"<Subscription ID>\\\"\\n    tenant_id: \\\"<AD Tenant ID>\\\"\\n    client_id: \\\"<Client ID>\\\"\\n    client_secret: \\\"<Client Secret>\\\"\\n    resource_groups: [\\\"<rg-1>\\\"]\\n    collection_interval: 60s\\nprocessors:\\n  batch: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n```\\n\\n&nbsp;\\n\\n3. **Deploy the OpenTelemetry Collector to your Kubernetes cluster:**\\n\\nYou'll need to prepare a custom configuration file, say `otel-collector-values.yaml`, that matches your environment's specific needs. Replace `<namespace>` with the Kubernetes namespace where you wish to install the Collector.\\n\\n```bash\\nhelm install -n <namespace> --create-namespace otel-collector open-telemetry/opentelemetry-collector -f otel-collector-values.yaml\\n\\n```\\n\\nFor more detail, refer to the [official OpenTelemetry Helm Chart documentation](https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-collector), which offers comprehensive installation instructions and configuration options tailored to your environment's requirements.\\n\";","export default \"## Prerequisite\\n\\n- An AKS cluster\\n- Central Collector Setup\\n\\n&nbsp;\\n\\nOnce you have setup the Central Collector, it will automatically start collecting your Logs.\";","export default \"## Prerequisite\\n\\n- An AKS cluster\\n- Central Collector Setup\\n\\n&nbsp;\\n\\nOnce you have setup the Central Collector, it will automatically start sending your Metrics to SigNoz.\";","export default \"## Overview\\n\\nAzure Event Hubs is a big data streaming platform ideal for centralizing logging and real-time log streaming for applications on Azure or on-premises.\\n\\nIntegrate SigNoz with Azure Event Hubs for a robust log management solution, leveraging SigNoz's log aggregation, querying, visualization, and alerting features.\\n\\n## Prerequisites\\n\\n- An active Azure subscription\\n\\n## Setup\\n\\n### 1. Create an Event Hubs Namespace\\n\\n1. In the [Azure portal](https://portal.azure.com), create an Event Hubs namespace.\\n2. Fill in the required details:\\n    - **Resource group**: Choose or create a new one.\\n    - **Namespace name**: Enter a unique name, e.g., `<orgName>-obs-signoz`.\\n    - **Pricing tier**: Based on your logging requirements.\\n    - **Region**: Should match the region of the resources you want to monitor.\\n    - **Throughput units**: Choose based on logging needs.\\n3. Click \\\"Review + create\\\" and then \\\"Create\\\".\\n\\n### 2. Create an Event Hub\\n\\n1. Navigate to the Event Hubs namespace you created in the Azure portal.\\n2. Click \\\"+ Event Hub\\\" to create a new event hub.\\n3. Enter a name, e.g., `logs`and click \\\"Create\\\"\\n\\n### 3. Create a SAS Policy and Copy Connection String\\n\\n1. Navigate to the Event Hub in the Azure portal.\\n2. Click \\\"Shared access policies\\\" in the left menu.\\n3. Click \\\"Add\\\" to create a new policy named `signozListen`.\\n4. Select the \\\"Listen\\\" permission and set the expiration time.\\n5. Click \\\"Save\\\".\\n6. Copy the *Connection string–primary key*.\\n\\n\\n\\n\";","export default \"## Application level Tracing\\n\\nFor application-level tracing, you can use the OpenTelemetry SDKs integrated with your application. These SDKs will automatically collect and forward traces to the Central Collector.\\n\\n&nbsp;\\n\\nTo see how you can instrument your applications like FastAPI, NextJS, Node.js, Spring etc. you can check out the **Application Monitoring** section available at the start of this onboarding or you can checkout this [documentation](https://signoz.io/docs/instrumentation/).\\n\\n## Configure the OpenTelemetry SDK\\n\\n```bash\\n# Set env vars or config file\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://otel-collector.kubelet-otel.svc.cluster.local:4318/\\\"\\n```\\n\\nFor application-level traces and metrics, configure your application to use the `kube-dns` name of the **Central Collector** you set up earlier.\";","export default \"Set up the OpenTelemetry Collector on a Virtual Machine (VM). The setup is compatible with cloud VM instances, your own data center, or even a local VM on your development machine. Here's how to do it:\\n\\n\\n## Download and Install the OpenTelemetry Collector Binary\\n\\nPlease visit [Documentation For VM](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) which  provides further guidance on a VM installation. \\n\\n&nbsp;\\n\\n## Configure OpenTelemetry Collector\\n\\nWhile following the documentation above for installing the OpenTelemetry Collector Binary, you must have created `config.yaml` file. Replace the content of the `config.yaml` with the below config file which includes the **Azure Monitor receiver**.\\n\\n```yaml\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  azureeventhub:\\n    connection: <Primary Connection String>\\n    format: \\\"azure\\\"\\n    apply_semantic_conventions: true\\n  azuremonitor:\\n    subscription_id: \\\"<Subscription ID>\\\"\\n    tenant_id: \\\"<AD Tenant ID>\\\"\\n    client_id: \\\"<Client ID>\\\"\\n    client_secret: \\\"<Client Secret>\\\"\\n    resource_groups: [\\\"<rg-1>\\\"]\\n    collection_interval: 60s\\nprocessors:\\n  batch: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\nservice:\\n  pipelines:\\n    metrics/am:\\n      receivers: [azuremonitor]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, azureeventhub]\\n      processors: [batch]\\n      exporters: [otlp]\\n\\n```\\n**NOTE:** \\nReplace the `<Primary Connection String>` in the config file with the primary connection string for your Event Hub that you created in the previous section. It would look something like this:\\n\\n```bash\\nEndpoint=sb://namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=superSecret1234=;EntityPath=hubName\\n```\\n\\n&nbsp;\\n\\n## Azure Monitor Receiver Configuration\\n\\nYou will need to set up a [service principal](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal) with Read permissions to receive data from Azure Monitor.\\n\\n1. Follow the steps in the [Create a service principal Azure Doc](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#register-an-application-with-microsoft-entra-id-and-create-a-service-principal) documentation to create a service principal. \\nYou can name it `signoz-central-collector-app` the redirect URI can be empty.\\n\\n2. To add read permissions to Azure Monitor, Follow the [Assign Role](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#assign-a-role-to-the-application) documentation. The read access can be given to the full subscription.\\n\\n3. There are multiple ways to authenticate the service principal, we will use the client secret option, follow [Creating a client secret](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#option-3-create-a-new-client-secret) and don't forget to copy the client secret. The secret is used in the configuration file as `client_secret`.\\n\\n4. To find `client_id` and `tenant_id`, go to the [Azure Portal](https://portal.azure.com/) and search for the `Application` you created. You would see the `Application (client) ID` and `Directory (tenant) ID` in the Overview section.\\n\\n5. To find `subscription_id`, follow steps in [Find Your Subscription](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription) and populate them in the configuration file.\\n\\n**NOTE:**\\nBy following the above steps, you will get the values for `<Subscription ID>`, `<AD Tenant ID>`, `<Client ID>` and `<Client Secret>` which you need to fill in the `config.yaml` file.\\n\\n&nbsp;\\n\\n## Run the Collector\\n    \\nWith your configuration file ready, you can now start the Collector using the following command:\\n\\n```bash\\n# Runs in background with the configuration we just created\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid \\n```\\n\\n&nbsp;\\n\\n### Open Ports\\n    \\nYou will need to open the following ports on your Azure VM:\\n- 4317 for gRPC\\n- 4318 for HTTP\\n\\nYou can do this by navigating to the Azure VM's Networking section and adding a new inbound rule for the ports.\\n    \\n&nbsp;\\n\\n### Validating the Deployment\\n    \\nOnce the Collector is running, ensure that telemetry data is being successfully sent and received. Use the logging exporter as defined in your configuration file, or check the logs for any startup errors.\\n\\n&nbsp;\\n\\n## Configure DNS label For Collector\\n\\nTo the IP address of the collector, you can add a DNS label to the Public IP address. This will make it easier to refer to the centralized collector from other services. You can do this by following these steps:\\n\\n1. Go to the Public IP address of the collector. This would be the IP address of the VM or Load Balancer in case of Kubernetes or Load Balanced collector.\\n2. Click on the \\\"Configuration\\\" tab.\\n3. Enter the DNS label you want to use for the collector.\\n4. Click on \\\"Save\\\".\\n    \\n**NOTE:** Please take note of the DNS label you have entered. You will need this in the next steps.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/bootstrapping/collector-setup/#troubleshooting)\";","export default \"Follow these steps if you want to setup logging for your Azure App Service.\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n- EventHub Setup\\n- Central Collector Setup\\n\\n\\n## Setup\\n\\n1. Navigate to your App Service in the Azure portal\\n\\n2. Search for \\\"Diagnostic settings\\\" in the left navigation menu\\n\\n3. Click on \\\"Add Diagnostic Setting\\\"\\n\\n4. Select the desired log categories to export:\\n- HTTP logs\\n- App Service Console Logs\\n- App Service Application Logs\\n- Access Audit Logs\\n- IPSecurity Audit logs\\n- App Service Platform logs\\n\\n\\n5. Configure the destination details as **\\\"Stream to an Event Hub\\\"** and select the Event Hub namespace and Event Hub name created during the EventHub Setup in the earlier steps.\\n\\n6. Save the diagnostic settings\\n\\n\\nThis will start sending your Azure App Service Logs to SigNoz!\";","export default \"Follow these steps if you want to monitor System metrics like CPU Percentage, Memory Percentage etc. of your Azure App Service.\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n- EventHub Setup\\n- Central Collector Setup\\n\\n## Dashboard Example\\n\\nOnce you have completed the prerequisites, you can start monitoring your Azure App Service's system metrics with SigNoz Cloud. Here's how you can do it:\\n\\n1. Log in to your SigNoz account\\n2. Navigate to the Dashboards section, and [add a dashboard](https://signoz.io/docs/userguide/manage-dashboards/)\\n3. Add a Timeseries Panel\\n4. In **Metrics**, select `azure_memorypercentage_total`  and **Avg By** select tag `location`\\n5. In Filter say `name = <app-svc-plan-name>`\\n6. Hit “Save Changes” and you now have Memory Usage of your App Service in a Dashboard for reporting and alerting \\n\\nIn this way, you can monitor system metrics of your Azure App Service in SigNoz Cloud.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/app-service/metrics/#troubleshooting) \";","export default \"## Overview\\n\\nAzure Event Hubs is a big data streaming platform ideal for centralizing logging and real-time log streaming for applications on Azure or on-premises.\\n\\nIntegrate SigNoz with Azure Event Hubs for a robust log management solution, leveraging SigNoz's log aggregation, querying, visualization, and alerting features.\\n\\n## Prerequisites\\n\\n- An active Azure subscription\\n\\n## Setup\\n\\n### 1. Create an Event Hubs Namespace\\n\\n1. In the [Azure portal](https://portal.azure.com), create an Event Hubs namespace.\\n2. Fill in the required details:\\n    - **Resource group**: Choose or create a new one.\\n    - **Namespace name**: Enter a unique name, e.g., `<orgName>-obs-signoz`.\\n    - **Pricing tier**: Based on your logging requirements.\\n    - **Region**: Should match the region of the resources you want to monitor.\\n    - **Throughput units**: Choose based on logging needs.\\n3. Click \\\"Review + create\\\" and then \\\"Create\\\".\\n\\n### 2. Create an Event Hub\\n\\n1. Navigate to the Event Hubs namespace you created in the Azure portal.\\n2. Click \\\"+ Event Hub\\\" to create a new event hub.\\n3. Enter a name, e.g., `logs`and click \\\"Create\\\"\\n\\n### 3. Create a SAS Policy and Copy Connection String\\n\\n1. Navigate to the Event Hub in the Azure portal.\\n2. Click \\\"Shared access policies\\\" in the left menu.\\n3. Click \\\"Add\\\" to create a new policy named `signozListen`.\\n4. Select the \\\"Listen\\\" permission and set the expiration time.\\n5. Click \\\"Save\\\".\\n6. Copy the *Connection string–primary key*.\\n\\n<!-- ### 4. Configure OpenTelemetry Integration\\n\\n1. Add a new receiver to [Central Collector Setup](../collector-setup).\\n2. Configure the receiver with the Event Hubs namespace connection string and the event hub name.\\n\\n### 5. Stream Logs to Event Hubs\\n\\n1. Configure Azure services' diagnostic settings to forward logs to the Event Hub.\\n2. Ensure logs are in [Azure Common Log Format](https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-schema).\\n3. Verify logs are streaming to Event Hubs and received by SigNoz.\\n\\nFor detailed instructions, refer to the Azure documentation: [Azure Event Hub](https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-create). -->\\n\\n<!-- For more configuration options, see the [OpenTelemetry Documentation](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/azureeventhubreceiver). -->\\n\\n\\n\";","export default \"## Application level Tracing\\n\\nFor application-level tracing, you can use the OpenTelemetry SDKs integrated with your application. These SDKs will automatically collect and forward traces to the Central Collector.\\n\\n&nbsp;\\n\\nTo see how you can instrument your applications like FastAPI, NextJS, Node.js, Spring etc. you can check out the **Application Monitoring** section available at the start of this onboarding or you can checkout this [documentation](https://signoz.io/docs/instrumentation/).\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n1. **Azure Subscription & App Service**: You need an active Azure subscription with a running Azure App Service instance.\\n2. **Central Collector Setup**: Make sure you have set up the Central Collector \\n\\n&nbsp;\\n\\n## Configure the OpenTelemetry SDK\\n\\n```bash\\n# Set env vars or config file\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://<Your-Central-Collector-DNS>:4318/\\\"\\n```\\n\\nFor application-level traces, configure your application to use the DNS name of the **Central Collector** you set up earlier. This Central Collector will automatically forward the collected data to SigNoz.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/app-service/tracing/#troubleshooting)\";","export default \"Set up the OpenTelemetry Collector on a Virtual Machine (VM). The setup is compatible with cloud VM instances, your own data center, or even a local VM on your development machine. Here's how to do it:\\n\\n\\n## Download and Install the OpenTelemetry Collector Binary\\n\\nPlease visit [Documentation For VM](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) which  provides further guidance on a VM installation. \\n\\n&nbsp;\\n\\n## Configure OpenTelemetry Collector\\n\\nWhile following the documentation above for installing the OpenTelemetry Collector Binary, you must have created `config.yaml` file. Replace the content of the `config.yaml` with the below config file which includes the **Azure Monitor receiver**.\\n\\n```yaml\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  azureeventhub:\\n    connection: <Primary Connection String>\\n    format: \\\"azure\\\"\\n    apply_semantic_conventions: true\\n  azuremonitor:\\n    subscription_id: \\\"<Subscription ID>\\\"\\n    tenant_id: \\\"<AD Tenant ID>\\\"\\n    client_id: \\\"<Client ID>\\\"\\n    client_secret: \\\"<Client Secret>\\\"\\n    resource_groups: [\\\"<rg-1>\\\"]\\n    collection_interval: 60s\\nprocessors:\\n  batch: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\nservice:\\n  pipelines:\\n    metrics/am:\\n      receivers: [azuremonitor]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, azureeventhub]\\n      processors: [batch]\\n      exporters: [otlp]\\n\\n```\\n**NOTE:** \\nReplace the `<Primary Connection String>` in the config file with the primary connection string for your Event Hub that you created in the previous section. It would look something like this:\\n\\n```bash\\nEndpoint=sb://namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=superSecret1234=;EntityPath=hubName\\n```\\n\\n&nbsp;\\n\\n## Azure Monitor Receiver Configuration\\n\\nYou will need to set up a [service principal](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal) with Read permissions to receive data from Azure Monitor.\\n\\n1. Follow the steps in the [Create a service principal Azure Doc](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#register-an-application-with-microsoft-entra-id-and-create-a-service-principal) documentation to create a service principal. \\nYou can name it `signoz-central-collector-app` the redirect URI can be empty.\\n\\n2. To add read permissions to Azure Monitor, Follow the [Assign Role](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#assign-a-role-to-the-application) documentation. The read access can be given to the full subscription.\\n\\n3. There are multiple ways to authenticate the service principal, we will use the client secret option, follow [Creating a client secret](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#option-3-create-a-new-client-secret) and don't forget to copy the client secret. The secret is used in the configuration file as `client_secret`.\\n\\n4. To find `client_id` and `tenant_id`, go to the [Azure Portal](https://portal.azure.com/) and search for the `Application` you created. You would see the `Application (client) ID` and `Directory (tenant) ID` in the Overview section.\\n\\n5. To find `subscription_id`, follow steps in [Find Your Subscription](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription) and populate them in the configuration file.\\n\\n**NOTE:**\\nBy following the above steps, you will get the values for `<Subscription ID>`, `<AD Tenant ID>`, `<Client ID>` and `<Client Secret>` which you need to fill in the `config.yaml` file.\\n\\n&nbsp;\\n\\n## Run the Collector\\n    \\nWith your configuration file ready, you can now start the Collector using the following command:\\n\\n```bash\\n# Runs in background with the configuration we just created\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid \\n```\\n\\n&nbsp;\\n\\n### Open Ports\\n    \\nYou will need to open the following ports on your Azure VM:\\n- 4317 for gRPC\\n- 4318 for HTTP\\n\\nYou can do this by navigating to the Azure VM's Networking section and adding a new inbound rule for the ports.\\n    \\n&nbsp;\\n\\n### Validating the Deployment\\n    \\nOnce the Collector is running, ensure that telemetry data is being successfully sent and received. Use the logging exporter as defined in your configuration file, or check the logs for any startup errors.\\n\\n&nbsp;\\n\\n## Configure DNS label For Collector\\n\\nTo the IP address of the collector, you can add a DNS label to the Public IP address. This will make it easier to refer to the centralized collector from other services. You can do this by following these steps:\\n\\n1. Go to the Public IP address of the collector. This would be the IP address of the VM or Load Balancer in case of Kubernetes or Load Balanced collector.\\n2. Click on the \\\"Configuration\\\" tab.\\n3. Enter the DNS label you want to use for the collector.\\n4. Click on \\\"Save\\\".\\n    \\n**NOTE:** Please take note of the DNS label you have entered. You will need this in the next steps.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/bootstrapping/collector-setup/#troubleshooting)\";","export default \"Follow these steps if you want to setup logging for your Azure App Service.\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n- EventHub Setup\\n- Central Collector Setup\\n\\n## Setup\\n\\n1. Navigate to the relevant Storage Account in the Azure portal\\n2. Search for \\\"Diagnostic settings\\\" in the left navigation menu\\n3. Click on `blob` under the storage account\\n4. Click on \\\"Add Diagnostic Setting\\\"\\n5. Select the desired log categories to export:\\n    - Storage Read\\n    - Storage Write\\n    - Storage Delete\\n5. Configure the destination details as \\\"**Stream to an Event Hub**\\\" and select the Event Hub namespace and Event Hub name created during the EventHub Setup\\n6. Save the diagnostic settings\\n\\nThat's it! You have successfully set up logging for your Azure Blob Storage.\";","export default \"Follow these steps if you want to monitor system metrics like Total Requests, Total Ingress / Egress, and Total Errors etc., of your Azure Blob Storage.\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n- Azure Subscription and Azure Blob storage instance running\\n- Central Collector Setup\\n\\n&nbsp;\\n\\n## Dashboard Example\\n\\nOnce you have completed the prerequisites, you can start monitoring your Azure Blob Storage's system metrics with SigNoz.\\n\\n1. Log in to your SigNoz account.\\n2. Navigate to the Dashboards, and [add a dashboard](https://signoz.io/docs/userguide/manage-dashboards/)\\n3. Add a Timeseries Panel\\n4. In **Metrics**, select `azure_ingress_total`  and **Avg B*y* select tag `location`\\n5. In Filter say `name = <storage-account-name>`\\n6. Hit “Save Changes”. You now have Total Ingress of your Azure Blob Storage in a Dashboard for reporting and alerting\\n\\n\\nThat's it! You have successfully set up monitoring for your Azure Blob Storage's system metrics with SigNoz. You can now start creating other panels and dashboards to monitor other Azure Blob Storage's metrics.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/az-blob-storage/metrics/#troubleshooting) \";","export default \"## Overview\\n\\nAzure Event Hubs is a big data streaming platform ideal for centralizing logging and real-time log streaming for applications on Azure or on-premises.\\n\\nIntegrate SigNoz with Azure Event Hubs for a robust log management solution, leveraging SigNoz's log aggregation, querying, visualization, and alerting features.\\n\\n## Prerequisites\\n\\n- An active Azure subscription\\n\\n## Setup\\n\\n### 1. Create an Event Hubs Namespace\\n\\n1. In the [Azure portal](https://portal.azure.com), create an Event Hubs namespace.\\n2. Fill in the required details:\\n    - **Resource group**: Choose or create a new one.\\n    - **Namespace name**: Enter a unique name, e.g., `<orgName>-obs-signoz`.\\n    - **Pricing tier**: Based on your logging requirements.\\n    - **Region**: Should match the region of the resources you want to monitor.\\n    - **Throughput units**: Choose based on logging needs.\\n3. Click \\\"Review + create\\\" and then \\\"Create\\\".\\n\\n### 2. Create an Event Hub\\n\\n1. Navigate to the Event Hubs namespace you created in the Azure portal.\\n2. Click \\\"+ Event Hub\\\" to create a new event hub.\\n3. Enter a name, e.g., `logs`and click \\\"Create\\\"\\n\\n### 3. Create a SAS Policy and Copy Connection String\\n\\n1. Navigate to the Event Hub in the Azure portal.\\n2. Click \\\"Shared access policies\\\" in the left menu.\\n3. Click \\\"Add\\\" to create a new policy named `signozListen`.\\n4. Select the \\\"Listen\\\" permission and set the expiration time.\\n5. Click \\\"Save\\\".\\n6. Copy the *Connection string–primary key*.\\n\\n<!-- ### 4. Configure OpenTelemetry Integration\\n\\n1. Add a new receiver to [Central Collector Setup](../collector-setup).\\n2. Configure the receiver with the Event Hubs namespace connection string and the event hub name.\\n\\n### 5. Stream Logs to Event Hubs\\n\\n1. Configure Azure services' diagnostic settings to forward logs to the Event Hub.\\n2. Ensure logs are in [Azure Common Log Format](https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-schema).\\n3. Verify logs are streaming to Event Hubs and received by SigNoz.\\n\\nFor detailed instructions, refer to the Azure documentation: [Azure Event Hub](https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-create). -->\\n\\n<!-- For more configuration options, see the [OpenTelemetry Documentation](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/azureeventhubreceiver). -->\\n\\n\\n\";","export default \"Set up the OpenTelemetry Collector on a Virtual Machine (VM). The setup is compatible with cloud VM instances, your own data center, or even a local VM on your development machine. Here's how to do it:\\n\\n\\n## Download and Install the OpenTelemetry Collector Binary\\n\\nPlease visit [Documentation For VM](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) which  provides further guidance on a VM installation. \\n\\n&nbsp;\\n\\n## Configure OpenTelemetry Collector\\n\\nWhile following the documentation above for installing the OpenTelemetry Collector Binary, you must have created `config.yaml` file. Replace the content of the `config.yaml` with the below config file which includes the **Azure Monitor receiver**.\\n\\n```yaml\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  azureeventhub:\\n    connection: <Primary Connection String>\\n    format: \\\"azure\\\"\\n    apply_semantic_conventions: true\\n  azuremonitor:\\n    subscription_id: \\\"<Subscription ID>\\\"\\n    tenant_id: \\\"<AD Tenant ID>\\\"\\n    client_id: \\\"<Client ID>\\\"\\n    client_secret: \\\"<Client Secret>\\\"\\n    resource_groups: [\\\"<rg-1>\\\"]\\n    collection_interval: 60s\\nprocessors:\\n  batch: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\nservice:\\n  pipelines:\\n    metrics/am:\\n      receivers: [azuremonitor]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, azureeventhub]\\n      processors: [batch]\\n      exporters: [otlp]\\n\\n```\\n**NOTE:** \\nReplace the `<Primary Connection String>` in the config file with the primary connection string for your Event Hub that you created in the previous section. It would look something like this:\\n\\n```bash\\nEndpoint=sb://namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=superSecret1234=;EntityPath=hubName\\n```\\n\\n&nbsp;\\n\\n## Azure Monitor Receiver Configuration\\n\\nYou will need to set up a [service principal](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal) with Read permissions to receive data from Azure Monitor.\\n\\n1. Follow the steps in the [Create a service principal Azure Doc](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#register-an-application-with-microsoft-entra-id-and-create-a-service-principal) documentation to create a service principal. \\nYou can name it `signoz-central-collector-app` the redirect URI can be empty.\\n\\n2. To add read permissions to Azure Monitor, Follow the [Assign Role](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#assign-a-role-to-the-application) documentation. The read access can be given to the full subscription.\\n\\n3. There are multiple ways to authenticate the service principal, we will use the client secret option, follow [Creating a client secret](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#option-3-create-a-new-client-secret) and don't forget to copy the client secret. The secret is used in the configuration file as `client_secret`.\\n\\n4. To find `client_id` and `tenant_id`, go to the [Azure Portal](https://portal.azure.com/) and search for the `Application` you created. You would see the `Application (client) ID` and `Directory (tenant) ID` in the Overview section.\\n\\n5. To find `subscription_id`, follow steps in [Find Your Subscription](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription) and populate them in the configuration file.\\n\\n**NOTE:**\\nBy following the above steps, you will get the values for `<Subscription ID>`, `<AD Tenant ID>`, `<Client ID>` and `<Client Secret>` which you need to fill in the `config.yaml` file.\\n\\n&nbsp;\\n\\n## Run the Collector\\n    \\nWith your configuration file ready, you can now start the Collector using the following command:\\n\\n```bash\\n# Runs in background with the configuration we just created\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid \\n```\\n\\n&nbsp;\\n\\n### Open Ports\\n    \\nYou will need to open the following ports on your Azure VM:\\n- 4317 for gRPC\\n- 4318 for HTTP\\n\\nYou can do this by navigating to the Azure VM's Networking section and adding a new inbound rule for the ports.\\n    \\n&nbsp;\\n\\n### Validating the Deployment\\n    \\nOnce the Collector is running, ensure that telemetry data is being successfully sent and received. Use the logging exporter as defined in your configuration file, or check the logs for any startup errors.\\n\\n&nbsp;\\n\\n## Configure DNS label For Collector\\n\\nTo the IP address of the collector, you can add a DNS label to the Public IP address. This will make it easier to refer to the centralized collector from other services. You can do this by following these steps:\\n\\n1. Go to the Public IP address of the collector. This would be the IP address of the VM or Load Balancer in case of Kubernetes or Load Balanced collector.\\n2. Click on the \\\"Configuration\\\" tab.\\n3. Enter the DNS label you want to use for the collector.\\n4. Click on \\\"Save\\\".\\n    \\n**NOTE:** Please take note of the DNS label you have entered. You will need this in the next steps.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/bootstrapping/collector-setup/#troubleshooting)\";","export default \"Follow these steps if you want to setup logging for your Azure Container App.\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n- EventHub Setup\\n- Central Collector Setup\\n\\n\\n## Setup\\n\\n1. Navigate to your Container Apps in the Azure portal\\n2. Click on \\\"Container Apps Environment\\\" to open the Container Apps Environment\\n3. Search for \\\"Diagnostic settings\\\" in the left navigation menu\\n4. Click on \\\"Add Diagnostic Setting\\\"\\n5. Select the desired log categories to export:\\n    - Container App console logs\\n    - Container App system logs\\n    - Spring App console logs\\n\\n\\n6. Configure the destination details as **\\\"Stream to an Event Hub\\\"** and select the Event Hub namespace and Event Hub name created during the EventHub Setup.\\n\\n7. Save the diagnostic settings\\n\\n\\nThat's it! You have successfully set up logging for your Azure Container App. \";","export default \"Follow these steps if you want to monitor System metrics like CPU Percentage, Memory Percentage etc. of your Azure Container App.\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n- Azure subscription and an Azure Container App instance running\\n- Central Collector Setup\\n\\n&nbsp;\\n\\n# Dashboard Example\\n\\nOnce you have completed the prerequisites, you can start monitoring your Azure Container App's system metrics with SigNoz. Here's how you can do it:\\n\\n1. Log in to your SigNoz account.\\n2. Navigate to the Dashboards, and [add an dashboard](https://signoz.io/docs/userguide/manage-dashboards/)\\n3. Add a Timeseries Panel\\n4. In **Metrics**, select `azure_replicas_count`  and **Avg By** select tag `name`\\n5. In Filter say `type = Microsoft.App/containerApps`\\n6. Hit “Save Changes”. You now have Memory Usage of your Container App in a Dashboard for reporting and alerting \\n\\nIn this way, you can monitor system metrics of your Azure Container App in SigNoz!\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/az-container-apps/metrics/#troubleshooting) \";","export default \"## Overview\\n\\nAzure Event Hubs is a big data streaming platform ideal for centralizing logging and real-time log streaming for applications on Azure or on-premises.\\n\\nIntegrate SigNoz with Azure Event Hubs for a robust log management solution, leveraging SigNoz's log aggregation, querying, visualization, and alerting features.\\n\\n## Prerequisites\\n\\n- An active Azure subscription\\n\\n## Setup\\n\\n### 1. Create an Event Hubs Namespace\\n\\n1. In the [Azure portal](https://portal.azure.com), create an Event Hubs namespace.\\n2. Fill in the required details:\\n    - **Resource group**: Choose or create a new one.\\n    - **Namespace name**: Enter a unique name, e.g., `<orgName>-obs-signoz`.\\n    - **Pricing tier**: Based on your logging requirements.\\n    - **Region**: Should match the region of the resources you want to monitor.\\n    - **Throughput units**: Choose based on logging needs.\\n3. Click \\\"Review + create\\\" and then \\\"Create\\\".\\n\\n### 2. Create an Event Hub\\n\\n1. Navigate to the Event Hubs namespace you created in the Azure portal.\\n2. Click \\\"+ Event Hub\\\" to create a new event hub.\\n3. Enter a name, e.g., `logs`and click \\\"Create\\\"\\n\\n### 3. Create a SAS Policy and Copy Connection String\\n\\n1. Navigate to the Event Hub in the Azure portal.\\n2. Click \\\"Shared access policies\\\" in the left menu.\\n3. Click \\\"Add\\\" to create a new policy named `signozListen`.\\n4. Select the \\\"Listen\\\" permission and set the expiration time.\\n5. Click \\\"Save\\\".\\n6. Copy the *Connection string–primary key*.\\n\\n<!-- ### 4. Configure OpenTelemetry Integration\\n\\n1. Add a new receiver to [Central Collector Setup](../collector-setup).\\n2. Configure the receiver with the Event Hubs namespace connection string and the event hub name.\\n\\n### 5. Stream Logs to Event Hubs\\n\\n1. Configure Azure services' diagnostic settings to forward logs to the Event Hub.\\n2. Ensure logs are in [Azure Common Log Format](https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-schema).\\n3. Verify logs are streaming to Event Hubs and received by SigNoz.\\n\\nFor detailed instructions, refer to the Azure documentation: [Azure Event Hub](https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-create). -->\\n\\n<!-- For more configuration options, see the [OpenTelemetry Documentation](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/azureeventhubreceiver). -->\\n\\n\\n\";","export default \"## Application level Tracing\\n\\nFor application-level tracing, you can use the OpenTelemetry SDKs integrated with your application. These SDKs will automatically collect and forward traces to the Central Collector.\\n\\n&nbsp;\\n\\nTo see how you can instrument your applications like FastAPI, NextJS, Node.js, Spring etc. you can check out the **Application Monitoring** section available at the start of this onboarding or you can checkout this [documentation](https://signoz.io/docs/instrumentation/).\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n1. **Azure Subscription & App Service**: You need an active Azure subscription with a running Azure App Service instance.\\n2. **Central Collector Setup**: Make sure you have set up the Central Collector \\n\\n&nbsp;\\n\\n## Configure the OpenTelemetry SDK\\n\\n```bash\\n# Set env vars or config file\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://<Your-Central-Collector-DNS>:4318/\\\"\\n```\\n\\nFor application-level traces, configure your application to use the DNS name of the **Central Collector** you set up earlier. This Central Collector will automatically forward the collected data to SigNoz.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/az-container-apps/tracing/#troubleshooting) \";","export default \"Set up the OpenTelemetry Collector on a Virtual Machine (VM). The setup is compatible with cloud VM instances, your own data center, or even a local VM on your development machine. Here's how to do it:\\n\\n\\n## Download and Install the OpenTelemetry Collector Binary\\n\\nPlease visit [Documentation For VM](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) which  provides further guidance on a VM installation. \\n\\n&nbsp;\\n\\n## Configure OpenTelemetry Collector\\n\\nWhile following the documentation above for installing the OpenTelemetry Collector Binary, you must have created `config.yaml` file. Replace the content of the `config.yaml` with the below config file which includes the **Azure Monitor receiver**.\\n\\n```yaml\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  azureeventhub:\\n    connection: <Primary Connection String>\\n    format: \\\"azure\\\"\\n    apply_semantic_conventions: true\\n  azuremonitor:\\n    subscription_id: \\\"<Subscription ID>\\\"\\n    tenant_id: \\\"<AD Tenant ID>\\\"\\n    client_id: \\\"<Client ID>\\\"\\n    client_secret: \\\"<Client Secret>\\\"\\n    resource_groups: [\\\"<rg-1>\\\"]\\n    collection_interval: 60s\\nprocessors:\\n  batch: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\nservice:\\n  pipelines:\\n    metrics/am:\\n      receivers: [azuremonitor]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, azureeventhub]\\n      processors: [batch]\\n      exporters: [otlp]\\n\\n```\\n**NOTE:** \\nReplace the `<Primary Connection String>` in the config file with the primary connection string for your Event Hub that you created in the previous section. It would look something like this:\\n\\n```bash\\nEndpoint=sb://namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=superSecret1234=;EntityPath=hubName\\n```\\n\\n&nbsp;\\n\\n## Azure Monitor Receiver Configuration\\n\\nYou will need to set up a [service principal](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal) with Read permissions to receive data from Azure Monitor.\\n\\n1. Follow the steps in the [Create a service principal Azure Doc](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#register-an-application-with-microsoft-entra-id-and-create-a-service-principal) documentation to create a service principal. \\nYou can name it `signoz-central-collector-app` the redirect URI can be empty.\\n\\n2. To add read permissions to Azure Monitor, Follow the [Assign Role](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#assign-a-role-to-the-application) documentation. The read access can be given to the full subscription.\\n\\n3. There are multiple ways to authenticate the service principal, we will use the client secret option, follow [Creating a client secret](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#option-3-create-a-new-client-secret) and don't forget to copy the client secret. The secret is used in the configuration file as `client_secret`.\\n\\n4. To find `client_id` and `tenant_id`, go to the [Azure Portal](https://portal.azure.com/) and search for the `Application` you created. You would see the `Application (client) ID` and `Directory (tenant) ID` in the Overview section.\\n\\n5. To find `subscription_id`, follow steps in [Find Your Subscription](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription) and populate them in the configuration file.\\n\\n**NOTE:**\\nBy following the above steps, you will get the values for `<Subscription ID>`, `<AD Tenant ID>`, `<Client ID>` and `<Client Secret>` which you need to fill in the `config.yaml` file.\\n\\n&nbsp;\\n\\n## Run the Collector\\n    \\nWith your configuration file ready, you can now start the Collector using the following command:\\n\\n```bash\\n# Runs in background with the configuration we just created\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid \\n```\\n\\n&nbsp;\\n\\n### Open Ports\\n    \\nYou will need to open the following ports on your Azure VM:\\n- 4317 for gRPC\\n- 4318 for HTTP\\n\\nYou can do this by navigating to the Azure VM's Networking section and adding a new inbound rule for the ports.\\n    \\n&nbsp;\\n\\n### Validating the Deployment\\n    \\nOnce the Collector is running, ensure that telemetry data is being successfully sent and received. Use the logging exporter as defined in your configuration file, or check the logs for any startup errors.\\n\\n&nbsp;\\n\\n## Configure DNS label For Collector\\n\\nTo the IP address of the collector, you can add a DNS label to the Public IP address. This will make it easier to refer to the centralized collector from other services. You can do this by following these steps:\\n\\n1. Go to the Public IP address of the collector. This would be the IP address of the VM or Load Balancer in case of Kubernetes or Load Balanced collector.\\n2. Click on the \\\"Configuration\\\" tab.\\n3. Enter the DNS label you want to use for the collector.\\n4. Click on \\\"Save\\\".\\n    \\n**NOTE:** Please take note of the DNS label you have entered. You will need this in the next steps.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/bootstrapping/collector-setup/#troubleshooting)\";","export default \"Follow these steps if you want to setup logging for your Azure Functions.\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n- EventHub Setup\\n- Central Collector Setup\\n\\n\\n## Setup\\n\\n1. Navigate to your Azure Function in the Azure portal\\n2. Search for \\\"Diagnostic settings\\\" in the left navigation menu\\n3. Click on \\\"Add Diagnostic Setting\\\"\\n4. Select the desired log categories to export:\\n    - Function App logs\\n5. Configure the destination details as \\\"**Stream to an Event Hub**\\\" and select the Event Hub namespace and Event Hub name created during the EventHub Setup\\n6. Save the diagnostic settings\\n\\nThat's it! You have successfully set up logging for your Azure Function.\";","export default \"Follow these steps if you want to monitor System metrics like CPU Percentage, Memory Percentage etc. of your Azure Functions.\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n- Azure subscription and an Azure Container App instance running\\n- Central Collector Setup\\n\\n&nbsp;\\n\\n## Dashboard Example\\n\\nOnce you have completed the prerequisites, you can start monitoring your Azure Function's system metrics with SigNoz. Here's how you can do it:\\n\\n1. Log in to your SigNoz account.\\n2. Navigate to the Dashboards, and add an dashboard\\n3. Add a Timeseries Panel\\n4. In *Metrics*, select `azure_requests_total`  and *Avg By* select tag `location`\\n5. In Filter say `name = <function-name>`\\n6. Hit “Save Changes” You now have Total Requests of your Azure Function in a Dashboard for reporting and alerting \\n\\n\\nThat's it! You have successfully set up monitoring for your Azure Function's system metrics with SigNoz.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/az-fns/metrics/#troubleshooting) \";","export default \"## Overview\\n\\nAzure Event Hubs is a big data streaming platform ideal for centralizing logging and real-time log streaming for applications on Azure or on-premises.\\n\\nIntegrate SigNoz with Azure Event Hubs for a robust log management solution, leveraging SigNoz's log aggregation, querying, visualization, and alerting features.\\n\\n## Prerequisites\\n\\n- An active Azure subscription\\n\\n## Setup\\n\\n### 1. Create an Event Hubs Namespace\\n\\n1. In the [Azure portal](https://portal.azure.com), create an Event Hubs namespace.\\n2. Fill in the required details:\\n    - **Resource group**: Choose or create a new one.\\n    - **Namespace name**: Enter a unique name, e.g., `<orgName>-obs-signoz`.\\n    - **Pricing tier**: Based on your logging requirements.\\n    - **Region**: Should match the region of the resources you want to monitor.\\n    - **Throughput units**: Choose based on logging needs.\\n3. Click \\\"Review + create\\\" and then \\\"Create\\\".\\n\\n### 2. Create an Event Hub\\n\\n1. Navigate to the Event Hubs namespace you created in the Azure portal.\\n2. Click \\\"+ Event Hub\\\" to create a new event hub.\\n3. Enter a name, e.g., `logs`and click \\\"Create\\\"\\n\\n### 3. Create a SAS Policy and Copy Connection String\\n\\n1. Navigate to the Event Hub in the Azure portal.\\n2. Click \\\"Shared access policies\\\" in the left menu.\\n3. Click \\\"Add\\\" to create a new policy named `signozListen`.\\n4. Select the \\\"Listen\\\" permission and set the expiration time.\\n5. Click \\\"Save\\\".\\n6. Copy the *Connection string–primary key*.\\n\\n<!-- ### 4. Configure OpenTelemetry Integration\\n\\n1. Add a new receiver to [Central Collector Setup](../collector-setup).\\n2. Configure the receiver with the Event Hubs namespace connection string and the event hub name.\\n\\n### 5. Stream Logs to Event Hubs\\n\\n1. Configure Azure services' diagnostic settings to forward logs to the Event Hub.\\n2. Ensure logs are in [Azure Common Log Format](https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-schema).\\n3. Verify logs are streaming to Event Hubs and received by SigNoz.\\n\\nFor detailed instructions, refer to the Azure documentation: [Azure Event Hub](https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-create). -->\\n\\n<!-- For more configuration options, see the [OpenTelemetry Documentation](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/azureeventhubreceiver). -->\\n\\n\\n\";","export default \"## Application level Tracing\\n\\nFor application-level tracing, you can use the OpenTelemetry SDKs integrated with your application. These SDKs will automatically collect and forward traces to the Central Collector.\\n\\n&nbsp;\\n\\nTo see how you can instrument your applications like FastAPI, NextJS, Node.js, Spring etc. you can check out the **Application Monitoring** section available at the start of this onboarding or you can checkout this [documentation](https://signoz.io/docs/instrumentation/).\\n\\n&nbsp;\\n\\n## Prerequisites\\n\\n1. **Azure Subscription & App Service**: You need an active Azure subscription with a running Azure Function App instance.\\n2. **Central Collector Setup**: Make sure you have set up the Central Collector \\n\\n&nbsp;\\n\\n## Configure the OpenTelemetry SDK\\n\\n```bash\\n# Set env vars or config file\\nexport OTEL_EXPORTER_OTLP_ENDPOINT=\\\"http://<Your-Central-Collector-DNS>:4318/\\\"\\n```\\n\\nFor application-level traces, configure your application to use the DNS name of the **Central Collector** you set up earlier. This Central Collector will automatically forward the collected data to SigNoz.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/az-fns/tracing/#troubleshooting) \";","export default \"Set up the OpenTelemetry Collector on a Virtual Machine (VM). The setup is compatible with cloud VM instances, your own data center, or even a local VM on your development machine. Here's how to do it:\\n\\n\\n## Download and Install the OpenTelemetry Collector Binary\\n\\nPlease visit [Documentation For VM](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) which  provides further guidance on a VM installation. \\n\\n&nbsp;\\n\\n## Configure OpenTelemetry Collector\\n\\nWhile following the documentation above for installing the OpenTelemetry Collector Binary, you must have created `config.yaml` file. Replace the content of the `config.yaml` with the below config file which includes the **Azure Monitor receiver**.\\n\\n```yaml\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  azureeventhub:\\n    connection: <Primary Connection String>\\n    format: \\\"azure\\\"\\n    apply_semantic_conventions: true\\n  azuremonitor:\\n    subscription_id: \\\"<Subscription ID>\\\"\\n    tenant_id: \\\"<AD Tenant ID>\\\"\\n    client_id: \\\"<Client ID>\\\"\\n    client_secret: \\\"<Client Secret>\\\"\\n    resource_groups: [\\\"<rg-1>\\\"]\\n    collection_interval: 60s\\nprocessors:\\n  batch: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\nservice:\\n  pipelines:\\n    metrics/am:\\n      receivers: [azuremonitor]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, azureeventhub]\\n      processors: [batch]\\n      exporters: [otlp]\\n\\n```\\n**NOTE:** \\nReplace the `<Primary Connection String>` in the config file with the primary connection string for your Event Hub that you created in the previous section. It would look something like this:\\n\\n```bash\\nEndpoint=sb://namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=superSecret1234=;EntityPath=hubName\\n```\\n\\n&nbsp;\\n\\n## Azure Monitor Receiver Configuration\\n\\nYou will need to set up a [service principal](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal) with Read permissions to receive data from Azure Monitor.\\n\\n1. Follow the steps in the [Create a service principal Azure Doc](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#register-an-application-with-microsoft-entra-id-and-create-a-service-principal) documentation to create a service principal. \\nYou can name it `signoz-central-collector-app` the redirect URI can be empty.\\n\\n2. To add read permissions to Azure Monitor, Follow the [Assign Role](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#assign-a-role-to-the-application) documentation. The read access can be given to the full subscription.\\n\\n3. There are multiple ways to authenticate the service principal, we will use the client secret option, follow [Creating a client secret](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#option-3-create-a-new-client-secret) and don't forget to copy the client secret. The secret is used in the configuration file as `client_secret`.\\n\\n4. To find `client_id` and `tenant_id`, go to the [Azure Portal](https://portal.azure.com/) and search for the `Application` you created. You would see the `Application (client) ID` and `Directory (tenant) ID` in the Overview section.\\n\\n5. To find `subscription_id`, follow steps in [Find Your Subscription](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription) and populate them in the configuration file.\\n\\n**NOTE:**\\nBy following the above steps, you will get the values for `<Subscription ID>`, `<AD Tenant ID>`, `<Client ID>` and `<Client Secret>` which you need to fill in the `config.yaml` file.\\n\\n&nbsp;\\n\\n## Run the Collector\\n    \\nWith your configuration file ready, you can now start the Collector using the following command:\\n\\n```bash\\n# Runs in background with the configuration we just created\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid \\n```\\n\\n&nbsp;\\n\\n### Open Ports\\n    \\nYou will need to open the following ports on your Azure VM:\\n- 4317 for gRPC\\n- 4318 for HTTP\\n\\nYou can do this by navigating to the Azure VM's Networking section and adding a new inbound rule for the ports.\\n    \\n&nbsp;\\n\\n### Validating the Deployment\\n    \\nOnce the Collector is running, ensure that telemetry data is being successfully sent and received. Use the logging exporter as defined in your configuration file, or check the logs for any startup errors.\\n\\n&nbsp;\\n\\n## Configure DNS label For Collector\\n\\nTo the IP address of the collector, you can add a DNS label to the Public IP address. This will make it easier to refer to the centralized collector from other services. You can do this by following these steps:\\n\\n1. Go to the Public IP address of the collector. This would be the IP address of the VM or Load Balancer in case of Kubernetes or Load Balanced collector.\\n2. Click on the \\\"Configuration\\\" tab.\\n3. Enter the DNS label you want to use for the collector.\\n4. Click on \\\"Save\\\".\\n    \\n**NOTE:** Please take note of the DNS label you have entered. You will need this in the next steps.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/bootstrapping/collector-setup/#troubleshooting)\";","export default \"## Prerequisite\\n\\n- Azure subscription and Database instance running\\n- Central Collector Setup\\n- [SQL monitoring profile](https://learn.microsoft.com/en-us/azure/azure-sql/database/sql-insights-enable?view=azuresql#create-sql-monitoring-profile) created to monitor the databases in Azure Monitor\\n\\n&nbsp;\\n\\n\\n## Setup\\n\\nOnce you have completed the prerequisites, you can start monitoring your Database's system metrics with SigNoz. Here's how you can do it:\\n\\n1. Log in to your SigNoz account.\\n2. Navigate to the Dashboards Section, and [add an dashboard](https://signoz.io/docs/userguide/manage-dashboards/)\\n3. Add a Timeseries Panel\\n4. In **Metrics**, select `azure_storage_maximum` and **Avg By** select tag `location`\\n5. In Filter say `name = <database-name>`\\n6. Hit “Save Changes”. You now have Memory Usage of your Database in a Dashboard for reporting and alerting \\n\\nThat's it! You have successfully set up monitoring for your Database's system metrics with SigNoz.\\n\\n&nbsp;\\n\\n**NOTE:**\\nMake sure you have created a sql monitoring profile in Azure Monitor if not, follow this guide to [Create SQL Monitoring Profile](https://learn.microsoft.com/en-us/azure/azure-sql/database/sql-insights-enable?view=azuresql#create-sql-monitoring-profile).\\nYou can monitor multiple databases in a single profile.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/db-metrics/#troubleshooting) \";","export default \"## Overview\\n\\nAzure Event Hubs is a big data streaming platform ideal for centralizing logging and real-time log streaming for applications on Azure or on-premises.\\n\\nIntegrate SigNoz with Azure Event Hubs for a robust log management solution, leveraging SigNoz's log aggregation, querying, visualization, and alerting features.\\n\\n## Prerequisites\\n\\n- An active Azure subscription\\n\\n## Setup\\n\\n### 1. Create an Event Hubs Namespace\\n\\n1. In the [Azure portal](https://portal.azure.com), create an Event Hubs namespace.\\n2. Fill in the required details:\\n    - **Resource group**: Choose or create a new one.\\n    - **Namespace name**: Enter a unique name, e.g., `<orgName>-obs-signoz`.\\n    - **Pricing tier**: Based on your logging requirements.\\n    - **Region**: Should match the region of the resources you want to monitor.\\n    - **Throughput units**: Choose based on logging needs.\\n3. Click \\\"Review + create\\\" and then \\\"Create\\\".\\n\\n### 2. Create an Event Hub\\n\\n1. Navigate to the Event Hubs namespace you created in the Azure portal.\\n2. Click \\\"+ Event Hub\\\" to create a new event hub.\\n3. Enter a name, e.g., `logs`and click \\\"Create\\\"\\n\\n### 3. Create a SAS Policy and Copy Connection String\\n\\n1. Navigate to the Event Hub in the Azure portal.\\n2. Click \\\"Shared access policies\\\" in the left menu.\\n3. Click \\\"Add\\\" to create a new policy named `signozListen`.\\n4. Select the \\\"Listen\\\" permission and set the expiration time.\\n5. Click \\\"Save\\\".\\n6. Copy the *Connection string–primary key*.\\n\\n<!-- ### 4. Configure OpenTelemetry Integration\\n\\n1. Add a new receiver to [Central Collector Setup](../collector-setup).\\n2. Configure the receiver with the Event Hubs namespace connection string and the event hub name.\\n\\n### 5. Stream Logs to Event Hubs\\n\\n1. Configure Azure services' diagnostic settings to forward logs to the Event Hub.\\n2. Ensure logs are in [Azure Common Log Format](https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-schema).\\n3. Verify logs are streaming to Event Hubs and received by SigNoz.\\n\\nFor detailed instructions, refer to the Azure documentation: [Azure Event Hub](https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-create). -->\\n\\n<!-- For more configuration options, see the [OpenTelemetry Documentation](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/azureeventhubreceiver). -->\\n\\n\\n\";","export default \"## Prerequisites\\n\\n- An Azure subscription with Azure VM and SSH access enabled\\n- Central Collector Setup\\n\\n\\n### Connect to the VM\\nThe [SSH Keys Guide](https://learn.microsoft.com/en-us/azure/virtual-machines/ssh-keys-portal#connect-to-the-vm) has steps on how to connect to your VM via SSH.\\n\\n&nbsp;\\n\\n### Install OpenTelemetry Collector\\n\\nFollow the [OpenTelemetry SigNoz documentation](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) to install the OpenTelemetry Collector. \\n\\n&nbsp;\\n\\n### Configure Collector\\n\\n We send the logs, traces and metrics to the central collector that we set up in the previous step instead of SigNoz directly, in order to adopt a scalable architecture pattern. We recommend to our users to use the same pattern in your Azure subscription.\\n\\nReplace the content of the `config.yaml` file that you created while installing the collector.\\n\\n```yaml\\nreceivers:\\n  filelog:\\n    include: [ <file paths> ] # /var/log/myservice/*.json \\n    operators:\\n      - type: json_parser\\n        timestamp:\\n          parse_from: attributes.time\\n          layout: '%Y-%m-%d %H:%M:%S'\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, azure, system] \\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [dns, os] \\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"<Central Collector DNS Name>:4318\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, filelog]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n&nbsp;\\n\\n#### OLTP Exporter Configuration\\nMake sure to replace `<Central Collector DNS Name>` with the DNS name of your central collector that you set up earlier.\\n\\n&nbsp;\\n\\n#### File Logs Receiver Configuration\\nThe file logs receiver needs to be configured with the paths to the log files that you want to stream to SigNoz. You can specify multiple paths by separating them as a array.\\n\\nYou can also specify globed path patterns to match multiple log files. For example, `/var/log/myservice/*.json` will match all log files in the `/var/log/myservice` directory with a `.json` extension.\\n\\n&nbsp;\\n\\n### Start the OpenTelemetry Collector\\n\\nOnce we are done with the above configurations, we can now run the collector service with the following command:\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n&nbsp;\\n\\n### Hostmetrics Dashboard\\n\\nOnce the collector is running, you can access the SigNoz dashboard to view the logs and metrics from your Azure VM.\\n\\nPlease refer to the [Hostmetrics Dashboard](https://signoz.io/docs/userguide/hostmetrics/) for information on how to import and use the dashboard.\\n\\n\";","export default \"Set up the OpenTelemetry Collector on a Virtual Machine (VM). The setup is compatible with cloud VM instances, your own data center, or even a local VM on your development machine. Here's how to do it:\\n\\n\\n## Download and Install the OpenTelemetry Collector Binary\\n\\nPlease visit [Documentation For VM](https://signoz.io/docs/tutorial/opentelemetry-binary-usage-in-virtual-machine/) which  provides further guidance on a VM installation. \\n\\n&nbsp;\\n\\n## Configure OpenTelemetry Collector\\n\\nWhile following the documentation above for installing the OpenTelemetry Collector Binary, you must have created `config.yaml` file. Replace the content of the `config.yaml` with the below config file which includes the **Azure Monitor receiver**.\\n\\n```yaml\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  azureeventhub:\\n    connection: <Primary Connection String>\\n    format: \\\"azure\\\"\\n    apply_semantic_conventions: true\\n  azuremonitor:\\n    subscription_id: \\\"<Subscription ID>\\\"\\n    tenant_id: \\\"<AD Tenant ID>\\\"\\n    client_id: \\\"<Client ID>\\\"\\n    client_secret: \\\"<Client Secret>\\\"\\n    resource_groups: [\\\"<rg-1>\\\"]\\n    collection_interval: 60s\\nprocessors:\\n  batch: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\nservice:\\n  pipelines:\\n    metrics/am:\\n      receivers: [azuremonitor]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, azureeventhub]\\n      processors: [batch]\\n      exporters: [otlp]\\n\\n```\\n**NOTE:** \\nReplace the `<Primary Connection String>` in the config file with the primary connection string for your Event Hub that you created in the previous section. It would look something like this:\\n\\n```bash\\nEndpoint=sb://namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=superSecret1234=;EntityPath=hubName\\n```\\n\\n&nbsp;\\n\\n## Azure Monitor Receiver Configuration\\n\\nYou will need to set up a [service principal](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal) with Read permissions to receive data from Azure Monitor.\\n\\n1. Follow the steps in the [Create a service principal Azure Doc](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#register-an-application-with-microsoft-entra-id-and-create-a-service-principal) documentation to create a service principal. \\nYou can name it `signoz-central-collector-app` the redirect URI can be empty.\\n\\n2. To add read permissions to Azure Monitor, Follow the [Assign Role](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#assign-a-role-to-the-application) documentation. The read access can be given to the full subscription.\\n\\n3. There are multiple ways to authenticate the service principal, we will use the client secret option, follow [Creating a client secret](https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-service-principal-portal#option-3-create-a-new-client-secret) and don't forget to copy the client secret. The secret is used in the configuration file as `client_secret`.\\n\\n4. To find `client_id` and `tenant_id`, go to the [Azure Portal](https://portal.azure.com/) and search for the `Application` you created. You would see the `Application (client) ID` and `Directory (tenant) ID` in the Overview section.\\n\\n5. To find `subscription_id`, follow steps in [Find Your Subscription](https://learn.microsoft.com/en-us/azure/azure-portal/get-subscription-tenant-id#find-your-azure-subscription) and populate them in the configuration file.\\n\\n**NOTE:**\\nBy following the above steps, you will get the values for `<Subscription ID>`, `<AD Tenant ID>`, `<Client ID>` and `<Client Secret>` which you need to fill in the `config.yaml` file.\\n\\n&nbsp;\\n\\n## Run the Collector\\n    \\nWith your configuration file ready, you can now start the Collector using the following command:\\n\\n```bash\\n# Runs in background with the configuration we just created\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid \\n```\\n\\n&nbsp;\\n\\n### Open Ports\\n    \\nYou will need to open the following ports on your Azure VM:\\n- 4317 for gRPC\\n- 4318 for HTTP\\n\\nYou can do this by navigating to the Azure VM's Networking section and adding a new inbound rule for the ports.\\n    \\n&nbsp;\\n\\n### Validating the Deployment\\n    \\nOnce the Collector is running, ensure that telemetry data is being successfully sent and received. Use the logging exporter as defined in your configuration file, or check the logs for any startup errors.\\n\\n&nbsp;\\n\\n## Configure DNS label For Collector\\n\\nTo the IP address of the collector, you can add a DNS label to the Public IP address. This will make it easier to refer to the centralized collector from other services. You can do this by following these steps:\\n\\n1. Go to the Public IP address of the collector. This would be the IP address of the VM or Load Balancer in case of Kubernetes or Load Balanced collector.\\n2. Click on the \\\"Configuration\\\" tab.\\n3. Enter the DNS label you want to use for the collector.\\n4. Click on \\\"Save\\\".\\n    \\n**NOTE:** Please take note of the DNS label you have entered. You will need this in the next steps.\\n\\n&nbsp;\\n\\nIf you encounter any difficulties, please refer to this [troubleshooting section](https://signoz.io/docs/azure-monitoring/bootstrapping/collector-setup/#troubleshooting)\";","export default \"## Overview\\n\\nAzure Event Hubs is a big data streaming platform ideal for centralizing logging and real-time log streaming for applications on Azure or on-premises.\\n\\nIntegrate SigNoz with Azure Event Hubs for a robust log management solution, leveraging SigNoz's log aggregation, querying, visualization, and alerting features.\\n\\n## Prerequisites\\n\\n- An active Azure subscription\\n\\n## Setup\\n\\n### 1. Create an Event Hubs Namespace\\n\\n1. In the [Azure portal](https://portal.azure.com), create an Event Hubs namespace.\\n2. Fill in the required details:\\n    - **Resource group**: Choose or create a new one.\\n    - **Namespace name**: Enter a unique name, e.g., `<orgName>-obs-signoz`.\\n    - **Pricing tier**: Based on your logging requirements.\\n    - **Region**: Should match the region of the resources you want to monitor.\\n    - **Throughput units**: Choose based on logging needs.\\n3. Click \\\"Review + create\\\" and then \\\"Create\\\".\\n\\n### 2. Create an Event Hub\\n\\n1. Navigate to the Event Hubs namespace you created in the Azure portal.\\n2. Click \\\"+ Event Hub\\\" to create a new event hub.\\n3. Enter a name, e.g., `logs`and click \\\"Create\\\"\\n\\n### 3. Create a SAS Policy and Copy Connection String\\n\\n1. Navigate to the Event Hub in the Azure portal.\\n2. Click \\\"Shared access policies\\\" in the left menu.\\n3. Click \\\"Add\\\" to create a new policy named `signozListen`.\\n4. Select the \\\"Listen\\\" permission and set the expiration time.\\n5. Click \\\"Save\\\".\\n6. Copy the *Connection string–primary key*.\\n\\n<!-- ### 4. Configure OpenTelemetry Integration\\n\\n1. Add a new receiver to [Central Collector Setup](../collector-setup).\\n2. Configure the receiver with the Event Hubs namespace connection string and the event hub name.\\n\\n### 5. Stream Logs to Event Hubs\\n\\n1. Configure Azure services' diagnostic settings to forward logs to the Event Hub.\\n2. Ensure logs are in [Azure Common Log Format](https://learn.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-schema).\\n3. Verify logs are streaming to Event Hubs and received by SigNoz.\\n\\nFor detailed instructions, refer to the Azure documentation: [Azure Event Hub](https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-create). -->\\n\\n<!-- For more configuration options, see the [OpenTelemetry Documentation](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/azureeventhubreceiver). -->\\n\\n\\n\";","export default \"### Step 1: Download/Copy this hostmetrics JSON file\\n\\nDownload/Copy the `hostmetrics.json` from [here](https://github.com/SigNoz/dashboards/blob/main/hostmetrics/hostmetrics.json)\\n\\n\\n### Step 2: Import hostmetrics JSON file to SigNoz Cloud\\n\\nOnce you click on the **`Done`** button at the bottom right corner, you'll be taken to the SigNoz UI.\\n\\nIn SigNoZ UI, go to dashboards section and click New Dashboard button and select the import JSON option and upload/paste the `hostmetrics-with-variables.json` file data that you downloaded/copied in last step.\\n\\n\\nTo know more detailed instructions, checkout the link [here](https://signoz.io/docs/userguide/hostmetrics/)\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Step 1: Download/Copy this hostmetrics JSON file\\n\\nDownload/Copy the `hostmetrics.json` from [here](https://github.com/SigNoz/dashboards/blob/main/hostmetrics/hostmetrics.json)\\n\\n\\n### Step 2: Import hostmetrics JSON file to SigNoz Cloud\\n\\nOnce you click on the **`Done`** button at the bottom right corner, you'll be taken to the SigNoz UI.\\n\\nIn SigNoZ UI, go to dashboards section and click New Dashboard button and select the import JSON option and upload/paste the `hostmetrics-with-variables.json` file data that you downloaded/copied in last step.\\n\\n\\nTo know more detailed instructions, checkout the link [here](https://signoz.io/docs/userguide/hostmetrics/)\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Step 1: Download/Copy this hostmetrics JSON file\\n\\nDownload/Copy the `hostmetrics.json` from [here](https://github.com/SigNoz/dashboards/blob/main/hostmetrics/hostmetrics.json)\\n\\n\\n### Step 2: Import hostmetrics JSON file to SigNoz Cloud\\n\\nOnce you click on the **`Done`** button at the bottom right corner, you'll be taken to the SigNoz UI.\\n\\nIn SigNoZ UI, go to dashboards section and click New Dashboard button and select the import JSON option and upload/paste the `hostmetrics-with-variables.json` file data that you downloaded/copied in last step.\\n\\n\\nTo know more detailed instructions, checkout the link [here](https://signoz.io/docs/userguide/hostmetrics/)\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Step 1: Download/Copy this hostmetrics JSON file\\n\\nDownload/Copy the `hostmetrics.json` from [here](https://github.com/SigNoz/dashboards/blob/main/hostmetrics/hostmetrics.json)\\n\\n\\n### Step 2: Import hostmetrics JSON file to SigNoz Cloud\\n\\nOnce you click on the **`Done`** button at the bottom right corner, you'll be taken to the SigNoz UI.\\n\\nIn SigNoZ UI, go to dashboards section and click New Dashboard button and select the import JSON option and upload/paste the `hostmetrics-with-variables.json` file data that you downloaded/copied in last step.\\n\\n\\nTo know more detailed instructions, checkout the link [here](https://signoz.io/docs/userguide/hostmetrics/)\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Plot Metrics in SigNoz Cloud\\n\\nYou can follow the instructions [here](https://signoz.io/docs/tutorial/kubernetes-infra-metrics/#plot-metrics-in-signoz-ui) to create a metrics dashboard to see you metrics.\\n\\n\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"# Enable a specific metrics Receiver\\n\\nSigNoz supports all the receivers that are listed in the [opentelemetry-collector-contrib](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver) GitHub repository. To configure a new metric receiver, you must edit the **`receivers`** and **`service::pipelines`** sections of the **`config.yaml`** file that you created in the previous step.\\n\\nTo enable a new OpenTelemetry receiver, follow the steps below:\\n#### 1. Open the `config.yaml` file in a plain-text editor.\\n#### 2. Configure your receivers. The following example shows how you can enable a `rabbitmq` receiver:\\n```bash\\nreceivers:\\n otlp:\\n  protocols:\\n   grpc:\\n    endpoint: localhost:4317\\n   http:\\n    endpoint: localhost:4318\\n hostmetrics:\\n  collection_interval: 30s\\n  scrapers:\\n   cpu: {}\\n   disk: {}\\n   load: {}\\n   filesystem: {}\\n   memory: {}\\n   network: {}\\n   paging: {}\\n   process:\\n    mute_process_name_error: true\\n   processes: {}\\n rabbitmq:\\n  endpoint: http://localhost:15672\\n  username: <RABBITMQ_USERNAME>\\n  password: <RABBITMQ_PASSWORD>\\n  collection_interval: 10s\\nprocessors:\\n batch:\\n  send_batch_size: 1000\\n  timeout: 10s\\n # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n resourcedetection:\\n  detectors: [env, system, ec2] # include ec2 for AWS, gce for GCP and azure for Azure.\\n  # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n  timeout: 2s\\n  override: false\\n  system:\\n   hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nexporters:\\n otlp:\\n  endpoint: 'ingest.{{REGION}}.signoz.cloud:443' # replace {region} with your region\\n  tls:\\n   insecure: false\\n  headers:\\n   'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}'\\n logging:\\n  loglevel: debug\\nservice:\\n telemetry:\\n  metrics:\\n   address: localhost:8888\\n pipelines:\\n  metrics:\\n   receivers: [otlp, rabbitmq]\\n   processors: [batch]\\n   exporters: [otlp]\\n  metrics/hostmetrics:\\n   receivers: [hostmetrics]\\n   processors: [resourcedetection, batch]\\n   exporters: [otlp]\\n```\\nFor details about configuring OpenTelemetry receivers, see the [README](https://github.com/open-telemetry/opentelemetry-collector/blob/main/receiver/README.md) page of the opentelemetry-collector GitHub repository.\\n\\n# Enable Prometheus Receiver\\n\\nSigNoz supports all the exporters that are listed on the [Exporters and Integrations](https://prometheus.io/docs/instrumenting/exporters/) page of the Prometheus documentation. If you have a running Prometheus instance, and you expose metrics in Prometheus, then you can scrape them in SigNoz by configuring Prometheus receivers in the **`receivers::prometheus::config::scrape_configs`** section of the **`config.yaml`** file you created in the previous step.\\n\\nTo enable a Prometheus receiver, follow the steps below:\\n\\n#### 1. Open the `config.yaml` file in a plain-text editor.\\n#### 2. Enable a new Prometheus receiver. Depending on your use case, there are two ways in which you can enable a new Prometheus exporter:\\n- **By creating a new job**: The following example shows how you can enable a Prometheus receiver by creating a new job named **`my-new-job`**.\\n```bash\\n\\n...\\n  # Data sources: metrics\\n  prometheus:\\n    config:\\n      scrape_configs:\\n        - job_name: \\\"otel-collector\\\"\\n          scrape_interval: 30s\\n          static_configs:\\n            - targets: [\\\"otel-collector:8889\\\"]\\n        - job_name: \\\"my-new-job\\\"\\n          scrape_interval: 30s\\n          static_configs:\\n            - targets: [\\\"localhost:8080\\\"]\\n  ...\\n# This file was truncated for brevity.\\n```\\n**Note:**\\n- All the jobs are scraped in parallel, and all targets inside a job are scraped serially. For more details about configuring jobs and targets, see the  \\n[<Scrape_config>](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config) and [Jobs and Instances](https://prometheus.io/docs/concepts/jobs_instances/) sections of the Prometheus documentation.\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"# Enable a specific metrics Receiver\\n\\nSigNoz supports all the receivers that are listed in the [opentelemetry-collector-contrib](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver) GitHub repository. To configure a new metric receiver, you must edit the **`receivers`** and **`service::pipelines`** sections of the **`config.yaml`** file that you created in the previous step.\\n\\nTo enable a new OpenTelemetry receiver, follow the steps below:\\n#### 1. Open the `config.yaml` file in a plain-text editor.\\n#### 2. Configure your receivers. The following example shows how you can enable a `rabbitmq` receiver:\\n```bash\\nreceivers:\\n otlp:\\n  protocols:\\n   grpc:\\n    endpoint: localhost:4317\\n   http:\\n    endpoint: localhost:4318\\n hostmetrics:\\n  collection_interval: 30s\\n  scrapers:\\n   cpu: {}\\n   disk: {}\\n   load: {}\\n   filesystem: {}\\n   memory: {}\\n   network: {}\\n   paging: {}\\n   process:\\n    mute_process_name_error: true\\n   processes: {}\\n rabbitmq:\\n  endpoint: http://localhost:15672\\n  username: <RABBITMQ_USERNAME>\\n  password: <RABBITMQ_PASSWORD>\\n  collection_interval: 10s\\nprocessors:\\n batch:\\n  send_batch_size: 1000\\n  timeout: 10s\\n # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n resourcedetection:\\n  detectors: [env, system, ec2] # include ec2 for AWS, gce for GCP and azure for Azure.\\n  # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n  timeout: 2s\\n  override: false\\n  system:\\n   hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nexporters:\\n otlp:\\n  endpoint: 'ingest.{{REGION}}.signoz.cloud:443' # replace {region} with your region\\n  tls:\\n   insecure: false\\n  headers:\\n   'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}'\\n logging:\\n  loglevel: debug\\nservice:\\n telemetry:\\n  metrics:\\n   address: localhost:8888\\n pipelines:\\n  metrics:\\n   receivers: [otlp, rabbitmq]\\n   processors: [batch]\\n   exporters: [otlp]\\n  metrics/hostmetrics:\\n   receivers: [hostmetrics]\\n   processors: [resourcedetection, batch]\\n   exporters: [otlp]\\n```\\nFor details about configuring OpenTelemetry receivers, see the [README](https://github.com/open-telemetry/opentelemetry-collector/blob/main/receiver/README.md) page of the opentelemetry-collector GitHub repository.\\n\\n# Enable Prometheus Receiver\\n\\nSigNoz supports all the exporters that are listed on the [Exporters and Integrations](https://prometheus.io/docs/instrumenting/exporters/) page of the Prometheus documentation. If you have a running Prometheus instance, and you expose metrics in Prometheus, then you can scrape them in SigNoz by configuring Prometheus receivers in the **`receivers::prometheus::config::scrape_configs`** section of the **`config.yaml`** file you created in the previous step.\\n\\nTo enable a Prometheus receiver, follow the steps below:\\n\\n#### 1. Open the `config.yaml` file in a plain-text editor.\\n#### 2. Enable a new Prometheus receiver. Depending on your use case, there are two ways in which you can enable a new Prometheus exporter:\\n- **By creating a new job**: The following example shows how you can enable a Prometheus receiver by creating a new job named **`my-new-job`**.\\n```bash\\n\\n...\\n  # Data sources: metrics\\n  prometheus:\\n    config:\\n      scrape_configs:\\n        - job_name: \\\"otel-collector\\\"\\n          scrape_interval: 30s\\n          static_configs:\\n            - targets: [\\\"otel-collector:8889\\\"]\\n        - job_name: \\\"my-new-job\\\"\\n          scrape_interval: 30s\\n          static_configs:\\n            - targets: [\\\"localhost:8080\\\"]\\n  ...\\n# This file was truncated for brevity.\\n```\\n**Note:**\\n- All the jobs are scraped in parallel, and all targets inside a job are scraped serially. For more details about configuring jobs and targets, see the  \\n[<Scrape_config>](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config) and [Jobs and Instances](https://prometheus.io/docs/concepts/jobs_instances/) sections of the Prometheus documentation.\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"# Enable a specific metrics Receiver\\n\\nSigNoz supports all the receivers that are listed in the [opentelemetry-collector-contrib](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver) GitHub repository. To configure a new metric receiver, you must edit the **`receivers`** and **`service::pipelines`** sections of the **`config.yaml`** file that you created in the previous step.\\n\\nTo enable a new OpenTelemetry receiver, follow the steps below:\\n#### 1. Open the `config.yaml` file in a plain-text editor.\\n#### 2. Configure your receivers. The following example shows how you can enable a `rabbitmq` receiver:\\n```bash\\nreceivers:\\n otlp:\\n  protocols:\\n   grpc:\\n    endpoint: localhost:4317\\n   http:\\n    endpoint: localhost:4318\\n hostmetrics:\\n  collection_interval: 30s\\n  scrapers:\\n   cpu: {}\\n   disk: {}\\n   load: {}\\n   filesystem: {}\\n   memory: {}\\n   network: {}\\n   paging: {}\\n   process:\\n    mute_process_name_error: true\\n   processes: {}\\n rabbitmq:\\n  endpoint: http://localhost:15672\\n  username: <RABBITMQ_USERNAME>\\n  password: <RABBITMQ_PASSWORD>\\n  collection_interval: 10s\\nprocessors:\\n batch:\\n  send_batch_size: 1000\\n  timeout: 10s\\n # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n resourcedetection:\\n  detectors: [env, system, ec2] # include ec2 for AWS, gce for GCP and azure for Azure.\\n  # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n  timeout: 2s\\n  override: false\\n  system:\\n   hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nexporters:\\n otlp:\\n  endpoint: 'ingest.{{REGION}}.signoz.cloud:443' # replace {region} with your region\\n  tls:\\n   insecure: false\\n  headers:\\n   'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}'\\n logging:\\n  loglevel: debug\\nservice:\\n telemetry:\\n  metrics:\\n   address: localhost:8888\\n pipelines:\\n  metrics:\\n   receivers: [otlp, rabbitmq]\\n   processors: [batch]\\n   exporters: [otlp]\\n  metrics/hostmetrics:\\n   receivers: [hostmetrics]\\n   processors: [resourcedetection, batch]\\n   exporters: [otlp]\\n```\\nFor details about configuring OpenTelemetry receivers, see the [README](https://github.com/open-telemetry/opentelemetry-collector/blob/main/receiver/README.md) page of the opentelemetry-collector GitHub repository.\\n\\n# Enable Prometheus Receiver\\n\\nSigNoz supports all the exporters that are listed on the [Exporters and Integrations](https://prometheus.io/docs/instrumenting/exporters/) page of the Prometheus documentation. If you have a running Prometheus instance, and you expose metrics in Prometheus, then you can scrape them in SigNoz by configuring Prometheus receivers in the **`receivers::prometheus::config::scrape_configs`** section of the **`config.yaml`** file you created in the previous step.\\n\\nTo enable a Prometheus receiver, follow the steps below:\\n\\n#### 1. Open the `config.yaml` file in a plain-text editor.\\n#### 2. Enable a new Prometheus receiver. Depending on your use case, there are two ways in which you can enable a new Prometheus exporter:\\n- **By creating a new job**: The following example shows how you can enable a Prometheus receiver by creating a new job named **`my-new-job`**.\\n```bash\\n\\n...\\n  # Data sources: metrics\\n  prometheus:\\n    config:\\n      scrape_configs:\\n        - job_name: \\\"otel-collector\\\"\\n          scrape_interval: 30s\\n          static_configs:\\n            - targets: [\\\"otel-collector:8889\\\"]\\n        - job_name: \\\"my-new-job\\\"\\n          scrape_interval: 30s\\n          static_configs:\\n            - targets: [\\\"localhost:8080\\\"]\\n  ...\\n# This file was truncated for brevity.\\n```\\n**Note:**\\n- All the jobs are scraped in parallel, and all targets inside a job are scraped serially. For more details about configuring jobs and targets, see the  \\n[<Scrape_config>](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config) and [Jobs and Instances](https://prometheus.io/docs/concepts/jobs_instances/) sections of the Prometheus documentation.\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"# Enable a specific metrics Receiver\\n\\nSigNoz supports all the receivers that are listed in the [opentelemetry-collector-contrib](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver) GitHub repository. To configure a new metric receiver, you must edit the **`receivers`** and **`service::pipelines`** sections of the **`config.yaml`** file that you created in the previous step.\\n\\nTo enable a new OpenTelemetry receiver, follow the steps below:\\n#### 1. Open the `config.yaml` file in a plain-text editor.\\n#### 2. Configure your receivers. The following example shows how you can enable a `rabbitmq` receiver:\\n```bash\\nreceivers:\\n otlp:\\n  protocols:\\n   grpc:\\n    endpoint: localhost:4317\\n   http:\\n    endpoint: localhost:4318\\n hostmetrics:\\n  collection_interval: 30s\\n  scrapers:\\n   cpu: {}\\n   disk: {}\\n   load: {}\\n   filesystem: {}\\n   memory: {}\\n   network: {}\\n   paging: {}\\n   process:\\n    mute_process_name_error: true\\n   processes: {}\\n rabbitmq:\\n  endpoint: http://localhost:15672\\n  username: <RABBITMQ_USERNAME>\\n  password: <RABBITMQ_PASSWORD>\\n  collection_interval: 10s\\nprocessors:\\n batch:\\n  send_batch_size: 1000\\n  timeout: 10s\\n # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n resourcedetection:\\n  detectors: [env, system, ec2] # include ec2 for AWS, gce for GCP and azure for Azure.\\n  # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n  timeout: 2s\\n  override: false\\n  system:\\n   hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nexporters:\\n otlp:\\n  endpoint: 'ingest.{{REGION}}.signoz.cloud:443' # replace {region} with your region\\n  tls:\\n   insecure: false\\n  headers:\\n   'signoz-ingestion-key': '{{SIGNOZ_INGESTION_KEY}}'\\n logging:\\n  loglevel: debug\\nservice:\\n telemetry:\\n  metrics:\\n   address: localhost:8888\\n pipelines:\\n  metrics:\\n   receivers: [otlp, rabbitmq]\\n   processors: [batch]\\n   exporters: [otlp]\\n  metrics/hostmetrics:\\n   receivers: [hostmetrics]\\n   processors: [resourcedetection, batch]\\n   exporters: [otlp]\\n```\\nFor details about configuring OpenTelemetry receivers, see the [README](https://github.com/open-telemetry/opentelemetry-collector/blob/main/receiver/README.md) page of the opentelemetry-collector GitHub repository.\\n\\n# Enable Prometheus Receiver\\n\\nSigNoz supports all the exporters that are listed on the [Exporters and Integrations](https://prometheus.io/docs/instrumenting/exporters/) page of the Prometheus documentation. If you have a running Prometheus instance, and you expose metrics in Prometheus, then you can scrape them in SigNoz by configuring Prometheus receivers in the **`receivers::prometheus::config::scrape_configs`** section of the **`config.yaml`** file you created in the previous step.\\n\\nTo enable a Prometheus receiver, follow the steps below:\\n\\n#### 1. Open the `config.yaml` file in a plain-text editor.\\n#### 2. Enable a new Prometheus receiver. Depending on your use case, there are two ways in which you can enable a new Prometheus exporter:\\n- **By creating a new job**: The following example shows how you can enable a Prometheus receiver by creating a new job named **`my-new-job`**.\\n```bash\\n\\n...\\n  # Data sources: metrics\\n  prometheus:\\n    config:\\n      scrape_configs:\\n        - job_name: \\\"otel-collector\\\"\\n          scrape_interval: 30s\\n          static_configs:\\n            - targets: [\\\"otel-collector:8889\\\"]\\n        - job_name: \\\"my-new-job\\\"\\n          scrape_interval: 30s\\n          static_configs:\\n            - targets: [\\\"localhost:8080\\\"]\\n  ...\\n# This file was truncated for brevity.\\n```\\n**Note:**\\n- All the jobs are scraped in parallel, and all targets inside a job are scraped serially. For more details about configuring jobs and targets, see the  \\n[<Scrape_config>](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config) and [Jobs and Instances](https://prometheus.io/docs/concepts/jobs_instances/) sections of the Prometheus documentation.\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Step 1: Add filelog receiver to `config.yaml` file of otel collector\\n\\nAdd the filelog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  ...\\n  filelog/app:\\n    include: [ /tmp/app.log ]\\n    start_at: end\\n...\\n```\\nReplace `/tmp/app.log` with the path to your log file.\\n\\nNote: change the `start_at` value to `beginning` if you want to read the log file from the beginning. It may be useful if you want to send old logs to SigNoz. The log records older than the standard log retention period (default 15 days) will be discarded.\\n\\nFor more configurations that are available for filelog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver).\\n\\n### Step 2: Include filelog receiver in the Pipeline\\nWe will modify our pipeline inside `config.yaml` to include the receiver we have created above.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, filelog/app]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contirb` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add filelog receiver to `config.yaml` file of otel collector\\n\\nAdd the filelog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  ...\\n  filelog/app:\\n    include: [ /tmp/app.log ]\\n    start_at: end\\n...\\n```\\nReplace `/tmp/app.log` with the path to your log file.\\n\\nNote: change the `start_at` value to `beginning` if you want to read the log file from the beginning. It may be useful if you want to send old logs to SigNoz. The log records older than the standard log retention period (default 15 days) will be discarded.\\n\\nFor more configurations that are available for filelog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver).\\n\\n### Step 2: Include filelog receiver in the Pipeline\\nWe will modify our pipeline inside `config.yaml` to include the receiver we have created above.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, filelog/app]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contirb` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add filelog receiver to `config.yaml` file of otel collector\\n\\nAdd the filelog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  ...\\n  filelog/app:\\n    include: [ /tmp/app.log ]\\n    start_at: end\\n...\\n```\\nReplace `/tmp/app.log` with the path to your log file.\\n\\nNote: change the `start_at` value to `beginning` if you want to read the log file from the beginning. It may be useful if you want to send old logs to SigNoz. The log records older than the standard log retention period (default 15 days) will be discarded.\\n\\nFor more configurations that are available for filelog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver).\\n\\n### Step 2: Include filelog receiver in the Pipeline\\nWe will modify our pipeline inside `config.yaml` to include the receiver we have created above.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, filelog/app]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contirb` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add filelog receiver to `config.yaml` file of otel collector\\n\\nAdd the filelog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  ...\\n  filelog/app:\\n    include: [ /tmp/app.log ]\\n    start_at: end\\n...\\n```\\nReplace `/tmp/app.log` with the path to your log file.\\n\\nNote: change the `start_at` value to `beginning` if you want to read the log file from the beginning. It may be useful if you want to send old logs to SigNoz. The log records older than the standard log retention period (default 15 days) will be discarded.\\n\\nFor more configurations that are available for filelog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver).\\n\\n### Step 2: Include filelog receiver in the Pipeline\\nWe will modify our pipeline inside `config.yaml` to include the receiver we have created above.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, filelog/app]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contirb` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Configure AWS\\n\\nCreate a `~/.aws/credentials` file in the machine which should have `aws_access_key_id` and the `aws_secret_access_key` in the default section of credentials file.\\n\\nAn example credential file would look like this:\\n```bash\\n[default]\\naws_access_key_id=AKIAIOSFODNN7EXAMPLE\\naws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\\n\\n[user1]\\naws_access_key_id=AKIAI44QH8DHBEXAMPLE\\naws_secret_access_key=je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY\\n```\\n\\n**Note:** Replace the `aws_access_key_id`, `aws_secret_access_key`, `aws_access_key_id` and `aws_secret_access_key` with your credential values.\\n\\n&nbsp;\\n\\nThe account corresponding to these credentials should have the **below-mentioned AWS Identity and Access Management (IAM)** policy. This allows describing and filtering log events across all log groups of that particular AWS account, a crucial step for forwarding CloudWatch logs to SigNoz.\\n\\n```bash\\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Sid\\\": \\\"VisualEditor0\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"logs:DescribeLogGroups\\\",\\n                \\\"logs:FilterLogEvents\\\"\\n            ],\\n            \\\"Resource\\\": \\\"arn:aws:logs:*:090340947446:log-group:*\\\"\\n        }\\n    ]\\n}\\n```\\n\\n**Important Note:** Make sure you have AWS configured on the machine where otel-collector is running.\";","export default \"### Configure awscloudwatch receiver\\n\\nAdd the `awscloudwatch` receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the Setup Otel Collector Step.\\n\\n&nbsp;\\n\\nYou can configure your receiver to collect logs with different conditions. \\n\\n&nbsp;\\n\\nHere are two sample configurations: \\n\\n- This configuration below will do autodiscovery and collect 100 log groups starting with prefix application.\\n\\n```bash\\n\\nreceivers:\\n...\\n    awscloudwatch:\\n        region: us-east-1\\n        logs:\\n          poll_interval: 1m\\n          groups:\\n            autodiscover:\\n              limit: 100\\n              prefix: application\\n...\\n\\n```\\n\\n- This configuration below will not do autodiscovery and specifies the names of the log groups to collect.\\n```bash\\nreceivers:\\n...\\nawscloudwatch:\\n  profile: 'my-profile'\\n  region: us-west-1\\n  logs:\\n    poll_interval: 5m\\n    groups:\\n      named:\\n        /aws/eks/dev-0/cluster:\\n\\n...\\n```\\n\\n&nbsp;\\n\\nTo know more about the different parameters of awscloudwatch receiver, and see more sample configuration, checkout this [GitHub link](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awscloudwatchreceiver)\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\\n\";","export default \"### Send logs to SigNoz\\n\\nTo test out the receiver, create a pipeline in the pipeline section of the `config.yaml` of the **`otecol-contrib`** directory that you created in the Setup Otel Collector Step.\\n\\n```bash\\n...\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, awscloudwatch]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n&nbsp;\\n\\n### Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory :\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml \\n```\\n\\nYou should be able to see your Cloudwatch logs in the logs tabs of SigNoz Cloud UI.\\n\\n\\n\\n\";","export default \"### Configure AWS\\n\\nCreate a `~/.aws/credentials` file in the machine which should have `aws_access_key_id` and the `aws_secret_access_key` in the default section of credentials file.\\n\\nAn example credential file would look like this:\\n```bash\\n[default]\\naws_access_key_id=AKIAIOSFODNN7EXAMPLE\\naws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\\n\\n[user1]\\naws_access_key_id=AKIAI44QH8DHBEXAMPLE\\naws_secret_access_key=je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY\\n```\\n\\n**Note:** Replace the `aws_access_key_id`, `aws_secret_access_key`, `aws_access_key_id` and `aws_secret_access_key` with your credential values.\\n\\n&nbsp;\\n\\nThe account corresponding to these credentials should have the **below-mentioned AWS Identity and Access Management (IAM)** policy. This allows describing and filtering log events across all log groups of that particular AWS account, a crucial step for forwarding CloudWatch logs to SigNoz.\\n\\n```bash\\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Sid\\\": \\\"VisualEditor0\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"logs:DescribeLogGroups\\\",\\n                \\\"logs:FilterLogEvents\\\"\\n            ],\\n            \\\"Resource\\\": \\\"arn:aws:logs:*:090340947446:log-group:*\\\"\\n        }\\n    ]\\n}\\n```\\n\\n**Important Note:** Make sure you have AWS configured on the machine where otel-collector is running.\";","export default \"### Configure awscloudwatch receiver\\n\\nAdd the `awscloudwatch` receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the Setup Otel Collector Step.\\n\\n&nbsp;\\n\\nYou can configure your receiver to collect logs with different conditions. \\n\\n&nbsp;\\n\\nHere are two sample configurations: \\n\\n- This configuration below will do autodiscovery and collect 100 log groups starting with prefix application.\\n\\n```bash\\n\\nreceivers:\\n...\\n    awscloudwatch:\\n        region: us-east-1\\n        logs:\\n          poll_interval: 1m\\n          groups:\\n            autodiscover:\\n              limit: 100\\n              prefix: application\\n...\\n\\n```\\n\\n- This configuration below will not do autodiscovery and specifies the names of the log groups to collect.\\n```bash\\nreceivers:\\n...\\nawscloudwatch:\\n  profile: 'my-profile'\\n  region: us-west-1\\n  logs:\\n    poll_interval: 5m\\n    groups:\\n      named:\\n        /aws/eks/dev-0/cluster:\\n\\n...\\n```\\n\\n&nbsp;\\n\\nTo know more about the different parameters of awscloudwatch receiver, and see more sample configuration, checkout this [GitHub link](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awscloudwatchreceiver)\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\\n\\n\";","export default \"### Send logs to SigNoz\\n\\nTo test out the receiver, create a pipeline in the pipeline section of the `config.yaml` of the **`otecol-contrib`** directory that you created in the Setup Otel Collector Step.\\n\\n```bash\\n...\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, awscloudwatch]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n&nbsp;\\n\\n### Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory :\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml \\n```\\n\\nYou should be able to see your Cloudwatch logs in the logs tabs of SigNoz Cloud UI.\\n\\n\\n\\n\";","export default \"### Configure AWS\\n\\nCreate a `~/.aws/credentials` file in the machine which should have `aws_access_key_id` and the `aws_secret_access_key` in the default section of credentials file.\\n\\nAn example credential file would look like this:\\n```bash\\n[default]\\naws_access_key_id=AKIAIOSFODNN7EXAMPLE\\naws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\\n\\n[user1]\\naws_access_key_id=AKIAI44QH8DHBEXAMPLE\\naws_secret_access_key=je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY\\n```\\n\\n**Note:** Replace the `aws_access_key_id`, `aws_secret_access_key`, `aws_access_key_id` and `aws_secret_access_key` with your credential values.\\n\\n&nbsp;\\n\\nThe account corresponding to these credentials should have the **below-mentioned AWS Identity and Access Management (IAM)** policy. This allows describing and filtering log events across all log groups of that particular AWS account, a crucial step for forwarding CloudWatch logs to SigNoz.\\n\\n```bash\\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Sid\\\": \\\"VisualEditor0\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"logs:DescribeLogGroups\\\",\\n                \\\"logs:FilterLogEvents\\\"\\n            ],\\n            \\\"Resource\\\": \\\"arn:aws:logs:*:090340947446:log-group:*\\\"\\n        }\\n    ]\\n}\\n```\\n\\n**Important Note:** Make sure you have AWS configured on the machine where otel-collector is running.\";","export default \"### Configure awscloudwatch receiver\\n\\nAdd the `awscloudwatch` receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the Setup Otel Collector Step.\\n\\n&nbsp;\\n\\nYou can configure your receiver to collect logs with different conditions. \\n\\n&nbsp;\\n\\nHere are two sample configurations: \\n\\n- This configuration below will do autodiscovery and collect 100 log groups starting with prefix application.\\n\\n```bash\\n\\nreceivers:\\n...\\n    awscloudwatch:\\n        region: us-east-1\\n        logs:\\n          poll_interval: 1m\\n          groups:\\n            autodiscover:\\n              limit: 100\\n              prefix: application\\n...\\n\\n```\\n\\n- This configuration below will not do autodiscovery and specifies the names of the log groups to collect.\\n```bash\\nreceivers:\\n...\\nawscloudwatch:\\n  profile: 'my-profile'\\n  region: us-west-1\\n  logs:\\n    poll_interval: 5m\\n    groups:\\n      named:\\n        /aws/eks/dev-0/cluster:\\n\\n...\\n```\\n\\n&nbsp;\\n\\nTo know more about the different parameters of awscloudwatch receiver, and see more sample configuration, checkout this [GitHub link](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awscloudwatchreceiver)\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\\n\";","export default \"### Send logs to SigNoz\\n\\nTo test out the receiver, create a pipeline in the pipeline section of the `config.yaml` of the **`otecol-contrib`** directory that you created in the Setup Otel Collector Step.\\n\\n```bash\\n...\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, awscloudwatch]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n&nbsp;\\n\\n### Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory :\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml \\n```\\n\\nYou should be able to see your Cloudwatch logs in the logs tabs of SigNoz Cloud UI.\\n\\n\\n\\n\";","export default \"### Configure AWS\\n\\nCreate a `~/.aws/credentials` file in the machine which should have `aws_access_key_id` and the `aws_secret_access_key` in the default section of credentials file.\\n\\nAn example credential file would look like this:\\n```bash\\n[default]\\naws_access_key_id=AKIAIOSFODNN7EXAMPLE\\naws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\\n\\n[user1]\\naws_access_key_id=AKIAI44QH8DHBEXAMPLE\\naws_secret_access_key=je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY\\n```\\n\\n**Note:** Replace the `aws_access_key_id`, `aws_secret_access_key`, `aws_access_key_id` and `aws_secret_access_key` with your credential values.\\n\\n&nbsp;\\n\\nThe account corresponding to these credentials should have the **below-mentioned AWS Identity and Access Management (IAM)** policy. This allows describing and filtering log events across all log groups of that particular AWS account, a crucial step for forwarding CloudWatch logs to SigNoz.\\n\\n```bash\\n{\\n    \\\"Version\\\": \\\"2012-10-17\\\",\\n    \\\"Statement\\\": [\\n        {\\n            \\\"Sid\\\": \\\"VisualEditor0\\\",\\n            \\\"Effect\\\": \\\"Allow\\\",\\n            \\\"Action\\\": [\\n                \\\"logs:DescribeLogGroups\\\",\\n                \\\"logs:FilterLogEvents\\\"\\n            ],\\n            \\\"Resource\\\": \\\"arn:aws:logs:*:090340947446:log-group:*\\\"\\n        }\\n    ]\\n}\\n```\\n\\n**Important Note:** Make sure you have AWS configured on the machine where otel-collector is running.\";","export default \"### Configure awscloudwatch receiver\\n\\nAdd the `awscloudwatch` receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the Setup Otel Collector Step.\\n\\n&nbsp;\\n\\nYou can configure your receiver to collect logs with different conditions. \\n\\n&nbsp;\\n\\nHere are two sample configurations: \\n\\n- This configuration below will do autodiscovery and collect 100 log groups starting with prefix application.\\n\\n```bash\\n\\nreceivers:\\n...\\n    awscloudwatch:\\n        region: us-east-1\\n        logs:\\n          poll_interval: 1m\\n          groups:\\n            autodiscover:\\n              limit: 100\\n              prefix: application\\n...\\n\\n```\\n\\n- This configuration below will not do autodiscovery and specifies the names of the log groups to collect.\\n```bash\\nreceivers:\\n...\\nawscloudwatch:\\n  profile: 'my-profile'\\n  region: us-west-1\\n  logs:\\n    poll_interval: 5m\\n    groups:\\n      named:\\n        /aws/eks/dev-0/cluster:\\n\\n...\\n```\\n\\n&nbsp;\\n\\nTo know more about the different parameters of awscloudwatch receiver, and see more sample configuration, checkout this [GitHub link](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awscloudwatchreceiver)\\n\\n\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n\\n\\n\";","export default \"### Send logs to SigNoz\\n\\nTo test out the receiver, create a pipeline in the pipeline section of the `config.yaml` of the **`otecol-contrib`** directory that you created in the Setup Otel Collector Step.\\n\\n```bash\\n...\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp, awscloudwatch]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n&nbsp;\\n\\n### Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory :\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml \\n```\\n\\nYou should be able to see your Cloudwatch logs in the logs tabs of SigNoz Cloud UI.\\n\\n\\n\\n\";","export default \"\\n### Step 1: Clone this repository\\nClone this GitHub repository as a first step to collect logs\\n\\n```bash\\ngit clone https://github.com/SigNoz/docker-container-logs.git\\n```\\n\\n&nbsp;\\n\\n### Step 2: Update your `.env` file\\nIn the repository that you cloned above, update `.env` file by updating it with values **`SIGNOZ_INGESTION_KEY`** and **`OTEL_COLLECOTR_ENDPOINT`** shown below\\n\\n```bash\\nOTEL_COLLECOTR_ENDPOINT=ingest.{{REGION}}.signoz.cloud:443\\nSIGNOZ_INGESTION_KEY={{SIGNOZ_INGESTION_KEY}}\\n```\\nPaste these values in the **`.env`** file.\";","export default \"### Start the docker containers\\n\\n```bash\\n docker compose up -d \\n```\\nIf there are no errors your logs will be exported and will be visible on the SigNoz UI.\\n\";","export default \"### Step 1: Add fluentforward receiver\\n\\nAdd the fluentforward receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  fluentforward:\\n    endpoint: 0.0.0.0:24224\\n```\\nYou can read more about fluentforward receiver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver).\\n\\nWe have used port `24224` for listening in fluentforward protocol, you can change it to the port you want.\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, fluentforward]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n\\n### Step 2: Update the fluentBit config file\\nAdd the following to your **fluentBit config** to forward the logs to otel collector.\\n```bash\\n[OUTPUT]\\n  Name          forward\\n  Match         *\\n  Host          <host>\\n  Port          24224\\n```\\n Replace <directive> with your directive name. \\n Also we are assuming that you are running the fluentD binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contrib` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nRestart fluentBit \\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add fluentforward receiver\\n\\nAdd the fluentforward receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  fluentforward:\\n    endpoint: 0.0.0.0:24224\\n```\\nYou can read more about fluentforward receiver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver).\\n\\nWe have used port `24224` for listening in fluentforward protocol, you can change it to the port you want.\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, fluentforward]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n\\n### Step 2: Update the fluentBit config file\\nAdd the following to your **fluentBit config** to forward the logs to otel collector.\\n```bash\\n[OUTPUT]\\n  Name          forward\\n  Match         *\\n  Host          <host>\\n  Port          24224\\n```\\n Replace <directive> with your directive name. \\n Also we are assuming that you are running the fluentD binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contrib` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nRestart fluentBit \\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add fluentforward receiver\\n\\nAdd the fluentforward receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  fluentforward:\\n    endpoint: 0.0.0.0:24224\\n```\\nYou can read more about fluentforward receiver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver).\\n\\nWe have used port `24224` for listening in fluentforward protocol, you can change it to the port you want.\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, fluentforward]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n\\n### Step 2: Update the fluentBit config file\\nAdd the following to your **fluentBit config** to forward the logs to otel collector.\\n```bash\\n[OUTPUT]\\n  Name          forward\\n  Match         *\\n  Host          <host>\\n  Port          24224\\n```\\n Replace <directive> with your directive name. \\n Also we are assuming that you are running the fluentD binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contrib` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nRestart fluentBit \\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contrib` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nRestart fluentBit \\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add fluentforward receiver\\n\\nAdd the fluentforward receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  fluentforward:\\n    endpoint: 0.0.0.0:24224\\n```\\nYou can read more about fluentforward receiver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver).\\n\\nWe have used port `24224` for listening in fluentforward protocol, you can change it to the port you want.\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, fluentforward]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n\\n### Step 2: Update the fluentBit config file\\nAdd the following to your **fluentBit config** to forward the logs to otel collector.\\n```bash\\n[OUTPUT]\\n  Name          forward\\n  Match         *\\n  Host          <host>\\n  Port          24224\\n```\\n Replace <directive> with your directive name. \\n Also we are assuming that you are running the fluentD binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Step 1: Add fluentforward receiver\\n\\nAdd the fluentforward receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  fluentforward:\\n    endpoint: 0.0.0.0:24224\\n```\\nYou can read more about fluentforward receiver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver).\\n\\nWe have used port `24224` for listening in fluentforward protocol, you can change it to the port you want.\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, fluentforward]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n\\n### Step 2: Update the fluentD config file\\nAdd the following to your **fluentD config** to forward the logs to otel collector.\\n```bash\\n<match <directive>>\\n  @type forward\\n  send_timeout 60s\\n  recover_wait 10s\\n  hard_timeout 60s\\n\\n  <server>\\n    name myserver1\\n    host <host>\\n    port 24224\\n  </server>\\n</match>\\n```\\n Replace <directive> with your directive name. \\n Also we are assuming that you are running the fluentD binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contrib` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nRestart fluentD \\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add fluentforward receiver\\n\\nAdd the fluentforward receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  fluentforward:\\n    endpoint: 0.0.0.0:24224\\n```\\nYou can read more about fluentforward receiver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver).\\n\\nWe have used port `24224` for listening in fluentforward protocol, you can change it to the port you want.\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, fluentforward]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n\\n### Step 2: Update the fluentD config file\\nAdd the following to your **fluentD config** to forward the logs to otel collector.\\n```bash\\n<match <directive>>\\n  @type forward\\n  send_timeout 60s\\n  recover_wait 10s\\n  hard_timeout 60s\\n\\n  <server>\\n    name myserver1\\n    host <host>\\n    port 24224\\n  </server>\\n</match>\\n```\\n Replace <directive> with your directive name. \\n Also we are assuming that you are running the fluentD binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contrib` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nRestart fluentD \\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add fluentforward receiver\\n\\nAdd the fluentforward receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  fluentforward:\\n    endpoint: 0.0.0.0:24224\\n```\\nYou can read more about fluentforward receiver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver).\\n\\nWe have used port `24224` for listening in fluentforward protocol, you can change it to the port you want.\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, fluentforward]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n\\n### Step 2: Update the fluentD config file\\nAdd the following to your **fluentD config** to forward the logs to otel collector.\\n```bash\\n<match <directive>>\\n  @type forward\\n  send_timeout 60s\\n  recover_wait 10s\\n  hard_timeout 60s\\n\\n  <server>\\n    name myserver1\\n    host <host>\\n    port 24224\\n  </server>\\n</match>\\n```\\n Replace <directive> with your directive name. \\n Also we are assuming that you are running the fluentD binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contrib` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nRestart fluentD \\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add fluentforward receiver\\n\\nAdd the fluentforward receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n  fluentforward:\\n    endpoint: 0.0.0.0:24224\\n```\\nYou can read more about fluentforward receiver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver).\\n\\nWe have used port `24224` for listening in fluentforward protocol, you can change it to the port you want.\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, fluentforward]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n\\n### Step 2: Update the fluentD config file\\nAdd the following to your **fluentD config** to forward the logs to otel collector.\\n```bash\\n<match <directive>>\\n  @type forward\\n  send_timeout 60s\\n  recover_wait 10s\\n  hard_timeout 60s\\n\\n  <server>\\n    name myserver1\\n    host <host>\\n    port 24224\\n  </server>\\n</match>\\n```\\n Replace <directive> with your directive name. \\n Also we are assuming that you are running the fluentD binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n\\nKill the process if it was already running using the below command\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\nRestart the OTel collector when you’re in the `otel-contrib` folder\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\nRestart fluentD \\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"\\nYou can stream logs from Heroku to SigNoz using [httpsdrain](https://devcenter.heroku.com/articles/log-drains#https-drains).\\n\\n\\n&nbsp;\\n\\n### Use the Heroku CLI to add a https drain\\n\\n\\n```bash\\nheroku drains:add https://<TENANT_NAME>:{{SIGNOZ_INGESTION_KEY}}@ingest.{{REGION}}.signoz.cloud:443/logs/heroku -a <YOUR_APP_NAME>\\n```\\n\\n&nbsp;\\n\\n`<TENANT_NAME>` should be raplaced with the name of your SigNoz instance.\\n\\nFor example, if your SigNoz instance URL is `https://cpvo-test.us.signoz.cloud` the `TENANT_NAME` is `cpvo-test`. \\n\\n\\n**Note:** You can find your instance URL in your browser's current tab address bar or in the invite email sent to you.\\n\\n&nbsp;\\n\\n`<YOUR_APP_NAME>` is the name of the Heroku application where you want to add the drain.\\n\\n&nbsp;\\n\\nOnce you have successfully added the drain, click on the `Done` button below to see your logs in the SigNoz UI.\";","export default \"## Payload Structure\\n\\nTo send logs to SigNoz over HTTP, we have a payload structure which is an array of JSON logs which adheres to the [OTEL Logs Data Model](https://opentelemetry.io/docs/specs/otel/logs/data-model/).\\n\\n&nbsp;\\n\\nThe structure of the Payload has the following fields:\\n\\n```bash\\n[\\n  {\\n    \\\"timestamp\\\": <uint64>,\\n    \\\"trace_id\\\": <hex string>,\\n    \\\"span_id\\\": <hex string>,\\n    \\\"trace_flags\\\": <int>,\\n    \\\"severity_text\\\": <string>,\\n    \\\"severity_number\\\": <int>,\\n    \\\"attributes\\\": <map>,\\n    \\\"resources\\\": <map>,\\n    \\\"body\\\": <string>,\\n  }\\n]\\n```\\n**Notes:**\\n* `timestamp` is an int64 representing nanaseconds since the Unix epoch.\\n*  You can use **body** or **message** to denote the log content.\\n\\n&nbsp;\\n\\nAny other fields present apart from the ones mentioned above will be moved to the **attributes map**. For example: \\n\\n```bash\\n[\\n  {\\n    \\\"host\\\": \\\"myhost\\\",\\n    \\\"method\\\": \\\"GET\\\",\\n    \\\"body\\\": \\\"this is a log line\\\"\\n  }\\n]\\n```\\n\\nWill be treated as:\\n```bash\\n[\\n  {\\n    \\\"attributes\\\": {\\n      \\\"host\\\": \\\"myhost\\\",\\n      \\\"method\\\": \\\"GET\\\"\\n    },\\n    \\\"body\\\": \\\"this is a log line\\\"\\n  }\\n]\\n```\\n&nbsp;\\n\\n## Send logs \\n\\nThis is a **sample cURL request** which can be used as a template: \\n\\n&nbsp;\\n\\n```bash\\ncurl --location 'https://ingest.{{REGION}}.signoz.cloud:443/logs/json' \\\\\\n--header 'Content-Type: application/json' \\\\\\n--header 'signoz-ingestion-key: {{SIGNOZ_INGESTION_KEY}}' \\\\\\n--data '[\\n    {\\n        \\\"trace_id\\\": \\\"000000000000000018c51935df0b93b9\\\",\\n        \\\"span_id\\\": \\\"18c51935df0b93b9\\\",\\n        \\\"trace_flags\\\": 0,\\n        \\\"severity_text\\\": \\\"info\\\",\\n        \\\"severity_number\\\": 4,\\n        \\\"attributes\\\": {\\n            \\\"method\\\": \\\"GET\\\",\\n            \\\"path\\\": \\\"/api/users\\\"\\n        },\\n        \\\"resources\\\": {\\n            \\\"host\\\": \\\"myhost\\\",\\n            \\\"namespace\\\": \\\"prod\\\"\\n        },\\n        \\\"message\\\": \\\"This is a log line\\\"\\n    }\\n]'\\n```\\n&nbsp;\\n\\nThis curl request will have the timestamp of when you send the above log.\\n\\n&nbsp;\\n\\nTo specify a particular timestamp in your log, ensure you include the `timestamp` field in your cURL request. Place the timestamp field before the `trace_id` field. For example, `timestamp`: 1698310066000000000\\n\\n&nbsp;\\n\\n**Note:**  You can customize the cURL request as needed for your specific use case.\";","export default \"### Install otel-collector in your Kubernetes infra\\n\\nAdd the SigNoz Helm Chart repository\\n```bash\\nhelm repo add signoz https://charts.signoz.io\\n```\\n\\n&nbsp;\\n\\nIf the chart is already present, update the chart to the latest using:\\n```bash\\nhelm repo update\\n```\\n\\n&nbsp;\\n\\nFor generic Kubernetes clusters, you can create *override-values.yaml* with the following configuration:\\n\\n```yaml\\nglobal:\\n  cloud: others\\n  clusterName: <CLUSTER_NAME>\\n  deploymentEnvironment: <DEPLOYMENT_ENVIRONMENT>\\notelCollectorEndpoint: ingest.{{REGION}}.signoz.cloud:443\\notelInsecure: false\\nsignozApiKey: {{SIGNOZ_INGESTION_KEY}}\\npresets:\\n  otlpExporter:\\n    enabled: true\\n  loggingExporter:\\n    enabled: false\\n```\\n\\n- Replace `<CLUSTER_NAME>` with the name of the Kubernetes cluster or a unique identifier of the cluster.\\n- Replace `<DEPLOYMENT_ENVIRONMENT>` with the deployment environment of your application. Example: **\\\"staging\\\"**, **\\\"production\\\"**, etc.\\n\\n&nbsp;\\n\\nTo install the k8s-infra chart with the above configuration, run the following command:\\n\\n```bash\\nhelm install my-release signoz/k8s-infra -f override-values.yaml\\n```\\n\";","export default \"### Step 1: Add logstash receiver\\n\\nAdd the logstash receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step.\\n\\n```bash\\nreceivers:\\n  tcplog/logstash:\\n    max_log_size: 1MiB\\n    listen_address: \\\"0.0.0.0:2255\\\"\\n    attributes: {}\\n    resource: {}\\n    add_attributes: false\\n    operators: []\\n```\\n\\nHere we have used port 2255 for listening in TCP protocol, but you can change it to a port you want. You can read more about tcplog reciver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/tcplogreceiver).\\n\\n&nbsp;\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, tcplog/logstash]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n&nbsp;\\n\\n### Step 2: Update the logstash config file\\nAdd the following to your **logstash config** to forward the logs to otel collector.\\n```bash\\noutput {\\n  tcp {\\n    codec => json_lines # this is required otherwise it will send eveything in a single line\\n    host => \\\"localhost\\\"\\n    port => 2255\\n  }\\n}\\n```\\nWe are assuming that you are running the logstash binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n&nbsp;\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in `otelcol-contrib` folder with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n&nbsp;\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n &nbsp;\\n\\n**Stop OTel Collector if it was already running using the below command in `otelcol-contrib` directory**\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n**Restart the OTel collector by running the below command in `otelcol-contrib` directory**\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### Restart logstash \\n &nbsp;\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add logstash receiver\\n\\nAdd the logstash receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step.\\n\\n```bash\\nreceivers:\\n  tcplog/logstash:\\n    max_log_size: 1MiB\\n    listen_address: \\\"0.0.0.0:2255\\\"\\n    attributes: {}\\n    resource: {}\\n    add_attributes: false\\n    operators: []\\n```\\n\\nHere we have used port 2255 for listening in TCP protocol, but you can change it to a port you want. You can read more about tcplog reciver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/tcplogreceiver).\\n\\n&nbsp;\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, tcplog/logstash]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n&nbsp;\\n\\n### Step 2: Update the logstash config file\\nAdd the following to your **logstash config** to forward the logs to otel collector.\\n```bash\\noutput {\\n  tcp {\\n    codec => json_lines # this is required otherwise it will send eveything in a single line\\n    host => \\\"localhost\\\"\\n    port => 2255\\n  }\\n}\\n```\\nWe are assuming that you are running the logstash binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in folder `otelcol-contrib` with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n&nbsp;\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n &nbsp;\\n\\n**Stop OTel Collector if it was already running using the below command in `otelcol-contrib` directory**\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n**Restart the OTel collector by running the below command in `otelcol-contrib` directory**\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### Restart logstash \\n &nbsp;\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add logstash receiver\\n\\nAdd the logstash receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step.\\n\\n```bash\\nreceivers:\\n  tcplog/logstash:\\n    max_log_size: 1MiB\\n    listen_address: \\\"0.0.0.0:2255\\\"\\n    attributes: {}\\n    resource: {}\\n    add_attributes: false\\n    operators: []\\n```\\n\\nHere we have used port 2255 for listening in TCP protocol, but you can change it to a port you want. You can read more about tcplog reciver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/tcplogreceiver).\\n\\n&nbsp;\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, tcplog/logstash]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n&nbsp;\\n\\n### Step 2: Update the logstash config file\\nAdd the following to your **logstash config** to forward the logs to otel collector.\\n```bash\\noutput {\\n  tcp {\\n    codec => json_lines # this is required otherwise it will send eveything in a single line\\n    host => \\\"localhost\\\"\\n    port => 2255\\n  }\\n}\\n```\\nWe are assuming that you are running the logstash binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in folder `otelcol-contrib` with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n&nbsp;\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n &nbsp;\\n\\n**Stop OTel Collector if it was already running using the below command in `otelcol-contrib` directory**\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n**Restart the OTel collector by running the below command in `otelcol-contrib` directory**\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### Restart logstash \\n &nbsp;\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Step 1: Add logstash receiver\\n\\nAdd the logstash receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step.\\n\\n```bash\\nreceivers:\\n  tcplog/logstash:\\n    max_log_size: 1MiB\\n    listen_address: \\\"0.0.0.0:2255\\\"\\n    attributes: {}\\n    resource: {}\\n    add_attributes: false\\n    operators: []\\n```\\n\\nHere we have used port 2255 for listening in TCP protocol, but you can change it to a port you want. You can read more about tcplog reciver [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/tcplogreceiver).\\n\\n&nbsp;\\n\\nModify your config.yaml and add the above receiver\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, tcplog/logstash]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\n&nbsp;\\n\\n### Step 2: Update the logstash config file\\nAdd the following to your **logstash config** to forward the logs to otel collector.\\n```bash\\noutput {\\n  tcp {\\n    codec => json_lines # this is required otherwise it will send eveything in a single line\\n    host => \\\"localhost\\\"\\n    port => 2255\\n  }\\n}\\n```\\nWe are assuming that you are running the logstash binary on the host. If not, the value of host might change depending on your environment.\\n\\n- For MacOS - host is `host.docker.internal`\\n- For other systems - host is IP address of your system\";","export default \"## Setup OpenTelemetry Binary as an agent\\n&nbsp;\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n&nbsp;\\n\\n### Step 3: Create `config.yaml` in folder `otelcol-contrib` with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n&nbsp;\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Restart the Otel Collector\\n\\nRestart the otel collector so that new changes are saved and you should see the logs in the dashboard.\\n &nbsp;\\n\\n**Stop OTel Collector if it was already running using the below command in `otelcol-contrib` directory**\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n**Restart the OTel collector by running the below command in `otelcol-contrib` directory**\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n&nbsp;\\n\\n### Restart logstash \\n &nbsp;\\n\\nNow you should be able to see the Logs on your SigNoz Cloud UI\\n\";","export default \"### Checking Service Status\\n\\nRestart your rsyslog service by running\\n```bash\\nsudo systemctl restart rsyslog.service\\n```\\n\\nCheck the status of your service \\n```bash\\nsudo systemctl status rsyslog.service\\n```\";","export default \"### Step 1: Add syslog receiver to `config.yaml` file of otel collector\\n\\nAdd the syslog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n syslog:\\n  tcp:\\n   listen_address: '0.0.0.0:54527'\\n  protocol: rfc3164\\n  location: UTC\\n  operators:\\n   - type: move\\n     from: attributes.message\\n     to: body\\n```\\nHere we are collecting the logs and moving message from attributes to body using operators that are available. You can read more about operators [here](https://signoz.io/docs/userguide/logs/#operators-for-parsing-and-manipulating-logs).\\nFor more configurations that are available for syslog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/syslogreceiver).\\n\\n### Step 2: Include syslog receiver in the pipeline\\nWe will modify our pipeline inside config.yaml of otel-collector to include the receiver we have created.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, syslog]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\nRestart the otel collector so that new changes are applied and we can forward our logs to port `54527`\\n\\n### Step 3: Modify the `rsyslog.conf` file\\nOpen your `rsyslog.conf` file present inside `/etc/` by running the following command :\\n```bash\\nsudo vim /etc/rsyslog.conf\\n```\\nif not using in production, add this at the end of the `rsyslog.conf` file \\n```bash\\ntemplate(\\n  name=\\\"UTCTraditionalForwardFormat\\\"\\n  type=\\\"string\\\"\\n  string=\\\"<%PRI%>%TIMESTAMP:::date-utc% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%\\\"\\n)\\n\\n*.* action(type=\\\"omfwd\\\" target=\\\"0.0.0.0\\\" port=\\\"54527\\\" protocol=\\\"tcp\\\" template=\\\"UTCTraditionalForwardFormat\\\")\\n```\\n\\nfor production use cases, use this\\n\\n```bash\\ntemplate(\\n  name=\\\"UTCTraditionalForwardFormat\\\"\\n  type=\\\"string\\\"\\n  string=\\\"<%PRI%>%TIMESTAMP:::date-utc% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%\\\"\\n)\\n\\n*.*  action(type=\\\"omfwd\\\" target=\\\"0.0.0.0\\\" port=\\\"54527\\\" protocol=\\\"tcp\\\"\\n        action.resumeRetryCount=\\\"10\\\"\\n        queue.type=\\\"linkedList\\\" queue.size=\\\"10000\\\" template=\\\"UTCTraditionalForwardFormat\\\")\\n```\\n\\nThis will make retries and queue in place to de-couple the sending from other logging action. \\n\\n**Note** : \\nWe are assuming that you are running the otel binary on the same host. If not, the value of target might change depending on your environment.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Checking Service Status\\n\\nRestart your rsyslog service by running\\n```bash\\nsudo systemctl restart rsyslog.service\\n```\\n\\nCheck the status of your service \\n```bash\\nsudo systemctl status rsyslog.service\\n```\";","export default \"### Step 1: Add syslog receiver to `config.yaml` file of otel collector\\n\\nAdd the syslog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n syslog:\\n  tcp:\\n   listen_address: '0.0.0.0:54527'\\n  protocol: rfc3164\\n  location: UTC\\n  operators:\\n   - type: move\\n     from: attributes.message\\n     to: body\\n```\\nHere we are collecting the logs and moving message from attributes to body using operators that are available. You can read more about operators [here](https://signoz.io/docs/userguide/logs/#operators-for-parsing-and-manipulating-logs).\\nFor more configurations that are available for syslog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/syslogreceiver).\\n\\n### Step 2: Include syslog receiver in the pipeline\\nWe will modify our pipeline inside config.yaml of otel-collector to include the receiver we have created.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, syslog]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\nRestart the otel collector so that new changes are applied and we can forward our logs to port `54527`\\n\\n### Step 3: Modify the `rsyslog.conf` file\\nOpen your `rsyslog.conf` file present inside `/etc/` by running the following command :\\n```bash\\nsudo vim /etc/rsyslog.conf\\n```\\nif not using in production, add this at the end of the `rsyslog.conf` file \\n```bash\\ntemplate(\\n  name=\\\"UTCTraditionalForwardFormat\\\"\\n  type=\\\"string\\\"\\n  string=\\\"<%PRI%>%TIMESTAMP:::date-utc% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%\\\"\\n)\\n\\n*.* action(type=\\\"omfwd\\\" target=\\\"0.0.0.0\\\" port=\\\"54527\\\" protocol=\\\"tcp\\\" template=\\\"UTCTraditionalForwardFormat\\\")\\n```\\n\\nfor production use cases, use this\\n\\n```bash\\ntemplate(\\n  name=\\\"UTCTraditionalForwardFormat\\\"\\n  type=\\\"string\\\"\\n  string=\\\"<%PRI%>%TIMESTAMP:::date-utc% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%\\\"\\n)\\n\\n*.*  action(type=\\\"omfwd\\\" target=\\\"0.0.0.0\\\" port=\\\"54527\\\" protocol=\\\"tcp\\\"\\n        action.resumeRetryCount=\\\"10\\\"\\n        queue.type=\\\"linkedList\\\" queue.size=\\\"10000\\\" template=\\\"UTCTraditionalForwardFormat\\\")\\n```\\n\\nThis will make retries and queue in place to de-couple the sending from other logging action. \\n\\n**Note** : \\nWe are assuming that you are running the otel binary on the same host. If not, the value of target might change depending on your environment.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_linux_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Checking Service Status\\n\\nRestart your rsyslog service by running\\n```bash\\nsudo systemctl restart rsyslog.service\\n```\\n\\nCheck the status of your service \\n```bash\\nsudo systemctl status rsyslog.service\\n```\";","export default \"### Step 1: Add syslog receiver to `config.yaml` file of otel collector\\n\\nAdd the syslog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n syslog:\\n  tcp:\\n   listen_address: '0.0.0.0:54527'\\n  protocol: rfc3164\\n  location: UTC\\n  operators:\\n   - type: move\\n     from: attributes.message\\n     to: body\\n```\\nHere we are collecting the logs and moving message from attributes to body using operators that are available. You can read more about operators [here](https://signoz.io/docs/userguide/logs/#operators-for-parsing-and-manipulating-logs).\\nFor more configurations that are available for syslog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/syslogreceiver).\\n\\n### Step 2: Include syslog receiver in the pipeline\\nWe will modify our pipeline inside config.yaml of otel-collector to include the receiver we have created.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, syslog]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\nRestart the otel collector so that new changes are applied and we can forward our logs to port `54527`\\n\\n### Step 3: Modify the `rsyslog.conf` file\\nOpen your `rsyslog.conf` file present inside `/etc/` by running the following command :\\n```bash\\nsudo vim /etc/rsyslog.conf\\n```\\nif not using in production, add this at the end of the `rsyslog.conf` file \\n```bash\\ntemplate(\\n  name=\\\"UTCTraditionalForwardFormat\\\"\\n  type=\\\"string\\\"\\n  string=\\\"<%PRI%>%TIMESTAMP:::date-utc% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%\\\"\\n)\\n\\n*.* action(type=\\\"omfwd\\\" target=\\\"0.0.0.0\\\" port=\\\"54527\\\" protocol=\\\"tcp\\\" template=\\\"UTCTraditionalForwardFormat\\\")\\n```\\n\\nfor production use cases, use this\\n\\n```bash\\ntemplate(\\n  name=\\\"UTCTraditionalForwardFormat\\\"\\n  type=\\\"string\\\"\\n  string=\\\"<%PRI%>%TIMESTAMP:::date-utc% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%\\\"\\n)\\n\\n*.*  action(type=\\\"omfwd\\\" target=\\\"0.0.0.0\\\" port=\\\"54527\\\" protocol=\\\"tcp\\\"\\n        action.resumeRetryCount=\\\"10\\\"\\n        queue.type=\\\"linkedList\\\" queue.size=\\\"10000\\\" template=\\\"UTCTraditionalForwardFormat\\\")\\n```\\n\\nThis will make retries and queue in place to de-couple the sending from other logging action. \\n\\n**Note** : \\nWe are assuming that you are running the otel binary on the same host. If not, the value of target might change depending on your environment.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz\\n```\\n\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_amd64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"### Checking Service Status\\n\\nRestart your rsyslog service by running\\n```bash\\nsudo systemctl restart rsyslog.service\\n```\\n\\nCheck the status of your service \\n```bash\\nsudo systemctl status rsyslog.service\\n```\";","export default \"### Step 1: Add syslog receiver to `config.yaml` file of otel collector\\n\\nAdd the syslog receiver in the receivers section of `config.yaml` file of the **`otecol-contrib`** directory that you created in the previous step\\n\\n```bash\\nreceivers:\\n syslog:\\n  tcp:\\n   listen_address: '0.0.0.0:54527'\\n  protocol: rfc3164\\n  location: UTC\\n  operators:\\n   - type: move\\n     from: attributes.message\\n     to: body\\n```\\nHere we are collecting the logs and moving message from attributes to body using operators that are available. You can read more about operators [here](https://signoz.io/docs/userguide/logs/#operators-for-parsing-and-manipulating-logs).\\nFor more configurations that are available for syslog receiver please check [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/syslogreceiver).\\n\\n### Step 2: Include syslog receiver in the pipeline\\nWe will modify our pipeline inside config.yaml of otel-collector to include the receiver we have created.\\n```bash\\nservice:\\n    ....\\n    logs:\\n        receivers: [otlp, syslog]\\n        processors: [batch]\\n        exporters: [otlp]\\n```\\nRestart the otel collector so that new changes are applied and we can forward our logs to port `54527`\\n\\n### Step 3: Modify the `rsyslog.conf` file\\nOpen your `rsyslog.conf` file present inside `/etc/` by running the following command :\\n```bash\\nsudo vim /etc/rsyslog.conf\\n```\\nif not using in production, add this at the end of the `rsyslog.conf` file \\n```bash\\ntemplate(\\n  name=\\\"UTCTraditionalForwardFormat\\\"\\n  type=\\\"string\\\"\\n  string=\\\"<%PRI%>%TIMESTAMP:::date-utc% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%\\\"\\n)\\n\\n*.* action(type=\\\"omfwd\\\" target=\\\"0.0.0.0\\\" port=\\\"54527\\\" protocol=\\\"tcp\\\" template=\\\"UTCTraditionalForwardFormat\\\")\\n```\\n\\nfor production use cases, use this\\n\\n```bash\\ntemplate(\\n  name=\\\"UTCTraditionalForwardFormat\\\"\\n  type=\\\"string\\\"\\n  string=\\\"<%PRI%>%TIMESTAMP:::date-utc% %HOSTNAME% %syslogtag:1:32%%msg:::sp-if-no-1st-sp%%msg%\\\"\\n)\\n\\n*.*  action(type=\\\"omfwd\\\" target=\\\"0.0.0.0\\\" port=\\\"54527\\\" protocol=\\\"tcp\\\"\\n        action.resumeRetryCount=\\\"10\\\"\\n        queue.type=\\\"linkedList\\\" queue.size=\\\"10000\\\" template=\\\"UTCTraditionalForwardFormat\\\")\\n```\\n\\nThis will make retries and queue in place to de-couple the sending from other logging action. \\n\\n**Note** : \\nWe are assuming that you are running the otel binary on the same host. If not, the value of target might change depending on your environment.\";","export default \"### Setup OpenTelemetry Binary as an agent\\n\\n### Step 1: Download otel-collector tar.gz\\n```bash\\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{OTEL_VERSION}}/otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz\\n```\\n### Step 2: Extract otel-collector tar.gz to the `otelcol-contrib` folder\\n```bash\\nmkdir otelcol-contrib && tar xvzf otelcol-contrib_{{OTEL_VERSION}}_darwin_arm64.tar.gz -C otelcol-contrib\\n```\\n\\n### Step 3: Create config.yaml in folder otelcol-contrib with the below content in it\\n```bash\\nreceivers:\\n  otlp:\\n    protocols:\\n      grpc:\\n        endpoint: 0.0.0.0:4317\\n      http:\\n        endpoint: 0.0.0.0:4318\\n  hostmetrics:\\n    collection_interval: 60s\\n    scrapers:\\n      cpu: {}\\n      disk: {}\\n      load: {}\\n      filesystem: {}\\n      memory: {}\\n      network: {}\\n      paging: {}\\n      process:\\n        mute_process_name_error: true\\n        mute_process_exe_error: true\\n        mute_process_io_error: true\\n      processes: {}\\n  prometheus:\\n    config:\\n      global:\\n        scrape_interval: 60s\\n      scrape_configs:\\n        - job_name: otel-collector-binary\\n          static_configs:\\n            - targets:\\n              # - localhost:8888\\nprocessors:\\n  batch:\\n    send_batch_size: 1000\\n    timeout: 10s\\n  # Ref: https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md\\n  resourcedetection:\\n    detectors: [env, system] # Before system detector, include ec2 for AWS, gcp for GCP and azure for Azure.\\n    # Using OTEL_RESOURCE_ATTRIBUTES envvar, env detector adds custom labels.\\n    timeout: 2s\\n    system:\\n      hostname_sources: [os] # alternatively, use [dns,os] for setting FQDN as host.name and os as fallback\\nextensions:\\n  health_check: {}\\n  zpages: {}\\nexporters:\\n  otlp:\\n    endpoint: \\\"ingest.{{REGION}}.signoz.cloud:443\\\"\\n    tls:\\n      insecure: false\\n    headers:\\n      \\\"signoz-ingestion-key\\\": \\\"{{SIGNOZ_INGESTION_KEY}}\\\"\\n  logging:\\n    verbosity: normal\\nservice:\\n  telemetry:\\n    metrics:\\n      address: 0.0.0.0:8888\\n  extensions: [health_check, zpages]\\n  pipelines:\\n    metrics:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    metrics/internal:\\n      receivers: [prometheus, hostmetrics]\\n      processors: [resourcedetection, batch]\\n      exporters: [otlp]\\n    traces:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n    logs:\\n      receivers: [otlp]\\n      processors: [batch]\\n      exporters: [otlp]\\n```\\n### Step 4: Run OTel Collector\\n Run this command inside the `otelcol-contrib` directory\\n\\n```bash\\n./otelcol-contrib --config ./config.yaml &> otelcol-output.log & echo \\\"$!\\\" > otel-pid\\n```\\n\\n### (Optional Step): View last 50 lines of `otelcol` logs\\n```bash\\ntail -f -n 50 otelcol-output.log\\n```\\n\\n### (Optional Step): Stop `otelcol`\\n```bash\\nkill \\\"$(< otel-pid)\\\"\\n```\\n\\n\";","export default \"\\nYou can stream logs from Vercel to SigNoz using [log drains](https://vercel.com/docs/observability/log-drains-overview/log-drains#configure-a-log-drain).\\n\\n**Note:** Log Drains are only supported in **Vercel Pro** and **Enterprise accounts**.\\n\\n&nbsp;\\n\\n### Step 1: Select Sources\\n\\n* From the Vercel dashboard, go to **Team Settings > Log Drains**.\\n\\n&nbsp;\\n\\n* Select sources from which you want to collect logs (Example -> Statci, External, Lambda etc.)\\n\\n&nbsp;\\n\\n* Choose delivery format as `JSON`\\n\\n&nbsp;\\n\\n* Specify your target projects\\n\\n&nbsp;\\n\\n\\n### Step 2: Add Log Drain\\n\\n* Enter the endpoint URL as follows:\\n```bash\\nhttps://ingest.{{REGION}}.signoz.cloud:443/logs/json\\n```\\n&nbsp;\\n\\n* Enable **Custom Headers** and add the headers `signoz-ingestion-key` and `x-vercel-verify`\\n```bash\\nsignoz-ingestion-key: {{SIGNOZ_INGESTION_KEY}}\\n```\\n```bash\\nx-vercel-verify: <YOUR_VERCEL_VERIFY_TOKEN>\\n```\\n**Note:** The value of `x-vercel-verify` will be visible on your screen in the endpoint section.\\n\\n&nbsp;\\n\\n* Click on **Verify** button and then **Add Log Drain** button in Vercel.\\n\\n&nbsp;\\n\\nClick on the **Done** button below and you should be able to see your logs in SigNoz.\";","import { useEffect } from 'react';\nvar useEffectOnce = function (effect) {\n    useEffect(effect, []);\n};\nexport default useEffectOnce;\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./CodeCopyBtn.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./FullScreenHeader.styles.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./Onboarding.styles.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./ConnectionStatus.styles.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./DataSource.styles.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./LogsConnectionStatus.styles.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/sass-loader/dist/cjs.js!./ModuleStepsContainer.styles.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./OnboardingPage.styles.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":["primaryColor","secondaryColor","ArrowLeftOutlined","props","ref","A","icon","displayName","ArrowRightOutlined","CheckCircleTwoTone","CloseCircleTwoTone","LeftCircleOutlined","PlusOutlined","onboardingHelpMessage","dataSourceName","moduleId","concat","reactHotLoader","leaveModule","reactHotLoaderGlobal","default","undefined","register","module","CodeCopyBtn","_ref","children","onCopyClick","isSnippetCopied","setIsSnippetCopied","useState","_jsx","className","cx","type","onClick","handleClick","copiedText","Array","isArray","navigator","clipboard","writeText","finally","slice","setTimeout","CheckOutlined","CopyOutlined","defaultProps","_default","Pre","elementDetails","trackCopyAction","trackingTitle","rest","_jsxs","additionalInfo","trackingData","copiedContent","isEmpty","logEvent","Code","_ref2","node","inline","match","exec","SyntaxHighlighter","style","a11yDark","language","PreTag","String","replace","Link","_ref3","href","target","rel","interpolateMarkdown","markdownContent","variables","interpolatedContent","variableEntries","Object","entries","key","value","placeholder","regex","RegExp","CustomTag","_ref4","color","MarkdownRenderer","_ref5","interpolatedMarkdown","ReactMarkdown","rehypePlugins","rehypeRaw","components","a","pre","_ref6","code","customtag","FullScreenHeader","overrideRoute","handleLogoClick","history","push","src","alt","ModulesMap","useCases","APM","id","title","desc","LogsManagement","InfrastructureMonitoring","AwsMonitoring","AzureMonitoring","Onboarding","_featureFlags$find","selectedModule","setSelectedModule","selectedModuleSteps","setSelectedModuleSteps","APM_STEPS","activeStep","setActiveStep","current","setCurrent","location","t","useTranslation","featureFlags","useAppContext","isOnboardingV3Enabled","find","flag","name","FeatureKeys","ONBOARDING_V3","active","selectedDataSource","selectedEnvironment","selectedMethod","updateSelectedModule","updateSelectedDataSource","resetProgress","updateActiveStep","updateIngestionData","useOnboardingContext","useEffectOnce","status","data","ingestionData","useQuery","queryFn","getIngestionData","useEffect","payload","ingestionKey","dataRegion","SIGNOZ_INGESTION_KEY","REGION","setModuleStepsBasedOnSelectedDataSource","steps","getSteps","removeStep","stepToRemove","filter","step","INFRASTRUCTURE_MONITORING_STEPS","defaultInfraMetricsType","LOGS_MANAGEMENT_STEPS","defaultLogsType","AWS_MONITORING_STEPS","defaultAwsServices","AZURE_MONITORING_STEPS","defaultAzureServices","handleAPMSteps","OnboardingMethods","QUICK_START","updatedSteps","stepsMap","setupOtelCollector","selectMethod","defaultApplicationDataSource","handleNextStep","nextStep","nextStepId","handleModuleSelect","pathname","ROUTES","GET_STARTED_APPLICATION_MONITORING","GET_STARTED_INFRASTRUCTURE_MONITORING","GET_STARTED_LOGS_MANAGEMENT","GET_STARTED_AWS_MONITORING","GET_STARTED_AZURE_MONITORING","form","Form","useForm","isInviteTeamMemberModalOpen","setIsInviteTeamMemberModalOpen","toggleModal","useCallback","resetFields","APPLICATION","keys","map","selectedUseCase","Card","Typography","Title","level","Paragraph","Button","handleNext","moduleRouteMap","Text","page","UserPlus","size","ModuleStepsContainer","onReselectModule","GET_STARTED_WITH_CLOUD","GET_STARTED","InviteUserModal","__signature__","pollingInterval","ConnectionStatus","minTime","maxTime","selectedTime","useSelector","state","globalTime","urlQuery","useUrlQuery","getStartedSource","get","QueryParams","getStartedSourceService","serviceName","selectedFramework","queries","useResourceAttribute","selectedTags","useMemo","convertRawQueriesToTraceSelectedTags","retryCount","setRetryCount","loading","setLoading","isReceivingData","setIsReceivingData","dispatch","useDispatch","error","isFetching","isServiceLoading","isError","refetch","useQueryService","options","enabled","pollInterval","setPollInterval","onbData","onbErr","onbFetching","useOnboardingStatus","refetchInterval","shouldRetryOnboardingCall","setShouldRetryOnboardingCall","_onbData$payload","statusCode","getAttributeDataFromOnboardingStatus","overallStatus","prevCount","pollingTimer","setInterval","updatedMinTime","Date","now","UPDATE_TIME_INTERVAL","clearInterval","response","_activeStep$module","dataSource","framework","environment","i","length","_response$i","_activeStep$module2","verifyApplicationData","isQueryServiceLoading","renderDocsReference","Header","entity","heading","imgURL","docsURL","imgClassName","_Fragment","LoadingOutlined","twoToneColor","MessagingQueueHealthCheck","serviceToInclude","DataSource","useHistory","updateSelectedEnvironment","updateServiceName","updateSelectedFramework","isKafkaAPM","supportedDataSources","setSupportedDataSources","supportedframeworks","setSupportedframeworks","requestedDataSourceName","useWatch","isSubmittingRequestForDataSource","setIsSubmittingRequestForDataSource","notifications","useNotifications","enableFrameworks","setEnableFrameworks","getDataSources","hasFrameworks","getSupportedFrameworks","messagingQueueKakfaSupportedDataSources","includes","setFieldsValue","selectFramework","initialValues","onValuesChange","getFieldValue","layout","validateTrigger","Item","label","width","rules","required","message","Input","autoFocus","Select","getPopupContainer","popupContainer","onChange","goToIntegrationsPage","INTEGRATIONS","Blocks","Space","Compact","marginBottom","Check","async","success","setFieldValue","ns","disabled","trim","supportedEnvironments","EnvironmentDetails","errorDetails","updateErrorDetails","requestedEnvironmentName","isSubmittingRequestForEnvironment","setIsSubmittingRequestForEnvironment","Server","ApplicationLogsType","LogsConnectionStatus","setPollingInterval","logType","requestData","queryType","EQueryType","QUERY_BUILDER","builder","queryData","LOGS","queryName","aggregateOperator","aggregateAttribute","dataType","DataTypes","EMPTY","isColumn","filters","items","op","expression","having","stepInterval","limit","orderBy","columnName","order","groupBy","legend","reduceTo","offset","pageSize","timeAggregation","spaceAggregation","functions","queryFormulas","clickhouse_sql","promql","useGetExplorerQueryRange","PANEL_TYPES","LIST","DEFAULT_ENTITY_VERSION","keepPreviousData","_data$payload","currentData","newResult","result","list","currentLogs","item","timestamp","index","log","attrStringObj","attributes_string","prototype","hasOwnProperty","call","verifyLogsData","FROM_LOG_FILE","MarkdownStep","setMarkdownContent","path","getFilePath","RECOMMENDED_STEPS","docFilePaths","ApmDocFilePaths","LogsManagementDocFilePaths","InfraMonitoringDocFilePaths","AwsMonitoringDocFilePaths","AzureMonitoringDocFilePaths","MYAPP","OTEL_VERSION","SelectMethod","updateSelectedMethod","setValue","Radio","e","direction","defaultMetaData","_activeStep$module22","_activeStep$step","_activeStep$module23","metaData","setMetaData","lastStepIndex","display","alignItems","Steps","_selectedModuleSteps$","component","handlePrev","_activeStep$module3","_activeStep$module4","_activeStep$module5","_activeStep$module6","_activeStep$module7","_activeStep$module8","_activeStep$module9","_activeStep$module10","_activeStep$module11","_activeStep$module12","_activeStep$module13","_activeStep$module14","_activeStep$module15","_activeStep$module16","_activeStep$module17","_activeStep$module18","_activeStep$module19","_activeStep$module20","_activeStep$module21","isValidForm","selectedModuleID","dataSourceStep","environmentDetailsStep","environmentDetails","selectedDataSourceName","isNull","LOGS_EXPLORER","instrumentApplication","cloneRepository","runApplication","addHttpDrain","startContainer","setupLogDrains","configureReceiver","configureAws","sendLogsCloudwatch","setupDaemonService","createOtelConfig","createDaemonService","ecsSendData","createSidecarCollectorContainer","deployTaskDefinition","ecsSendLogsData","monitorDashboard","LaunchChatSupport","attributes","screen","eventName","buttonText","onHoverText","APM_java_springBoot_kubernetes_recommendedSteps_setupOtelCollector","APM_java_springBoot_kubernetes_recommendedSteps_instrumentApplication","APM_java_springBoot_kubernetes_recommendedSteps_runApplication","APM_java_springBoot_kubernetes_recommendedSteps_runApplication_producers","APM_java_springBoot_kubernetes_recommendedSteps_runApplication_consumers","APM_java_springBoot_linuxAMD64_recommendedSteps_setupOtelCollector","APM_java_springBoot_linuxAMD64_recommendedSteps_instrumentApplication","APM_java_springBoot_linuxAMD64_recommendedSteps_runApplication","APM_java_springBoot_linuxAMD64_quickStart_instrumentApplication","APM_java_springBoot_linuxAMD64_quickStart_runApplication","APM_java_springBoot_linuxARM64_recommendedSteps_setupOtelCollector","APM_java_springBoot_linuxARM64_recommendedSteps_instrumentApplication","APM_java_springBoot_linuxARM64_recommendedSteps_runApplication","APM_java_springBoot_linuxARM64_quickStart_instrumentApplication","APM_java_springBoot_linuxARM64_quickStart_runApplication","APM_java_springBoot_macOsAMD64_recommendedSteps_setupOtelCollector","APM_java_springBoot_macOsAMD64_recommendedSteps_instrumentApplication","APM_java_springBoot_macOsAMD64_recommendedSteps_runApplication","APM_java_springBoot_macOsAMD64_quickStart_instrumentApplication","APM_java_springBoot_macOsAMD64_quickStart_runApplication","APM_java_springBoot_macOsARM64_recommendedSteps_setupOtelCollector","APM_java_springBoot_macOsARM64_recommendedSteps_instrumentApplication","APM_java_springBoot_macOsARM64_recommendedSteps_runApplication","APM_java_springBoot_macOsARM64_quickStart_instrumentApplication","APM_java_springBoot_macOsARM64_quickStart_runApplication","APM_java_tomcat_kubernetes_recommendedSteps_setupOtelCollector","APM_java_tomcat_kubernetes_recommendedSteps_instrumentApplication","APM_java_tomcat_kubernetes_recommendedSteps_runApplication","APM_java_tomcat_linuxAMD64_recommendedSteps_setupOtelCollector","APM_java_tomcat_linuxAMD64_recommendedSteps_instrumentApplication","APM_java_tomcat_linuxAMD64_recommendedSteps_runApplication","APM_java_tomcat_linuxAMD64_quickStart_instrumentApplication","APM_java_tomcat_linuxAMD64_quickStart_runApplication","APM_java_tomcat_linuxARM64_recommendedSteps_setupOtelCollector","APM_java_tomcat_linuxARM64_recommendedSteps_instrumentApplication","APM_java_tomcat_linuxARM64_recommendedSteps_runApplication","APM_java_tomcat_linuxARM64_quickStart_instrumentApplication","APM_java_tomcat_linuxARM64_quickStart_runApplication","APM_java_tomcat_macOsAMD64_recommendedSteps_setupOtelCollector","APM_java_tomcat_macOsAMD64_recommendedSteps_instrumentApplication","APM_java_tomcat_macOsAMD64_recommendedSteps_runApplication","APM_java_tomcat_macOsAMD64_quickStart_instrumentApplication","APM_java_tomcat_macOsAMD64_quickStart_runApplication","APM_java_tomcat_macOsARM64_recommendedSteps_setupOtelCollector","APM_java_tomcat_macOsARM64_recommendedSteps_instrumentApplication","APM_java_tomcat_macOsARM64_recommendedSteps_runApplication","APM_java_tomcat_macOsARM64_quickStart_instrumentApplication","APM_java_tomcat_macOsARM64_quickStart_runApplication","APM_java_jboss_kubernetes_recommendedSteps_setupOtelCollector","APM_java_jboss_kubernetes_recommendedSteps_instrumentApplication","APM_java_jboss_kubernetes_recommendedSteps_runApplication","APM_java_jboss_linuxAMD64_recommendedSteps_setupOtelCollector","APM_java_jboss_linuxAMD64_recommendedSteps_instrumentApplication","APM_java_jboss_linuxAMD64_recommendedSteps_runApplication","APM_java_jboss_linuxAMD64_quickStart_instrumentApplication","APM_java_jboss_linuxAMD64_quickStart_runApplication","APM_java_jboss_linuxARM64_recommendedSteps_setupOtelCollector","APM_java_jboss_linuxARM64_recommendedSteps_instrumentApplication","APM_java_jboss_linuxARM64_recommendedSteps_runApplication","APM_java_jboss_linuxARM64_quickStart_instrumentApplication","APM_java_jboss_linuxARM64_quickStart_runApplication","APM_java_jboss_macOsAMD64_recommendedSteps_setupOtelCollector","APM_java_jboss_macOsAMD64_recommendedSteps_instrumentApplication","APM_java_jboss_macOsAMD64_recommendedSteps_runApplication","APM_java_jboss_macOsAMD64_quickStart_instrumentApplication","APM_java_jboss_macOsAMD64_quickStart_runApplication","APM_java_jboss_macOsARM64_recommendedSteps_setupOtelCollector","APM_java_jboss_macOsARM64_recommendedSteps_instrumentApplication","APM_java_jboss_macOsARM64_recommendedSteps_runApplication","APM_java_jboss_macOsARM64_quickStart_instrumentApplication","APM_java_jboss_macOsARM64_quickStart_runApplication","APM_java_other_kubernetes_recommendedSteps_setupOtelCollector","APM_java_other_kubernetes_recommendedSteps_instrumentApplication","APM_java_other_kubernetes_recommendedSteps_runApplication","APM_java_other_linuxAMD64_recommendedSteps_setupOtelCollector","APM_java_other_linuxAMD64_recommendedSteps_instrumentApplication","APM_java_other_linuxAMD64_recommendedSteps_runApplication","APM_java_other_linuxAMD64_quickStart_instrumentApplication","APM_java_other_linuxAMD64_quickStart_runApplication","APM_java_other_linuxARM64_recommendedSteps_setupOtelCollector","APM_java_other_linuxARM64_recommendedSteps_instrumentApplication","APM_java_other_linuxARM64_recommendedSteps_runApplication","APM_java_other_linuxARM64_quickStart_instrumentApplication","APM_java_other_linuxARM64_quickStart_runApplication","APM_java_other_macOsAMD64_recommendedSteps_setupOtelCollector","APM_java_other_macOsAMD64_recommendedSteps_instrumentApplication","APM_java_other_macOsAMD64_recommendedSteps_runApplication","APM_java_other_macOsAMD64_quickStart_instrumentApplication","APM_java_other_macOsAMD64_quickStart_runApplication","APM_java_other_macOsARM64_recommendedSteps_setupOtelCollector","APM_java_other_macOsARM64_recommendedSteps_instrumentApplication","APM_java_other_macOsARM64_recommendedSteps_runApplication","APM_java_other_macOsARM64_quickStart_instrumentApplication","APM_java_other_macOsARM64_quickStart_runApplication","APM_python_django_kubernetes_recommendedSteps_setupOtelCollector","APM_python_django_kubernetes_recommendedSteps_instrumentApplication","APM_python_django_kubernetes_recommendedSteps_runApplication","APM_python_django_linuxAMD64_recommendedSteps_setupOtelCollector","APM_python_django_linuxAMD64_recommendedSteps_instrumentApplication","APM_python_django_linuxAMD64_recommendedSteps_runApplication","APM_python_django_linuxAMD64_quickStart_instrumentApplication","APM_python_django_linuxAMD64_quickStart_runApplication","APM_python_django_linuxARM64_recommendedSteps_setupOtelCollector","APM_python_django_linuxARM64_recommendedSteps_instrumentApplication","APM_python_django_linuxARM64_recommendedSteps_runApplication","APM_python_django_linuxARM64_quickStart_instrumentApplication","APM_python_django_linuxARM64_quickStart_runApplication","APM_python_django_macOsAMD64_recommendedSteps_setupOtelCollector","APM_python_django_macOsAMD64_recommendedSteps_instrumentApplication","APM_python_django_macOsAMD64_recommendedSteps_runApplication","APM_python_django_macOsAMD64_quickStart_instrumentApplication","APM_python_django_macOsAMD64_quickStart_runApplication","APM_python_django_macOsARM64_recommendedSteps_setupOtelCollector","APM_python_django_macOsARM64_recommendedSteps_instrumentApplication","APM_python_django_macOsARM64_recommendedSteps_runApplication","APM_python_django_macOsARM64_quickStart_instrumentApplication","APM_python_django_macOsARM64_quickStart_runApplication","APM_python_flask_kubernetes_recommendedSteps_setupOtelCollector","APM_python_flask_kubernetes_recommendedSteps_instrumentApplication","APM_python_flask_kubernetes_recommendedSteps_runApplication","APM_python_flask_linuxAMD64_recommendedSteps_setupOtelCollector","APM_python_flask_linuxAMD64_recommendedSteps_instrumentApplication","APM_python_flask_linuxAMD64_recommendedSteps_runApplication","APM_python_flask_linuxAMD64_quickStart_instrumentApplication","APM_python_flask_linuxAMD64_quickStart_runApplication","APM_python_flask_linuxARM64_recommendedSteps_setupOtelCollector","APM_python_flask_linuxARM64_recommendedSteps_instrumentApplication","APM_python_flask_linuxARM64_recommendedSteps_runApplication","APM_python_flask_linuxARM64_quickStart_instrumentApplication","APM_python_flask_linuxARM64_quickStart_runApplication","APM_python_flask_macOsAMD64_recommendedSteps_setupOtelCollector","APM_python_flask_macOsAMD64_recommendedSteps_instrumentApplication","APM_python_flask_macOsAMD64_recommendedSteps_runApplication","APM_python_flask_macOsAMD64_quickStart_instrumentApplication","APM_python_flask_macOsAMD64_quickStart_runApplication","APM_python_flask_macOsARM64_recommendedSteps_setupOtelCollector","APM_python_flask_macOsARM64_recommendedSteps_instrumentApplication","APM_python_flask_macOsARM64_recommendedSteps_runApplication","APM_python_flask_macOsARM64_quickStart_instrumentApplication","APM_python_flask_macOsARM64_quickStart_runApplication","APM_python_fastAPI_kubernetes_recommendedSteps_setupOtelCollector","APM_python_fastAPI_kubernetes_recommendedSteps_instrumentApplication","APM_python_fastAPI_kubernetes_recommendedSteps_runApplication","APM_python_fastAPI_linuxAMD64_recommendedSteps_setupOtelCollector","APM_python_fastAPI_linuxAMD64_recommendedSteps_instrumentApplication","APM_python_fastAPI_linuxAMD64_recommendedSteps_runApplication","APM_python_fastAPI_linuxAMD64_quickStart_instrumentApplication","APM_python_fastAPI_linuxAMD64_quickStart_runApplication","APM_python_fastAPI_linuxARM64_recommendedSteps_setupOtelCollector","APM_python_fastAPI_linuxARM64_recommendedSteps_instrumentApplication","APM_python_fastAPI_linuxARM64_recommendedSteps_runApplication","APM_python_fastAPI_linuxARM64_quickStart_instrumentApplication","APM_python_fastAPI_linuxARM64_quickStart_runApplication","APM_python_fastAPI_macOsAMD64_recommendedSteps_setupOtelCollector","APM_python_fastAPI_macOsAMD64_recommendedSteps_instrumentApplication","APM_python_fastAPI_macOsAMD64_recommendedSteps_runApplication","APM_python_fastAPI_macOsAMD64_quickStart_instrumentApplication","APM_python_fastAPI_macOsAMD64_quickStart_runApplication","APM_python_fastAPI_macOsARM64_recommendedSteps_setupOtelCollector","APM_python_fastAPI_macOsARM64_recommendedSteps_instrumentApplication","APM_python_fastAPI_macOsARM64_recommendedSteps_runApplication","APM_python_fastAPI_macOsARM64_quickStart_instrumentApplication","APM_python_fastAPI_macOsARM64_quickStart_runApplication","APM_python_falcon_kubernetes_recommendedSteps_setupOtelCollector","APM_python_falcon_kubernetes_recommendedSteps_instrumentApplication","APM_python_falcon_kubernetes_recommendedSteps_runApplication","APM_python_falcon_linuxAMD64_recommendedSteps_setupOtelCollector","APM_python_falcon_linuxAMD64_recommendedSteps_instrumentApplication","APM_python_falcon_linuxAMD64_recommendedSteps_runApplication","APM_python_falcon_linuxAMD64_quickStart_instrumentApplication","APM_python_falcon_linuxAMD64_quickStart_runApplication","APM_python_falcon_linuxARM64_recommendedSteps_setupOtelCollector","APM_python_falcon_linuxARM64_recommendedSteps_instrumentApplication","APM_python_falcon_linuxARM64_recommendedSteps_runApplication","APM_python_falcon_linuxARM64_quickStart_instrumentApplication","APM_python_falcon_linuxARM64_quickStart_runApplication","APM_python_falcon_macOsAMD64_recommendedSteps_setupOtelCollector","APM_python_falcon_macOsAMD64_recommendedSteps_instrumentApplication","APM_python_falcon_macOsAMD64_recommendedSteps_runApplication","APM_python_falcon_macOsAMD64_quickStart_instrumentApplication","APM_python_falcon_macOsAMD64_quickStart_runApplication","APM_python_falcon_macOsARM64_recommendedSteps_setupOtelCollector","APM_python_falcon_macOsARM64_recommendedSteps_instrumentApplication","APM_python_falcon_macOsARM64_recommendedSteps_runApplication","APM_python_falcon_macOsARM64_quickStart_instrumentApplication","APM_python_falcon_macOsARM64_quickStart_runApplication","APM_python_other_kubernetes_recommendedSteps_setupOtelCollector","APM_python_other_kubernetes_recommendedSteps_instrumentApplication","APM_python_other_kubernetes_recommendedSteps_runApplication","APM_python_other_linuxAMD64_recommendedSteps_setupOtelCollector","APM_python_other_linuxAMD64_recommendedSteps_instrumentApplication","APM_python_other_linuxAMD64_recommendedSteps_runApplication","APM_python_other_linuxAMD64_quickStart_instrumentApplication","APM_python_other_linuxAMD64_quickStart_runApplication","APM_python_other_linuxARM64_recommendedSteps_setupOtelCollector","APM_python_other_linuxARM64_recommendedSteps_instrumentApplication","APM_python_other_linuxARM64_recommendedSteps_runApplication","APM_python_other_linuxARM64_quickStart_instrumentApplication","APM_python_other_linuxARM64_quickStart_runApplication","APM_python_other_macOsAMD64_recommendedSteps_setupOtelCollector","APM_python_other_macOsAMD64_recommendedSteps_instrumentApplication","APM_python_other_macOsAMD64_recommendedSteps_runApplication","APM_python_other_macOsAMD64_quickStart_instrumentApplication","APM_python_other_macOsAMD64_quickStart_runApplication","APM_python_other_macOsARM64_recommendedSteps_setupOtelCollector","APM_python_other_macOsARM64_recommendedSteps_instrumentApplication","APM_python_other_macOsARM64_recommendedSteps_runApplication","APM_python_other_macOsARM64_quickStart_instrumentApplication","APM_python_other_macOsARM64_quickStart_runApplication","APM_javascript_express_kubernetes_recommendedSteps_setupOtelCollector","APM_javascript_express_kubernetes_recommendedSteps_instrumentApplication","APM_javascript_express_kubernetes_recommendedSteps_runApplication","APM_javascript_express_linuxAMD64_recommendedSteps_setupOtelCollector","APM_javascript_express_linuxAMD64_recommendedSteps_instrumentApplication","APM_javascript_express_linuxAMD64_recommendedSteps_runApplication","APM_javascript_express_linuxAMD64_quickStart_instrumentApplication","APM_javascript_express_linuxAMD64_quickStart_runApplication","APM_javascript_express_linuxARM64_recommendedSteps_setupOtelCollector","APM_javascript_express_linuxARM64_recommendedSteps_instrumentApplication","APM_javascript_express_linuxARM64_recommendedSteps_runApplication","APM_javascript_express_linuxARM64_quickStart_instrumentApplication","APM_javascript_express_linuxARM64_quickStart_runApplication","APM_javascript_express_macOsAMD64_recommendedSteps_setupOtelCollector","APM_javascript_express_macOsAMD64_recommendedSteps_instrumentApplication","APM_javascript_express_macOsAMD64_recommendedSteps_runApplication","APM_javascript_express_macOsAMD64_quickStart_instrumentApplication","APM_javascript_express_macOsAMD64_quickStart_runApplication","APM_javascript_express_macOsARM64_recommendedSteps_setupOtelCollector","APM_javascript_express_macOsARM64_recommendedSteps_instrumentApplication","APM_javascript_express_macOsARM64_recommendedSteps_runApplication","APM_javascript_express_macOsARM64_quickStart_instrumentApplication","APM_javascript_express_macOsARM64_quickStart_runApplication","APM_javascript_nestjs_kubernetes_recommendedSteps_setupOtelCollector","APM_javascript_nestjs_kubernetes_recommendedSteps_instrumentApplication","APM_javascript_nestjs_kubernetes_recommendedSteps_runApplication","APM_javascript_nestjs_linuxAMD64_recommendedSteps_setupOtelCollector","APM_javascript_nestjs_linuxAMD64_recommendedSteps_instrumentApplication","APM_javascript_nestjs_linuxAMD64_recommendedSteps_runApplication","APM_javascript_nestjs_linuxAMD64_quickStart_instrumentApplication","APM_javascript_nestjs_linuxAMD64_quickStart_runApplication","APM_javascript_nestjs_linuxARM64_recommendedSteps_setupOtelCollector","APM_javascript_nestjs_linuxARM64_recommendedSteps_instrumentApplication","APM_javascript_nestjs_linuxARM64_recommendedSteps_runApplication","APM_javascript_nestjs_linuxARM64_quickStart_instrumentApplication","APM_javascript_nestjs_linuxARM64_quickStart_runApplication","APM_javascript_nestjs_macOsAMD64_recommendedSteps_setupOtelCollector","APM_javascript_nestjs_macOsAMD64_recommendedSteps_instrumentApplication","APM_javascript_nestjs_macOsAMD64_recommendedSteps_runApplication","APM_javascript_nestjs_macOsAMD64_quickStart_instrumentApplication","APM_javascript_nestjs_macOsAMD64_quickStart_runApplication","APM_javascript_nestjs_macOsARM64_recommendedSteps_setupOtelCollector","APM_javascript_nestjs_macOsARM64_recommendedSteps_instrumentApplication","APM_javascript_nestjs_macOsARM64_recommendedSteps_runApplication","APM_javascript_nestjs_macOsARM64_quickStart_instrumentApplication","APM_javascript_nestjs_macOsARM64_quickStart_runApplication","APM_javascript_nodejs_kubernetes_recommendedSteps_setupOtelCollector","APM_javascript_nodejs_kubernetes_recommendedSteps_instrumentApplication","APM_javascript_nodejs_kubernetes_recommendedSteps_runApplication","APM_javascript_nodejs_linuxAMD64_recommendedSteps_setupOtelCollector","APM_javascript_nodejs_linuxAMD64_recommendedSteps_instrumentApplication","APM_javascript_nodejs_linuxAMD64_recommendedSteps_runApplication","APM_javascript_nodejs_linuxAMD64_quickStart_instrumentApplication","APM_javascript_nodejs_linuxAMD64_quickStart_runApplication","APM_javascript_nodejs_linuxARM64_recommendedSteps_setupOtelCollector","APM_javascript_nodejs_linuxARM64_recommendedSteps_instrumentApplication","APM_javascript_nodejs_linuxARM64_recommendedSteps_runApplication","APM_javascript_nodejs_linuxARM64_quickStart_instrumentApplication","APM_javascript_nodejs_linuxARM64_quickStart_runApplication","APM_javascript_nodejs_macOsAMD64_recommendedSteps_setupOtelCollector","APM_javascript_nodejs_macOsAMD64_recommendedSteps_instrumentApplication","APM_javascript_nodejs_macOsAMD64_recommendedSteps_runApplication","APM_javascript_nodejs_macOsAMD64_quickStart_instrumentApplication","APM_javascript_nodejs_macOsAMD64_quickStart_runApplication","APM_javascript_nodejs_macOsARM64_recommendedSteps_setupOtelCollector","APM_javascript_nodejs_macOsARM64_recommendedSteps_instrumentApplication","APM_javascript_nodejs_macOsARM64_recommendedSteps_runApplication","APM_javascript_nodejs_macOsARM64_quickStart_instrumentApplication","APM_javascript_nodejs_macOsARM64_quickStart_runApplication","APM_javascript_reactjs_kubernetes_recommendedSteps_setupOtelCollector","APM_javascript_reactjs_kubernetes_recommendedSteps_instrumentApplication","APM_javascript_reactjs_kubernetes_recommendedSteps_runApplication","APM_javascript_reactjs_linuxAMD64_quickStart_instrumentApplication","APM_javascript_reactjs_linuxAMD64_quickStart_runApplication","APM_javascript_reactjs_linuxAMD64_recommendedSteps_setupOtelCollector","APM_javascript_reactjs_linuxAMD64_recommendedSteps_instrumentApplication","APM_javascript_reactjs_linuxAMD64_recommendedSteps_runApplication","APM_javascript_reactjs_linuxARM64_quickStart_instrumentApplication","APM_javascript_reactjs_linuxARM64_quickStart_runApplication","APM_javascript_reactjs_linuxARM64_recommendedSteps_setupOtelCollector","APM_javascript_reactjs_linuxARM64_recommendedSteps_instrumentApplication","APM_javascript_reactjs_linuxARM64_recommendedSteps_runApplication","APM_javascript_reactjs_macOsAMD64_quickStart_instrumentApplication","APM_javascript_reactjs_macOsAMD64_quickStart_runApplication","APM_javascript_reactjs_macOsAMD64_recommendedSteps_setupOtelCollector","APM_javascript_reactjs_macOsAMD64_recommendedSteps_instrumentApplication","APM_javascript_reactjs_macOsAMD64_recommendedSteps_runApplication","APM_javascript_reactjs_macOsARM64_quickStart_instrumentApplication","APM_javascript_reactjs_macOsARM64_quickStart_runApplication","APM_javascript_reactjs_macOsARM64_recommendedSteps_setupOtelCollector","APM_javascript_reactjs_macOsARM64_recommendedSteps_instrumentApplication","APM_javascript_reactjs_macOsARM64_recommendedSteps_runApplication","APM_javascript_angular_kubernetes_recommendedSteps_setupOtelCollector","APM_javascript_angular_kubernetes_recommendedSteps_instrumentApplication","APM_javascript_angular_kubernetes_recommendedSteps_runApplication","APM_javascript_angular_linuxAMD64_recommendedSteps_setupOtelCollector","APM_javascript_angular_linuxAMD64_recommendedSteps_instrumentApplication","APM_javascript_angular_linuxAMD64_recommendedSteps_runApplication","APM_javascript_angular_linuxAMD64_quickStart_instrumentApplication","APM_javascript_angular_linuxAMD64_quickStart_runApplication","APM_javascript_angular_linuxARM64_recommendedSteps_setupOtelCollector","APM_javascript_angular_linuxARM64_recommendedSteps_instrumentApplication","APM_javascript_angular_linuxARM64_recommendedSteps_runApplication","APM_javascript_angular_linuxARM64_quickStart_instrumentApplication","APM_javascript_angular_linuxARM64_quickStart_runApplication","APM_javascript_angular_macOsAMD64_recommendedSteps_setupOtelCollector","APM_javascript_angular_macOsAMD64_recommendedSteps_instrumentApplication","APM_javascript_angular_macOsAMD64_recommendedSteps_runApplication","APM_javascript_angular_macOsAMD64_quickStart_instrumentApplication","APM_javascript_angular_macOsAMD64_quickStart_runApplication","APM_javascript_angular_macOsARM64_recommendedSteps_setupOtelCollector","APM_javascript_angular_macOsARM64_recommendedSteps_instrumentApplication","APM_javascript_angular_macOsARM64_recommendedSteps_runApplication","APM_javascript_angular_macOsARM64_quickStart_instrumentApplication","APM_javascript_angular_macOsARM64_quickStart_runApplication","APM_javascript_others_kubernetes_recommendedSteps_setupOtelCollector","APM_javascript_others_kubernetes_recommendedSteps_instrumentApplication","APM_javascript_others_kubernetes_recommendedSteps_runApplication","APM_javascript_others_linuxAMD64_quickStart_instrumentApplication","APM_javascript_others_linuxAMD64_quickStart_runApplication","APM_javascript_others_linuxAMD64_recommendedSteps_setupOtelCollector","APM_javascript_others_linuxAMD64_recommendedSteps_instrumentApplication","APM_javascript_others_linuxAMD64_recommendedSteps_runApplication","APM_javascript_others_linuxARM64_quickStart_instrumentApplication","APM_javascript_others_linuxARM64_quickStart_runApplication","APM_javascript_others_linuxARM64_recommendedSteps_setupOtelCollector","APM_javascript_others_linuxARM64_recommendedSteps_instrumentApplication","APM_javascript_others_linuxARM64_recommendedSteps_runApplication","APM_javascript_others_macOsAMD64_quickStart_instrumentApplication","APM_javascript_others_macOsAMD64_quickStart_runApplication","APM_javascript_others_macOsAMD64_recommendedSteps_setupOtelCollector","APM_javascript_others_macOsAMD64_recommendedSteps_instrumentApplication","APM_javascript_others_macOsAMD64_recommendedSteps_runApplication","APM_javascript_others_macOsARM64_quickStart_instrumentApplication","APM_javascript_others_macOsARM64_quickStart_runApplication","APM_javascript_others_macOsARM64_recommendedSteps_setupOtelCollector","APM_javascript_others_macOsARM64_recommendedSteps_instrumentApplication","APM_javascript_others_macOsARM64_recommendedSteps_runApplication","APM_go_kubernetes_recommendedSteps_setupOtelCollector","APM_go_kubernetes_recommendedSteps_instrumentApplication","APM_go_kubernetes_recommendedSteps_runApplication","APM_go_linuxAMD64_recommendedSteps_setupOtelCollector","APM_go_linuxAMD64_recommendedSteps_instrumentApplication","APM_go_linuxAMD64_recommendedSteps_runApplication","APM_go_linuxAMD64_quickStart_instrumentApplication","APM_go_linuxAMD64_quickStart_runApplication","APM_go_linuxARM64_recommendedSteps_setupOtelCollector","APM_go_linuxARM64_recommendedSteps_instrumentApplication","APM_go_linuxARM64_recommendedSteps_runApplication","APM_go_linuxARM64_quickStart_instrumentApplication","APM_go_linuxARM64_quickStart_runApplication","APM_go_macOsAMD64_recommendedSteps_setupOtelCollector","APM_go_macOsAMD64_recommendedSteps_instrumentApplication","APM_go_macOsAMD64_recommendedSteps_runApplication","APM_go_macOsAMD64_quickStart_instrumentApplication","APM_go_macOsAMD64_quickStart_runApplication","APM_go_macOsARM64_recommendedSteps_setupOtelCollector","APM_go_macOsARM64_recommendedSteps_instrumentApplication","APM_go_macOsARM64_recommendedSteps_runApplication","APM_go_macOsARM64_quickStart_instrumentApplication","APM_go_macOsARM64_quickStart_runApplication","APM_rails_kubernetes_recommendedSteps_setupOtelCollector","APM_rails_kubernetes_recommendedSteps_instrumentApplication","APM_rails_kubernetes_recommendedSteps_runApplication","APM_rails_linuxAMD64_recommendedSteps_setupOtelCollector","APM_rails_linuxAMD64_recommendedSteps_instrumentApplication","APM_rails_linuxAMD64_recommendedSteps_runApplication","APM_rails_linuxAMD64_quickStart_instrumentApplication","APM_rails_linuxAMD64_quickStart_runApplication","APM_rails_linuxARM64_recommendedSteps_setupOtelCollector","APM_rails_linuxARM64_recommendedSteps_instrumentApplication","APM_rails_linuxARM64_recommendedSteps_runApplication","APM_rails_linuxARM64_quickStart_instrumentApplication","APM_rails_linuxARM64_quickStart_runApplication","APM_rails_macOsAMD64_recommendedSteps_setupOtelCollector","APM_rails_macOsAMD64_recommendedSteps_instrumentApplication","APM_rails_macOsAMD64_recommendedSteps_runApplication","APM_rails_macOsAMD64_quickStart_instrumentApplication","APM_rails_macOsAMD64_quickStart_runApplication","APM_rails_macOsARM64_recommendedSteps_setupOtelCollector","APM_rails_macOsARM64_recommendedSteps_instrumentApplication","APM_rails_macOsARM64_recommendedSteps_runApplication","APM_rails_macOsARM64_quickStart_instrumentApplication","APM_rails_macOsARM64_quickStart_runApplication","APM_dotnet_kubernetes_recommendedSteps_setupOtelCollector","APM_dotnet_kubernetes_recommendedSteps_instrumentApplication","APM_dotnet_kubernetes_recommendedSteps_runApplication","APM_dotnet_linuxAMD64_quickStart_instrumentApplication","APM_dotnet_linuxAMD64_quickStart_runApplication","APM_dotnet_linuxAMD64_recommendedSteps_setupOtelCollector","APM_dotnet_linuxAMD64_recommendedSteps_instrumentApplication","APM_dotnet_linuxAMD64_recommendedSteps_runApplication","APM_dotnet_linuxARM64_quickStart_instrumentApplication","APM_dotnet_linuxARM64_quickStart_runApplication","APM_dotnet_linuxARM64_recommendedSteps_setupOtelCollector","APM_dotnet_linuxARM64_recommendedSteps_instrumentApplication","APM_dotnet_linuxARM64_recommendedSteps_runApplication","APM_dotnet_macOsAMD64_quickStart_instrumentApplication","APM_dotnet_macOsAMD64_quickStart_runApplication","APM_dotnet_macOsAMD64_recommendedSteps_setupOtelCollector","APM_dotnet_macOsAMD64_recommendedSteps_instrumentApplication","APM_dotnet_macOsAMD64_recommendedSteps_runApplication","APM_dotnet_macOsARM64_quickStart_instrumentApplication","APM_dotnet_macOsARM64_quickStart_runApplication","APM_dotnet_macOsARM64_recommendedSteps_setupOtelCollector","APM_dotnet_macOsARM64_recommendedSteps_instrumentApplication","APM_dotnet_macOsARM64_recommendedSteps_runApplication","APM_rust_kubernetes_recommendedSteps_setupOtelCollector","APM_rust_kubernetes_recommendedSteps_instrumentApplication","APM_rust_kubernetes_recommendedSteps_runApplication","APM_rust_linuxAMD64_quickStart_instrumentApplication","APM_rust_linuxAMD64_quickStart_runApplication","APM_rust_linuxAMD64_recommendedSteps_setupOtelCollector","APM_rust_linuxAMD64_recommendedSteps_instrumentApplication","APM_rust_linuxAMD64_recommendedSteps_runApplication","APM_rust_linuxARM64_quickStart_instrumentApplication","APM_rust_linuxARM64_quickStart_runApplication","APM_rust_linuxARM64_recommendedSteps_setupOtelCollector","APM_rust_linuxARM64_recommendedSteps_instrumentApplication","APM_rust_linuxARM64_recommendedSteps_runApplication","APM_rust_macOsAMD64_quickStart_instrumentApplication","APM_rust_macOsAMD64_quickStart_runApplication","APM_rust_macOsAMD64_recommendedSteps_setupOtelCollector","APM_rust_macOsAMD64_recommendedSteps_instrumentApplication","APM_rust_macOsAMD64_recommendedSteps_runApplication","APM_rust_macOsARM64_quickStart_instrumentApplication","APM_rust_macOsARM64_quickStart_runApplication","APM_rust_macOsARM64_recommendedSteps_setupOtelCollector","APM_rust_macOsARM64_recommendedSteps_instrumentApplication","APM_rust_macOsARM64_recommendedSteps_runApplication","APM_elixir_kubernetes_recommendedSteps_setupOtelCollector","APM_elixir_kubernetes_recommendedSteps_instrumentApplication","APM_elixir_kubernetes_recommendedSteps_runApplication","APM_elixir_linuxAMD64_quickStart_instrumentApplication","APM_elixir_linuxAMD64_quickStart_runApplication","APM_elixir_linuxAMD64_recommendedSteps_setupOtelCollector","APM_elixir_linuxAMD64_recommendedSteps_instrumentApplication","APM_elixir_linuxAMD64_recommendedSteps_runApplication","APM_elixir_linuxARM64_quickStart_instrumentApplication","APM_elixir_linuxARM64_quickStart_runApplication","APM_elixir_linuxARM64_recommendedSteps_setupOtelCollector","APM_elixir_linuxARM64_recommendedSteps_instrumentApplication","APM_elixir_linuxARM64_recommendedSteps_runApplication","APM_elixir_macOsAMD64_quickStart_instrumentApplication","APM_elixir_macOsAMD64_quickStart_runApplication","APM_elixir_macOsAMD64_recommendedSteps_setupOtelCollector","APM_elixir_macOsAMD64_recommendedSteps_instrumentApplication","APM_elixir_macOsAMD64_recommendedSteps_runApplication","APM_elixir_macOsARM64_quickStart_instrumentApplication","APM_elixir_macOsARM64_quickStart_runApplication","APM_elixir_macOsARM64_recommendedSteps_setupOtelCollector","APM_elixir_macOsARM64_recommendedSteps_instrumentApplication","APM_elixir_macOsARM64_recommendedSteps_runApplication","APM_swift_kubernetes_recommendedSteps_setupOtelCollector","APM_swift_kubernetes_recommendedSteps_instrumentApplication","APM_swift_kubernetes_recommendedSteps_runApplication","APM_swift_linuxAMD64_quickStart_instrumentApplication","APM_swift_linuxAMD64_quickStart_runApplication","APM_swift_linuxAMD64_recommendedSteps_setupOtelCollector","APM_swift_linuxAMD64_recommendedSteps_instrumentApplication","APM_swift_linuxAMD64_recommendedSteps_runApplication","APM_swift_linuxARM64_quickStart_instrumentApplication","APM_swift_linuxARM64_quickStart_runApplication","APM_swift_linuxARM64_recommendedSteps_setupOtelCollector","APM_swift_linuxARM64_recommendedSteps_instrumentApplication","APM_swift_linuxARM64_recommendedSteps_runApplication","APM_swift_macOsAMD64_quickStart_instrumentApplication","APM_swift_macOsAMD64_quickStart_runApplication","APM_swift_macOsAMD64_recommendedSteps_setupOtelCollector","APM_swift_macOsAMD64_recommendedSteps_instrumentApplication","APM_swift_macOsAMD64_recommendedSteps_runApplication","APM_swift_macOsARM64_quickStart_instrumentApplication","APM_swift_macOsARM64_quickStart_runApplication","APM_swift_macOsARM64_recommendedSteps_setupOtelCollector","APM_swift_macOsARM64_recommendedSteps_instrumentApplication","APM_swift_macOsARM64_recommendedSteps_runApplication","APM_php_kubernetes_recommendedSteps_setupOtelCollector","APM_php_kubernetes_recommendedSteps_instrumentApplication","APM_php_kubernetes_recommendedSteps_runApplication","APM_php_linuxAMD64_quickStart_instrumentApplication","APM_php_linuxAMD64_quickStart_runApplication","APM_php_linuxAMD64_recommendedSteps_setupOtelCollector","APM_php_linuxAMD64_recommendedSteps_instrumentApplication","APM_php_linuxAMD64_recommendedSteps_runApplication","APM_php_linuxARM64_quickStart_instrumentApplication","APM_php_linuxARM64_quickStart_runApplication","APM_php_linuxARM64_recommendedSteps_setupOtelCollector","APM_php_linuxARM64_recommendedSteps_instrumentApplication","APM_php_linuxARM64_recommendedSteps_runApplication","APM_php_macOsAMD64_quickStart_instrumentApplication","APM_php_macOsAMD64_quickStart_runApplication","APM_php_macOsAMD64_recommendedSteps_setupOtelCollector","APM_php_macOsAMD64_recommendedSteps_instrumentApplication","APM_php_macOsAMD64_recommendedSteps_runApplication","APM_php_macOsARM64_quickStart_instrumentApplication","APM_php_macOsARM64_quickStart_runApplication","APM_php_macOsARM64_recommendedSteps_setupOtelCollector","APM_php_macOsARM64_recommendedSteps_instrumentApplication","APM_php_macOsARM64_recommendedSteps_runApplication","APM_python_django_docker_quickStart_instrumentApplication","APM_python_django_docker_quickStart_runApplication","APM_python_django_docker_recommendedSteps_setupOtelCollector","APM_python_django_docker_recommendedSteps_instrumentApplication","APM_python_django_docker_recommendedSteps_runApplication","APM_python_flask_docker_quickStart_instrumentApplication","APM_python_flask_docker_quickStart_runApplication","APM_python_flask_docker_recommendedSteps_setupOtelCollector","APM_python_flask_docker_recommendedSteps_instrumentApplication","APM_python_flask_docker_recommendedSteps_runApplication","APM_python_fastAPI_docker_quickStart_instrumentApplication","APM_python_fastAPI_docker_quickStart_runApplication","APM_python_fastAPI_docker_recommendedSteps_setupOtelCollector","APM_python_fastAPI_docker_recommendedSteps_instrumentApplication","APM_python_fastAPI_docker_recommendedSteps_runApplication","APM_python_falcon_docker_quickStart_instrumentApplication","APM_python_falcon_docker_quickStart_runApplication","APM_python_falcon_docker_recommendedSteps_setupOtelCollector","APM_python_falcon_docker_recommendedSteps_instrumentApplication","APM_python_falcon_docker_recommendedSteps_runApplication","APM_python_other_docker_quickStart_instrumentApplication","APM_python_other_docker_quickStart_runApplication","APM_python_other_docker_recommendedSteps_setupOtelCollector","APM_python_other_docker_recommendedSteps_instrumentApplication","APM_python_other_docker_recommendedSteps_runApplication","APM_javascript_nodejs_docker_quickStart_instrumentApplication","APM_javascript_nodejs_docker_quickStart_runApplication","APM_javascript_nodejs_docker_recommendedSteps_setupOtelCollector","APM_javascript_nodejs_docker_recommendedSteps_instrumentApplication","APM_javascript_nodejs_docker_recommendedSteps_runApplication","APM_javascript_nestjs_docker_quickStart_instrumentApplication","APM_javascript_nestjs_docker_quickStart_runApplication","APM_javascript_nestjs_docker_recommendedSteps_instrumentApplication","APM_javascript_nestjs_docker_recommendedSteps_setupOtelCollector","APM_javascript_nestjs_docker_recommendedSteps_runApplication","APM_javascript_express_docker_quickStart_instrumentApplication","APM_javascript_express_docker_quickStart_runApplication","APM_javascript_express_docker_recommendedSteps_setupOtelCollector","APM_javascript_express_docker_recommendedSteps_instrumentApplication","APM_javascript_express_docker_recommendedSteps_runApplication","APM_javascript_reactjs_docker_quickStart_instrumentApplication","APM_javascript_reactjs_docker_quickStart_runApplication","APM_javascript_reactjs_docker_recommendedSteps_setupOtelCollector","APM_javascript_reactjs_docker_recommendedSteps_instrumentApplication","APM_javascript_reactjs_docker_recommendedSteps_runApplication","APM_javascript_angular_docker_quickStart_instrumentApplication","APM_javascript_angular_docker_quickStart_runApplication","APM_javascript_angular_docker_recommendedSteps_setupOtelCollector","APM_javascript_angular_docker_recommendedSteps_instrumentApplication","APM_javascript_angular_docker_recommendedSteps_runApplication","APM_javascript_others_docker_quickStart_instrumentApplication","APM_javascript_others_docker_quickStart_runApplication","APM_javascript_others_docker_recommendedSteps_setupOtelCollector","APM_javascript_others_docker_recommendedSteps_instrumentApplication","APM_javascript_others_docker_recommendedSteps_runApplication","APM_java_jboss_docker_quickStart_instrumentApplication","APM_java_jboss_docker_quickStart_runApplication","APM_java_jboss_docker_recommendedSteps_setupOtelCollector","APM_java_jboss_docker_recommendedSteps_instrumentApplication","APM_java_jboss_docker_recommendedSteps_runApplication","APM_java_springBoot_docker_quickStart_instrumentApplication","APM_java_springBoot_docker_quickStart_runApplication","APM_java_springBoot_docker_recommendedSteps_setupOtelCollector","APM_java_springBoot_docker_recommendedSteps_instrumentApplication","APM_java_springBoot_docker_recommendedSteps_runApplication","APM_java_tomcat_docker_quickStart_instrumentApplication","APM_java_tomcat_docker_quickStart_runApplication","APM_java_tomcat_docker_recommendedSteps_setupOtelCollector","APM_java_tomcat_docker_recommendedSteps_instrumentApplication","APM_java_tomcat_docker_recommendedSteps_runApplication","APM_java_other_docker_quickStart_instrumentApplication","APM_java_other_docker_quickStart_runApplication","APM_java_other_docker_recommendedSteps_setupOtelCollector","APM_java_other_docker_recommendedSteps_instrumentApplication","APM_java_other_docker_recommendedSteps_runApplication","APM_go_docker_quickStart_instrumentApplication","APM_go_docker_quickStart_runApplication","APM_go_docker_recommendedSteps_setupOtelCollector","APM_go_docker_recommendedSteps_instrumentApplication","APM_go_docker_recommendedSteps_runApplication","APM_rust_docker_quickStart_instrumentApplication","APM_rust_docker_quickStart_runApplication","APM_rust_docker_recommendedSteps_setupOtelCollector","APM_rust_docker_recommendedSteps_instrumentApplication","APM_rust_docker_recommendedSteps_runApplication","APM_elixir_docker_quickStart_instrumentApplication","APM_elixir_docker_quickStart_runApplication","APM_elixir_docker_recommendedSteps_setupOtelCollector","APM_elixir_docker_recommendedSteps_instrumentApplication","APM_elixir_docker_recommendedSteps_runApplication","APM_dotnet_docker_quickStart_instrumentApplication","APM_dotnet_docker_quickStart_runApplication","APM_dotnet_docker_recommendedSteps_setupOtelCollector","APM_dotnet_docker_recommendedSteps_instrumentApplication","APM_dotnet_docker_recommendedSteps_runApplication","APM_rails_docker_quickStart_instrumentApplication","APM_rails_docker_quickStart_runApplication","APM_rails_docker_recommendedSteps_setupOtelCollector","APM_rails_docker_recommendedSteps_instrumentApplication","APM_rails_docker_recommendedSteps_runApplication","APM_swift_docker_quickStart_instrumentApplication","APM_swift_docker_quickStart_runApplication","APM_swift_docker_recommendedSteps_setupOtelCollector","APM_swift_docker_recommendedSteps_instrumentApplication","APM_swift_docker_recommendedSteps_runApplication","APM_php_docker_quickStart_instrumentApplication","APM_php_docker_quickStart_runApplication","APM_php_docker_recommendedSteps_setupOtelCollector","APM_php_docker_recommendedSteps_instrumentApplication","APM_php_docker_recommendedSteps_runApplication","APM_python_django_windows_quickStart_instrumentApplication","APM_python_django_windows_quickStart_runApplication","APM_python_django_windows_recommendedSteps_setupOtelCollector","APM_python_django_windows_recommendedSteps_instrumentApplication","APM_python_django_windows_recommendedSteps_runApplication","APM_python_flask_windows_quickStart_instrumentApplication","APM_python_flask_windows_quickStart_runApplication","APM_python_flask_windows_recommendedSteps_setupOtelCollector","APM_python_flask_windows_recommendedSteps_instrumentApplication","APM_python_flask_windows_recommendedSteps_runApplication","APM_python_fastAPI_windows_quickStart_instrumentApplication","APM_python_fastAPI_windows_quickStart_runApplication","APM_python_fastAPI_windows_recommendedSteps_setupOtelCollector","APM_python_fastAPI_windows_recommendedSteps_instrumentApplication","APM_python_fastAPI_windows_recommendedSteps_runApplication","APM_python_falcon_windows_quickStart_instrumentApplication","APM_python_falcon_windows_quickStart_runApplication","APM_python_falcon_windows_recommendedSteps_setupOtelCollector","APM_python_falcon_windows_recommendedSteps_instrumentApplication","APM_python_falcon_windows_recommendedSteps_runApplication","APM_python_other_windows_quickStart_instrumentApplication","APM_python_other_windows_quickStart_runApplication","APM_python_other_windows_recommendedSteps_setupOtelCollector","APM_python_other_windows_recommendedSteps_instrumentApplication","APM_python_other_windows_recommendedSteps_runApplication","APM_javascript_nodejs_windows_quickStart_instrumentApplication","APM_javascript_nodejs_windows_quickStart_runApplication","APM_javascript_nodejs_windows_recommendedSteps_setupOtelCollector","APM_javascript_nodejs_windows_recommendedSteps_instrumentApplication","APM_javascript_nodejs_windows_recommendedSteps_runApplication","APM_javascript_nestjs_windows_quickStart_instrumentApplication","APM_javascript_nestjs_windows_quickStart_runApplication","APM_javascript_nestjs_windows_recommendedSteps_instrumentApplication","APM_javascript_nestjs_windows_recommendedSteps_setupOtelCollector","APM_javascript_nestjs_windows_recommendedSteps_runApplication","APM_javascript_express_windows_quickStart_instrumentApplication","APM_javascript_express_windows_quickStart_runApplication","APM_javascript_express_windows_recommendedSteps_setupOtelCollector","APM_javascript_express_windows_recommendedSteps_instrumentApplication","APM_javascript_express_windows_recommendedSteps_runApplication","APM_javascript_reactjs_windows_quickStart_instrumentApplication","APM_javascript_reactjs_windows_quickStart_runApplication","APM_javascript_reactjs_windows_recommendedSteps_setupOtelCollector","APM_javascript_reactjs_windows_recommendedSteps_instrumentApplication","APM_javascript_reactjs_windows_recommendedSteps_runApplication","APM_javascript_angular_windows_quickStart_instrumentApplication","APM_javascript_angular_windows_quickStart_runApplication","APM_javascript_angular_windows_recommendedSteps_setupOtelCollector","APM_javascript_angular_windows_recommendedSteps_instrumentApplication","APM_javascript_angular_windows_recommendedSteps_runApplication","APM_javascript_others_windows_quickStart_instrumentApplication","APM_javascript_others_windows_quickStart_runApplication","APM_javascript_others_windows_recommendedSteps_setupOtelCollector","APM_javascript_others_windows_recommendedSteps_instrumentApplication","APM_javascript_others_windows_recommendedSteps_runApplication","APM_java_jboss_windows_quickStart_instrumentApplication","APM_java_jboss_windows_quickStart_runApplication","APM_java_jboss_windows_recommendedSteps_setupOtelCollector","APM_java_jboss_windows_recommendedSteps_instrumentApplication","APM_java_jboss_windows_recommendedSteps_runApplication","APM_java_springBoot_windows_quickStart_instrumentApplication","APM_java_springBoot_windows_quickStart_runApplication","APM_java_springBoot_windows_recommendedSteps_setupOtelCollector","APM_java_springBoot_windows_recommendedSteps_instrumentApplication","APM_java_springBoot_windows_recommendedSteps_runApplication","APM_java_tomcat_windows_quickStart_instrumentApplication","APM_java_tomcat_windows_quickStart_runApplication","APM_java_tomcat_windows_recommendedSteps_setupOtelCollector","APM_java_tomcat_windows_recommendedSteps_instrumentApplication","APM_java_tomcat_windows_recommendedSteps_runApplication","APM_java_other_windows_quickStart_instrumentApplication","APM_java_other_windows_quickStart_runApplication","APM_java_other_windows_recommendedSteps_setupOtelCollector","APM_java_other_windows_recommendedSteps_instrumentApplication","APM_java_other_windows_recommendedSteps_runApplication","APM_go_windows_quickStart_instrumentApplication","APM_go_windows_quickStart_runApplication","APM_go_windows_recommendedSteps_setupOtelCollector","APM_go_windows_recommendedSteps_instrumentApplication","APM_go_windows_recommendedSteps_runApplication","APM_rust_windows_quickStart_instrumentApplication","APM_rust_windows_quickStart_runApplication","APM_rust_windows_recommendedSteps_setupOtelCollector","APM_rust_windows_recommendedSteps_instrumentApplication","APM_rust_windows_recommendedSteps_runApplication","APM_elixir_windows_quickStart_instrumentApplication","APM_elixir_windows_quickStart_runApplication","APM_elixir_windows_recommendedSteps_setupOtelCollector","APM_elixir_windows_recommendedSteps_instrumentApplication","APM_elixir_windows_recommendedSteps_runApplication","APM_dotnet_windows_quickStart_instrumentApplication","APM_dotnet_windows_quickStart_runApplication","APM_dotnet_windows_recommendedSteps_setupOtelCollector","APM_dotnet_windows_recommendedSteps_instrumentApplication","APM_dotnet_windows_recommendedSteps_runApplication","APM_rails_windows_quickStart_instrumentApplication","APM_rails_windows_quickStart_runApplication","APM_rails_windows_recommendedSteps_setupOtelCollector","APM_rails_windows_recommendedSteps_instrumentApplication","APM_rails_windows_recommendedSteps_runApplication","APM_swift_windows_quickStart_instrumentApplication","APM_swift_windows_quickStart_runApplication","APM_swift_windows_recommendedSteps_setupOtelCollector","APM_swift_windows_recommendedSteps_instrumentApplication","APM_swift_windows_recommendedSteps_runApplication","APM_php_windows_quickStart_instrumentApplication","APM_php_windows_quickStart_runApplication","APM_php_windows_recommendedSteps_setupOtelCollector","APM_php_windows_recommendedSteps_instrumentApplication","APM_php_windows_recommendedSteps_runApplication","AwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_setupOtelCollector","AwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_configureReceiver","AwsMonitoring_awsEc2ApplicationLogs_linuxAMD64_restartOtelCollector","AwsMonitoring_awsEc2ApplicationLogs_linuxARM64_setupOtelCollector","AwsMonitoring_awsEc2ApplicationLogs_linuxARM64_configureReceiver","AwsMonitoring_awsEc2ApplicationLogs_linuxARM64_restartOtelCollector","AwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_setupOtelCollector","AwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_configureReceiver","AwsMonitoring_awsEc2ApplicationLogs_macOsAMD64_restartOtelCollector","AwsMonitoring_awsEc2ApplicationLogs_macOsARM64_setupOtelCollector","AwsMonitoring_awsEc2ApplicationLogs_macOsARM64_configureReceiver","AwsMonitoring_awsEc2ApplicationLogs_macOsARM64_restartOtelCollector","AwsMonitoring_awsEc2InfrastructureMetrics_linuxAMD64_setupOtelCollector","AwsMonitoring_awsEc2InfrastructureMetrics_linuxAMD64_configureHostmetricsJson","AwsMonitoring_awsEc2InfrastructureMetrics_linuxARM64_setupOtelCollector","AwsMonitoring_awsEc2InfrastructureMetrics_linuxARM64_configureHostmetricsJson","AwsMonitoring_awsEc2InfrastructureMetrics_macOsAMD64_setupOtelCollector","AwsMonitoring_awsEc2InfrastructureMetrics_macOsAMD64_configureHostmetricsJson","AwsMonitoring_awsEc2InfrastructureMetrics_macOsARM64_setupOtelCollector","AwsMonitoring_awsEc2InfrastructureMetrics_macOsARM64_configureHostmetricsJson","AwsMonitoring_awsEcsEc2_setupDaemonService","AwsMonitoring_awsEcsEc2_createOtelConfig","AwsMonitoring_awsEcsEc2_createDaemonService","AwsMonitoring_awsEcsEc2_ecsSendData","AwsMonitoring_awsEcsExternal_setupDaemonService","AwsMonitoring_awsEcsExternal_createOtelConfig","AwsMonitoring_awsEcsExternal_createDaemonService","AwsMonitoring_awsEcsExternal_ecsSendData","AwsMonitoring_awsEcsFargate_createOtelConfig","AwsMonitoring_awsEcsFargate_createSidecarCollectorContainer","AwsMonitoring_awsEcsFargate_deployTaskDefinition","AwsMonitoring_awsEcsFargate_ecsSendData","AwsMonitoring_awsEcsFargate_ecsSendLogsData","AwsMonitoring_awsEks_setupOtelCollector","AwsMonitoring_awsEks_monitorDashboard","AzureMonitoring_azureAks_setupCentralCollector","AzureMonitoring_azureAks_setupAzureEventsHub","AzureMonitoring_azureAks_sendTraces","AzureMonitoring_azureAks_sendLogs","AzureMonitoring_azureAks_sendMetrics","AzureMonitoring_azureFunctions_setupCentralCollector","AzureMonitoring_azureFunctions_setupAzureEventsHub","AzureMonitoring_azureFunctions_sendTraces","AzureMonitoring_azureFunctions_sendLogs","AzureMonitoring_azureFunctions_sendMetrics","AzureMonitoring_azureAppService_setupCentralCollector","AzureMonitoring_azureAppService_setupAzureEventsHub","AzureMonitoring_azureAppService_sendTraces","AzureMonitoring_azureAppService_sendLogs","AzureMonitoring_azureAppService_sendMetrics","AzureMonitoring_azureContainerApps_setupCentralCollector","AzureMonitoring_azureContainerApps_setupAzureEventsHub","AzureMonitoring_azureContainerApps_sendTraces","AzureMonitoring_azureContainerApps_sendLogs","AzureMonitoring_azureContainerApps_sendMetrics","AzureMonitoring_azureVm_setupCentralCollector","AzureMonitoring_azureVm_setupAzureEventsHub","AzureMonitoring_azureVm_sendHostmetricsLogs","AzureMonitoring_azureSQLDatabaseMetrics_setupCentralCollector","AzureMonitoring_azureSQLDatabaseMetrics_setupAzureEventsHub","AzureMonitoring_azureSQLDatabaseMetrics_sendMetrics","AzureMonitoring_azureBlobStorage_setupCentralCollector","AzureMonitoring_azureBlobStorage_setupAzureEventsHub","AzureMonitoring_azureBlobStorage_sendLogs","AzureMonitoring_azureBlobStorage_sendMetrics","InfrastructureMonitoring_kubernetesInfraMetrics_setupOtelCollector","InfrastructureMonitoring_kubernetesInfraMetrics_plotMetrics","InfrastructureMonitoring_hostMetrics_linuxAMD64_setupOtelCollector","InfrastructureMonitoring_hostMetrics_linuxAMD64_configureHostmetricsJson","InfrastructureMonitoring_hostMetrics_linuxARM64_setupOtelCollector","InfrastructureMonitoring_hostMetrics_linuxARM64_configureHostmetricsJson","InfrastructureMonitoring_hostMetrics_macOsAMD64_setupOtelCollector","InfrastructureMonitoring_hostMetrics_macOsAMD64_configureHostmetricsJson","InfrastructureMonitoring_hostMetrics_macOsARM64_setupOtelCollector","InfrastructureMonitoring_hostMetrics_macOsARM64_configureHostmetricsJson","InfrastructureMonitoring_otherMetrics_linuxAMD64_setupOtelCollector","InfrastructureMonitoring_otherMetrics_linuxAMD64_configureMetricsReceiver","InfrastructureMonitoring_otherMetrics_linuxARM64_setupOtelCollector","InfrastructureMonitoring_otherMetrics_linuxARM64_configureMetricsReceiver","InfrastructureMonitoring_otherMetrics_macOsAMD64_setupOtelCollector","InfrastructureMonitoring_otherMetrics_macOsAMD64_configureMetricsReceiver","InfrastructureMonitoring_otherMetrics_macOsARM64_setupOtelCollector","InfrastructureMonitoring_otherMetrics_macOsARM64_configureMetricsReceiver","LogsManagement_kubernetes_setupOtelCollector","LogsManagement_docker_cloneRepository","LogsManagement_docker_startContainer","LogsManagement_syslogs_linuxAMD64_setupOtelCollector","LogsManagement_syslogs_linuxAMD64_configureReceiver","LogsManagement_syslogs_linuxAMD64_checkServiceStatus","LogsManagement_syslogs_linuxARM64_setupOtelCollector","LogsManagement_syslogs_linuxARM64_configureReceiver","LogsManagement_syslogs_linuxARM64_checkServiceStatus","LogsManagement_syslogs_macOsAMD64_setupOtelCollector","LogsManagement_syslogs_macOsAMD64_configureReceiver","LogsManagement_syslogs_macOsAMD64_checkServiceStatus","LogsManagement_syslogs_macOsARM64_setupOtelCollector","LogsManagement_syslogs_macOsARM64_configureReceiver","LogsManagement_syslogs_macOsARM64_checkServiceStatus","LogsManagement_application_logs_linuxAMD64_setupOtelCollector","LogsManagement_application_logs_linuxAMD64_configureReceiver","LogsManagement_application_logs_linuxAMD64_restartOtelCollector","LogsManagement_application_logs_linuxARM64_setupOtelCollector","LogsManagement_application_logs_linuxARM64_configureReceiver","LogsManagement_application_logs_linuxARM64_restartOtelCollector","LogsManagement_application_logs_macOsAMD64_setupOtelCollector","LogsManagement_application_logs_macOsAMD64_configureReceiver","LogsManagement_application_logs_macOsAMD64_restartOtelCollector","LogsManagement_application_logs_macOsARM64_setupOtelCollector","LogsManagement_application_logs_macOsARM64_configureReceiver","LogsManagement_application_logs_macOsARM64_restartOtelCollector","LogsManagement_fluentBit_linuxAMD64_setupOtelCollector","LogsManagement_fluentBit_linuxAMD64_configureReceiver","LogsManagement_fluentBit_linuxAMD64_restartOtelCollector","LogsManagement_fluentBit_linuxARM64_setupOtelCollector","LogsManagement_fluentBit_linuxARM64_configureReceiver","LogsManagement_fluentBit_linuxARM64_restartOtelCollector","LogsManagement_fluentBit_macOsAMD64_setupOtelCollector","LogsManagement_fluentBit_macOsAMD64_configureReceiver","LogsManagement_fluentBit_macOsAMD64_restartOtelCollector","LogsManagement_fluentBit_macOsARM64_setupOtelCollector","LogsManagement_fluentBit_macOsARM64_configureReceiver","LogsManagement_fluentBit_macOsARM64_restartOtelCollector","LogsManagement_fluentD_linuxAMD64_setupOtelCollector","LogsManagement_fluentD_linuxAMD64_configureReceiver","LogsManagement_fluentD_linuxAMD64_restartOtelCollector","LogsManagement_fluentD_linuxARM64_setupOtelCollector","LogsManagement_fluentD_linuxARM64_configureReceiver","LogsManagement_fluentD_linuxARM64_restartOtelCollector","LogsManagement_fluentD_macOsAMD64_setupOtelCollector","LogsManagement_fluentD_macOsAMD64_configureReceiver","LogsManagement_fluentD_macOsAMD64_restartOtelCollector","LogsManagement_fluentD_macOsARM64_setupOtelCollector","LogsManagement_fluentD_macOsARM64_configureReceiver","LogsManagement_fluentD_macOsARM64_restartOtelCollector","LogsManagement_logStash_linuxAMD64_setupOtelCollector","LogsManagement_logStash_linuxAMD64_configureReceiver","LogsManagement_logStash_linuxAMD64_restartOtelCollector","LogsManagement_logStash_linuxARM64_setupOtelCollector","LogsManagement_logStash_linuxARM64_configureReceiver","LogsManagement_logStash_linuxARM64_restartOtelCollector","LogsManagement_logStash_macOsAMD64_setupOtelCollector","LogsManagement_logStash_macOsAMD64_configureReceiver","LogsManagement_logStash_macOsAMD64_restartOtelCollector","LogsManagement_logStash_macOsARM64_setupOtelCollector","LogsManagement_logStash_macOsARM64_configureReceiver","LogsManagement_logStash_macOsARM64_restartOtelCollector","LogsManagement_heroku_addHttpDrain","LogsManagement_vercel_setupLogDrains","LogsManagement_http_createHttpPayload","LogsManagement_cloudwatch_linuxAMD64_setupOtelCollector","LogsManagement_cloudwatch_linuxAMD64_configureAws","LogsManagement_cloudwatch_linuxAMD64_configureReceiver","LogsManagement_cloudwatch_linuxAMD64_sendLogsCloudwatch","LogsManagement_cloudwatch_linuxARM64_setupOtelCollector","LogsManagement_cloudwatch_linuxARM64_configureAws","LogsManagement_cloudwatch_linuxARM64_configureReceiver","LogsManagement_cloudwatch_linuxARM64_sendLogsCloudwatch","LogsManagement_cloudwatch_macOsAMD64_setupOtelCollector","LogsManagement_cloudwatch_macOsAMD64_configureAws","LogsManagement_cloudwatch_macOsAMD64_configureReceiver","LogsManagement_cloudwatch_macOsAMD64_sendLogsCloudwatch","LogsManagement_cloudwatch_macOsARM64_setupOtelCollector","LogsManagement_cloudwatch_macOsARM64_configureAws","LogsManagement_cloudwatch_macOsARM64_configureReceiver","LogsManagement_cloudwatch_macOsARM64_sendLogsCloudwatch","testConnection","checkServiceStatus","restartOtelCollector","plotMetrics","configureHostmetricsJson","configureMetricsReceiver","createHttpPayload","setupCentralCollector","setupAzureEventsHub","sendTraces","sendLogs","sendMetrics","sendHostmetricsLogs","DataSourceStep","EnvDetailsStep","SelectMethodStep","SetupOtelCollectorStep","InstallOpenTelemetryStep","CloneRepo","StartContainer","RunApplicationStep","TestConnectionStep","LogsTestConnectionStep","ConfigureReceiver","CheckServiceStatus","RestartOtelCollector","PlotMetrics","ConfigureHostmetricsJSON","ConfigureMetricsReceiver","AddHttpDrain","SetupLogDrains","CreateHttpPayload","ConfigureAws","SendLogsCloudwatch","SetupDaemonService","CreateOtelConfig","CreateDaemonService","EcsSendData","CreateSidecarCollectorContainer","DeployTaskDefinition","EcsSendLogsData","MonitorDashboard","SetupCentralCollectorStep","SetupAzureEventsHub","SendTraces","SendLogs","SendMetrics","SendHostmetricsLogs","OnboardingContext","createContext","OnboardingContextProvider","setServiceName","setIngestionData","setErrorDetails","setSelectedEnvironment","setSelectedFramework","setSelectedMethod","setSelectedDataSource","newValue","contextValue","method","Provider","context","useContext","Error","OnboardingContainer","frameworksMap","java","javascript","python","supportedLanguages","supportedLogsTypes","supportedInfraMetrics","supportedAwsServices","supportedAzureServices","moduleID","selectedDataSourceID","getService","end","start","queryKey","OnboardingPage","___CSS_LOADER_EXPORT___","height","x","y","rx","d","CircleHelp","cy","r","ry","x1","x2","y1","y2","effect","api","content","__esModule","exports","locals"],"sourceRoot":""}