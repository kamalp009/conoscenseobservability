{"version":3,"file":"action.js","sources":["../../../src/types/action.ts"],"sourcesContent":["import { ScopedVars } from './ScopedVars';\nimport { DataFrame, Field, ValueLinkConfig } from './dataFrame';\nimport { InterpolateFunction } from './panel';\nimport { SelectableValue } from './select';\n\nexport enum ActionType {\n  Fetch = 'fetch',\n}\n\nexport interface Action {\n  type: ActionType;\n  title: string;\n\n  // Options for the selected type\n  // Currently this is required because there is only one valid type (fetch)\n  // once multiple types are valid, usage of this will need to be optional\n  [ActionType.Fetch]: FetchOptions;\n}\n\n/**\n * Processed Action Model. The values are ready to use\n */\nexport interface ActionModel<T = any> {\n  title: string;\n  onClick: (event: any, origin?: any) => void;\n}\n\ninterface FetchOptions {\n  method: HttpRequestMethod;\n  url: string;\n  body?: string;\n  queryParams?: Array<[string, string]>;\n  headers?: Array<[string, string]>;\n}\n\nexport enum HttpRequestMethod {\n  POST = 'POST',\n  PUT = 'PUT',\n  GET = 'GET',\n}\n\nexport const httpMethodOptions: SelectableValue[] = [\n  { label: HttpRequestMethod.POST, value: HttpRequestMethod.POST },\n  { label: HttpRequestMethod.PUT, value: HttpRequestMethod.PUT },\n  { label: HttpRequestMethod.GET, value: HttpRequestMethod.GET },\n];\n\nexport const contentTypeOptions: SelectableValue[] = [\n  { label: 'application/json', value: 'application/json' },\n  { label: 'text/plain', value: 'text/plain' },\n  { label: 'application/xml', value: 'application/xml' },\n  { label: 'application/x-www-form-urlencoded', value: 'application/x-www-form-urlencoded' },\n];\n\nexport const defaultActionConfig: Action = {\n  type: ActionType.Fetch,\n  title: '',\n  fetch: {\n    url: '',\n    method: HttpRequestMethod.POST,\n    body: '{}',\n    queryParams: [],\n    headers: [['Content-Type', 'application/json']],\n  },\n};\n\nexport type ActionsArgs = {\n  frame: DataFrame;\n  field: Field;\n  fieldScopedVars: ScopedVars;\n  replaceVariables: InterpolateFunction;\n  actions: Action[];\n  config: ValueLinkConfig;\n};\n"],"names":["HttpRequestMethod"],"mappings":"AAmCY,IAAA,iBAAA,qBAAAA,kBAAL,KAAA;AACL,EAAAA,mBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,mBAAA,KAAM,CAAA,GAAA,KAAA,CAAA;AACN,EAAAA,mBAAA,KAAM,CAAA,GAAA,KAAA,CAAA;AAHI,EAAAA,OAAAA,kBAAAA,CAAAA;AAAA,CAAA,EAAA,iBAAA,IAAA,EAAA,EAAA;AAML,MAAM,iBAAuC,GAAA;AAAA,EAClD,EAAE,KAAA,EAAO,MAAwB,aAAA,KAAA,EAAO,MAAuB,aAAA;AAAA,EAC/D,EAAE,KAAA,EAAO,KAAuB,YAAA,KAAA,EAAO,KAAsB,YAAA;AAAA,EAC7D,EAAE,KAAA,EAAO,KAAuB,YAAA,KAAA,EAAO,KAAsB,YAAA;AAC/D,EAAA;AAEO,MAAM,kBAAwC,GAAA;AAAA,EACnD,EAAE,KAAA,EAAO,kBAAoB,EAAA,KAAA,EAAO,kBAAmB,EAAA;AAAA,EACvD,EAAE,KAAA,EAAO,YAAc,EAAA,KAAA,EAAO,YAAa,EAAA;AAAA,EAC3C,EAAE,KAAA,EAAO,iBAAmB,EAAA,KAAA,EAAO,iBAAkB,EAAA;AAAA,EACrD,EAAE,KAAA,EAAO,mCAAqC,EAAA,KAAA,EAAO,mCAAoC,EAAA;AAC3F,EAAA;AAEO,MAAM,mBAA8B,GAAA;AAAA,EACzC,IAAM,EAAA,OAAA;AAAA,EACN,KAAO,EAAA,EAAA;AAAA,EACP,KAAO,EAAA;AAAA,IACL,GAAK,EAAA,EAAA;AAAA,IACL,MAAQ,EAAA,MAAA;AAAA,IACR,IAAM,EAAA,IAAA;AAAA,IACN,aAAa,EAAC;AAAA,IACd,OAAS,EAAA,CAAC,CAAC,cAAA,EAAgB,kBAAkB,CAAC,CAAA;AAAA,GAChD;AACF;;;;"}