{"version":3,"file":"amendTimeSeries.js","sources":["../../../src/table/amendTimeSeries.ts"],"sourcesContent":["import { closestIdx } from '../dataframe/StreamingDataFrame';\n\nexport type Table = [times: number[], ...values: any[][]];\n\n// prevTable and nextTable are assumed sorted ASC on reference [0] arrays\n// nextTable is assumed to be contiguous, only edges are checked for overlap\n// ...so prev: [1,2,5] + next: [3,4,6] -> [1,2,3,4,6]\nexport function amendTable(prevTable: Table, nextTable: Table): Table {\n  let [prevTimes] = prevTable;\n  let [nextTimes] = nextTable;\n\n  let pLen = prevTimes.length;\n  let pStart = prevTimes[0];\n  let pEnd = prevTimes[pLen - 1];\n\n  let nLen = nextTimes.length;\n  let nStart = nextTimes[0];\n  let nEnd = nextTimes[nLen - 1];\n\n  let outTable: Table;\n\n  if (pLen) {\n    if (nLen) {\n      // append, no overlap\n      if (nStart > pEnd) {\n        outTable = prevTable.map((_, i) => prevTable[i].concat(nextTable[i])) as Table;\n      }\n      // prepend, no overlap\n      else if (nEnd < pStart) {\n        outTable = nextTable.map((_, i) => nextTable[i].concat(prevTable[i])) as Table;\n      }\n      // full replace\n      else if (nStart <= pStart && nEnd >= pEnd) {\n        outTable = nextTable;\n      }\n      // partial replace\n      else if (nStart > pStart && nEnd < pEnd) {\n        // partial replace\n        let startIdx = closestIdx(nStart, prevTimes);\n        startIdx = prevTimes[startIdx] < nStart ? startIdx + 1 : startIdx;\n        let endIdx = closestIdx(nEnd, prevTimes);\n        endIdx = prevTimes[endIdx] > nEnd ? endIdx - 1 : endIdx;\n\n        outTable = prevTable.map((_, i) =>\n          prevTable[i]\n            .slice(0, startIdx)\n            .concat(nextTable[i])\n            .concat(prevTable[i].slice(endIdx + 1))\n        ) as Table;\n      }\n      // append, with overlap\n      else if (nStart >= pStart) {\n        let idx = closestIdx(nStart, prevTimes);\n        idx = prevTimes[idx] < nStart ? idx - 1 : idx;\n        outTable = prevTable.map((_, i) => prevTable[i].slice(0, idx).concat(nextTable[i])) as Table;\n      }\n      // prepend, with overlap\n      else if (nEnd >= pStart) {\n        let idx = closestIdx(nEnd, prevTimes);\n        idx = prevTimes[idx] < nEnd ? idx : idx + 1;\n        outTable = nextTable.map((_, i) => nextTable[i].concat(prevTable[i].slice(idx))) as Table;\n      }\n    } else {\n      outTable = prevTable;\n    }\n  } else {\n    if (nLen) {\n      outTable = nextTable;\n    } else {\n      outTable = [[]];\n    }\n  }\n\n  return outTable!;\n}\n\nexport function trimTable(table: Table, fromTime: number, toTime: number): Table {\n  let [times, ...vals] = table;\n  let fromIdx: number | undefined;\n  let toIdx: number | undefined;\n\n  // trim to bounds\n  if (times[0] < fromTime) {\n    fromIdx = closestIdx(fromTime, times);\n\n    if (times[fromIdx] < fromTime) {\n      fromIdx++;\n    }\n  }\n\n  if (times[times.length - 1] > toTime) {\n    toIdx = closestIdx(toTime, times);\n\n    if (times[toIdx] > toTime) {\n      toIdx--;\n    }\n  }\n\n  if (fromIdx != null || toIdx != null) {\n    times = times.slice(fromIdx ?? 0, toIdx);\n    vals = vals.map((vals2) => vals2.slice(fromIdx ?? 0, toIdx));\n  }\n\n  return [times, ...vals];\n}\n"],"names":[],"mappings":"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"}