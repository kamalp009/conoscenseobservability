{"version":3,"file":"transpose.js","sources":["../../../../src/transformations/transformers/transpose.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { DataFrame, Field, FieldType } from '../../types/dataFrame';\nimport { DataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\n\nexport interface TransposeTransformerOptions {\n  firstFieldName?: string;\n  restFieldsName?: string;\n}\n\nexport const transposeTransformer: DataTransformerInfo<TransposeTransformerOptions> = {\n  id: DataTransformerID.transpose,\n  name: 'Transpose',\n  description: 'Transpose the data frame',\n  defaultOptions: {},\n\n  operator: (options) => (source) =>\n    source.pipe(\n      map((data) => {\n        if (data.length === 0) {\n          return data;\n        }\n        return transposeDataFrame(options, data);\n      })\n    ),\n};\n\nfunction transposeDataFrame(options: TransposeTransformerOptions, data: DataFrame[]): DataFrame[] {\n  return data.map((frame) => {\n    const firstField = frame.fields[0];\n    const firstName = !options.firstFieldName ? 'Field' : options.firstFieldName;\n    const restName = !options.restFieldsName ? 'Value' : options.restFieldsName;\n    const useFirstFieldAsHeaders =\n      firstField.type === FieldType.string || firstField.type === FieldType.time || firstField.type === FieldType.enum;\n    const headers = useFirstFieldAsHeaders\n      ? [firstName, ...fieldValuesAsStrings(firstField, firstField.values)]\n      : [firstName, ...firstField.values.map((_, i) => restName)];\n    const rows = useFirstFieldAsHeaders\n      ? frame.fields.map((field) => field.name).slice(1)\n      : frame.fields.map((field) => field.name);\n    const fieldType = determineFieldType(\n      useFirstFieldAsHeaders\n        ? frame.fields.map((field) => field.type).slice(1)\n        : frame.fields.map((field) => field.type)\n    );\n\n    const newFields = headers.map((fieldName, index) => {\n      if (index === 0) {\n        return {\n          name: firstName,\n          type: FieldType.string,\n          config: {},\n          values: rows,\n        };\n      }\n\n      const values = frame.fields.map((field) => {\n        if (fieldType === FieldType.string) {\n          return fieldValuesAsStrings(field, [field.values[index - 1]])[0];\n        }\n        return field.values[index - 1];\n      });\n\n      const labelName = useFirstFieldAsHeaders ? firstField.name : 'row';\n      const labelValue = useFirstFieldAsHeaders ? fieldName : index;\n\n      return {\n        name: useFirstFieldAsHeaders ? restName : fieldName,\n        labels: {\n          [labelName]: labelValue,\n        },\n        type: fieldType,\n        config: {},\n        values: useFirstFieldAsHeaders ? values.slice(1) : values,\n      };\n    });\n    return {\n      ...frame,\n      fields: newFields,\n      length: Math.max(...newFields.map((field) => field.values.length)),\n    };\n  });\n}\n\nfunction determineFieldType(fieldTypes: FieldType[]): FieldType {\n  const uniqueFieldTypes = new Set(fieldTypes);\n  return uniqueFieldTypes.size === 1 ? [...uniqueFieldTypes][0] : FieldType.string;\n}\n\nfunction fieldValuesAsStrings(field: Field, values: unknown[]) {\n  switch (field.type) {\n    case FieldType.time:\n    case FieldType.number:\n    case FieldType.boolean:\n    case FieldType.string:\n      return values.map((v) => `${v}`);\n    case FieldType.enum:\n      // @ts-ignore\n      return values.map((v) => field.config.type!.enum!.text![v]);\n    default:\n      return values.map((v) => JSON.stringify(v));\n  }\n}\n"],"names":[],"mappings":"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"}