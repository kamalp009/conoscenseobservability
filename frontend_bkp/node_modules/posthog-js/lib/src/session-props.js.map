{"version":3,"file":"session-props.js","sourceRoot":"","sources":["../../src/session-props.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;GAOG;AACH,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAA;AAC1C,OAAO,EAAE,IAAI,EAAE,MAAM,qBAAqB,CAAA;AAG1C,OAAO,EAAE,oBAAoB,EAAE,MAAM,aAAa,CAAA;AAkBlD,IAAM,2BAA2B,GAAG,UAAC,QAAkB;IACnD,IAAM,MAAM,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAA;IAC/B,kBACI,eAAe,EAAE,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,KAAI,EAAE,EACzC,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,IACpC,IAAI,CAAC,cAAc,CAAC;QACnB,mBAAmB,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,sBAAsB;QACnD,0BAA0B,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,6BAA6B;QACjE,4BAA4B,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,+BAA+B;KACxE,CAAC,EACL;AACL,CAAC,CAAA;AAED;IAMI,6BACI,QAAiB,EACjB,gBAAkC,EAClC,WAA+B,EAC/B,2BAAwE;QAJ5E,iBAYC;QAMD,yBAAoB,GAAG,UAAC,SAAiB;;YACrC,IAAM,MAAM,GAAG,KAAI,CAAC,eAAe,EAAE,CAAA;YACrC,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;gBAC3C,OAAM;YACV,CAAC;YAED,IAAM,QAAQ,GAA6B;gBACvC,SAAS,WAAA;gBACT,KAAK,EAAE,KAAI,CAAC,4BAA4B,CAAC,KAAI,CAAC,QAAQ,CAAC;aAC1D,CAAA;YACD,KAAI,CAAC,YAAY,CAAC,QAAQ,WAAG,GAAC,oBAAoB,IAAG,QAAQ,MAAG,CAAA;QACpE,CAAC,CAAA;QAvBG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAA;QACzC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAA;QAC/B,IAAI,CAAC,4BAA4B,GAAG,2BAA2B,IAAI,2BAA2B,CAAA;QAE9F,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;IACjE,CAAC;IAED,6CAAe,GAAf;QACI,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAA;IACxD,CAAC;IAeD,6CAAe,GAAf;;QACI,IAAM,CAAC,GAAG,MAAA,IAAI,CAAC,eAAe,EAAE,0CAAE,KAAK,CAAA;QACvC,IAAI,CAAC,CAAC,EAAE,CAAC;YACL,OAAO,EAAE,CAAA;QACb,CAAC;QAED,OAAO;YACH,sCAAsC,EAAE,CAAC,CAAC,eAAe;YACzD,gCAAgC,EAAE,CAAC,CAAC,eAAe;YACnD,kCAAkC,EAAE,CAAC,CAAC,UAAU;YAChD,oCAAoC,EAAE,CAAC,CAAC,YAAY;YACpD,kCAAkC,EAAE,CAAC,CAAC,UAAU;YAChD,mCAAmC,EAAE,CAAC,CAAC,WAAW;YAClD,gCAAgC,EAAE,CAAC,CAAC,QAAQ;SAC/C,CAAA;IACL,CAAC;IACL,0BAAC;AAAD,CAAC,AArDD,IAqDC","sourcesContent":["/* Client-side session parameters. These are primarily used by web analytics,\n * which relies on these for session analytics without the plugin server being\n * available for the person level set-once properties. Obviously not consistent\n * between client-side events and server-side events but this is acceptable\n * as web analytics only uses client-side.\n *\n * These have the same lifespan as a session_id\n */\nimport { location } from './utils/globals'\nimport { Info } from './utils/event-utils'\nimport type { SessionIdManager } from './sessionid'\nimport type { PostHogPersistence } from './posthog-persistence'\nimport { CLIENT_SESSION_PROPS } from './constants'\nimport type { PostHog } from './posthog-core'\n\ninterface SessionSourceProps {\n    initialPathName: string\n    referringDomain: string // Is actually host, but named domain for internal consistency. Should contain a port if there is one.\n    utm_medium?: string\n    utm_source?: string\n    utm_campaign?: string\n    utm_content?: string\n    utm_term?: string\n}\n\ninterface StoredSessionSourceProps {\n    sessionId: string\n    props: SessionSourceProps\n}\n\nconst generateSessionSourceParams = (instance?: PostHog): SessionSourceProps => {\n    const config = instance?.config\n    return {\n        initialPathName: location?.pathname || '',\n        referringDomain: Info.referringDomain(),\n        ...Info.campaignParams({\n            customTrackedParams: config?.custom_campaign_params,\n            maskPersonalDataProperties: config?.mask_personal_data_properties,\n            customPersonalDataProperties: config?.custom_personal_data_properties,\n        }),\n    }\n}\n\nexport class SessionPropsManager {\n    private readonly instance: PostHog\n    private readonly _sessionIdManager: SessionIdManager\n    private readonly _persistence: PostHogPersistence\n    private readonly _sessionSourceParamGenerator: (instance?: PostHog) => SessionSourceProps\n\n    constructor(\n        instance: PostHog,\n        sessionIdManager: SessionIdManager,\n        persistence: PostHogPersistence,\n        sessionSourceParamGenerator?: (instance?: PostHog) => SessionSourceProps\n    ) {\n        this.instance = instance\n        this._sessionIdManager = sessionIdManager\n        this._persistence = persistence\n        this._sessionSourceParamGenerator = sessionSourceParamGenerator || generateSessionSourceParams\n\n        this._sessionIdManager.onSessionId(this._onSessionIdCallback)\n    }\n\n    _getStoredProps(): StoredSessionSourceProps | undefined {\n        return this._persistence.props[CLIENT_SESSION_PROPS]\n    }\n\n    _onSessionIdCallback = (sessionId: string) => {\n        const stored = this._getStoredProps()\n        if (stored && stored.sessionId === sessionId) {\n            return\n        }\n\n        const newProps: StoredSessionSourceProps = {\n            sessionId,\n            props: this._sessionSourceParamGenerator(this.instance),\n        }\n        this._persistence.register({ [CLIENT_SESSION_PROPS]: newProps })\n    }\n\n    getSessionProps() {\n        const p = this._getStoredProps()?.props\n        if (!p) {\n            return {}\n        }\n\n        return {\n            $client_session_initial_referring_host: p.referringDomain,\n            $client_session_initial_pathname: p.initialPathName,\n            $client_session_initial_utm_source: p.utm_source,\n            $client_session_initial_utm_campaign: p.utm_campaign,\n            $client_session_initial_utm_medium: p.utm_medium,\n            $client_session_initial_utm_content: p.utm_content,\n            $client_session_initial_utm_term: p.utm_term,\n        }\n    }\n}\n"]}