{"version":3,"file":"posthog-surveys.js","sourceRoot":"","sources":["../../src/posthog-surveys.ts"],"names":[],"mappings":"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","sourcesContent":["import { SURVEYS } from './constants'\nimport { getSurveySeenStorageKeys } from './extensions/surveys/surveys-utils'\nimport { PostHog } from './posthog-core'\nimport {\n    Survey,\n    SurveyCallback,\n    SurveyMatchType,\n    SurveyQuestionBranchingType,\n    SurveyQuestionType,\n} from './posthog-surveys-types'\nimport { RemoteConfig } from './types'\nimport { Info } from './utils/event-utils'\nimport { assignableWindow, document, userAgent, window } from './utils/globals'\nimport { createLogger } from './utils/logger'\nimport { isMatchingRegex } from './utils/string-utils'\nimport { SurveyEventReceiver } from './utils/survey-event-receiver'\nimport { isNullish } from './utils/type-utils'\n\nconst logger = createLogger('[Surveys]')\n\nexport const surveyValidationMap: Record<SurveyMatchType, (targets: string[], value: string) => boolean> = {\n    icontains: (targets, value) => targets.some((target) => value.toLowerCase().includes(target.toLowerCase())),\n\n    not_icontains: (targets, value) => targets.every((target) => !value.toLowerCase().includes(target.toLowerCase())),\n\n    regex: (targets, value) => targets.some((target) => isMatchingRegex(value, target)),\n\n    not_regex: (targets, value) => targets.every((target) => !isMatchingRegex(value, target)),\n\n    exact: (targets, value) => targets.some((target) => value === target),\n\n    is_not: (targets, value) => targets.every((target) => value !== target),\n}\n\nfunction getRatingBucketForResponseValue(responseValue: number, scale: number) {\n    if (scale === 3) {\n        if (responseValue < 1 || responseValue > 3) {\n            throw new Error('The response must be in range 1-3')\n        }\n\n        return responseValue === 1 ? 'negative' : responseValue === 2 ? 'neutral' : 'positive'\n    } else if (scale === 5) {\n        if (responseValue < 1 || responseValue > 5) {\n            throw new Error('The response must be in range 1-5')\n        }\n\n        return responseValue <= 2 ? 'negative' : responseValue === 3 ? 'neutral' : 'positive'\n    } else if (scale === 7) {\n        if (responseValue < 1 || responseValue > 7) {\n            throw new Error('The response must be in range 1-7')\n        }\n\n        return responseValue <= 3 ? 'negative' : responseValue === 4 ? 'neutral' : 'positive'\n    } else if (scale === 10) {\n        if (responseValue < 0 || responseValue > 10) {\n            throw new Error('The response must be in range 0-10')\n        }\n\n        return responseValue <= 6 ? 'detractors' : responseValue <= 8 ? 'passives' : 'promoters'\n    }\n\n    throw new Error('The scale must be one of: 3, 5, 7, 10')\n}\n\nexport function getNextSurveyStep(\n    survey: Survey,\n    currentQuestionIndex: number,\n    response: string | string[] | number | null\n) {\n    const question = survey.questions[currentQuestionIndex]\n    const nextQuestionIndex = currentQuestionIndex + 1\n\n    if (!question.branching?.type) {\n        if (currentQuestionIndex === survey.questions.length - 1) {\n            return SurveyQuestionBranchingType.End\n        }\n\n        return nextQuestionIndex\n    }\n\n    if (question.branching.type === SurveyQuestionBranchingType.End) {\n        return SurveyQuestionBranchingType.End\n    } else if (question.branching.type === SurveyQuestionBranchingType.SpecificQuestion) {\n        if (Number.isInteger(question.branching.index)) {\n            return question.branching.index\n        }\n    } else if (question.branching.type === SurveyQuestionBranchingType.ResponseBased) {\n        // Single choice\n        if (question.type === SurveyQuestionType.SingleChoice) {\n            // :KLUDGE: for now, look up the choiceIndex based on the response\n            // TODO: once QuestionTypes.MultipleChoiceQuestion is refactored, pass the selected choiceIndex into this method\n            const selectedChoiceIndex = question.choices.indexOf(`${response}`)\n\n            if (question.branching?.responseValues?.hasOwnProperty(selectedChoiceIndex)) {\n                const nextStep = question.branching.responseValues[selectedChoiceIndex]\n\n                // Specific question\n                if (Number.isInteger(nextStep)) {\n                    return nextStep\n                }\n\n                if (nextStep === SurveyQuestionBranchingType.End) {\n                    return SurveyQuestionBranchingType.End\n                }\n\n                return nextQuestionIndex\n            }\n        } else if (question.type === SurveyQuestionType.Rating) {\n            if (typeof response !== 'number' || !Number.isInteger(response)) {\n                throw new Error('The response type must be an integer')\n            }\n\n            const ratingBucket = getRatingBucketForResponseValue(response, question.scale)\n\n            if (question.branching?.responseValues?.hasOwnProperty(ratingBucket)) {\n                const nextStep = question.branching.responseValues[ratingBucket]\n\n                // Specific question\n                if (Number.isInteger(nextStep)) {\n                    return nextStep\n                }\n\n                if (nextStep === SurveyQuestionBranchingType.End) {\n                    return SurveyQuestionBranchingType.End\n                }\n\n                return nextQuestionIndex\n            }\n        }\n\n        return nextQuestionIndex\n    }\n\n    logger.warn('Falling back to next question index due to unexpected branching type')\n    return nextQuestionIndex\n}\n\nfunction defaultMatchType(matchType?: SurveyMatchType): SurveyMatchType {\n    return matchType ?? 'icontains'\n}\n\n// use urlMatchType to validate url condition, fallback to contains for backwards compatibility\nexport function doesSurveyUrlMatch(survey: Survey): boolean {\n    if (!survey.conditions?.url) {\n        return true\n    }\n    // if we dont know the url, assume it is not a match\n    const href = window?.location?.href\n    if (!href) {\n        return false\n    }\n\n    const targets = [survey.conditions.url]\n    return surveyValidationMap[defaultMatchType(survey.conditions?.urlMatchType)](targets, href)\n}\n\nexport function doesSurveyDeviceTypesMatch(survey: Survey): boolean {\n    if (!survey.conditions?.deviceTypes) {\n        return true\n    }\n    // if we dont know the device type, assume it is not a match\n    if (!userAgent) {\n        return false\n    }\n\n    const deviceType = Info.deviceType(userAgent)\n    return surveyValidationMap[defaultMatchType(survey.conditions?.deviceTypesMatchType)](\n        survey.conditions.deviceTypes,\n        deviceType\n    )\n}\n\nexport class PostHogSurveys {\n    private _decideServerResponse?: boolean\n    public _surveyEventReceiver: SurveyEventReceiver | null\n    private _surveyManager: any\n\n    constructor(private readonly instance: PostHog) {\n        // we set this to undefined here because we need the persistence storage for this type\n        // but that's not initialized until loadIfEnabled is called.\n        this._surveyEventReceiver = null\n    }\n\n    onRemoteConfig(response: RemoteConfig) {\n        this._decideServerResponse = !!response['surveys']\n        logger.info(`decideServerResponse set to ${this._decideServerResponse}`)\n\n        this.loadIfEnabled()\n    }\n\n    reset(): void {\n        localStorage.removeItem('lastSeenSurveyDate')\n        const surveyKeys = getSurveySeenStorageKeys()\n        surveyKeys.forEach((key) => localStorage.removeItem(key))\n    }\n\n    loadIfEnabled() {\n        if (this._surveyManager) {\n            // Surveys already loaded.\n            return\n        }\n\n        const disableSurveys = this.instance.config.disable_surveys\n\n        if (disableSurveys) {\n            logger.info('Disabled. Not loading surveys.')\n            return\n        }\n\n        const phExtensions = assignableWindow?.__PosthogExtensions__\n\n        if (!phExtensions) {\n            logger.error('PostHog Extensions not found.')\n            return\n        }\n\n        const generateSurveys = phExtensions.generateSurveys\n\n        if (!this._decideServerResponse) {\n            logger.warn('Decide not loaded yet. Not loading surveys.')\n            return\n        }\n\n        if (this._surveyEventReceiver == null) {\n            this._surveyEventReceiver = new SurveyEventReceiver(this.instance)\n        }\n\n        if (!generateSurveys) {\n            const loadExternalDependency = phExtensions.loadExternalDependency\n\n            if (loadExternalDependency) {\n                loadExternalDependency(this.instance, 'surveys', (err) => {\n                    if (err) {\n                        logger.error('Could not load surveys script', err)\n                        return\n                    }\n\n                    this._surveyManager = phExtensions.generateSurveys?.(this.instance)\n                })\n            } else {\n                logger.error('PostHog loadExternalDependency extension not found. Cannot load remote config.')\n            }\n        } else {\n            this._surveyManager = generateSurveys(this.instance)\n        }\n    }\n\n    getSurveys(callback: SurveyCallback, forceReload = false) {\n        // In case we manage to load the surveys script, but config says not to load surveys\n        // then we shouldn't return survey data\n        if (this.instance.config.disable_surveys) {\n            logger.info('Disabled. Not loading surveys.')\n\n            return callback([])\n        }\n\n        if (this._surveyEventReceiver == null) {\n            this._surveyEventReceiver = new SurveyEventReceiver(this.instance)\n        }\n\n        const existingSurveys = this.instance.get_property(SURVEYS)\n\n        if (!existingSurveys || forceReload) {\n            this.instance._send_request({\n                url: this.instance.requestRouter.endpointFor(\n                    'api',\n                    `/api/surveys/?token=${this.instance.config.token}`\n                ),\n                method: 'GET',\n                callback: (response) => {\n                    const statusCode = response.statusCode\n                    if (statusCode !== 200 || !response.json) {\n                        logger.error(`Surveys API could not be loaded, status: ${statusCode}`)\n                        return callback([])\n                    }\n                    const surveys = response.json.surveys || []\n\n                    const eventOrActionBasedSurveys = surveys.filter(\n                        (survey: Survey) =>\n                            (survey.conditions?.events &&\n                                survey.conditions?.events?.values &&\n                                survey.conditions?.events?.values?.length > 0) ||\n                            (survey.conditions?.actions &&\n                                survey.conditions?.actions?.values &&\n                                survey.conditions?.actions?.values?.length > 0)\n                    )\n\n                    if (eventOrActionBasedSurveys.length > 0) {\n                        this._surveyEventReceiver?.register(eventOrActionBasedSurveys)\n                    }\n\n                    this.instance.persistence?.register({ [SURVEYS]: surveys })\n                    return callback(surveys)\n                },\n            })\n        } else {\n            return callback(existingSurveys)\n        }\n    }\n\n    private isSurveyFeatureFlagEnabled(flagKey: string | null) {\n        if (!flagKey) {\n            return true\n        }\n        return this.instance.featureFlags.isFeatureEnabled(flagKey)\n    }\n\n    getActiveMatchingSurveys(callback: SurveyCallback, forceReload = false) {\n        this.getSurveys((surveys) => {\n            const activeSurveys = surveys.filter((survey) => {\n                return !!(survey.start_date && !survey.end_date)\n            })\n\n            const conditionMatchedSurveys = activeSurveys.filter((survey) => {\n                if (!survey.conditions) {\n                    return true\n                }\n\n                const urlCheck = doesSurveyUrlMatch(survey)\n                const selectorCheck = survey.conditions?.selector\n                    ? document?.querySelector(survey.conditions.selector)\n                    : true\n                const deviceTypeCheck = doesSurveyDeviceTypesMatch(survey)\n                return urlCheck && selectorCheck && deviceTypeCheck\n            })\n\n            // get all the surveys that have been activated so far with user actions.\n            const activatedSurveys: string[] | undefined = this._surveyEventReceiver?.getSurveys()\n            const targetingMatchedSurveys = conditionMatchedSurveys.filter((survey) => {\n                if (\n                    !survey.linked_flag_key &&\n                    !survey.targeting_flag_key &&\n                    !survey.internal_targeting_flag_key &&\n                    !survey.feature_flag_keys?.length\n                ) {\n                    return true\n                }\n                const linkedFlagCheck = this.isSurveyFeatureFlagEnabled(survey.linked_flag_key)\n                const targetingFlagCheck = this.isSurveyFeatureFlagEnabled(survey.targeting_flag_key)\n\n                const hasEvents = (survey.conditions?.events?.values?.length ?? 0) > 0\n                const hasActions = (survey.conditions?.actions?.values?.length ?? 0) > 0\n\n                const eventBasedTargetingFlagCheck =\n                    hasEvents || hasActions ? activatedSurveys?.includes(survey.id) : true\n\n                const overrideInternalTargetingFlagCheck = this._canActivateRepeatedly(survey)\n                const internalTargetingFlagCheck =\n                    overrideInternalTargetingFlagCheck ||\n                    this.isSurveyFeatureFlagEnabled(survey.internal_targeting_flag_key)\n\n                const flagsCheck = this.checkFlags(survey)\n                return (\n                    linkedFlagCheck &&\n                    targetingFlagCheck &&\n                    internalTargetingFlagCheck &&\n                    eventBasedTargetingFlagCheck &&\n                    flagsCheck\n                )\n            })\n\n            return callback(targetingMatchedSurveys)\n        }, forceReload)\n    }\n\n    checkFlags(survey: Survey): boolean {\n        if (!survey.feature_flag_keys?.length) {\n            return true\n        }\n\n        return survey.feature_flag_keys.every(({ key, value }) => {\n            if (!key || !value) {\n                return true\n            }\n            return this.instance.featureFlags.isFeatureEnabled(value)\n        })\n    }\n    getNextSurveyStep = getNextSurveyStep\n\n    // this method is lazily loaded onto the window to avoid loading preact and other dependencies if surveys is not enabled\n    private _canActivateRepeatedly(survey: Survey) {\n        if (isNullish(assignableWindow.__PosthogExtensions__?.canActivateRepeatedly)) {\n            logger.warn('init was not called')\n            return false // TODO does it make sense to have a default here?\n        }\n        return assignableWindow.__PosthogExtensions__.canActivateRepeatedly(survey)\n    }\n\n    canRenderSurvey(surveyId: string) {\n        if (isNullish(this._surveyManager)) {\n            logger.warn('init was not called')\n            return\n        }\n        this.getSurveys((surveys) => {\n            const survey = surveys.filter((x) => x.id === surveyId)[0]\n            this._surveyManager.canRenderSurvey(survey)\n        })\n    }\n\n    renderSurvey(surveyId: string, selector: string) {\n        if (isNullish(this._surveyManager)) {\n            logger.warn('init was not called')\n            return\n        }\n        this.getSurveys((surveys) => {\n            const survey = surveys.filter((x) => x.id === surveyId)[0]\n            this._surveyManager.renderSurvey(survey, document?.querySelector(selector))\n        })\n    }\n}\n"]}